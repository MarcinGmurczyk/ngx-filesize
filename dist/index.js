!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ngxFilesize={})}(this,function(e){"use strict";function t(e,t){function n(){this.constructor=e}vn(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function n(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}function r(e,t){return t={exports:{}},e(t,t.exports),t.exports}function o(){try{return Cn.apply(this,arguments)}catch(e){return jn.errorObject.e=e,jn.errorObject}}function i(e){return e.reduce(function(e,t){return e.concat(t instanceof Tn.UnsubscriptionError?t.errors:t)},[])}function s(e){return e?1===e.length?e[0]:function(t){return e.reduce(function(e,t){return t(e)},t)}:zn.noop}function u(){return new kr.Subject}function a(e,t,n,r){function o(e){if(this instanceof o)return i.call(this,e),this;var t=new o(e),n=function(e){return(e.hasOwnProperty(Zr)?e[Zr]:Object.defineProperty(e,Zr,{value:[]})[Zr]).push(t),e};return r&&r(n),n}var i=c(t);return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=e,o.annotationCls=o,o}function c(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(e){var r=e.apply(void 0,t);for(var o in r)this[o]=r[o]}}}function l(e,t,n){function r(){function e(e,t,n){for(var r=e.hasOwnProperty(Kr)?e[Kr]:Object.defineProperty(e,Kr,{value:[]})[Kr];r.length<=n;)r.push(null);return(r[n]=r[n]||[]).push(i),e}for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(this instanceof r)return o.apply(this,t),this;var i=new((s=r).bind.apply(s,[void 0].concat(t)));return e.annotation=i,e;var s}var o=c(t);return n&&(r.prototype=Object.create(n.prototype)),r.prototype.ngMetadataName=e,r.annotationCls=r,r}function f(e,t,n){function r(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(this instanceof r)return o.apply(this,e),this;var n=new((i=r).bind.apply(i,[void 0].concat(e)));return function(e,t){var r=e.constructor,o=r.hasOwnProperty(Yr)?r[Yr]:Object.defineProperty(r,Yr,{value:{}})[Yr];o[t]=o.hasOwnProperty(t)&&o[t]||[],o[t].unshift(n)};var i}var o=c(t);return n&&(r.prototype=Object.create(n.prototype)),r.prototype.ngMetadataName=e,r.annotationCls=r,r}function p(){if(!lo){var e=co.Symbol;if(e&&e.iterator)lo=e.iterator;else for(var t=Object.getOwnPropertyNames(Map.prototype),n=0;n<t.length;++n){var r=t[n];"entries"!==r&&"size"!==r&&Map.prototype[r]===Map.prototype.entries&&(lo=r)}}return lo}function d(e){Zone.current.scheduleMicroTask("scheduleMicrotask",e)}function h(e,t){return e===t||"number"==typeof e&&"number"==typeof t&&isNaN(e)&&isNaN(t)}function v(e){if("string"==typeof e)return e;if(e instanceof Array)return"["+e.map(v).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return""+e.overriddenName;if(e.name)return""+e.name;var t=e.toString();if(null==t)return""+t;var n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function y(e){return e.__forward_ref__=y,e.toString=function(){return v(this())},e}function b(e){return"function"==typeof e&&e.hasOwnProperty("__forward_ref__")&&e.__forward_ref__===y?e():e}function g(e){var t=function(e){var t=bo,n=e.deps;if(n&&n.length){t=[];for(var r=0;r<n.length;r++){var o=6,i=b(n[r]);if(i instanceof Array)for(var s=0,u=i;s<u.length;s++){var a=u[s];a instanceof no||a==no?o|=1:a instanceof io||a==io?o&=-3:a instanceof oo||a==oo?o&=-5:i=a instanceof to?a.token:b(a)}t.push({token:i,options:o})}}else if(e.useExisting){var i=b(e.useExisting);t=[{token:i,options:6}]}else if(!(n||Co in e))throw x("'deps' required",e);return t}(e),n=yo,r=bo,o=!1,i=b(e.provide);if(Co in e)r=e.useValue;else if(e.useFactory)n=e.useFactory;else if(e.useExisting);else if(e.useClass)o=!0,n=b(e.useClass);else{if("function"!=typeof i)throw x("StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable",e);o=!0,n=i}return{deps:t,fn:n,useNew:o,value:r}}function _(e){return x("Cannot mix multi providers and regular providers",e)}function m(e,t){if(t)if((t=b(t))instanceof Array)for(var n=0;n<t.length;n++)m(e,t[n]);else{if("function"==typeof t)throw x("Function/Class not supported",t);if(!t||"object"!=typeof t||!t.provide)throw x("Unexpected provider",t);var r=b(t.provide),o=g(t);if(!0===t.multi){var i=e.get(r);if(i){if(i.fn!==_o)throw _(r)}else e.set(r,i={token:t.provide,deps:[],useNew:!1,fn:_o,value:bo});r=t,i.deps.push({token:r,options:6})}var s=e.get(r);if(s&&s.fn==_o)throw _(r);e.set(r,o)}}function w(e,t,n,r,o){try{return function(e,t,n,r,o){var i;if(t){if((i=t.value)==go)throw Error(Eo+"Circular dependency");if(i===bo){t.value=go;var s=void 0,u=t.useNew,a=t.fn,c=t.deps,l=bo;if(c.length){l=[];for(var f=0;f<c.length;f++){var p=c[f],d=p.options,h=2&d?n.get(p.token):void 0;l.push(w(p.token,h,n,h||4&d?r:Oo,1&d?null:vo.THROW_IF_NOT_FOUND))}}t.value=i=u?new((v=a).bind.apply(v,[void 0].concat(l))):a.apply(s,l)}}else i=r.get(e,o);return i;var v}(e,t,n,r,o)}catch(n){n instanceof Error||(n=new Error(n));throw(n[xo]=n[xo]||[]).unshift(e),t&&t.value==go&&(t.value=bo),n}}function C(e,t){e=e&&"\n"===e.charAt(0)&&e.charAt(1)==Eo?e.substr(2):e;var n=v(t);if(t instanceof Array)n=t.map(v).join(" -> ");else if("object"==typeof t){var r=[];for(var o in t)if(t.hasOwnProperty(o)){var i=t[o];r.push(o+":"+("string"==typeof i?JSON.stringify(i):v(i)))}n="{"+r.join(", ")+"}"}return"StaticInjectorError["+n+"]: "+e.replace(ko,"\n  ")}function x(e,t){return new Error(C(e,t))}function O(e){return e[Io]}function k(e){return e[Po]}function E(e){if(e.length>1){return" ("+function(e){for(var t=[],n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map(function(e){return v(e.token)}).join(" -> ")+")"}return""}function j(e,t,n,r){var o=[t],i=n(o),s=r?function(e,t){var n=e+" caused by: "+(t instanceof Error?t.message:t),r=Error(n);return r[Po]=t,r}(i,r):Error(i);return s.addKey=I,s.keys=o,s.injectors=[e],s.constructResolvingMessage=n,s[Po]=r,s}function I(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function P(e,t){for(var n=[],r=0,o=t.length;r<o;r++){var i=t[r];i&&0!=i.length?n.push(i.map(v).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+v(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+v(e)+"' is decorated with Injectable.")}function T(e,t){return Error("Cannot mix multi providers and regular providers, got: "+e+" "+t)}function S(e){return"function"==typeof e}function A(e){return e?e.map(function(e){var t=e.type.annotationCls,n=e.args?e.args:[];return new(t.bind.apply(t,[void 0].concat(n)))}):[]}function N(e){var t=Object.getPrototypeOf(e.prototype);return(t?t.constructor:null)||Object}function R(e){var t,n;if(e.useClass){var r=b(e.useClass);t=Mo.factory(r),n=F(r)}else e.useExisting?(t=function(e){return e},n=[Fo.fromKey(Ao.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){{if(t){var n=t.map(function(e){return[e]});return t.map(function(t){return H(e,t,n)})}return F(e)}}(e.useFactory,e.deps)):(t=function(){return e.useValue},n=Ho);return new zo(t,n)}function V(e){return new Uo(Ao.get(e.provide),[R(e)],e.multi||!1)}function D(e){var t=function(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=t.get(r.key.id);if(o){if(r.multiProvider!==o.multiProvider)throw T(o,r);if(r.multiProvider)for(var i=0;i<r.resolvedFactories.length;i++)o.resolvedFactories.push(r.resolvedFactories[i]);else t.set(r.key.id,r)}else{var s=void 0;s=r.multiProvider?new Uo(r.key,r.resolvedFactories.slice(),r.multiProvider):r,t.set(r.key.id,s)}}return t}(M(e,[]).map(V),new Map);return Array.from(t.values())}function M(e,t){return e.forEach(function(e){if(e instanceof Ro)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!(e instanceof Array))throw function(e){return Error("Invalid provider - only instances of Provider and Type are allowed, got: "+e)}(e);M(e,t)}}),t}function F(e){var t=Mo.parameters(e);if(!t)return[];if(t.some(function(e){return null==e}))throw P(e,t);return t.map(function(n){return H(e,n,t)})}function H(e,t,n){var r=null,o=!1;if(!Array.isArray(t))return U(t instanceof to?t.token:t,o,null);for(var i=null,s=0;s<t.length;++s){var u=t[s];u instanceof Ro?r=u:u instanceof to?r=u.token:u instanceof no?o=!0:u instanceof oo||u instanceof io?i=u:u instanceof Br&&(r=u)}if(null!=(r=b(r)))return U(r,o,i);throw P(e,n)}function U(e,t,n){return new Fo(Ao.get(e),t,n)}function z(e){return!!e&&"function"==typeof e.then}function L(){return String.fromCharCode(97+Math.floor(25*Math.random()))}function B(){throw new Error("Runtime compiler is not loaded")}function Z(e,t){return null}function K(){}function Y(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular(function(){return e.onStable.emit(null)})}finally{e.isStable=!0}}}function W(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function q(e){e._nesting--,Y(e)}function Q(){return yi}function $(e,t){return e=Array.isArray(t)?t.reduce($,e):yn({},e,t)}function G(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}function J(e){return e.reduce(function(e,t){var n=Array.isArray(t)?J(t):t;return e.concat(n)},[])}function X(e,t,n){e.childNodes.forEach(function(e){e instanceof Ii&&(t(e)&&n.push(e),X(e,t,n))})}function ee(e,t,n){e instanceof Ii&&e.childNodes.forEach(function(e){t(e)&&n.push(e),e instanceof Ii&&ee(e,t,n)})}function te(e){return Pi.get(e)||null}function ne(e){Pi.set(e.nativeNode,e)}function re(e,t){var n=oe(e),r=oe(t);if(n&&r)return function(e,t,n){var r=e[p()](),o=t[p()]();for(;;){var i=r.next(),s=o.next();if(i.done&&s.done)return!0;if(i.done||s.done)return!1;if(!n(i.value,s.value))return!1}}(e,t,re);return!(n||!(e&&("object"==typeof e||"function"==typeof e))||r||!(t&&("object"==typeof t||"function"==typeof t)))||h(e,t)}function oe(e){return!!ie(e)&&(Array.isArray(e)||!(e instanceof Map)&&p()in e)}function ie(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function se(e,t,n){var r=e.previousIndex;if(null===r)return r;var o=0;return n&&r<n.length&&(o=n[r]),r+t+o}function ue(){return Ki}function ae(){return Yi}function ce(e){return e||"en-US"}function le(e,t,n){var r=e.state,o=1792&r;return o===t?(e.state=-1793&r|n,e.initIndex=-1,!0):o===n}function fe(e,t,n){return(1792&e.state)===t&&e.initIndex<=n&&(e.initIndex=n+1,!0)}function pe(e,t){return e.nodes[t]}function de(e,t){return e.nodes[t]}function he(e,t){return e.nodes[t]}function ve(e,t){return e.nodes[t]}function ye(e,t){return e.nodes[t]}function be(e,t,n,r){var o="ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '"+t+"'. Current value: '"+n+"'.";return r&&(o+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook ?"),function(e,t){var n=new Error(e);return ge(n,t),n}(o,e)}function ge(e,t){e[Io]=t,e[To]=t.logError.bind(t)}function _e(e){return new Error("ViewDestroyedError: Attempt to use a destroyed view: "+e)}function me(e){var t=Ji.get(e);return t||(t=v(e)+"_"+Ji.size,Ji.set(e,t)),t}function we(e,t,n,r){var o=e.oldValues;return!(!(2&e.state)&&h(o[t.bindingIndex+n],r))}function Ce(e,t,n,r){return!!we(e,t,n,r)&&(e.oldValues[t.bindingIndex+n]=r,!0)}function xe(e,t,n,r){var o=e.oldValues[t.bindingIndex+n];if(1&e.state||!re(o,r))throw be($i.createDebugContext(e,t.nodeIndex),o,r,0!=(1&e.state))}function Oe(e){for(var t=e;t;)2&t.def.flags&&(t.state|=8),t=t.viewContainerParent||t.parent}function ke(e,t){for(var n=e;n&&n!==t;)n.state|=64,n=n.viewContainerParent||n.parent}function Ee(e,t,n,r){try{return Oe(33554432&e.def.nodes[t].flags?de(e,t).componentView:e),$i.handleEvent(e,t,n,r)}catch(t){e.root.errorHandler.handleError(t)}}function je(e){if(e.parent){return de(e.parent,e.parentNodeDef.nodeIndex)}return null}function Ie(e){return e.parent?e.parentNodeDef.parent:null}function Pe(e,t){switch(201347067&t.flags){case 1:return de(e,t.nodeIndex).renderElement;case 2:return pe(e,t.nodeIndex).renderText}}function Te(e,t){return e?e+":"+t:t}function Se(e){return!!e.parent&&!!(32768&e.parentNodeDef.flags)}function Ae(e){return!(!e.parent||32768&e.parentNodeDef.flags)}function Ne(e){return e.map(function(e){var t,n;return Array.isArray(e)?(n=e[0],t=e[1]):(n=0,t=e),{flags:n,token:t,tokenKey:me(t)}})}function Re(e,t,n){var r=n.renderParent;return r?0==(1&r.flags)||0==(33554432&r.flags)||r.element.componentRendererType&&r.element.componentRendererType.encapsulation===Gr.Native?de(e,n.renderParent.nodeIndex).renderElement:void 0:t}function Ve(e){var t=Xi.get(e);return t||((t=e(function(){return Gi})).factory=e,Xi.set(e,t)),t}function De(e,t,n,r,o){3===t&&(n=e.renderer.parentNode(Pe(e,e.def.lastRenderRootNode))),Me(e,t,0,e.def.nodes.length-1,n,r,o)}function Me(e,t,n,r,o,i,s){for(var u=n;u<=r;u++){var a=e.def.nodes[u];11&a.flags&&He(e,a,t,o,i,s),u+=a.childCount}}function Fe(e,t,n,r,o,i){for(var s=e;s&&!Se(s);)s=s.parent;for(var u=s.parent,a=Ie(s),c=a.nodeIndex+1,l=a.nodeIndex+a.childCount,f=c;f<=l;f++){var p=u.def.nodes[f];p.ngContentIndex===t&&He(u,p,n,r,o,i),f+=p.childCount}if(!u.parent){var d=e.root.projectableNodes[t];if(d)for(f=0;f<d.length;f++)Ue(e,d[f],n,r,o,i)}}function He(e,t,n,r,o,i){if(8&t.flags)Fe(e,t.ngContent.index,n,r,o,i);else{var s=Pe(e,t);if(3===n&&33554432&t.flags&&48&t.bindingFlags){if(16&t.bindingFlags&&Ue(e,s,n,r,o,i),32&t.bindingFlags){Ue(de(e,t.nodeIndex).componentView,s,n,r,o,i)}}else Ue(e,s,n,r,o,i);if(16777216&t.flags)for(var u=de(e,t.nodeIndex).viewContainer._embeddedViews,a=0;a<u.length;a++)De(u[a],n,r,o,i);1&t.flags&&!t.element.name&&Me(e,n,t.nodeIndex+1,t.nodeIndex+t.childCount,r,o,i)}}function Ue(e,t,n,r,o,i){var s=e.renderer;switch(n){case 1:s.appendChild(r,t);break;case 2:s.insertBefore(r,t,o);break;case 3:s.removeChild(r,t);break;case 0:i.push(t)}}function ze(e){if(":"===e[0]){var t=e.match(es);return[t[1],t[2]]}return["",e]}function Le(e,t,n){var r,o=n.element,i=e.root.selectorOrNode,s=e.renderer;if(e.parent||!i){r=o.name?s.createElement(o.name,o.ns):s.createComment("");var u=Re(e,t,n);u&&s.appendChild(u,r)}else r=s.selectRootElement(i);if(o.attrs)for(var a=0;a<o.attrs.length;a++){var c=o.attrs[a],l=c[0],f=c[1],p=c[2];s.setAttribute(r,f,p,l)}return r}function Be(e,t,n,r){for(var o=0;o<n.outputs.length;o++){var i=n.outputs[o],s=function(e,t,n){return function(r){return Ee(e,t,n,r)}}(e,n.nodeIndex,Te(i.target,i.eventName)),u=i.target,a=e;"component"===i.target&&(u=null,a=t);var c=a.renderer.listen(u||r,i.eventName,s);e.disposables[n.outputIndex+o]=c}}function Ze(e,t,n,r){if(!Ce(e,t,n,r))return!1;var o=t.bindings[n],i=de(e,t.nodeIndex),s=i.renderElement,u=o.name;switch(15&o.flags){case 1:!function(e,t,n,r,o,i){var s=t.securityContext,u=s?e.root.sanitizer.sanitize(s,i):i;u=null!=u?u.toString():null;var a=e.renderer;null!=i?a.setAttribute(n,o,u,r):a.removeAttribute(n,o,r)}(e,o,s,o.ns,u,r);break;case 2:!function(e,t,n,r){var o=e.renderer;r?o.addClass(t,n):o.removeClass(t,n)}(e,s,u,r);break;case 4:!function(e,t,n,r,o){var i=e.root.sanitizer.sanitize(qi.STYLE,o);if(null!=i){i=i.toString();var s=t.suffix;null!=s&&(i+=s)}else i=null;var u=e.renderer;null!=i?u.setStyle(n,r,i):u.removeStyle(n,r)}(e,o,s,u,r);break;case 8:!function(e,t,n,r,o){var i=t.securityContext,s=i?e.root.sanitizer.sanitize(i,o):o;e.renderer.setProperty(n,r,s)}(33554432&t.flags&&32&o.flags?i.componentView:e,o,s,u,r)}return!0}function Ke(e,t,n){if(void 0===n&&(n=vo.THROW_IF_NOT_FOUND),8&t.flags)return t.token;if(2&t.flags&&(n=null),1&t.flags)return e._parent.get(t.token,n);var r=t.tokenKey;switch(r){case ns:case rs:return e}var o=e._def.providersByKey[r];if(o){var i=e._providers[o.index];return void 0===i&&(i=e._providers[o.index]=Ye(e,o)),i===ts?void 0:i}return e._parent.get(t.token,n)}function Ye(e,t){var n;switch(201347067&t.flags){case 512:n=function(e,t,n){var r=n.length;switch(r){case 0:return new t;case 1:return new t(Ke(e,n[0]));case 2:return new t(Ke(e,n[0]),Ke(e,n[1]));case 3:return new t(Ke(e,n[0]),Ke(e,n[1]),Ke(e,n[2]));default:for(var o=new Array(r),i=0;i<r;i++)o[i]=Ke(e,n[i]);return new(t.bind.apply(t,[void 0].concat(o)))}}(e,t.value,t.deps);break;case 1024:n=function(e,t,n){var r=n.length;switch(r){case 0:return t();case 1:return t(Ke(e,n[0]));case 2:return t(Ke(e,n[0]),Ke(e,n[1]));case 3:return t(Ke(e,n[0]),Ke(e,n[1]),Ke(e,n[2]));default:for(var o=Array(r),i=0;i<r;i++)o[i]=Ke(e,n[i]);return t.apply(void 0,o)}}(e,t.value,t.deps);break;case 2048:n=Ke(e,t.deps[0]);break;case 256:n=t.value}return void 0===n?ts:n}function We(e,t,n,r){var o=t.viewContainer._embeddedViews;null!==n&&void 0!==n||(n=o.length),r.viewContainerParent=e,Ge(o,n,r),function(e,t){var n=je(t);if(!n||n===e||16&t.state)return;t.state|=16;var r=n.template._projectedViews;r||(r=n.template._projectedViews=[]);r.push(t),function(e,t){if(4&t.flags)return;e.nodeFlags|=4,t.flags|=4;var n=t.parent;for(;n;)n.childFlags|=4,n=n.parent}(t.parent.def,t.parentNodeDef)}(t,r),$i.dirtyParentQueries(r);Qe(t,n>0?o[n-1]:null,r)}function qe(e,t){var n=e.viewContainer._embeddedViews;if((null==t||t>=n.length)&&(t=n.length-1),t<0)return null;var r=n[t];return r.viewContainerParent=null,Je(n,t),$i.dirtyParentQueries(r),$e(r),r}function Qe(e,t,n){var r=t?Pe(t,t.def.lastRenderRootNode):e.renderElement;De(n,2,n.renderer.parentNode(r),n.renderer.nextSibling(r),void 0)}function $e(e){De(e,3,null,null,void 0)}function Ge(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function Je(e,t){t>=e.length-1?e.pop():e.splice(t,1)}function Xe(e,t,n){return new ss(e,t,n)}function et(e){return new us(e)}function tt(e,t){return new as(e,t)}function nt(e,t){return new cs(e,t)}function rt(e){return new ls(e.renderer)}function ot(e,t,n,r){return new fs(e,t,n,r)}function it(e,t){return at(e,t)}function st(e,t){for(var n=e;n.parent&&!Se(n);)n=n.parent;return ct(n.parent,Ie(n),!0,t.provider.value,t.provider.deps)}function ut(e,t){var n=(32768&t.flags)>0,r=ct(e,t.parent,n,t.provider.value,t.provider.deps);if(t.outputs.length)for(var o=0;o<t.outputs.length;o++){var i=t.outputs[o],s=r[i.propName].subscribe(function(e,t,n){return function(r){return Ee(e,t,n,r)}}(e,t.parent.nodeIndex,i.eventName));e.disposables[t.outputIndex+o]=s.unsubscribe.bind(s)}return r}function at(e,t){var n=(8192&t.flags)>0,r=t.provider;switch(201347067&t.flags){case 512:return ct(e,t.parent,n,r.value,r.deps);case 1024:return function(e,t,n,r,o){var i=o.length;switch(i){case 0:return r();case 1:return r(lt(e,t,n,o[0]));case 2:return r(lt(e,t,n,o[0]),lt(e,t,n,o[1]));case 3:return r(lt(e,t,n,o[0]),lt(e,t,n,o[1]),lt(e,t,n,o[2]));default:for(var s=Array(i),u=0;u<i;u++)s[u]=lt(e,t,n,o[u]);return r.apply(void 0,s)}}(e,t.parent,n,r.value,r.deps);case 2048:return lt(e,t.parent,n,r.deps[0]);case 256:return r.value}}function ct(e,t,n,r,o){var i=o.length;switch(i){case 0:return new r;case 1:return new r(lt(e,t,n,o[0]));case 2:return new r(lt(e,t,n,o[0]),lt(e,t,n,o[1]));case 3:return new r(lt(e,t,n,o[0]),lt(e,t,n,o[1]),lt(e,t,n,o[2]));default:for(var s=new Array(i),u=0;u<i;u++)s[u]=lt(e,t,n,o[u]);return new(r.bind.apply(r,[void 0].concat(s)))}}function lt(e,t,n,r,o){if(void 0===o&&(o=vo.THROW_IF_NOT_FOUND),8&r.flags)return r.token;var i=e;2&r.flags&&(o=null);var s=r.tokenKey;for(s===bs&&(n=!(!t||!t.element.componentView)),t&&1&r.flags&&(n=!1,t=t.parent);e;){if(t)switch(s){case ps:return rt(ft(e,t,n));case ds:return ft(e,t,n).renderer;case hs:return new wi(de(e,t.nodeIndex).renderElement);case vs:return de(e,t.nodeIndex).viewContainer;case ys:if(t.element.template)return de(e,t.nodeIndex).template;break;case bs:return et(ft(e,t,n));case gs:return nt(e,t);default:var u=(n?t.element.allProviders:t.element.publicProviders)[s];if(u){var a=he(e,u.nodeIndex);return a||(a={instance:at(e,u)},e.nodes[u.nodeIndex]=a),a.instance}}n=Se(e),t=Ie(e),e=e.parent}var c=i.root.injector.get(r.token,_s);return c!==_s||o===_s?c:i.root.ngModule.injector.get(r.token,o)}function ft(e,t,n){var r;if(n)r=de(e,t.nodeIndex).componentView;else for(r=e;r.parent&&!Se(r);)r=r.parent;return r}function pt(e,t,n,r,o,i){if(32768&n.flags){var s=de(e,n.parent.nodeIndex).componentView;2&s.def.flags&&(s.state|=8)}var u=n.bindings[r].name;if(t.instance[u]=o,524288&n.flags){i=i||{};var a=e.oldValues[n.bindingIndex+r];a instanceof Ti&&(a=a.wrapped);i[n.bindings[r].nonMinifiedName]=new Si(a,o,0!=(2&e.state))}return e.oldValues[n.bindingIndex+r]=o,i}function dt(e,t){if(e.def.nodeFlags&t)for(var n=e.def.nodes,r=0,o=0;o<n.length;o++){var i=n[o],s=i.parent;for(!s&&i.flags&t&&ht(e,o,i.flags&t,r++),0==(i.childFlags&t)&&(o+=i.childCount);s&&1&s.flags&&o===s.nodeIndex+s.childCount;)s.directChildFlags&t&&(r=function(e,t,n,r){for(var o=t.nodeIndex+1;o<=t.nodeIndex+t.childCount;o++){var i=e.def.nodes[o];i.flags&n&&ht(e,o,i.flags&n,r++),o+=i.childCount}return r}(e,s,t,r)),s=s.parent}}function ht(e,t,n,r){var o=he(e,t);if(o){var i=o.instance;i&&($i.setCurrentNode(e,t),1048576&n&&fe(e,512,r)&&i.ngAfterContentInit(),2097152&n&&i.ngAfterContentChecked(),4194304&n&&fe(e,768,r)&&i.ngAfterViewInit(),8388608&n&&i.ngAfterViewChecked(),131072&n&&i.ngOnDestroy())}}function vt(){return new Ci}function yt(e){for(var t=e.def.nodeMatchedQueries;e.parent&&Ae(e);){var n=e.parentNodeDef;e=e.parent;for(var r=n.nodeIndex+n.childCount,o=0;o<=r;o++){67108864&(i=e.def.nodes[o]).flags&&536870912&i.flags&&(i.query.filterId&t)===i.query.filterId&&ye(e,o).setDirty(),!(1&i.flags&&o+i.childCount<n.nodeIndex)&&67108864&i.childFlags&&536870912&i.childFlags||(o+=i.childCount)}}if(134217728&e.def.nodeFlags)for(o=0;o<e.def.nodes.length;o++){var i;134217728&(i=e.def.nodes[o]).flags&&536870912&i.flags&&ye(e,o).setDirty(),o+=i.childCount}}function bt(e,t){var n=ye(e,t.nodeIndex);if(n.dirty){var r,o=void 0;if(67108864&t.flags){var i=t.parent.parent;o=gt(e,i.nodeIndex,i.nodeIndex+i.childCount,t.query,[]),r=he(e,t.parent.nodeIndex).instance}else 134217728&t.flags&&(o=gt(e,0,e.def.nodes.length-1,t.query,[]),r=e.component);n.reset(o);for(var s=t.query.bindings,u=!1,a=0;a<s.length;a++){var c=s[a],l=void 0;switch(c.bindingType){case 0:l=n.first;break;case 1:l=n,u=!0}r[c.propName]=l}u&&n.notifyOnChanges()}}function gt(e,t,n,r,o){for(var i=t;i<=n;i++){var s=e.def.nodes[i],u=s.matchedQueries[r.id];if(null!=u&&o.push(_t(e,s,u)),1&s.flags&&s.element.template&&(s.element.template.nodeMatchedQueries&r.filterId)===r.filterId){var a=de(e,i);if((s.childMatchedQueries&r.filterId)===r.filterId&&(gt(e,i+1,i+s.childCount,r,o),i+=s.childCount),16777216&s.flags)for(var c=a.viewContainer._embeddedViews,l=0;l<c.length;l++){var f=c[l],p=je(f);p&&p===a&&gt(f,0,f.def.nodes.length-1,r,o)}var d=a.template._projectedViews;if(d)for(l=0;l<d.length;l++){var h=d[l];gt(h,0,h.def.nodes.length-1,r,o)}}(s.childMatchedQueries&r.filterId)!==r.filterId&&(i+=s.childCount)}return o}function _t(e,t,n){if(null!=n)switch(n){case 1:return de(e,t.nodeIndex).renderElement;case 0:return new wi(de(e,t.nodeIndex).renderElement);case 2:return de(e,t.nodeIndex).template;case 3:return de(e,t.nodeIndex).viewContainer;case 4:return he(e,t.nodeIndex).instance}}function mt(e,t,n){var r=Re(e,t,n);if(r){Fe(e,n.ngContent.index,1,r,null,void 0)}}function wt(e,t,n){var r,o=e.renderer;r=o.createText(n.text.prefix);var i=Re(e,t,n);return i&&o.appendChild(i,r),{renderText:r}}function Ct(e,t){return(null!=e?e.toString():"")+t.suffix}function xt(e,t,n,r){var o=Et(e.root,e.renderer,e,t,n);return jt(o,e.component,r),It(o),o}function Ot(e,t,n){var r=Et(e,e.renderer,null,null,t);return jt(r,n,n),It(r),r}function kt(e,t,n,r){var o,i=t.element.componentRendererType;return o=i?e.root.rendererFactory.createRenderer(r,i):e.root.renderer,Et(e.root,o,e,t.element.componentProvider,n)}function Et(e,t,n,r,o){var i=new Array(o.nodes.length),s=o.outputCount?new Array(o.outputCount):null;return{def:o,parent:n,viewContainerParent:null,parentNodeDef:r,context:null,component:null,nodes:i,state:13,root:e,renderer:t,oldValues:new Array(o.bindingCount),disposables:s,initIndex:-1}}function jt(e,t,n){e.component=t,e.context=n}function It(e){var t;if(Se(e)){var n=e.parentNodeDef;t=de(e.parent,n.parent.nodeIndex).renderElement}for(var r=e.def,o=e.nodes,i=0;i<r.nodes.length;i++){var s=r.nodes[i];$i.setCurrentNode(e,i);var u=void 0;switch(201347067&s.flags){case 1:var a=Le(e,t,s),c=void 0;if(33554432&s.flags){var l=Ve(s.element.componentView);c=$i.createComponentView(e,s,l,a)}Be(e,c,s,a),u={renderElement:a,componentView:c,viewContainer:null,template:s.element.template?tt(e,s):void 0},16777216&s.flags&&(u.viewContainer=Xe(e,s,u));break;case 2:u=wt(e,t,s);break;case 512:case 1024:case 2048:case 256:if(!((u=o[i])||4096&s.flags)){u={instance:it(e,s)}}break;case 16:u={instance:st(e,s)};break;case 16384:if(!(u=o[i])){u={instance:ut(e,s)}}if(32768&s.flags){jt(de(e,s.parent.nodeIndex).componentView,u.instance,u.instance)}break;case 32:case 64:case 128:u={value:void 0};break;case 67108864:case 134217728:u=vt();break;case 8:mt(e,t,s),u=void 0}o[i]=u}Dt(e,ms.CreateViewNodes),Ut(e,201326592,268435456,0)}function Pt(e){At(e),$i.updateDirectives(e,1),Mt(e,ms.CheckNoChanges),$i.updateRenderer(e,1),Dt(e,ms.CheckNoChanges),e.state&=-97}function Tt(e){1&e.state?(e.state&=-2,e.state|=2):e.state&=-3,le(e,0,256),At(e),$i.updateDirectives(e,0),Mt(e,ms.CheckAndUpdate),Ut(e,67108864,536870912,0);var t=le(e,256,512);dt(e,2097152|(t?1048576:0)),$i.updateRenderer(e,0),Dt(e,ms.CheckAndUpdate),Ut(e,134217728,536870912,0),dt(e,8388608|((t=le(e,512,768))?4194304:0)),2&e.def.flags&&(e.state&=-9),e.state&=-97,le(e,768,1024)}function St(e,t,n,r,o,i,s,u,a,c,l,f,p){return 0===n?function(e,t,n,r,o,i,s,u,a,c,l,f){switch(201347067&t.flags){case 1:return function(e,t,n,r,o,i,s,u,a,c,l,f){var p=t.bindings.length,d=!1;return p>0&&Ze(e,t,0,n)&&(d=!0),p>1&&Ze(e,t,1,r)&&(d=!0),p>2&&Ze(e,t,2,o)&&(d=!0),p>3&&Ze(e,t,3,i)&&(d=!0),p>4&&Ze(e,t,4,s)&&(d=!0),p>5&&Ze(e,t,5,u)&&(d=!0),p>6&&Ze(e,t,6,a)&&(d=!0),p>7&&Ze(e,t,7,c)&&(d=!0),p>8&&Ze(e,t,8,l)&&(d=!0),p>9&&Ze(e,t,9,f)&&(d=!0),d}(e,t,n,r,o,i,s,u,a,c,l,f);case 2:return function(e,t,n,r,o,i,s,u,a,c,l,f){var p=!1,d=t.bindings,h=d.length;if(h>0&&Ce(e,t,0,n)&&(p=!0),h>1&&Ce(e,t,1,r)&&(p=!0),h>2&&Ce(e,t,2,o)&&(p=!0),h>3&&Ce(e,t,3,i)&&(p=!0),h>4&&Ce(e,t,4,s)&&(p=!0),h>5&&Ce(e,t,5,u)&&(p=!0),h>6&&Ce(e,t,6,a)&&(p=!0),h>7&&Ce(e,t,7,c)&&(p=!0),h>8&&Ce(e,t,8,l)&&(p=!0),h>9&&Ce(e,t,9,f)&&(p=!0),p){var v=t.text.prefix;h>0&&(v+=Ct(n,d[0])),h>1&&(v+=Ct(r,d[1])),h>2&&(v+=Ct(o,d[2])),h>3&&(v+=Ct(i,d[3])),h>4&&(v+=Ct(s,d[4])),h>5&&(v+=Ct(u,d[5])),h>6&&(v+=Ct(a,d[6])),h>7&&(v+=Ct(c,d[7])),h>8&&(v+=Ct(l,d[8])),h>9&&(v+=Ct(f,d[9]));var y=pe(e,t.nodeIndex).renderText;e.renderer.setValue(y,v)}return p}(e,t,n,r,o,i,s,u,a,c,l,f);case 16384:return function(e,t,n,r,o,i,s,u,a,c,l,f){var p=he(e,t.nodeIndex),d=p.instance,h=!1,v=void 0,y=t.bindings.length;return y>0&&we(e,t,0,n)&&(h=!0,v=pt(e,p,t,0,n,v)),y>1&&we(e,t,1,r)&&(h=!0,v=pt(e,p,t,1,r,v)),y>2&&we(e,t,2,o)&&(h=!0,v=pt(e,p,t,2,o,v)),y>3&&we(e,t,3,i)&&(h=!0,v=pt(e,p,t,3,i,v)),y>4&&we(e,t,4,s)&&(h=!0,v=pt(e,p,t,4,s,v)),y>5&&we(e,t,5,u)&&(h=!0,v=pt(e,p,t,5,u,v)),y>6&&we(e,t,6,a)&&(h=!0,v=pt(e,p,t,6,a,v)),y>7&&we(e,t,7,c)&&(h=!0,v=pt(e,p,t,7,c,v)),y>8&&we(e,t,8,l)&&(h=!0,v=pt(e,p,t,8,l,v)),y>9&&we(e,t,9,f)&&(h=!0,v=pt(e,p,t,9,f,v)),v&&d.ngOnChanges(v),65536&t.flags&&fe(e,256,t.nodeIndex)&&d.ngOnInit(),262144&t.flags&&d.ngDoCheck(),h}(e,t,n,r,o,i,s,u,a,c,l,f);case 32:case 64:case 128:return function(e,t,n,r,o,i,s,u,a,c,l,f){var p=t.bindings,d=!1,h=p.length;if(h>0&&Ce(e,t,0,n)&&(d=!0),h>1&&Ce(e,t,1,r)&&(d=!0),h>2&&Ce(e,t,2,o)&&(d=!0),h>3&&Ce(e,t,3,i)&&(d=!0),h>4&&Ce(e,t,4,s)&&(d=!0),h>5&&Ce(e,t,5,u)&&(d=!0),h>6&&Ce(e,t,6,a)&&(d=!0),h>7&&Ce(e,t,7,c)&&(d=!0),h>8&&Ce(e,t,8,l)&&(d=!0),h>9&&Ce(e,t,9,f)&&(d=!0),d){var v=ve(e,t.nodeIndex),y=void 0;switch(201347067&t.flags){case 32:y=new Array(p.length),h>0&&(y[0]=n),h>1&&(y[1]=r),h>2&&(y[2]=o),h>3&&(y[3]=i),h>4&&(y[4]=s),h>5&&(y[5]=u),h>6&&(y[6]=a),h>7&&(y[7]=c),h>8&&(y[8]=l),h>9&&(y[9]=f);break;case 64:y={},h>0&&(y[p[0].name]=n),h>1&&(y[p[1].name]=r),h>2&&(y[p[2].name]=o),h>3&&(y[p[3].name]=i),h>4&&(y[p[4].name]=s),h>5&&(y[p[5].name]=u),h>6&&(y[p[6].name]=a),h>7&&(y[p[7].name]=c),h>8&&(y[p[8].name]=l),h>9&&(y[p[9].name]=f);break;case 128:var b=n;switch(h){case 1:y=b.transform(n);break;case 2:y=b.transform(r);break;case 3:y=b.transform(r,o);break;case 4:y=b.transform(r,o,i);break;case 5:y=b.transform(r,o,i,s);break;case 6:y=b.transform(r,o,i,s,u);break;case 7:y=b.transform(r,o,i,s,u,a);break;case 8:y=b.transform(r,o,i,s,u,a,c);break;case 9:y=b.transform(r,o,i,s,u,a,c,l);break;case 10:y=b.transform(r,o,i,s,u,a,c,l,f)}}v.value=y}return d}(e,t,n,r,o,i,s,u,a,c,l,f);default:throw"unreachable"}}(e,t,r,o,i,s,u,a,c,l,f,p):function(e,t,n){switch(201347067&t.flags){case 1:return function(e,t,n){for(var r=!1,o=0;o<n.length;o++)Ze(e,t,o,n[o])&&(r=!0);return r}(e,t,n);case 2:return function(e,t,n){for(var r=t.bindings,o=!1,i=0;i<n.length;i++)Ce(e,t,i,n[i])&&(o=!0);if(o){var s="";for(i=0;i<n.length;i++)s+=Ct(n[i],r[i]);s=t.text.prefix+s;var u=pe(e,t.nodeIndex).renderText;e.renderer.setValue(u,s)}return o}(e,t,n);case 16384:return function(e,t,n){for(var r=he(e,t.nodeIndex),o=r.instance,i=!1,s=void 0,u=0;u<n.length;u++)we(e,t,u,n[u])&&(i=!0,s=pt(e,r,t,u,n[u],s));return s&&o.ngOnChanges(s),65536&t.flags&&fe(e,256,t.nodeIndex)&&o.ngOnInit(),262144&t.flags&&o.ngDoCheck(),i}(e,t,n);case 32:case 64:case 128:return function(e,t,n){for(var r=t.bindings,o=!1,i=0;i<n.length;i++)Ce(e,t,i,n[i])&&(o=!0);if(o){var s=ve(e,t.nodeIndex),u=void 0;switch(201347067&t.flags){case 32:u=n;break;case 64:for(u={},i=0;i<n.length;i++)u[r[i].name]=n[i];break;case 128:var a=n[0],c=n.slice(1);u=a.transform.apply(a,c)}s.value=u}return o}(e,t,n);default:throw"unreachable"}}(e,t,r)}function At(e){var t=e.def;if(4&t.nodeFlags)for(var n=0;n<t.nodes.length;n++){var r=t.nodes[n];if(4&r.flags){var o=de(e,n).template._projectedViews;if(o)for(var i=0;i<o.length;i++){var s=o[i];s.state|=32,ke(s,e)}}else 0==(4&r.childFlags)&&(n+=r.childCount)}}function Nt(e,t,n,r,o,i,s,u,a,c,l,f,p){return 0===n?function(e,t,n,r,o,i,s,u,a,c,l,f){var p=t.bindings.length;p>0&&xe(e,t,0,n);p>1&&xe(e,t,1,r);p>2&&xe(e,t,2,o);p>3&&xe(e,t,3,i);p>4&&xe(e,t,4,s);p>5&&xe(e,t,5,u);p>6&&xe(e,t,6,a);p>7&&xe(e,t,7,c);p>8&&xe(e,t,8,l);p>9&&xe(e,t,9,f)}(e,t,r,o,i,s,u,a,c,l,f,p):function(e,t,n){for(var r=0;r<n.length;r++)xe(e,t,r,n[r])}(e,t,r),!1}function Rt(e,t){if(ye(e,t.nodeIndex).dirty)throw be($i.createDebugContext(e,t.nodeIndex),"Query "+t.query.id+" not dirty","Query "+t.query.id+" dirty",0!=(1&e.state))}function Vt(e){if(!(128&e.state)){if(Mt(e,ms.Destroy),Dt(e,ms.Destroy),dt(e,131072),e.disposables)for(var t=0;t<e.disposables.length;t++)e.disposables[t]();!function(e){if(16&e.state){var t=je(e);if(t){var n=t.template._projectedViews;n&&(Je(n,n.indexOf(e)),$i.dirtyParentQueries(e))}}}(e),e.renderer.destroyNode&&function(e){for(var t=e.def.nodes.length,n=0;n<t;n++){var r=e.def.nodes[n];1&r.flags?e.renderer.destroyNode(de(e,n).renderElement):2&r.flags?e.renderer.destroyNode(pe(e,n).renderText):(67108864&r.flags||134217728&r.flags)&&ye(e,n).destroy()}}(e),Se(e)&&e.renderer.destroy(),e.state|=128}}function Dt(e,t){var n=e.def;if(33554432&n.nodeFlags)for(var r=0;r<n.nodes.length;r++){var o=n.nodes[r];33554432&o.flags?Ft(de(e,r).componentView,t):0==(33554432&o.childFlags)&&(r+=o.childCount)}}function Mt(e,t){var n=e.def;if(16777216&n.nodeFlags)for(var r=0;r<n.nodes.length;r++){var o=n.nodes[r];if(16777216&o.flags)for(var i=de(e,r).viewContainer._embeddedViews,s=0;s<i.length;s++)Ft(i[s],t);else 0==(16777216&o.childFlags)&&(r+=o.childCount)}}function Ft(e,t){var n=e.state;switch(t){case ms.CheckNoChanges:0==(128&n)&&(12==(12&n)?Pt(e):64&n&&Ht(e,ms.CheckNoChangesProjectedViews));break;case ms.CheckNoChangesProjectedViews:0==(128&n)&&(32&n?Pt(e):64&n&&Ht(e,t));break;case ms.CheckAndUpdate:0==(128&n)&&(12==(12&n)?Tt(e):64&n&&Ht(e,ms.CheckAndUpdateProjectedViews));break;case ms.CheckAndUpdateProjectedViews:0==(128&n)&&(32&n?Tt(e):64&n&&Ht(e,t));break;case ms.Destroy:Vt(e);break;case ms.CreateViewNodes:It(e)}}function Ht(e,t){Mt(e,t),Dt(e,t)}function Ut(e,t,n,r){if(e.def.nodeFlags&t&&e.def.nodeFlags&n)for(var o=e.def.nodes.length,i=0;i<o;i++){var s=e.def.nodes[i];if(s.flags&t&&s.flags&n)switch($i.setCurrentNode(e,s.nodeIndex),r){case 0:bt(e,s);break;case 1:Rt(e,s)}s.childFlags&t&&s.childFlags&n||(i+=s.childCount)}}function zt(){if(!ws){ws=!0;var e=Q()?{setCurrentNode:rn,createRootView:Bt,createEmbeddedView:Kt,createComponentView:Yt,createNgModuleRef:Wt,overrideProvider:qt,overrideComponentView:Qt,clearOverrides:$t,checkAndUpdateView:en,checkNoChangesView:tn,destroyView:nn,createDebugContext:function(e,t){return new Ps(e,t)},handleEvent:on,updateDirectives:sn,updateRenderer:un}:{setCurrentNode:function(){},createRootView:Lt,createEmbeddedView:xt,createComponentView:kt,createNgModuleRef:ot,overrideProvider:Gi,overrideComponentView:Gi,clearOverrides:Gi,checkAndUpdateView:Tt,checkNoChangesView:Pt,destroyView:Vt,createDebugContext:function(e,t){return new Ps(e,t)},handleEvent:function(e,t,n,r){return e.def.handleEvent(e,t,n,r)},updateDirectives:function(e,t){return e.def.updateDirectives(0===t?Jt:Xt,e)},updateRenderer:function(e,t){return e.def.updateRenderer(0===t?Jt:Xt,e)}};$i.setCurrentNode=e.setCurrentNode,$i.createRootView=e.createRootView,$i.createEmbeddedView=e.createEmbeddedView,$i.createComponentView=e.createComponentView,$i.createNgModuleRef=e.createNgModuleRef,$i.overrideProvider=e.overrideProvider,$i.overrideComponentView=e.overrideComponentView,$i.clearOverrides=e.clearOverrides,$i.checkAndUpdateView=e.checkAndUpdateView,$i.checkNoChangesView=e.checkNoChangesView,$i.destroyView=e.destroyView,$i.resolveDep=lt,$i.createDebugContext=e.createDebugContext,$i.handleEvent=e.handleEvent,$i.updateDirectives=e.updateDirectives,$i.updateRenderer=e.updateRenderer,$i.dirtyParentQueries=yt}}function Lt(e,t,n,r,o,i){return Ot(Zt(e,o,o.injector.get(_i),t,n),r,i)}function Bt(e,t,n,r,o,i){var s=o.injector.get(_i),u=Zt(e,o,new Ts(s),t,n),a=Gt(r);return dn(Os.create,Ot,null,[u,a,i])}function Zt(e,t,n,r,o){var i=t.injector.get(Qi),s=t.injector.get(So);return{ngModule:t,injector:e,projectableNodes:r,selectorOrNode:o,sanitizer:i,rendererFactory:n,renderer:n.createRenderer(null,null),errorHandler:s}}function Kt(e,t,n,r){var o=Gt(n);return dn(Os.create,xt,null,[e,t,o,r])}function Yt(e,t,n,r){var o=xs.get(t.element.componentProvider.provider.token);return n=o||Gt(n),dn(Os.create,kt,null,[e,t,n,r])}function Wt(e,t,n,r){return ot(e,t,n,function(e){var t=function(e){var t=!1,n=!1;if(0===Cs.size)return{hasOverrides:t,hasDeprecatedOverrides:n};return e.providers.forEach(function(e){var r=Cs.get(e.token);3840&e.flags&&r&&(t=!0,n=n||r.deprecatedBehavior)}),{hasOverrides:t,hasDeprecatedOverrides:n}}(e),n=t.hasOverrides,r=t.hasDeprecatedOverrides;if(!n)return e;return e=e.factory(function(){return Gi}),function(e){for(var t=0;t<e.providers.length;t++){var n=e.providers[t];r&&(n.flags|=4096);var o=Cs.get(n.token);o&&(n.flags=-3841&n.flags|o.flags,n.deps=Ne(o.deps),n.value=o.value)}}(e),e}(r))}function qt(e){Cs.set(e.token,e)}function Qt(e,t){var n=Ve(Ve(function(e){return e.viewDefFactory}(t)).nodes[0].element.componentView);xs.set(e,n)}function $t(){Cs.clear(),xs.clear()}function Gt(e){if(0===Cs.size)return e;var t=function(e){for(var t=[],n=null,r=0;r<e.nodes.length;r++){var o=e.nodes[r];1&o.flags&&(n=o),n&&3840&o.flags&&Cs.has(o.provider.token)&&(t.push(n.nodeIndex),n=null)}return t}(e);if(0===t.length)return e;e=e.factory(function(){return Gi});for(var n=0;n<t.length;n++)!function(e,t){for(var n=t+1;n<e.nodes.length;n++){var r=e.nodes[n];if(1&r.flags)return;if(3840&r.flags){var o=r.provider,i=Cs.get(o.token);i&&(r.flags=-3841&r.flags|i.flags,o.deps=Ne(i.deps),o.value=i.value)}}}(e,t[n]);return e}function Jt(e,t,n,r,o,i,s,u,a,c,l,f,p){var d=e.def.nodes[t];return St(e,d,n,r,o,i,s,u,a,c,l,f,p),224&d.flags?ve(e,t).value:void 0}function Xt(e,t,n,r,o,i,s,u,a,c,l,f,p){var d=e.def.nodes[t];return Nt(e,d,n,r,o,i,s,u,a,c,l,f,p),224&d.flags?ve(e,t).value:void 0}function en(e){return dn(Os.detectChanges,Tt,null,[e])}function tn(e){return dn(Os.checkNoChanges,Pt,null,[e])}function nn(e){return dn(Os.destroy,Vt,null,[e])}function rn(e,t){Es=e,js=t}function on(e,t,n,r){return rn(e,t),dn(Os.handleEvent,e.def.handleEvent,null,[e,t,n,r])}function sn(e,t){if(128&e.state)throw _e(Os[ks]);return rn(e,ln(e,0)),e.def.updateDirectives(function(e,n,r){for(var o=[],i=3;i<arguments.length;i++)o[i-3]=arguments[i];var s=e.def.nodes[n];return 0===t?an(e,s,r,o):cn(e,s,r,o),16384&s.flags&&rn(e,ln(e,n)),224&s.flags?ve(e,s.nodeIndex).value:void 0},e)}function un(e,t){if(128&e.state)throw _e(Os[ks]);return rn(e,fn(e,0)),e.def.updateRenderer(function(e,n,r){for(var o=[],i=3;i<arguments.length;i++)o[i-3]=arguments[i];var s=e.def.nodes[n];return 0===t?an(e,s,r,o):cn(e,s,r,o),3&s.flags&&rn(e,fn(e,n)),224&s.flags?ve(e,s.nodeIndex).value:void 0},e)}function an(e,t,n,r){if(St.apply(void 0,[e,t,n].concat(r))){var o=1===n?r[0]:r;if(16384&t.flags){for(var i={},s=0;s<t.bindings.length;s++){var u=t.bindings[s],a=o[s];8&u.flags&&(i[function(e){return"ng-reflect-"+(e=function(e){return e.replace(Is,function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return"-"+e[1].toLowerCase()})}(e.replace(/[$@]/g,"_")))}(u.nonMinifiedName)]=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(a))}var c=t.parent,l=de(e,c.nodeIndex).renderElement;if(c.element.name)for(var f in i){null!=(a=i[f])?e.renderer.setAttribute(l,f,a):e.renderer.removeAttribute(l,f)}else e.renderer.setValue(l,"bindings="+JSON.stringify(i,null,2))}}}function cn(e,t,n,r){Nt.apply(void 0,[e,t,n].concat(r))}function ln(e,t){for(var n=t;n<e.def.nodes.length;n++){var r=e.def.nodes[n];if(16384&r.flags&&r.bindings&&r.bindings.length)return n}return null}function fn(e,t){for(var n=t;n<e.def.nodes.length;n++){var r=e.def.nodes[n];if(3&r.flags&&r.bindings&&r.bindings.length)return n}return null}function pn(e,t,n){for(var r in t.references)n[r]=_t(e,t,t.references[r])}function dn(e,t,n,r){var o=ks,i=Es,s=js;try{ks=e;var u=t.apply(n,r);return Es=i,js=s,ks=o,u}catch(e){if(function(e){return!!O(e)}(e)||!Es)throw e;throw function(e,t){return e instanceof Error||(e=new Error(e.toString())),ge(e,t),e}(e,hn())}}function hn(){return Es?new Ps(Es,js):null}var vn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},yn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},bn="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},gn="undefined"!=typeof window&&window,_n="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,mn=gn||void 0!==bn&&bn||_n,wn=mn;!function(){if(!mn)throw new Error("RxJS could not find any global context (window, self, global)")}();var Cn,xn={root:wn},On={isFunction:function(e){return"function"==typeof e}},kn={isArray:Array.isArray||function(e){return e&&"number"==typeof e.length}},En={isObject:function(e){return null!=e&&"object"==typeof e}},jn={errorObject:{e:{}}},In={tryCatch:function(e){return Cn=e,o}},Pn=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},Tn={UnsubscriptionError:function(e){function t(t){e.call(this),this.errors=t;var n=Error.call(this,t?t.length+" errors occurred during unsubscription:\n  "+t.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"");this.name=n.name="UnsubscriptionError",this.stack=n.stack,this.message=n.message}return Pn(t,e),t}(Error)},Sn={Subscription:function(){function e(e){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,e&&(this._unsubscribe=e)}return e.prototype.unsubscribe=function(){var e,t=!1;if(!this.closed){var n=this._parent,r=this._parents,o=this._unsubscribe,s=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var u=-1,a=r?r.length:0;n;)n.remove(this),n=++u<a&&r[u]||null;if(On.isFunction(o)){In.tryCatch(o).call(this)===jn.errorObject&&(t=!0,e=e||(jn.errorObject.e instanceof Tn.UnsubscriptionError?i(jn.errorObject.e.errors):[jn.errorObject.e]))}if(kn.isArray(s))for(u=-1,a=s.length;++u<a;){var c=s[u];if(En.isObject(c)){if(In.tryCatch(c.unsubscribe).call(c)===jn.errorObject){t=!0,e=e||[];var l=jn.errorObject.e;l instanceof Tn.UnsubscriptionError?e=e.concat(i(l.errors)):e.push(l)}}}if(t)throw new Tn.UnsubscriptionError(e)}},e.prototype.add=function(t){if(!t||t===e.EMPTY)return e.EMPTY;if(t===this)return this;var n=t;switch(typeof t){case"function":n=new e(t);case"object":if(n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if("function"!=typeof n._addParent){var r=n;(n=new e)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(n),n._addParent(this),n},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}},e.prototype._addParent=function(e){var t=this._parent,n=this._parents;t&&t!==e?n?-1===n.indexOf(e)&&n.push(e):this._parents=[e]:this._parent=e},e.EMPTY=function(e){return e.closed=!0,e}(new e),e}()},An={empty:{closed:!0,next:function(e){},error:function(e){throw e},complete:function(){}}},Nn=r(function(e,t){var n=xn.root.Symbol;t.rxSubscriber="function"==typeof n&&"function"==typeof n.for?n.for("rxSubscriber"):"@@rxSubscriber",t.$$rxSubscriber=t.rxSubscriber}),Rn=(Nn.rxSubscriber,Nn.$$rxSubscriber,bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Vn=function(e){function t(n,r,o){switch(e.call(this),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=An.empty;break;case 1:if(!n){this.destination=An.empty;break}if("object"==typeof n){n instanceof t?(this.destination=n,this.destination.add(this)):(this.syncErrorThrowable=!0,this.destination=new Mn(this,n));break}default:this.syncErrorThrowable=!0,this.destination=new Mn(this,n,r,o)}}return Rn(t,e),t.prototype[Nn.rxSubscriber]=function(){return this},t.create=function(e,n,r){var o=new t(e,n,r);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parent,t=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=e,this._parents=t,this},t}(Sn.Subscription),Dn=Vn,Mn=function(e){function t(t,n,r,o){e.call(this),this._parentSubscriber=t;var i,s=this;On.isFunction(n)?i=n:n&&(i=n.next,r=n.error,o=n.complete,n!==An.empty&&(s=Object.create(n),On.isFunction(s.unsubscribe)&&this.add(s.unsubscribe.bind(s)),s.unsubscribe=this.unsubscribe.bind(this))),this._context=s,this._next=i,this._error=r,this._complete=o}return Rn(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber;if(this._error)t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else{if(!t.syncErrorThrowable)throw this.unsubscribe(),e;t.syncErrorValue=e,t.syncErrorThrown=!0,this.unsubscribe()}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var n=function(){return e._complete.call(e._context)};t.syncErrorThrowable?(this.__tryOrSetError(t,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){throw this.unsubscribe(),e}},t.prototype.__tryOrSetError=function(e,t,n){try{t.call(this._context,n)}catch(t){return e.syncErrorValue=t,e.syncErrorThrown=!0,!0}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(Vn),Fn={Subscriber:Dn},Hn={toSubscriber:function(e,t,n){if(e){if(e instanceof Fn.Subscriber)return e;if(e[Nn.rxSubscriber])return e[Nn.rxSubscriber]()}return e||t||n?new Fn.Subscriber(e,t,n):new Fn.Subscriber(An.empty)}},Un=r(function(e,t){function n(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}t.getSymbolObservable=n,t.observable=n(xn.root),t.$$observable=t.observable}),zn=(Un.getSymbolObservable,Un.observable,Un.$$observable,{noop:function(){}}),Ln={pipe:function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return s(e)},pipeFromArray:s},Bn=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r=this.operator,o=Hn.toSubscriber(e,t,n);if(r?r.call(o,this.source):o.add(this.source?this._subscribe(o):this._trySubscribe(o)),o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.syncErrorThrown=!0,e.syncErrorValue=t,e.error(t)}},e.prototype.forEach=function(e,t){var n=this;if(t||(xn.root.Rx&&xn.root.Rx.config&&xn.root.Rx.config.Promise?t=xn.root.Rx.config.Promise:xn.root.Promise&&(t=xn.root.Promise)),!t)throw new Error("no Promise impl found");return new t(function(t,r){var o;o=n.subscribe(function(t){if(o)try{e(t)}catch(e){r(e),o.unsubscribe()}else e(t)},r,t)})},e.prototype._subscribe=function(e){return this.source.subscribe(e)},e.prototype[Un.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return 0===e.length?this:Ln.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;if(e||(xn.root.Rx&&xn.root.Rx.config&&xn.root.Rx.config.Promise?e=xn.root.Rx.config.Promise:xn.root.Promise&&(e=xn.root.Promise)),!e)throw new Error("no Promise impl found");return new e(function(e,n){var r;t.subscribe(function(e){return r=e},function(e){return n(e)},function(){return e(r)})})},e.create=function(t){return new e(t)},e}(),Zn={Observable:Bn},Kn=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},Yn={ScalarObservable:function(e){function t(t,n){e.call(this),this.value=t,this.scheduler=n,this._isScalar=!0,n&&(this._isScalar=!1)}return Kn(t,e),t.create=function(e,n){return new t(e,n)},t.dispatch=function(e){var t=e.done,n=e.value,r=e.subscriber;t?r.complete():(r.next(n),r.closed||(e.done=!0,this.schedule(e)))},t.prototype._subscribe=function(e){var n=this.value,r=this.scheduler;if(r)return r.schedule(t.dispatch,0,{done:!1,value:n,subscriber:e});e.next(n),e.closed||e.complete()},t}(Zn.Observable)},Wn=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},qn={EmptyObservable:function(e){function t(t){e.call(this),this.scheduler=t}return Wn(t,e),t.create=function(e){return new t(e)},t.dispatch=function(e){e.subscriber.complete()},t.prototype._subscribe=function(e){var n=this.scheduler;if(n)return n.schedule(t.dispatch,0,{subscriber:e});e.complete()},t}(Zn.Observable)},Qn={isScheduler:function(e){return e&&"function"==typeof e.schedule}},$n=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},Gn={ArrayObservable:function(e){function t(t,n){e.call(this),this.array=t,this.scheduler=n,n||1!==t.length||(this._isScalar=!0,this.value=t[0])}return $n(t,e),t.create=function(e,n){return new t(e,n)},t.of=function(){for(var e=[],n=0;n<arguments.length;n++)e[n-0]=arguments[n];var r=e[e.length-1];Qn.isScheduler(r)?e.pop():r=null;var o=e.length;return o>1?new t(e,r):1===o?new Yn.ScalarObservable(e[0],r):new qn.EmptyObservable(r)},t.dispatch=function(e){var t=e.array,n=e.index,r=e.count,o=e.subscriber;n>=r?o.complete():(o.next(t[n]),o.closed||(e.index=n+1,this.schedule(e)))},t.prototype._subscribe=function(e){var n=this.array,r=n.length,o=this.scheduler;if(o)return o.schedule(t.dispatch,0,{array:n,index:0,count:r,subscriber:e});for(var i=0;i<r&&!e.closed;i++)e.next(n[i]);e.complete()},t}(Zn.Observable)},Jn={isArrayLike:function(e){return e&&"number"==typeof e.length}},Xn={isPromise:function(e){return e&&"function"!=typeof e.subscribe&&"function"==typeof e.then}},er=r(function(e,t){function n(e){var t=e.Symbol;if("function"==typeof t)return t.iterator||(t.iterator=t("iterator polyfill")),t.iterator;var n=e.Set;if(n&&"function"==typeof(new n)["@@iterator"])return"@@iterator";var r=e.Map;if(r)for(var o=Object.getOwnPropertyNames(r.prototype),i=0;i<o.length;++i){var s=o[i];if("entries"!==s&&"size"!==s&&r.prototype[s]===r.prototype.entries)return s}return"@@iterator"}t.symbolIteratorPonyfill=n,t.iterator=n(xn.root),t.$$iterator=t.iterator}),tr=(er.symbolIteratorPonyfill,er.iterator,er.$$iterator,bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),nr={InnerSubscriber:function(e){function t(t,n,r){e.call(this),this.parent=t,this.outerValue=n,this.outerIndex=r,this.index=0}return tr(t,e),t.prototype._next=function(e){this.parent.notifyNext(this.outerValue,e,this.outerIndex,this.index++,this)},t.prototype._error=function(e){this.parent.notifyError(e,this),this.unsubscribe()},t.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},t}(Fn.Subscriber)},rr={subscribeToResult:function(e,t,n,r){var o=new nr.InnerSubscriber(e,n,r);if(o.closed)return null;if(t instanceof Zn.Observable)return t._isScalar?(o.next(t.value),o.complete(),null):(o.syncErrorThrowable=!0,t.subscribe(o));if(Jn.isArrayLike(t)){for(var i=0,s=t.length;i<s&&!o.closed;i++)o.next(t[i]);o.closed||o.complete()}else{if(Xn.isPromise(t))return t.then(function(e){o.closed||(o.next(e),o.complete())},function(e){return o.error(e)}).then(null,function(e){xn.root.setTimeout(function(){throw e})}),o;if(t&&"function"==typeof t[er.iterator])for(var u=t[er.iterator]();;){var a=u.next();if(a.done){o.complete();break}if(o.next(a.value),o.closed)break}else if(t&&"function"==typeof t[Un.observable]){var c=t[Un.observable]();if("function"==typeof c.subscribe)return c.subscribe(new nr.InnerSubscriber(e,n,r));o.error(new TypeError("Provided object does not correctly implement Symbol.observable"))}else{var l="You provided "+(En.isObject(t)?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.";o.error(new TypeError(l))}}return null}},or=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},ir={OuterSubscriber:function(e){function t(){e.apply(this,arguments)}return or(t,e),t.prototype.notifyNext=function(e,t,n,r,o){this.destination.next(t)},t.prototype.notifyError=function(e,t){this.destination.error(e)},t.prototype.notifyComplete=function(e){this.destination.complete()},t}(Fn.Subscriber)},sr=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},ur=function(e,t,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return"number"==typeof t&&(n=t,t=null),r.lift(new ar(e,t,n))}},ar=function(){function e(e,t,n){void 0===n&&(n=Number.POSITIVE_INFINITY),this.project=e,this.resultSelector=t,this.concurrent=n}return e.prototype.call=function(e,t){return t.subscribe(new lr(e,this.project,this.resultSelector,this.concurrent))},e}(),cr=ar,lr=function(e){function t(t,n,r,o){void 0===o&&(o=Number.POSITIVE_INFINITY),e.call(this,t),this.project=n,this.resultSelector=r,this.concurrent=o,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}return sr(t,e),t.prototype._next=function(e){this.active<this.concurrent?this._tryNext(e):this.buffer.push(e)},t.prototype._tryNext=function(e){var t,n=this.index++;try{t=this.project(e,n)}catch(e){return void this.destination.error(e)}this.active++,this._innerSub(t,e,n)},t.prototype._innerSub=function(e,t,n){this.add(rr.subscribeToResult(this,e,t,n))},t.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete()},t.prototype.notifyNext=function(e,t,n,r,o){this.resultSelector?this._notifyResultSelector(e,t,n,r):this.destination.next(t)},t.prototype._notifyResultSelector=function(e,t,n,r){var o;try{o=this.resultSelector(e,t,n,r)}catch(e){return void this.destination.error(e)}this.destination.next(o)},t.prototype.notifyComplete=function(e){var t=this.buffer;this.remove(e),this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},t}(ir.OuterSubscriber),fr={mergeMap:ur,MergeMapOperator:cr,MergeMapSubscriber:lr},pr={identity:function(e){return e}},dr={mergeAll:function(e){return void 0===e&&(e=Number.POSITIVE_INFINITY),fr.mergeMap(pr.identity,null,e)}},hr=function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];var n=Number.POSITIVE_INFINITY,r=null,o=e[e.length-1];return Qn.isScheduler(o)?(r=e.pop(),e.length>1&&"number"==typeof e[e.length-1]&&(n=e.pop())):"number"==typeof o&&(n=e.pop()),null===r&&1===e.length&&e[0]instanceof Zn.Observable?e[0]:dr.mergeAll(n)(new Gn.ArrayObservable(e,r))},vr=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},yr={ObjectUnsubscribedError:function(e){function t(){var t=e.call(this,"object unsubscribed");this.name=t.name="ObjectUnsubscribedError",this.stack=t.stack,this.message=t.message}return vr(t,e),t}(Error)},br=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},gr={SubjectSubscription:function(e){function t(t,n){e.call(this),this.subject=t,this.subscriber=n,this.closed=!1}return br(t,e),t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e=this.subject,t=e.observers;if(this.subject=null,t&&0!==t.length&&!e.isStopped&&!e.closed){var n=t.indexOf(this.subscriber);-1!==n&&t.splice(n,1)}}},t}(Sn.Subscription)},_r=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},mr=function(e){function t(t){e.call(this,t),this.destination=t}return _r(t,e),t}(Fn.Subscriber),wr=mr,Cr=function(e){function t(){e.call(this),this.observers=[],this.closed=!1,this.isStopped=!1,this.hasError=!1,this.thrownError=null}return _r(t,e),t.prototype[Nn.rxSubscriber]=function(){return new mr(this)},t.prototype.lift=function(e){var t=new Or(this,this);return t.operator=e,t},t.prototype.next=function(e){if(this.closed)throw new yr.ObjectUnsubscribedError;if(!this.isStopped)for(var t=this.observers,n=t.length,r=t.slice(),o=0;o<n;o++)r[o].next(e)},t.prototype.error=function(e){if(this.closed)throw new yr.ObjectUnsubscribedError;this.hasError=!0,this.thrownError=e,this.isStopped=!0;for(var t=this.observers,n=t.length,r=t.slice(),o=0;o<n;o++)r[o].error(e);this.observers.length=0},t.prototype.complete=function(){if(this.closed)throw new yr.ObjectUnsubscribedError;this.isStopped=!0;for(var e=this.observers,t=e.length,n=e.slice(),r=0;r<t;r++)n[r].complete();this.observers.length=0},t.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},t.prototype._trySubscribe=function(t){if(this.closed)throw new yr.ObjectUnsubscribedError;return e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){if(this.closed)throw new yr.ObjectUnsubscribedError;return this.hasError?(e.error(this.thrownError),Sn.Subscription.EMPTY):this.isStopped?(e.complete(),Sn.Subscription.EMPTY):(this.observers.push(e),new gr.SubjectSubscription(this,e))},t.prototype.asObservable=function(){var e=new Zn.Observable;return e.source=this,e},t.create=function(e,t){return new Or(e,t)},t}(Zn.Observable),xr=Cr,Or=function(e){function t(t,n){e.call(this),this.destination=t,this.source=n}return _r(t,e),t.prototype.next=function(e){var t=this.destination;t&&t.next&&t.next(e)},t.prototype.error=function(e){var t=this.destination;t&&t.error&&this.destination.error(e)},t.prototype.complete=function(){var e=this.destination;e&&e.complete&&this.destination.complete()},t.prototype._subscribe=function(e){return this.source?this.source.subscribe(e):Sn.Subscription.EMPTY},t}(Cr),kr={SubjectSubscriber:wr,Subject:xr,AnonymousSubject:Or},Er=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},jr=function(){return function(e){return e.lift(new Ir(e))}},Ir=function(){function e(e){this.connectable=e}return e.prototype.call=function(e,t){var n=this.connectable;n._refCount++;var r=new Pr(e,n),o=t.subscribe(r);return r.closed||(r.connection=n.connect()),o},e}(),Pr=function(e){function t(t,n){e.call(this,t),this.connectable=n}return Er(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var n=this.connection,r=e._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},t}(Fn.Subscriber),Tr={refCount:jr},Sr=bn&&bn.__extends||function(e,t){function n(){this.constructor=e}for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)},Ar=function(e){function t(t,n){e.call(this),this.source=t,this.subjectFactory=n,this._refCount=0,this._isComplete=!1}return Sr(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype.connect=function(){var e=this._connection;return e||(this._isComplete=!1,(e=this._connection=new Sn.Subscription).add(this.source.subscribe(new Dr(this.getSubject(),this))),e.closed?(this._connection=null,e=Sn.Subscription.EMPTY):this._connection=e),e},t.prototype.refCount=function(){return Tr.refCount()(this)},t}(Zn.Observable),Nr=Ar,Rr=Ar.prototype,Vr={operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:Rr._subscribe},_isComplete:{value:Rr._isComplete,writable:!0},getSubject:{value:Rr.getSubject},connect:{value:Rr.connect},refCount:{value:Rr.refCount}},Dr=function(e){function t(t,n){e.call(this,t),this.connectable=n}return Sr(t,e),t.prototype._error=function(t){this._unsubscribe(),e.prototype._error.call(this,t)},t.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),e.prototype._complete.call(this)},t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._connection;e._refCount=0,e._subject=null,e._connection=null,t&&t.unsubscribe()}},t}(kr.SubjectSubscriber),Mr=(function(e){function t(t,n){e.call(this,t),this.connectable=n}Sr(t,e),t.prototype._unsubscribe=function(){var e=this.connectable;if(e){this.connectable=null;var t=e._refCount;if(t<=0)this.connection=null;else if(e._refCount=t-1,t>1)this.connection=null;else{var n=this.connection,r=e._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null}}(Fn.Subscriber),{ConnectableObservable:Nr,connectableObservableDescriptor:Vr}),Fr=function(e,t){return function(n){var r;if(r="function"==typeof e?e:function(){return e},"function"==typeof t)return n.lift(new Hr(r,t));var o=Object.create(n,Mr.connectableObservableDescriptor);return o.source=n,o.subjectFactory=r,o}},Hr=function(){function e(e,t){this.subjectFactory=e,this.selector=t}return e.prototype.call=function(e,t){var n=this.selector,r=this.subjectFactory(),o=n(r).subscribe(e);return o.add(t.subscribe(r)),o},e}(),Ur={multicast:Fr,MulticastOperator:Hr},zr={share:function(){return function(e){return Tr.refCount()(Ur.multicast(u)(e))}}},Lr=function(){return zr.share()(this)},Br=function(){function e(e){this._desc=e,this.ngMetadataName="InjectionToken"}return e.prototype.toString=function(){return"InjectionToken "+this._desc},e}(),Zr="__annotations__",Kr="__paramaters__",Yr="__prop__metadata__",Wr=(l("Attribute",function(e){return{attributeName:e}}),function(){return function(){}}()),qr=(f("ContentChildren",function(e,t){return void 0===t&&(t={}),yn({selector:e,first:!1,isViewQuery:!1,descendants:!1},t)},Wr),f("ContentChild",function(e,t){return void 0===t&&(t={}),yn({selector:e,first:!0,isViewQuery:!1,descendants:!0},t)},Wr),f("ViewChildren",function(e,t){return void 0===t&&(t={}),yn({selector:e,first:!1,isViewQuery:!0,descendants:!0},t)},Wr),f("ViewChild",function(e,t){return yn({selector:e,first:!0,isViewQuery:!0,descendants:!0},t)},Wr),{OnPush:0,Default:1});qr[qr.OnPush]="OnPush",qr[qr.Default]="Default";a("Component",function(e){return void 0===e&&(e={}),yn({changeDetection:qr.Default},e)},a("Directive",function(e){return void 0===e&&(e={}),e}));var Qr=a("Pipe",function(e){return yn({pure:!0},e)}),$r=(f("Input",function(e){return{bindingPropertyName:e}}),f("Output",function(e){return{bindingPropertyName:e}}),f("HostBinding",function(e){return{hostPropertyName:e}}),f("HostListener",function(e,t){return{eventName:e,args:t}}),a("NgModule",function(e){return e})),Gr={Emulated:0,Native:1,None:2};Gr[Gr.Emulated]="Emulated",Gr[Gr.Native]="Native",Gr[Gr.None]="None";var Jr,Xr,eo=new(function(){return function(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}())("5.1.1"),to=l("Inject",function(e){return{token:e}}),no=l("Optional"),ro=a("Injectable"),oo=l("Self"),io=l("SkipSelf"),so=(l("Host"),"undefined"!=typeof window&&window),uo="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,ao="undefined"!=typeof global&&global,co=so||ao||uo,lo=null,fo=new Object,po=fo,ho=function(){function e(){}return e.prototype.get=function(e,t){if(void 0===t&&(t=fo),t===fo)throw new Error("NullInjectorError: No provider for "+v(e)+"!");return t},e}(),vo=function(){function e(){}return e.create=function(e,t){return new jo(e,t)},e.THROW_IF_NOT_FOUND=fo,e.NULL=new ho,e}(),yo=function(e){return e},bo=[],go=yo,_o=function(){return Array.prototype.slice.call(arguments)},mo={},wo=mo,Co=function(e){for(var t in e)if(e[t]===mo)return t;throw Error("!prop")}({provide:String,useValue:wo}),xo="ngTempTokenPath",Oo=vo.NULL,ko=/\n/gm,Eo="ɵ",jo=function(){function e(e,t){void 0===t&&(t=Oo),this.parent=t;var n=this._records=new Map;n.set(vo,{token:vo,fn:yo,deps:bo,value:this,useNew:!1}),m(n,e)}return e.prototype.get=function(e,t){var n=this._records.get(e);try{return w(e,n,this._records,this.parent,t)}catch(e){var r=e[xo];throw e.message=C("\n"+e.message,r),e.ngTokenPath=r,e[xo]=null,e}},e.prototype.toString=function(){var e=[];return this._records.forEach(function(t,n){return e.push(v(n))}),"StaticInjector["+e.join(", ")+"]"},e}(),Io="ngDebugContext",Po="ngOriginalError",To="ngErrorLogger",So=function(){function e(){this._console=console}return e.prototype.handleError=function(e){var t=this._findOriginalError(e),n=this._findContext(e),r=function(e){return e[To]||function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e.error.apply(e,t)}}(e);r(this._console,"ERROR",e),t&&r(this._console,"ORIGINAL ERROR",t),n&&r(this._console,"ERROR CONTEXT",n)},e.prototype._findContext=function(e){return e?O(e)?O(e):this._findContext(k(e)):null},e.prototype._findOriginalError=function(e){for(var t=k(e);t&&k(t);)t=k(t);return t},e}(),Ao=function(){function e(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=v(this.token)}return e.get=function(e){return No.get(b(e))},Object.defineProperty(e,"numberOfKeys",{get:function(){return No.numberOfKeys},enumerable:!0,configurable:!0}),e}(),No=new(function(){function e(){this._allKeys=new Map}return e.prototype.get=function(e){if(e instanceof Ao)return e;if(this._allKeys.has(e))return this._allKeys.get(e);var t=new Ao(e,Ao.numberOfKeys);return this._allKeys.set(e,t),t},Object.defineProperty(e.prototype,"numberOfKeys",{get:function(){return this._allKeys.size},enumerable:!0,configurable:!0}),e}()),Ro=Function,Vo=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/,Do=function(){function e(e){this._reflect=e||co.Reflect}return e.prototype.isReflectionEnabled=function(){return!0},e.prototype.factory=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new(e.bind.apply(e,[void 0].concat(t)))}},e.prototype._zipTypesAndAnnotations=function(e,t){var n;n=void 0===e?new Array(t.length):new Array(e.length);for(var r=0;r<n.length;r++)void 0===e?n[r]=[]:e[r]!=Object?n[r]=[e[r]]:n[r]=[],t&&null!=t[r]&&(n[r]=n[r].concat(t[r]));return n},e.prototype._ownParameters=function(e,t){if(Vo.exec(e.toString()))return null;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;var n=e.ctorParameters;if(n&&n!==t.ctorParameters){var r="function"==typeof n?n():n,o=r.map(function(e){return e&&e.type}),i=r.map(function(e){return e&&A(e.decorators)});return this._zipTypesAndAnnotations(o,i)}var s=e.hasOwnProperty(Kr)&&e[Kr],u=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return u||s?this._zipTypesAndAnnotations(u,s):new Array(e.length).fill(void 0)},e.prototype.parameters=function(e){if(!S(e))return[];var t=N(e),n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]},e.prototype._ownAnnotations=function(e,t){if(e.annotations&&e.annotations!==t.annotations){var n=e.annotations;return"function"==typeof n&&n.annotations&&(n=n.annotations),n}return e.decorators&&e.decorators!==t.decorators?A(e.decorators):e.hasOwnProperty(Zr)?e[Zr]:null},e.prototype.annotations=function(e){if(!S(e))return[];var t=N(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)},e.prototype._ownPropMetadata=function(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){var n=e.propMetadata;return"function"==typeof n&&n.propMetadata&&(n=n.propMetadata),n}if(e.propDecorators&&e.propDecorators!==t.propDecorators){var r=e.propDecorators,o={};return Object.keys(r).forEach(function(e){o[e]=A(r[e])}),o}return e.hasOwnProperty(Yr)?e[Yr]:null},e.prototype.propMetadata=function(e){if(!S(e))return{};var t=N(e),n={};if(t!==Object){var r=this.propMetadata(t);Object.keys(r).forEach(function(e){n[e]=r[e]})}var o=this._ownPropMetadata(e,t);return o&&Object.keys(o).forEach(function(e){var t=[];n.hasOwnProperty(e)&&t.push.apply(t,n[e]),t.push.apply(t,o[e]),n[e]=t}),n},e.prototype.hasLifecycleHook=function(e,t){return e instanceof Ro&&t in e.prototype},e.prototype.getter=function(e){return new Function("o","return o."+e+";")},e.prototype.setter=function(e){return new Function("o","v","return o."+e+" = v;")},e.prototype.method=function(e){var t="if (!o."+e+") throw new Error('\""+e+"\" is undefined');\n        return o."+e+".apply(o, args);";return new Function("o","args",t)},e.prototype.importUri=function(e){return"object"==typeof e&&e.filePath?e.filePath:"./"+v(e)},e.prototype.resourceUri=function(e){return"./"+v(e)},e.prototype.resolveIdentifier=function(e,t,n,r){return r},e.prototype.resolveEnum=function(e,t){return e[t]},e}(),Mo=new(function(){function e(e){this.reflectionCapabilities=e}return e.prototype.updateCapabilities=function(e){this.reflectionCapabilities=e},e.prototype.factory=function(e){return this.reflectionCapabilities.factory(e)},e.prototype.parameters=function(e){return this.reflectionCapabilities.parameters(e)},e.prototype.annotations=function(e){return this.reflectionCapabilities.annotations(e)},e.prototype.propMetadata=function(e){return this.reflectionCapabilities.propMetadata(e)},e.prototype.hasLifecycleHook=function(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)},e.prototype.getter=function(e){return this.reflectionCapabilities.getter(e)},e.prototype.setter=function(e){return this.reflectionCapabilities.setter(e)},e.prototype.method=function(e){return this.reflectionCapabilities.method(e)},e.prototype.importUri=function(e){return this.reflectionCapabilities.importUri(e)},e.prototype.resourceUri=function(e){return this.reflectionCapabilities.resourceUri(e)},e.prototype.resolveIdentifier=function(e,t,n,r){return this.reflectionCapabilities.resolveIdentifier(e,t,n,r)},e.prototype.resolveEnum=function(e,t){return this.reflectionCapabilities.resolveEnum(e,t)},e}())(new Do),Fo=function(){function e(e,t,n){this.key=e,this.optional=t,this.visibility=n}return e.fromKey=function(t){return new e(t,!1,null)},e}(),Ho=[],Uo=function(){function e(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n}return Object.defineProperty(e.prototype,"resolvedFactory",{get:function(){return this.resolvedFactories[0]},enumerable:!0,configurable:!0}),e}(),zo=function(){return function(e,t){this.factory=e,this.dependencies=t}}(),Lo=new Object,Bo=function(){function e(){}return e.resolve=function(e){return D(e)},e.resolveAndCreate=function(t,n){var r=e.resolve(t);return e.fromResolvedProviders(r,n)},e.fromResolvedProviders=function(e,t){return new Zo(e,t)},e}(),Zo=function(){function e(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;var n=e.length;this.keyIds=new Array(n),this.objs=new Array(n);for(var r=0;r<n;r++)this.keyIds[r]=e[r].key.id,this.objs[r]=Lo}return e.prototype.get=function(e,t){return void 0===t&&(t=po),this._getByKey(Ao.get(e),null,t)},e.prototype.resolveAndCreateChild=function(e){var t=Bo.resolve(e);return this.createChildFromResolved(t)},e.prototype.createChildFromResolved=function(t){var n=new e(t);return n.parent=this,n},e.prototype.resolveAndInstantiate=function(e){return this.instantiateResolved(Bo.resolve([e])[0])},e.prototype.instantiateResolved=function(e){return this._instantiateProvider(e)},e.prototype.getProviderAtIndex=function(e){if(e<0||e>=this._providers.length)throw function(e){return Error("Index "+e+" is out-of-bounds.")}(e);return this._providers[e]},e.prototype._new=function(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw function(e,t){return j(e,t,function(e){return"Cannot instantiate cyclic dependency!"+E(e)})}(this,e.key);return this._instantiateProvider(e)},e.prototype._getMaxNumberOfObjects=function(){return this.objs.length},e.prototype._instantiateProvider=function(e){if(e.multiProvider){for(var t=new Array(e.resolvedFactories.length),n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])},e.prototype._instantiate=function(e,t){var n,r=this,o=t.factory;try{n=t.dependencies.map(function(e){return r._getByReflectiveDependency(e)})}catch(t){throw t.addKey&&t.addKey(this,e.key),t}var i;try{i=o.apply(void 0,n)}catch(t){throw function(e,t,n,r){return j(e,r,function(e){var n=v(e[0].token);return t.message+": Error during instantiation of "+n+"!"+E(e)+"."},t)}(this,t,t.stack,e.key)}return i},e.prototype._getByReflectiveDependency=function(e){return this._getByKey(e.key,e.visibility,e.optional?null:po)},e.prototype._getByKey=function(t,n,r){return t===e.INJECTOR_KEY?this:n instanceof oo?this._getByKeySelf(t,r):this._getByKeyDefault(t,r,n)},e.prototype._getObjByKeyId=function(e){for(var t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===Lo&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return Lo},e.prototype._throwOrNull=function(e,t){if(t!==po)return t;throw function(e,t){return j(e,t,function(e){return"No provider for "+v(e[0].token)+"!"+E(e)})}(this,e)},e.prototype._getByKeySelf=function(e,t){var n=this._getObjByKeyId(e.id);return n!==Lo?n:this._throwOrNull(e,t)},e.prototype._getByKeyDefault=function(t,n,r){var o;for(o=r instanceof io?this.parent:this;o instanceof e;){var i=o,s=i._getObjByKeyId(t.id);if(s!==Lo)return s;o=i.parent}return null!==o?o.get(t.token,n):this._throwOrNull(t,n)},Object.defineProperty(e.prototype,"displayName",{get:function(){return"ReflectiveInjector(providers: ["+function(e,t){for(var n=new Array(e._providers.length),r=0;r<e._providers.length;++r)n[r]=t(e.getProviderAtIndex(r));return n}(this,function(e){return' "'+e.key.displayName+'" '}).join(", ")+"])"},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.displayName},e.INJECTOR_KEY=Ao.get(vo),e}(),Ko=new Br("Application Initializer"),Yo=function(){function e(e){var t=this;this.appInits=e,this.initialized=!1,this.done=!1,this.donePromise=new Promise(function(e,n){t.resolve=e,t.reject=n})}return e.prototype.runInitializers=function(){var e=this;if(!this.initialized){var t=[],n=function(){e.done=!0,e.resolve()};if(this.appInits)for(var r=0;r<this.appInits.length;r++){var o=this.appInits[r]();z(o)&&t.push(o)}Promise.all(t).then(function(){n()}).catch(function(t){e.reject(t)}),0===t.length&&n(),this.initialized=!0}},e.decorators=[{type:ro}],e.ctorParameters=function(){return[{type:Array,decorators:[{type:to,args:[Ko]},{type:no}]}]},e}(),Wo={provide:new Br("AppId"),useFactory:function(){return""+L()+L()+L()},deps:[]},qo=new Br("appBootstrapListener"),Qo=function(){function e(){}return e.prototype.log=function(e){console.log(e)},e.prototype.warn=function(e){console.warn(e)},e.decorators=[{type:ro}],e.ctorParameters=function(){return[]},e}(),$o=function(){function e(){}return e.prototype.compileModuleSync=function(e){throw B()},e.prototype.compileModuleAsync=function(e){throw B()},e.prototype.compileModuleAndAllComponentsSync=function(e){throw B()},e.prototype.compileModuleAndAllComponentsAsync=function(e){throw B()},e.prototype.clearCache=function(){},e.prototype.clearCacheFor=function(e){},e.decorators=[{type:ro}],e.ctorParameters=function(){return[]},e}(),Go=function(){return function(){}}(),Jo=function(){return function(){}}(),Xo=function(){return function(){}}(),ei="ngComponent",ti=function(){function e(){}return e.prototype.resolveComponentFactory=function(e){throw function(e){var t=Error("No component factory found for "+v(e)+". Did you add it to @NgModule.entryComponents?");return t[ei]=e,t}(e)},e}(),ni=function(){function e(){}return e.NULL=new ti,e}(),ri=function(e){function n(t,n){var r=e.call(this)||this;return r.factory=t,r.ngModule=n,r}return t(n,e),Object.defineProperty(n.prototype,"selector",{get:function(){return this.factory.selector},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"componentType",{get:function(){return this.factory.componentType},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"ngContentSelectors",{get:function(){return this.factory.ngContentSelectors},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inputs",{get:function(){return this.factory.inputs},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"outputs",{get:function(){return this.factory.outputs},enumerable:!0,configurable:!0}),n.prototype.create=function(e,t,n,r){return this.factory.create(e,t,n,r||this.ngModule)},n}(Xo),oi=function(){return function(){}}(),ii=function(){return function(){}}(),si=function(){var e=co.wtf;return!(!e||!(Jr=e.trace)||(Xr=Jr.events,0))}(),ui=si?function(e,t){return void 0===t&&(t=null),Xr.createScope(e,t)}:function(e,t){return Z},ai=si?function(e,t){return Jr.leaveScope(e,t),t}:function(e,t){return t},ci=function(e){function n(t){void 0===t&&(t=!1);var n=e.call(this)||this;return n.__isAsync=t,n}return t(n,e),n.prototype.emit=function(t){e.prototype.next.call(this,t)},n.prototype.subscribe=function(t,n,r){var o,i=function(e){return null},s=function(){return null};return t&&"object"==typeof t?(o=this.__isAsync?function(e){setTimeout(function(){return t.next(e)})}:function(e){t.next(e)},t.error&&(i=this.__isAsync?function(e){setTimeout(function(){return t.error(e)})}:function(e){t.error(e)}),t.complete&&(s=this.__isAsync?function(){setTimeout(function(){return t.complete()})}:function(){t.complete()})):(o=this.__isAsync?function(e){setTimeout(function(){return t(e)})}:function(e){t(e)},n&&(i=this.__isAsync?function(e){setTimeout(function(){return n(e)})}:function(e){n(e)}),r&&(s=this.__isAsync?function(){setTimeout(function(){return r()})}:function(){r()})),e.prototype.subscribe.call(this,o,i,s)},n}(xr),li=function(){function e(e){var t=e.enableLongStackTrace,n=void 0!==t&&t;if(this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new ci(!1),this.onMicrotaskEmpty=new ci(!1),this.onStable=new ci(!1),this.onError=new ci(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();this._nesting=0,this._outer=this._inner=Zone.current,Zone.wtfZoneSpec&&(this._inner=this._inner.fork(Zone.wtfZoneSpec)),n&&Zone.longStackTraceZoneSpec&&(this._inner=this._inner.fork(Zone.longStackTraceZoneSpec)),function(e){e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:function(t,n,r,o,i,s){try{return W(e),t.invokeTask(r,o,i,s)}finally{q(e)}},onInvoke:function(t,n,r,o,i,s,u){try{return W(e),t.invoke(r,o,i,s,u)}finally{q(e)}},onHasTask:function(t,n,r,o){t.hasTask(r,o),n===r&&("microTask"==o.change?(e.hasPendingMicrotasks=o.microTask,Y(e)):"macroTask"==o.change&&(e.hasPendingMacrotasks=o.macroTask))},onHandleError:function(t,n,r,o){return t.handleError(r,o),e.runOutsideAngular(function(){return e.onError.emit(o)}),!1}})}(this)}return e.isInAngularZone=function(){return!0===Zone.current.get("isAngularZone")},e.assertInAngularZone=function(){if(!e.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")},e.assertNotInAngularZone=function(){if(e.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")},e.prototype.run=function(e,t,n){return this._inner.run(e,t,n)},e.prototype.runTask=function(e,t,n,r){var o=this._inner,i=o.scheduleEventTask("NgZoneEvent: "+r,e,fi,K,K);try{return o.runTask(i,t,n)}finally{o.cancelTask(i)}},e.prototype.runGuarded=function(e,t,n){return this._inner.runGuarded(e,t,n)},e.prototype.runOutsideAngular=function(e){return this._outer.run(e)},e}(),fi={},pi=function(){function e(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new ci,this.onMicrotaskEmpty=new ci,this.onStable=new ci,this.onError=new ci}return e.prototype.run=function(e){return e()},e.prototype.runGuarded=function(e){return e()},e.prototype.runOutsideAngular=function(e){return e()},e.prototype.runTask=function(e){return e()},e}(),di=function(){function e(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this._watchAngularEvents()}return e.prototype._watchAngularEvents=function(){var e=this;this._ngZone.onUnstable.subscribe({next:function(){e._didWork=!0,e._isZoneStable=!1}}),this._ngZone.runOutsideAngular(function(){e._ngZone.onStable.subscribe({next:function(){li.assertNotInAngularZone(),d(function(){e._isZoneStable=!0,e._runCallbacksIfReady()})}})})},e.prototype.increasePendingRequestCount=function(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount},e.prototype.decreasePendingRequestCount=function(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount},e.prototype.isStable=function(){return this._isZoneStable&&0==this._pendingCount&&!this._ngZone.hasPendingMacrotasks},e.prototype._runCallbacksIfReady=function(){var e=this;this.isStable()?d(function(){for(;0!==e._callbacks.length;)e._callbacks.pop()(e._didWork);e._didWork=!1}):this._didWork=!0},e.prototype.whenStable=function(e){this._callbacks.push(e),this._runCallbacksIfReady()},e.prototype.getPendingRequestCount=function(){return this._pendingCount},e.prototype.findProviders=function(e,t,n){return[]},e.decorators=[{type:ro}],e.ctorParameters=function(){return[{type:li}]},e}(),hi=function(){function e(){this._applications=new Map,vi.addToWindow(this)}return e.prototype.registerApplication=function(e,t){this._applications.set(e,t)},e.prototype.unregisterApplication=function(e){this._applications.delete(e)},e.prototype.unregisterAllApplications=function(){this._applications.clear()},e.prototype.getTestability=function(e){return this._applications.get(e)||null},e.prototype.getAllTestabilities=function(){return Array.from(this._applications.values())},e.prototype.getAllRootElements=function(){return Array.from(this._applications.keys())},e.prototype.findTestabilityInTree=function(e,t){return void 0===t&&(t=!0),vi.findTestabilityInTree(this,e,t)},e.decorators=[{type:ro}],e.ctorParameters=function(){return[]},e}(),vi=new(function(){function e(){}return e.prototype.addToWindow=function(e){},e.prototype.findTestabilityInTree=function(e,t,n){return null},e}()),yi=!0,bi=(function(){function e(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}e.prototype.bootstrapModuleFactory=function(e,t){var n=this,r=function(e){return"noop"===e?new pi:("zone.js"===e?void 0:e)||new li({enableLongStackTrace:Q()})}(t?t.ngZone:void 0);return r.run(function(){var t=vo.create([{provide:li,useValue:r}],n.injector),o=e.create(t),i=o.injector.get(So,null);if(!i)throw new Error("No ErrorHandler. Is platform module (BrowserModule) included?");return o.onDestroy(function(){return G(n._modules,o)}),r.runOutsideAngular(function(){return r.onError.subscribe({next:function(e){i.handleError(e)}})}),function(e,t,n){try{var r=n();return z(r)?r.catch(function(n){throw t.runOutsideAngular(function(){return e.handleError(n)}),n}):r}catch(n){throw t.runOutsideAngular(function(){return e.handleError(n)}),n}}(i,r,function(){var e=o.injector.get(Yo);return e.runInitializers(),e.donePromise.then(function(){return n._moduleDoBootstrap(o),o})})})},e.prototype.bootstrapModule=function(e,t){var n=this;void 0===t&&(t=[]);var r=this.injector.get(Go),o=$({},t);return r.createCompiler([o]).compileModuleAsync(e).then(function(e){return n.bootstrapModuleFactory(e,o)})},e.prototype._moduleDoBootstrap=function(e){var t=e.injector.get(bi);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach(function(e){return t.bootstrap(e)});else{if(!e.instance.ngDoBootstrap)throw new Error("The module "+v(e.instance.constructor)+' was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.');e.instance.ngDoBootstrap(t)}this._modules.push(e)},e.prototype.onDestroy=function(e){this._destroyListeners.push(e)},Object.defineProperty(e.prototype,"injector",{get:function(){return this._injector},enumerable:!0,configurable:!0}),e.prototype.destroy=function(){if(this._destroyed)throw new Error("The platform has already been destroyed!");this._modules.slice().forEach(function(e){return e.destroy()}),this._destroyListeners.forEach(function(e){return e()}),this._destroyed=!0},Object.defineProperty(e.prototype,"destroyed",{get:function(){return this._destroyed},enumerable:!0,configurable:!0}),e.decorators=[{type:ro}],e.ctorParameters=function(){return[{type:vo}]}}(),function(){function e(e,t,n,r,o,i){var s=this;this._zone=e,this._console=t,this._injector=n,this._exceptionHandler=r,this._componentFactoryResolver=o,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._enforceNoNewChanges=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._enforceNoNewChanges=Q(),this._zone.onMicrotaskEmpty.subscribe({next:function(){s._zone.run(function(){s.tick()})}});var u=new Bn(function(e){s._stable=s._zone.isStable&&!s._zone.hasPendingMacrotasks&&!s._zone.hasPendingMicrotasks,s._zone.runOutsideAngular(function(){e.next(s._stable),e.complete()})}),a=new Bn(function(e){var t;s._zone.runOutsideAngular(function(){t=s._zone.onStable.subscribe(function(){li.assertNotInAngularZone(),d(function(){s._stable||s._zone.hasPendingMacrotasks||s._zone.hasPendingMicrotasks||(s._stable=!0,e.next(!0))})})});var n=s._zone.onUnstable.subscribe(function(){li.assertInAngularZone(),s._stable&&(s._stable=!1,s._zone.runOutsideAngular(function(){e.next(!1)}))});return function(){t.unsubscribe(),n.unsubscribe()}});this.isStable=hr(u,Lr.call(a))}return e.prototype.bootstrap=function(e,t){var n=this;if(!this._initStatus.done)throw new Error("Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.");var r;r=e instanceof Xo?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(r.componentType);var o=r instanceof ri?null:this._injector.get(oi),i=t||r.selector,s=r.create(vo.NULL,[],i,o);s.onDestroy(function(){n._unloadComponent(s)});var u=s.injector.get(di,null);return u&&s.injector.get(hi).registerApplication(s.location.nativeElement,u),this._loadComponent(s),Q()&&this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode."),s},e.prototype.tick=function(){var t=this;if(this._runningTick)throw new Error("ApplicationRef.tick is called recursively");var n=e._tickScope();try{this._runningTick=!0,this._views.forEach(function(e){return e.detectChanges()}),this._enforceNoNewChanges&&this._views.forEach(function(e){return e.checkNoChanges()})}catch(e){this._zone.runOutsideAngular(function(){return t._exceptionHandler.handleError(e)})}finally{this._runningTick=!1,ai(n)}},e.prototype.attachView=function(e){var t=e;this._views.push(t),t.attachToAppRef(this)},e.prototype.detachView=function(e){var t=e;G(this._views,t),t.detachFromAppRef()},e.prototype._loadComponent=function(e){this.attachView(e.hostView),this.tick(),this.components.push(e);this._injector.get(qo,[]).concat(this._bootstrapListeners).forEach(function(t){return t(e)})},e.prototype._unloadComponent=function(e){this.detachView(e.hostView),G(this.components,e)},e.prototype.ngOnDestroy=function(){this._views.slice().forEach(function(e){return e.destroy()})},Object.defineProperty(e.prototype,"viewCount",{get:function(){return this._views.length},enumerable:!0,configurable:!0}),e._tickScope=ui("ApplicationRef#tick()"),e.decorators=[{type:ro}],e.ctorParameters=function(){return[{type:li},{type:Qo},{type:vo},{type:So},{type:ni},{type:Yo}]},e}()),gi=function(){return function(){}}(),_i=function(){return function(){}}(),mi=function(){return function(){}}(),wi=function(){return function(e){this.nativeElement=e}}(),Ci=function(){function e(){this.dirty=!0,this._results=[],this.changes=new ci}return Object.defineProperty(e.prototype,"length",{get:function(){return this._results.length},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"first",{get:function(){return this._results[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"last",{get:function(){return this._results[this.length-1]},enumerable:!0,configurable:!0}),e.prototype.map=function(e){return this._results.map(e)},e.prototype.filter=function(e){return this._results.filter(e)},e.prototype.find=function(e){return this._results.find(e)},e.prototype.reduce=function(e,t){return this._results.reduce(e,t)},e.prototype.forEach=function(e){this._results.forEach(e)},e.prototype.some=function(e){return this._results.some(e)},e.prototype.toArray=function(){return this._results.slice()},e.prototype[p()]=function(){return this._results[p()]()},e.prototype.toString=function(){return this._results.toString()},e.prototype.reset=function(e){this._results=J(e),this.dirty=!1},e.prototype.notifyOnChanges=function(){this.changes.emit(this)},e.prototype.setDirty=function(){this.dirty=!0},e.prototype.destroy=function(){this.changes.complete(),this.changes.unsubscribe()},e}(),xi=function(){return function(){}}(),Oi=function(){return function(){}}(),ki=function(){return function(){}}(),Ei=(function(e){function n(){return null!==e&&e.apply(this,arguments)||this}t(n,e)}(function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return t(n,e),n}(ki)),function(){return function(e,t){this.name=e,this.callback=t}}()),ji=function(){function e(e,t,n){this._debugContext=n,this.nativeNode=e,t&&t instanceof Ii?t.addChild(this):this.parent=null,this.listeners=[]}return Object.defineProperty(e.prototype,"injector",{get:function(){return this._debugContext.injector},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"componentInstance",{get:function(){return this._debugContext.component},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"context",{get:function(){return this._debugContext.context},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"references",{get:function(){return this._debugContext.references},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"providerTokens",{get:function(){return this._debugContext.providerTokens},enumerable:!0,configurable:!0}),e}(),Ii=function(e){function n(t,n,r){var o=e.call(this,t,n,r)||this;return o.properties={},o.attributes={},o.classes={},o.styles={},o.childNodes=[],o.nativeElement=t,o}return t(n,e),n.prototype.addChild=function(e){e&&(this.childNodes.push(e),e.parent=this)},n.prototype.removeChild=function(e){var t=this.childNodes.indexOf(e);-1!==t&&(e.parent=null,this.childNodes.splice(t,1))},n.prototype.insertChildrenAfter=function(e,t){var n=this,r=this.childNodes.indexOf(e);-1!==r&&((o=this.childNodes).splice.apply(o,[r+1,0].concat(t)),t.forEach(function(e){e.parent&&e.parent.removeChild(e),e.parent=n}));var o},n.prototype.insertBefore=function(e,t){var n=this.childNodes.indexOf(e);-1===n?this.addChild(t):(t.parent&&t.parent.removeChild(t),t.parent=this,this.childNodes.splice(n,0,t))},n.prototype.query=function(e){return this.queryAll(e)[0]||null},n.prototype.queryAll=function(e){var t=[];return X(this,e,t),t},n.prototype.queryAllNodes=function(e){var t=[];return ee(this,e,t),t},Object.defineProperty(n.prototype,"children",{get:function(){return this.childNodes.filter(function(e){return e instanceof n})},enumerable:!0,configurable:!0}),n.prototype.triggerEventHandler=function(e,t){this.listeners.forEach(function(n){n.name==e&&n.callback(t)})},n}(ji),Pi=new Map,Ti=function(){function e(e){this.wrapped=e}return e.wrap=function(t){return new e(t)},e}(),Si=function(){function e(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}return e.prototype.isFirstChange=function(){return this.firstChange},e}(),Ai=function(){function e(){}return e.prototype.supports=function(e){return oe(e)},e.prototype.create=function(e){return new Ri(e)},e}(),Ni=function(e,t){return t},Ri=function(){function e(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Ni}return e.prototype.forEachItem=function(e){var t;for(t=this._itHead;null!==t;t=t._next)e(t)},e.prototype.forEachOperation=function(e){for(var t=this._itHead,n=this._removalsHead,r=0,o=null;t||n;){var i=!n||t&&t.currentIndex<se(n,r,o)?t:n,s=se(i,r,o),u=i.currentIndex;if(i===n)r--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)r++;else{o||(o=[]);var a=s-r,c=u-r;if(a!=c){for(var l=0;l<a;l++){var f=l<o.length?o[l]:o[l]=0,p=f+l;c<=p&&p<a&&(o[l]=f+1)}o[i.previousIndex]=c-a}}s!==u&&e(i,s,u)}},e.prototype.forEachPreviousItem=function(e){var t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)},e.prototype.forEachAddedItem=function(e){var t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)},e.prototype.forEachMovedItem=function(e){var t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)},e.prototype.forEachRemovedItem=function(e){var t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)},e.prototype.forEachIdentityChange=function(e){var t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)},e.prototype.diff=function(e){if(null==e&&(e=[]),!oe(e))throw new Error("Error trying to diff '"+v(e)+"'. Only arrays and iterables are allowed");return this.check(e)?this:null},e.prototype.onDestroy=function(){},e.prototype.check=function(e){var t=this;this._reset();var n,r,o,i=this._itHead,s=!1;if(Array.isArray(e)){this.length=e.length;for(var u=0;u<this.length;u++)r=e[u],o=this._trackByFn(u,r),null!==i&&h(i.trackById,o)?(s&&(i=this._verifyReinsertion(i,r,o,u)),h(i.item,r)||this._addIdentityChange(i,r)):(i=this._mismatch(i,r,o,u),s=!0),i=i._next}else n=0,function(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++)t(e[n]);else for(var r=e[p()](),o=void 0;!(o=r.next()).done;)t(o.value)}(e,function(e){o=t._trackByFn(n,e),null!==i&&h(i.trackById,o)?(s&&(i=t._verifyReinsertion(i,e,o,n)),h(i.item,e)||t._addIdentityChange(i,e)):(i=t._mismatch(i,e,o,n),s=!0),i=i._next,n++}),this.length=n;return this._truncate(i),this.collection=e,this.isDirty},Object.defineProperty(e.prototype,"isDirty",{get:function(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead},enumerable:!0,configurable:!0}),e.prototype._reset=function(){if(this.isDirty){var e=void 0,t=void 0;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=t)e.previousIndex=e.currentIndex,t=e._nextMoved;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}},e.prototype._mismatch=function(e,t,n,r){var o;return null===e?o=this._itTail:(o=e._prev,this._remove(e)),null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(h(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,o,r)):null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(h(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,o,r)):e=this._addAfter(new Vi(t,n),o,r),e},e.prototype._verifyReinsertion=function(e,t,n,r){var o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?e=this._reinsertAfter(o,e._prev,r):e.currentIndex!=r&&(e.currentIndex=r,this._addToMoves(e,r)),e},e.prototype._truncate=function(e){for(;null!==e;){var t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)},e.prototype._reinsertAfter=function(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);var r=e._prevRemoved,o=e._nextRemoved;return null===r?this._removalsHead=o:r._nextRemoved=o,null===o?this._removalsTail=r:o._prevRemoved=r,this._insertAfter(e,t,n),this._addToMoves(e,n),e},e.prototype._moveAfter=function(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e},e.prototype._addAfter=function(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e},e.prototype._insertAfter=function(e,t,n){var r=null===t?this._itHead:t._next;return e._next=r,e._prev=t,null===r?this._itTail=e:r._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Mi),this._linkedRecords.put(e),e.currentIndex=n,e},e.prototype._remove=function(e){return this._addToRemovals(this._unlink(e))},e.prototype._unlink=function(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);var t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e},e.prototype._addToMoves=function(e,t){return e.previousIndex===t?e:(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e,e)},e.prototype._addToRemovals=function(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Mi),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e},e.prototype._addIdentityChange=function(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e},e}(),Vi=function(){return function(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}(),Di=function(){function e(){this._head=null,this._tail=null}return e.prototype.add=function(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)},e.prototype.get=function(e,t){var n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&h(n.trackById,e))return n;return null},e.prototype.remove=function(e){var t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head},e}(),Mi=function(){function e(){this.map=new Map}return e.prototype.put=function(e){var t=e.trackById,n=this.map.get(t);n||(n=new Di,this.map.set(t,n)),n.add(e)},e.prototype.get=function(e,t){var n=e,r=this.map.get(n);return r?r.get(e,t):null},e.prototype.remove=function(e){var t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e},Object.defineProperty(e.prototype,"isEmpty",{get:function(){return 0===this.map.size},enumerable:!0,configurable:!0}),e.prototype.clear=function(){this.map.clear()},e}(),Fi=function(){function e(){}return e.prototype.supports=function(e){return e instanceof Map||ie(e)},e.prototype.create=function(){return new Hi},e}(),Hi=function(){function e(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}return Object.defineProperty(e.prototype,"isDirty",{get:function(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead},enumerable:!0,configurable:!0}),e.prototype.forEachItem=function(e){var t;for(t=this._mapHead;null!==t;t=t._next)e(t)},e.prototype.forEachPreviousItem=function(e){var t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)},e.prototype.forEachChangedItem=function(e){var t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)},e.prototype.forEachAddedItem=function(e){var t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)},e.prototype.forEachRemovedItem=function(e){var t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)},e.prototype.diff=function(e){if(e){if(!(e instanceof Map||ie(e)))throw new Error("Error trying to diff '"+v(e)+"'. Only maps and objects are allowed")}else e=new Map;return this.check(e)?this:null},e.prototype.onDestroy=function(){},e.prototype.check=function(e){var t=this;this._reset();var n=this._mapHead;if(this._appendAfter=null,this._forEach(e,function(e,r){if(n&&n.key===r)t._maybeAddToChanges(n,e),t._appendAfter=n,n=n._next;else{var o=t._getOrCreateRecordForKey(r,e);n=t._insertBeforeOrAppend(n,o)}}),n){n._prev&&(n._prev._next=null),this._removalsHead=n;for(var r=n;null!==r;r=r._nextRemoved)r===this._mapHead&&(this._mapHead=null),this._records.delete(r.key),r._nextRemoved=r._next,r.previousValue=r.currentValue,r.currentValue=null,r._prev=null,r._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty},e.prototype._insertBeforeOrAppend=function(e,t){if(e){var n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null},e.prototype._getOrCreateRecordForKey=function(e,t){if(this._records.has(e)){var n=this._records.get(e);this._maybeAddToChanges(n,t);var r=n._prev,o=n._next;return r&&(r._next=o),o&&(o._prev=r),n._next=null,n._prev=null,n}var i=new Ui(e);return this._records.set(e,i),i.currentValue=t,this._addToAdditions(i),i},e.prototype._reset=function(){if(this.isDirty){var e=void 0;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}},e.prototype._maybeAddToChanges=function(e,t){h(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))},e.prototype._addToAdditions=function(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)},e.prototype._addToChanges=function(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)},e.prototype._forEach=function(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach(function(n){return t(e[n],n)})},e}(),Ui=function(){return function(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}(),zi=function(){function e(e){this.factories=e}return e.create=function(t,n){if(null!=n){var r=n.factories.slice();return t=t.concat(r),new e(t)}return new e(t)},e.extend=function(t){return{provide:e,useFactory:function(n){if(!n)throw new Error("Cannot extend IterableDiffers without a parent injector");return e.create(t,n)},deps:[[e,new io,new no]]}},e.prototype.find=function(e){var t=this.factories.find(function(t){return t.supports(e)});if(null!=t)return t;throw new Error("Cannot find a differ supporting object '"+e+"' of type '"+function(e){return e.name||typeof e}(e)+"'")},e}(),Li=function(){function e(e){this.factories=e}return e.create=function(t,n){if(n){var r=n.factories.slice();t=t.concat(r)}return new e(t)},e.extend=function(t){return{provide:e,useFactory:function(n){if(!n)throw new Error("Cannot extend KeyValueDiffers without a parent injector");return e.create(t,n)},deps:[[e,new io,new no]]}},e.prototype.find=function(e){var t=this.factories.find(function(t){return t.supports(e)});if(t)return t;throw new Error("Cannot find a differ supporting object '"+e+"'")},e}(),Bi=[new Fi],Zi=[new Ai],Ki=new zi(Zi),Yi=new Li(Bi),Wi=new Br("LocaleId"),qi=(function(){function e(e){}e.decorators=[{type:$r,args:[{providers:[bi,Yo,$o,Wo,{provide:zi,useFactory:ue},{provide:Li,useFactory:ae},{provide:Wi,useFactory:ce,deps:[[new to(Wi),new no,new io]]}]}]}],e.ctorParameters=function(){return[{type:bi}]}}(),{NONE:0,HTML:1,STYLE:2,SCRIPT:3,URL:4,RESOURCE_URL:5});qi[qi.NONE]="NONE",qi[qi.HTML]="HTML",qi[qi.STYLE]="STYLE",qi[qi.SCRIPT]="SCRIPT",qi[qi.URL]="URL",qi[qi.RESOURCE_URL]="RESOURCE_URL";var Qi=function(){return function(){}}(),$i={setCurrentNode:void 0,createRootView:void 0,createEmbeddedView:void 0,createComponentView:void 0,createNgModuleRef:void 0,overrideProvider:void 0,overrideComponentView:void 0,clearOverrides:void 0,checkAndUpdateView:void 0,checkNoChangesView:void 0,destroyView:void 0,resolveDep:void 0,createDebugContext:void 0,handleEvent:void 0,updateDirectives:void 0,updateRenderer:void 0,dirtyParentQueries:void 0},Gi=function(){},Ji=new Map,Xi=new WeakMap,es=/^:([^:]+):(.+)$/,ts=new Object,ns=me(vo),rs=me(oi),os=new Object,is=(function(e){function n(t,n,r,o,i,s){var u=e.call(this)||this;return u.selector=t,u.componentType=n,u._inputs=o,u._outputs=i,u.ngContentSelectors=s,u.viewDefFactory=r,u}t(n,e),Object.defineProperty(n.prototype,"inputs",{get:function(){var e=[],t=this._inputs;for(var n in t){var r=t[n];e.push({propName:n,templateName:r})}return e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"outputs",{get:function(){var e=[];for(var t in this._outputs){var n=this._outputs[t];e.push({propName:t,templateName:n})}return e},enumerable:!0,configurable:!0}),n.prototype.create=function(e,t,n,r){if(!r)throw new Error("ngModule should be provided");var o=Ve(this.viewDefFactory),i=o.nodes[0].element.componentProvider.nodeIndex,s=$i.createRootView(e,t||[],n,o,r,os),u=he(s,i).instance;return n&&s.renderer.setAttribute(de(s,0).renderElement,"ng-version",eo.full),new is(s,new us(s),u)}}(Xo),function(e){function n(t,n,r){var o=e.call(this)||this;return o._view=t,o._viewRef=n,o._component=r,o._elDef=o._view.def.nodes[0],o.hostView=n,o.changeDetectorRef=n,o.instance=r,o}return t(n,e),Object.defineProperty(n.prototype,"location",{get:function(){return new wi(de(this._view,this._elDef.nodeIndex).renderElement)},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"injector",{get:function(){return new cs(this._view,this._elDef)},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"componentType",{get:function(){return this._component.constructor},enumerable:!0,configurable:!0}),n.prototype.destroy=function(){this._viewRef.destroy()},n.prototype.onDestroy=function(e){this._viewRef.onDestroy(e)},n}(Jo)),ss=function(){function e(e,t,n){this._view=e,this._elDef=t,this._data=n,this._embeddedViews=[]}return Object.defineProperty(e.prototype,"element",{get:function(){return new wi(this._data.renderElement)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"injector",{get:function(){return new cs(this._view,this._elDef)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parentInjector",{get:function(){for(var e=this._view,t=this._elDef.parent;!t&&e;)t=Ie(e),e=e.parent;return e?new cs(e,t):new cs(this._view,null)},enumerable:!0,configurable:!0}),e.prototype.clear=function(){for(var e=this._embeddedViews.length-1;e>=0;e--){var t=qe(this._data,e);$i.destroyView(t)}},e.prototype.get=function(e){var t=this._embeddedViews[e];if(t){var n=new us(t);return n.attachToViewContainerRef(this),n}return null},Object.defineProperty(e.prototype,"length",{get:function(){return this._embeddedViews.length},enumerable:!0,configurable:!0}),e.prototype.createEmbeddedView=function(e,t,n){var r=e.createEmbeddedView(t||{});return this.insert(r,n),r},e.prototype.createComponent=function(e,t,n,r,o){var i=n||this.parentInjector;o||e instanceof ri||(o=i.get(oi));var s=e.create(i,r,void 0,o);return this.insert(s.hostView,t),s},e.prototype.insert=function(e,t){if(e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");var n=e,r=n._view;return We(this._view,this._data,t,r),n.attachToViewContainerRef(this),e},e.prototype.move=function(e,t){if(e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");var n=this._embeddedViews.indexOf(e._view);return function(e,t,n){var r=e.viewContainer._embeddedViews,o=r[t];Je(r,t),null==n&&(n=r.length),Ge(r,n,o),$i.dirtyParentQueries(o),$e(o),Qe(e,n>0?r[n-1]:null,o)}(this._data,n,t),e},e.prototype.indexOf=function(e){return this._embeddedViews.indexOf(e._view)},e.prototype.remove=function(e){var t=qe(this._data,e);t&&$i.destroyView(t)},e.prototype.detach=function(e){var t=qe(this._data,e);return t?new us(t):null},e}(),us=function(){function e(e){this._view=e,this._viewContainerRef=null,this._appRef=null}return Object.defineProperty(e.prototype,"rootNodes",{get:function(){return function(e){var t=[];return De(e,0,void 0,void 0,t),t}(this._view)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"context",{get:function(){return this._view.context},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"destroyed",{get:function(){return 0!=(128&this._view.state)},enumerable:!0,configurable:!0}),e.prototype.markForCheck=function(){Oe(this._view)},e.prototype.detach=function(){this._view.state&=-5},e.prototype.detectChanges=function(){var e=this._view.root.rendererFactory;e.begin&&e.begin();try{$i.checkAndUpdateView(this._view)}finally{e.end&&e.end()}},e.prototype.checkNoChanges=function(){$i.checkNoChangesView(this._view)},e.prototype.reattach=function(){this._view.state|=4},e.prototype.onDestroy=function(e){this._view.disposables||(this._view.disposables=[]),this._view.disposables.push(e)},e.prototype.destroy=function(){this._appRef?this._appRef.detachView(this):this._viewContainerRef&&this._viewContainerRef.detach(this._viewContainerRef.indexOf(this)),$i.destroyView(this._view)},e.prototype.detachFromAppRef=function(){this._appRef=null,$e(this._view),$i.dirtyParentQueries(this._view)},e.prototype.attachToAppRef=function(e){if(this._viewContainerRef)throw new Error("This view is already attached to a ViewContainer!");this._appRef=e},e.prototype.attachToViewContainerRef=function(e){if(this._appRef)throw new Error("This view is already attached directly to the ApplicationRef!");this._viewContainerRef=e},e}(),as=function(e){function n(t,n){var r=e.call(this)||this;return r._parentView=t,r._def=n,r}return t(n,e),n.prototype.createEmbeddedView=function(e){return new us($i.createEmbeddedView(this._parentView,this._def,this._def.element.template,e))},Object.defineProperty(n.prototype,"elementRef",{get:function(){return new wi(de(this._parentView,this._def.nodeIndex).renderElement)},enumerable:!0,configurable:!0}),n}(xi),cs=function(){function e(e,t){this.view=e,this.elDef=t}return e.prototype.get=function(e,t){void 0===t&&(t=vo.THROW_IF_NOT_FOUND);var n=!!this.elDef&&0!=(33554432&this.elDef.flags);return $i.resolveDep(this.view,this.elDef,n,{flags:0,token:e,tokenKey:me(e)},t)},e}(),ls=function(){function e(e){this.delegate=e}return e.prototype.selectRootElement=function(e){return this.delegate.selectRootElement(e)},e.prototype.createElement=function(e,t){var n=ze(t),r=n[0],o=n[1],i=this.delegate.createElement(o,r);return e&&this.delegate.appendChild(e,i),i},e.prototype.createViewRoot=function(e){return e},e.prototype.createTemplateAnchor=function(e){var t=this.delegate.createComment("");return e&&this.delegate.appendChild(e,t),t},e.prototype.createText=function(e,t){var n=this.delegate.createText(t);return e&&this.delegate.appendChild(e,n),n},e.prototype.projectNodes=function(e,t){for(var n=0;n<t.length;n++)this.delegate.appendChild(e,t[n])},e.prototype.attachViewAfter=function(e,t){for(var n=this.delegate.parentNode(e),r=this.delegate.nextSibling(e),o=0;o<t.length;o++)this.delegate.insertBefore(n,t[o],r)},e.prototype.detachView=function(e){for(var t=0;t<e.length;t++){var n=e[t],r=this.delegate.parentNode(n);this.delegate.removeChild(r,n)}},e.prototype.destroyView=function(e,t){for(var n=0;n<t.length;n++)this.delegate.destroyNode(t[n])},e.prototype.listen=function(e,t,n){return this.delegate.listen(e,t,n)},e.prototype.listenGlobal=function(e,t,n){return this.delegate.listen(e,t,n)},e.prototype.setElementProperty=function(e,t,n){this.delegate.setProperty(e,t,n)},e.prototype.setElementAttribute=function(e,t,n){var r=ze(t),o=r[0],i=r[1];null!=n?this.delegate.setAttribute(e,i,n,o):this.delegate.removeAttribute(e,i,o)},e.prototype.setBindingDebugInfo=function(e,t,n){},e.prototype.setElementClass=function(e,t,n){n?this.delegate.addClass(e,t):this.delegate.removeClass(e,t)},e.prototype.setElementStyle=function(e,t,n){null!=n?this.delegate.setStyle(e,t,n):this.delegate.removeStyle(e,t)},e.prototype.invokeElementMethod=function(e,t,n){e[t].apply(e,n)},e.prototype.setText=function(e,t){this.delegate.setValue(e,t)},e.prototype.animate=function(){throw new Error("Renderer.animate is no longer supported!")},e}(),fs=function(){function e(e,t,n,r){this._moduleType=e,this._parent=t,this._bootstrapComponents=n,this._def=r,this._destroyListeners=[],this._destroyed=!1,function(e){for(var t=e._def,n=e._providers=new Array(t.providers.length),r=0;r<t.providers.length;r++){var o=t.providers[r];4096&o.flags||(n[r]=Ye(e,o))}}(this)}return e.prototype.get=function(e,t){return void 0===t&&(t=vo.THROW_IF_NOT_FOUND),Ke(this,{token:e,tokenKey:me(e),flags:0},t)},Object.defineProperty(e.prototype,"instance",{get:function(){return this.get(this._moduleType)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"componentFactoryResolver",{get:function(){return this.get(ni)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"injector",{get:function(){return this},enumerable:!0,configurable:!0}),e.prototype.destroy=function(){if(this._destroyed)throw new Error("The ng module "+v(this.instance.constructor)+" has already been destroyed.");this._destroyed=!0,function(e,t){for(var n=e._def,r=0;r<n.providers.length;r++)if(131072&n.providers[r].flags){var o=e._providers[r];o&&o!==ts&&o.ngOnDestroy()}}(this),this._destroyListeners.forEach(function(e){return e()})},e.prototype.onDestroy=function(e){this._destroyListeners.push(e)},e}(),ps=me(gi),ds=me(mi),hs=me(wi),vs=me(Oi),ys=me(xi),bs=me(ki),gs=me(vo),_s={},ms={CreateViewNodes:0,CheckNoChanges:1,CheckNoChangesProjectedViews:2,CheckAndUpdate:3,CheckAndUpdateProjectedViews:4,Destroy:5};ms[ms.CreateViewNodes]="CreateViewNodes",ms[ms.CheckNoChanges]="CheckNoChanges",ms[ms.CheckNoChangesProjectedViews]="CheckNoChangesProjectedViews",ms[ms.CheckAndUpdate]="CheckAndUpdate",ms[ms.CheckAndUpdateProjectedViews]="CheckAndUpdateProjectedViews",ms[ms.Destroy]="Destroy";var ws=!1,Cs=new Map,xs=new Map,Os={create:0,detectChanges:1,checkNoChanges:2,destroy:3,handleEvent:4};Os[Os.create]="create",Os[Os.detectChanges]="detectChanges",Os[Os.checkNoChanges]="checkNoChanges",Os[Os.destroy]="destroy",Os[Os.handleEvent]="handleEvent";var ks,Es,js,Is=/([A-Z])/g,Ps=function(){function e(e,t){this.view=e,this.nodeIndex=t,null==t&&(this.nodeIndex=t=0),this.nodeDef=e.def.nodes[t];for(var n=this.nodeDef,r=e;n&&0==(1&n.flags);)n=n.parent;if(!n)for(;!n&&r;)n=Ie(r),r=r.parent;this.elDef=n,this.elView=r}return Object.defineProperty(e.prototype,"elOrCompView",{get:function(){return de(this.elView,this.elDef.nodeIndex).componentView||this.view},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"injector",{get:function(){return nt(this.elView,this.elDef)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"component",{get:function(){return this.elOrCompView.component},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"context",{get:function(){return this.elOrCompView.context},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"providerTokens",{get:function(){var e=[];if(this.elDef)for(var t=this.elDef.nodeIndex+1;t<=this.elDef.nodeIndex+this.elDef.childCount;t++){var n=this.elView.def.nodes[t];20224&n.flags&&e.push(n.provider.token),t+=n.childCount}return e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"references",{get:function(){var e={};if(this.elDef){pn(this.elView,this.elDef,e);for(var t=this.elDef.nodeIndex+1;t<=this.elDef.nodeIndex+this.elDef.childCount;t++){var n=this.elView.def.nodes[t];20224&n.flags&&pn(this.elView,n,e),t+=n.childCount}}return e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"componentRenderElement",{get:function(){var e=function(e){for(;e&&!Se(e);)e=e.parent;return e.parent?de(e.parent,Ie(e).nodeIndex):null}(this.elOrCompView);return e?e.renderElement:void 0},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"renderNode",{get:function(){return 2&this.nodeDef.flags?Pe(this.view,this.nodeDef):Pe(this.elView,this.elDef)},enumerable:!0,configurable:!0}),e.prototype.logError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r,o;2&this.nodeDef.flags?(r=this.view.def,o=this.nodeDef.nodeIndex):(r=this.elView.def,o=this.elDef.nodeIndex);var i=function(e,t){for(var n=-1,r=0;r<=t;r++)3&e.nodes[r].flags&&n++;return n}(r,o),s=-1;r.factory(function(){return++s===i?(n=e.error).bind.apply(n,[e].concat(t)):Gi;var n}),s<i&&(e.error("Illegal state: the ViewDefinitionFactory did not call the logger!"),e.error.apply(e,t))},e}(),Ts=function(){function e(e){this.delegate=e}return e.prototype.createRenderer=function(e,t){return new Ss(this.delegate.createRenderer(e,t))},e.prototype.begin=function(){this.delegate.begin&&this.delegate.begin()},e.prototype.end=function(){this.delegate.end&&this.delegate.end()},e.prototype.whenRenderingDone=function(){return this.delegate.whenRenderingDone?this.delegate.whenRenderingDone():Promise.resolve(null)},e}(),Ss=function(){function e(e){this.delegate=e}return Object.defineProperty(e.prototype,"data",{get:function(){return this.delegate.data},enumerable:!0,configurable:!0}),e.prototype.destroyNode=function(e){!function(e){Pi.delete(e.nativeNode)}(te(e)),this.delegate.destroyNode&&this.delegate.destroyNode(e)},e.prototype.destroy=function(){this.delegate.destroy()},e.prototype.createElement=function(e,t){var n=this.delegate.createElement(e,t),r=hn();if(r){var o=new Ii(n,null,r);o.name=e,ne(o)}return n},e.prototype.createComment=function(e){var t=this.delegate.createComment(e),n=hn();return n&&ne(new ji(t,null,n)),t},e.prototype.createText=function(e){var t=this.delegate.createText(e),n=hn();return n&&ne(new ji(t,null,n)),t},e.prototype.appendChild=function(e,t){var n=te(e),r=te(t);n&&r&&n instanceof Ii&&n.addChild(r),this.delegate.appendChild(e,t)},e.prototype.insertBefore=function(e,t,n){var r=te(e),o=te(t),i=te(n);r&&o&&r instanceof Ii&&r.insertBefore(i,o),this.delegate.insertBefore(e,t,n)},e.prototype.removeChild=function(e,t){var n=te(e),r=te(t);n&&r&&n instanceof Ii&&n.removeChild(r),this.delegate.removeChild(e,t)},e.prototype.selectRootElement=function(e){var t=this.delegate.selectRootElement(e),n=hn();return n&&ne(new Ii(t,null,n)),t},e.prototype.setAttribute=function(e,t,n,r){var o=te(e);if(o&&o instanceof Ii){var i=r?r+":"+t:t;o.attributes[i]=n}this.delegate.setAttribute(e,t,n,r)},e.prototype.removeAttribute=function(e,t,n){var r=te(e);if(r&&r instanceof Ii){var o=n?n+":"+t:t;r.attributes[o]=null}this.delegate.removeAttribute(e,t,n)},e.prototype.addClass=function(e,t){var n=te(e);n&&n instanceof Ii&&(n.classes[t]=!0),this.delegate.addClass(e,t)},e.prototype.removeClass=function(e,t){var n=te(e);n&&n instanceof Ii&&(n.classes[t]=!1),this.delegate.removeClass(e,t)},e.prototype.setStyle=function(e,t,n,r){var o=te(e);o&&o instanceof Ii&&(o.styles[t]=n),this.delegate.setStyle(e,t,n,r)},e.prototype.removeStyle=function(e,t,n){var r=te(e);r&&r instanceof Ii&&(r.styles[t]=null),this.delegate.removeStyle(e,t,n)},e.prototype.setProperty=function(e,t,n){var r=te(e);r&&r instanceof Ii&&(r.properties[t]=n),this.delegate.setProperty(e,t,n)},e.prototype.listen=function(e,t,n){if("string"!=typeof e){var r=te(e);r&&r.listeners.push(new Ei(t,n))}return this.delegate.listen(e,t,n)},e.prototype.parentNode=function(e){return this.delegate.parentNode(e)},e.prototype.nextSibling=function(e){return this.delegate.nextSibling(e)},e.prototype.setValue=function(e,t){return this.delegate.setValue(e,t)},e}(),As=(function(e){function n(t,n,r){var o=e.call(this)||this;return o.moduleType=t,o._bootstrapComponents=n,o._ngModuleDefFactory=r,o}t(n,e),n.prototype.create=function(e){zt();var t=Ve(this._ngModuleDefFactory);return $i.createNgModuleRef(this.moduleType,e||vo.NULL,this._bootstrapComponents,t)}}(ii),require("filesize")),Ns=function(){function e(){}return t=e,e.prototype.transform=function(e,n){return Array.isArray(e)?e.map(function(e){return t.transformOne(e,n)}):t.transformOne(e,n)},e.transformOne=function(e,t){return As(e,t)},e=t=n([Qr({name:"filesize"})],e);var t}(),Rs=function(){function e(){}return e=n([$r({declarations:[Ns],exports:[Ns]})],e)}();e.FileSizeModule=Rs,e.FileSizePipe=Ns,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvdHJ5Q2F0Y2guanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJzY3JpcHRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL3BpcGUuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvcnMvc2hhcmUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9lc201L2NvcmUuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL3Jvb3QuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzRnVuY3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzQXJyYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL2lzT2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9lcnJvck9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL09ic2VydmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvc3ltYm9sL3J4U3Vic2NyaWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL1N1YnNjcmliZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy91dGlsL3RvU3Vic2NyaWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9ub29wLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvT2JzZXJ2YWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL29ic2VydmFibGUvU2NhbGFyT2JzZXJ2YWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL29ic2VydmFibGUvRW1wdHlPYnNlcnZhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9pc1NjaGVkdWxlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL29ic2VydmFibGUvQXJyYXlPYnNlcnZhYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9pc0FycmF5TGlrZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaXNQcm9taXNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvSW5uZXJTdWJzY3JpYmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9zdWJzY3JpYmVUb1Jlc3VsdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL091dGVyU3Vic2NyaWJlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL29wZXJhdG9ycy9tZXJnZU1hcC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL3V0aWwvaWRlbnRpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvcnMvbWVyZ2VBbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy9vYnNlcnZhYmxlL21lcmdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yeGpzL1N1YmplY3RTdWJzY3JpcHRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy9TdWJqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3JzL3JlZkNvdW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvcnhqcy9vcGVyYXRvcnMvbXVsdGljYXN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3J4anMvb3BlcmF0b3Ivc2hhcmUuanMiLCIuLi9zcmMvZmlsZXNpemUucGlwZS50cyIsIi4uL3NyYy9maWxlc2l6ZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXJyb3JPYmplY3RfMSA9IHJlcXVpcmUoJy4vZXJyb3JPYmplY3QnKTtcbnZhciB0cnlDYXRjaFRhcmdldDtcbmZ1bmN0aW9uIHRyeUNhdGNoZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRyeUNhdGNoVGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZSA9IGU7XG4gICAgICAgIHJldHVybiBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0O1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyeUNhdGNoKGZuKSB7XG4gICAgdHJ5Q2F0Y2hUYXJnZXQgPSBmbjtcbiAgICByZXR1cm4gdHJ5Q2F0Y2hlcjtcbn1cbmV4cG9ydHMudHJ5Q2F0Y2ggPSB0cnlDYXRjaDtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyeUNhdGNoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIGlzQXJyYXlfMSA9IHJlcXVpcmUoJy4vdXRpbC9pc0FycmF5Jyk7XG52YXIgaXNPYmplY3RfMSA9IHJlcXVpcmUoJy4vdXRpbC9pc09iamVjdCcpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoJy4vdXRpbC9pc0Z1bmN0aW9uJyk7XG52YXIgdHJ5Q2F0Y2hfMSA9IHJlcXVpcmUoJy4vdXRpbC90cnlDYXRjaCcpO1xudmFyIGVycm9yT2JqZWN0XzEgPSByZXF1aXJlKCcuL3V0aWwvZXJyb3JPYmplY3QnKTtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9yXzEgPSByZXF1aXJlKCcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcicpO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgZGlzcG9zYWJsZSByZXNvdXJjZSwgc3VjaCBhcyB0aGUgZXhlY3V0aW9uIG9mIGFuIE9ic2VydmFibGUuIEFcbiAqIFN1YnNjcmlwdGlvbiBoYXMgb25lIGltcG9ydGFudCBtZXRob2QsIGB1bnN1YnNjcmliZWAsIHRoYXQgdGFrZXMgbm8gYXJndW1lbnRcbiAqIGFuZCBqdXN0IGRpc3Bvc2VzIHRoZSByZXNvdXJjZSBoZWxkIGJ5IHRoZSBzdWJzY3JpcHRpb24uXG4gKlxuICogQWRkaXRpb25hbGx5LCBzdWJzY3JpcHRpb25zIG1heSBiZSBncm91cGVkIHRvZ2V0aGVyIHRocm91Z2ggdGhlIGBhZGQoKWBcbiAqIG1ldGhvZCwgd2hpY2ggd2lsbCBhdHRhY2ggYSBjaGlsZCBTdWJzY3JpcHRpb24gdG8gdGhlIGN1cnJlbnQgU3Vic2NyaXB0aW9uLlxuICogV2hlbiBhIFN1YnNjcmlwdGlvbiBpcyB1bnN1YnNjcmliZWQsIGFsbCBpdHMgY2hpbGRyZW4gKGFuZCBpdHMgZ3JhbmRjaGlsZHJlbilcbiAqIHdpbGwgYmUgdW5zdWJzY3JpYmVkIGFzIHdlbGwuXG4gKlxuICogQGNsYXNzIFN1YnNjcmlwdGlvblxuICovXG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IFt1bnN1YnNjcmliZV0gQSBmdW5jdGlvbiBkZXNjcmliaW5nIGhvdyB0b1xuICAgICAqIHBlcmZvcm0gdGhlIGRpc3Bvc2FsIG9mIHJlc291cmNlcyB3aGVuIHRoZSBgdW5zdWJzY3JpYmVgIG1ldGhvZCBpcyBjYWxsZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHVuc3Vic2NyaWJlKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0aGlzIFN1YnNjcmlwdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHVuc3Vic2NyaWJlZC5cbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlcyB0aGUgcmVzb3VyY2VzIGhlbGQgYnkgdGhlIHN1YnNjcmlwdGlvbi4gTWF5LCBmb3IgaW5zdGFuY2UsIGNhbmNlbFxuICAgICAqIGFuIG9uZ29pbmcgT2JzZXJ2YWJsZSBleGVjdXRpb24gb3IgY2FuY2VsIGFueSBvdGhlciB0eXBlIG9mIHdvcmsgdGhhdFxuICAgICAqIHN0YXJ0ZWQgd2hlbiB0aGUgU3Vic2NyaXB0aW9uIHdhcyBjcmVhdGVkLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGhhc0Vycm9ycyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfcGFyZW50ID0gX2EuX3BhcmVudCwgX3BhcmVudHMgPSBfYS5fcGFyZW50cywgX3Vuc3Vic2NyaWJlID0gX2EuX3Vuc3Vic2NyaWJlLCBfc3Vic2NyaXB0aW9ucyA9IF9hLl9zdWJzY3JpcHRpb25zO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudHMgPSBudWxsO1xuICAgICAgICAvLyBudWxsIG91dCBfc3Vic2NyaXB0aW9ucyBmaXJzdCBzbyBhbnkgY2hpbGQgc3Vic2NyaXB0aW9ucyB0aGF0IGF0dGVtcHRcbiAgICAgICAgLy8gdG8gcmVtb3ZlIHRoZW1zZWx2ZXMgZnJvbSB0aGlzIHN1YnNjcmlwdGlvbiB3aWxsIG5vb3BcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucyA9IG51bGw7XG4gICAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgbGVuID0gX3BhcmVudHMgPyBfcGFyZW50cy5sZW5ndGggOiAwO1xuICAgICAgICAvLyBpZiB0aGlzLl9wYXJlbnQgaXMgbnVsbCwgdGhlbiBzbyBpcyB0aGlzLl9wYXJlbnRzLCBhbmQgd2VcbiAgICAgICAgLy8gZG9uJ3QgaGF2ZSB0byByZW1vdmUgb3Vyc2VsdmVzIGZyb20gYW55IHBhcmVudCBzdWJzY3JpcHRpb25zLlxuICAgICAgICB3aGlsZSAoX3BhcmVudCkge1xuICAgICAgICAgICAgX3BhcmVudC5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAvLyBpZiB0aGlzLl9wYXJlbnRzIGlzIG51bGwgb3IgaW5kZXggPj0gbGVuLFxuICAgICAgICAgICAgLy8gdGhlbiBfcGFyZW50IGlzIHNldCB0byBudWxsLCBhbmQgdGhlIGxvb3AgZXhpdHNcbiAgICAgICAgICAgIF9wYXJlbnQgPSArK2luZGV4IDwgbGVuICYmIF9wYXJlbnRzW2luZGV4XSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihfdW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICB2YXIgdHJpYWwgPSB0cnlDYXRjaF8xLnRyeUNhdGNoKF91bnN1YnNjcmliZSkuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh0cmlhbCA9PT0gZXJyb3JPYmplY3RfMS5lcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgIGhhc0Vycm9ycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IChlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvciA/XG4gICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmUuZXJyb3JzKSA6IFtlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0LmVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheV8xLmlzQXJyYXkoX3N1YnNjcmlwdGlvbnMpKSB7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgbGVuID0gX3N1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gX3N1YnNjcmlwdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdF8xLmlzT2JqZWN0KHN1YikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyaWFsID0gdHJ5Q2F0Y2hfMS50cnlDYXRjaChzdWIudW5zdWJzY3JpYmUpLmNhbGwoc3ViKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyaWFsID09PSBlcnJvck9iamVjdF8xLmVycm9yT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IGVycm9yT2JqZWN0XzEuZXJyb3JPYmplY3QuZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQoZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0Vycm9ycykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3JfMS5VbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSB0ZWFyIGRvd24gdG8gYmUgY2FsbGVkIGR1cmluZyB0aGUgdW5zdWJzY3JpYmUoKSBvZiB0aGlzXG4gICAgICogU3Vic2NyaXB0aW9uLlxuICAgICAqXG4gICAgICogSWYgdGhlIHRlYXIgZG93biBiZWluZyBhZGRlZCBpcyBhIHN1YnNjcmlwdGlvbiB0aGF0IGlzIGFscmVhZHlcbiAgICAgKiB1bnN1YnNjcmliZWQsIGlzIHRoZSBzYW1lIHJlZmVyZW5jZSBgYWRkYCBpcyBiZWluZyBjYWxsZWQgb24sIG9yIGlzXG4gICAgICogYFN1YnNjcmlwdGlvbi5FTVBUWWAsIGl0IHdpbGwgbm90IGJlIGFkZGVkLlxuICAgICAqXG4gICAgICogSWYgdGhpcyBzdWJzY3JpcHRpb24gaXMgYWxyZWFkeSBpbiBhbiBgY2xvc2VkYCBzdGF0ZSwgdGhlIHBhc3NlZFxuICAgICAqIHRlYXIgZG93biBsb2dpYyB3aWxsIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtUZWFyZG93bkxvZ2ljfSB0ZWFyZG93biBUaGUgYWRkaXRpb25hbCBsb2dpYyB0byBleGVjdXRlIG9uXG4gICAgICogdGVhcmRvd24uXG4gICAgICogQHJldHVybiB7U3Vic2NyaXB0aW9ufSBSZXR1cm5zIHRoZSBTdWJzY3JpcHRpb24gdXNlZCBvciBjcmVhdGVkIHRvIGJlXG4gICAgICogYWRkZWQgdG8gdGhlIGlubmVyIHN1YnNjcmlwdGlvbnMgbGlzdC4gVGhpcyBTdWJzY3JpcHRpb24gY2FuIGJlIHVzZWQgd2l0aFxuICAgICAqIGByZW1vdmUoKWAgdG8gcmVtb3ZlIHRoZSBwYXNzZWQgdGVhcmRvd24gbG9naWMgZnJvbSB0aGUgaW5uZXIgc3Vic2NyaXB0aW9uc1xuICAgICAqIGxpc3QuXG4gICAgICovXG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgaWYgKCF0ZWFyZG93biB8fCAodGVhcmRvd24gPT09IFN1YnNjcmlwdGlvbi5FTVBUWSkpIHtcbiAgICAgICAgICAgIHJldHVybiBTdWJzY3JpcHRpb24uRU1QVFk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlYXJkb3duID09PSB0aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGVhcmRvd247XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHRlYXJkb3duKSB7XG4gICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0ZWFyZG93bik7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24uY2xvc2VkIHx8IHR5cGVvZiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzdWJzY3JpcHRpb24uX2FkZFBhcmVudCAhPT0gJ2Z1bmN0aW9uJyAvKiBxdWFjayBxdWFjayAqLykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5fc3Vic2NyaXB0aW9ucyA9IFt0bXBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnJlY29nbml6ZWQgdGVhcmRvd24gJyArIHRlYXJkb3duICsgJyBhZGRlZCB0byBTdWJzY3JpcHRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zIHx8ICh0aGlzLl9zdWJzY3JpcHRpb25zID0gW10pO1xuICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgc3Vic2NyaXB0aW9uLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgU3Vic2NyaXB0aW9uIGZyb20gdGhlIGludGVybmFsIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyB0aGF0IHdpbGxcbiAgICAgKiB1bnN1YnNjcmliZSBkdXJpbmcgdGhlIHVuc3Vic2NyaWJlIHByb2Nlc3Mgb2YgdGhpcyBTdWJzY3JpcHRpb24uXG4gICAgICogQHBhcmFtIHtTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvbiBUaGUgc3Vic2NyaXB0aW9uIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnM7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uSW5kZXggPSBzdWJzY3JpcHRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb25JbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLnNwbGljZShzdWJzY3JpcHRpb25JbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgX3BhcmVudCA9IF9hLl9wYXJlbnQsIF9wYXJlbnRzID0gX2EuX3BhcmVudHM7XG4gICAgICAgIGlmICghX3BhcmVudCB8fCBfcGFyZW50ID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBwYXJlbnQsIG9yIHRoZSBuZXcgcGFyZW50IGlzIHRoZSBzYW1lIGFzIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBwYXJlbnQsIHRoZW4gc2V0IHRoaXMuX3BhcmVudCB0byB0aGUgbmV3IHBhcmVudC5cbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghX3BhcmVudHMpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYWxyZWFkeSBvbmUgcGFyZW50LCBidXQgbm90IG11bHRpcGxlLCBhbGxvY2F0ZSBhbiBBcnJheSB0b1xuICAgICAgICAgICAgLy8gc3RvcmUgdGhlIHJlc3Qgb2YgdGhlIHBhcmVudCBTdWJzY3JpcHRpb25zLlxuICAgICAgICAgICAgdGhpcy5fcGFyZW50cyA9IFtwYXJlbnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9wYXJlbnRzLmluZGV4T2YocGFyZW50KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgYWRkIHRoZSBuZXcgcGFyZW50IHRvIHRoZSBfcGFyZW50cyBsaXN0IGlmIGl0J3Mgbm90IGFscmVhZHkgdGhlcmUuXG4gICAgICAgICAgICBfcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoZW1wdHkpIHtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0obmV3IFN1YnNjcmlwdGlvbigpKSk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnRzLlN1YnNjcmlwdGlvbiA9IFN1YnNjcmlwdGlvbjtcbmZ1bmN0aW9uIGZsYXR0ZW5VbnN1YnNjcmlwdGlvbkVycm9ycyhlcnJvcnMpIHtcbiAgICByZXR1cm4gZXJyb3JzLnJlZHVjZShmdW5jdGlvbiAoZXJycywgZXJyKSB7IHJldHVybiBlcnJzLmNvbmNhdCgoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IpID8gZXJyLmVycm9ycyA6IGVycik7IH0sIFtdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBub29wXzEgPSByZXF1aXJlKCcuL25vb3AnKTtcbi8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5mdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnRzLnBpcGUgPSBwaXBlO1xuLyogQGludGVybmFsICovXG5mdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmICghZm5zKSB7XG4gICAgICAgIHJldHVybiBub29wXzEubm9vcDtcbiAgICB9XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGZuc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBpcGVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBmbnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBmbikgeyByZXR1cm4gZm4ocHJldik7IH0sIGlucHV0KTtcbiAgICB9O1xufVxuZXhwb3J0cy5waXBlRnJvbUFycmF5ID0gcGlwZUZyb21BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbXVsdGljYXN0XzEgPSByZXF1aXJlKCcuL211bHRpY2FzdCcpO1xudmFyIHJlZkNvdW50XzEgPSByZXF1aXJlKCcuL3JlZkNvdW50Jyk7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZSgnLi4vU3ViamVjdCcpO1xuZnVuY3Rpb24gc2hhcmVTdWJqZWN0RmFjdG9yeSgpIHtcbiAgICByZXR1cm4gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG59XG4vKipcbiAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB0aGF0IG11bHRpY2FzdHMgKHNoYXJlcykgdGhlIG9yaWdpbmFsIE9ic2VydmFibGUuIEFzIGxvbmcgYXMgdGhlcmUgaXMgYXQgbGVhc3Qgb25lXG4gKiBTdWJzY3JpYmVyIHRoaXMgT2JzZXJ2YWJsZSB3aWxsIGJlIHN1YnNjcmliZWQgYW5kIGVtaXR0aW5nIGRhdGEuIFdoZW4gYWxsIHN1YnNjcmliZXJzIGhhdmUgdW5zdWJzY3JpYmVkIGl0IHdpbGxcbiAqIHVuc3Vic2NyaWJlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBCZWNhdXNlIHRoZSBPYnNlcnZhYmxlIGlzIG11bHRpY2FzdGluZyBpdCBtYWtlcyB0aGUgc3RyZWFtIGBob3RgLlxuICogVGhpcyBpcyBhbiBhbGlhcyBmb3IgLm11bHRpY2FzdCgoKSA9PiBuZXcgU3ViamVjdCgpKS5yZWZDb3VudCgpLlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvc2hhcmUucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IHVwb24gY29ubmVjdGlvbiBjYXVzZXMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHRvIGVtaXQgaXRlbXMgdG8gaXRzIE9ic2VydmVycy5cbiAqIEBtZXRob2Qgc2hhcmVcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIHNoYXJlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiByZWZDb3VudF8xLnJlZkNvdW50KCkobXVsdGljYXN0XzEubXVsdGljYXN0KHNoYXJlU3ViamVjdEZhY3RvcnkpKHNvdXJjZSkpOyB9O1xufVxuZXhwb3J0cy5zaGFyZSA9IHNoYXJlO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFyIHY1LjEuMVxuICogKGMpIDIwMTAtMjAxNyBHb29nbGUsIEluYy4gaHR0cHM6Ly9hbmd1bGFyLmlvL1xuICogTGljZW5zZTogTUlUXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tICd0c2xpYic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL21lcmdlJztcbmltcG9ydCB7IHNoYXJlIH0gZnJvbSAncnhqcy9vcGVyYXRvci9zaGFyZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCBpbiBhIERJIFByb3ZpZGVyLlxuICpcbiAqIFVzZSBhbiBgSW5qZWN0aW9uVG9rZW5gIHdoZW5ldmVyIHRoZSB0eXBlIHlvdSBhcmUgaW5qZWN0aW5nIGlzIG5vdCByZWlmaWVkIChkb2VzIG5vdCBoYXZlIGFcbiAqIHJ1bnRpbWUgcmVwcmVzZW50YXRpb24pIHN1Y2ggYXMgd2hlbiBpbmplY3RpbmcgYW4gaW50ZXJmYWNlLCBjYWxsYWJsZSB0eXBlLCBhcnJheSBvclxuICogcGFyYW1ldHJpemVkIHR5cGUuXG4gKlxuICogYEluamVjdGlvblRva2VuYCBpcyBwYXJhbWV0ZXJpemVkIG9uIGBUYCB3aGljaCBpcyB0aGUgdHlwZSBvZiBvYmplY3Qgd2hpY2ggd2lsbCBiZSByZXR1cm5lZCBieVxuICogdGhlIGBJbmplY3RvcmAuIFRoaXMgcHJvdmlkZXMgYWRkaXRpb25hbCBsZXZlbCBvZiB0eXBlIHNhZmV0eS5cbiAqXG4gKiBgYGBcbiAqIGludGVyZmFjZSBNeUludGVyZmFjZSB7Li4ufVxuICogdmFyIG15SW50ZXJmYWNlID0gaW5qZWN0b3IuZ2V0KG5ldyBJbmplY3Rpb25Ub2tlbjxNeUludGVyZmFjZT4oJ1NvbWVUb2tlbicpKTtcbiAqIC8vIG15SW50ZXJmYWNlIGlzIGluZmVycmVkIHRvIGJlIE15SW50ZXJmYWNlLlxuICogYGBgXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiB7XFxAZXhhbXBsZSBjb3JlL2RpL3RzL2luamVjdG9yX3NwZWMudHMgcmVnaW9uPSdJbmplY3Rpb25Ub2tlbid9XG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBJbmplY3Rpb25Ub2tlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbmplY3Rpb25Ub2tlbihfZGVzYykge1xuICAgICAgICB0aGlzLl9kZXNjID0gX2Rlc2M7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uZ01ldGFkYXRhTmFtZSA9ICdJbmplY3Rpb25Ub2tlbic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSW5qZWN0aW9uVG9rZW4ucHJvdG90eXBlLnRvU3RyaW5nID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBcIkluamVjdGlvblRva2VuIFwiICsgdGhpcy5fZGVzYzsgfTtcbiAgICByZXR1cm4gSW5qZWN0aW9uVG9rZW47XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEFuIGludGVyZmFjZSBpbXBsZW1lbnRlZCBieSBhbGwgQW5ndWxhciB0eXBlIGRlY29yYXRvcnMsIHdoaWNoIGFsbG93cyB0aGVtIHRvIGJlIHVzZWQgYXMgRVM3XG4gKiBkZWNvcmF0b3JzIGFzIHdlbGwgYXNcbiAqIEFuZ3VsYXIgRFNMIHN5bnRheC5cbiAqXG4gKiBFUzcgc3ludGF4OlxuICpcbiAqIGBgYFxuICogXFxAbmcuQ29tcG9uZW50KHsuLi59KVxuICogY2xhc3MgTXlDbGFzcyB7Li4ufVxuICogYGBgXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG52YXIgQU5OT1RBVElPTlMgPSAnX19hbm5vdGF0aW9uc19fJztcbnZhciBQQVJBTUVURVJTID0gJ19fcGFyYW1hdGVyc19fJztcbnZhciBQUk9QX01FVEFEQVRBID0gJ19fcHJvcF9fbWV0YWRhdGFfXyc7XG4vKipcbiAqIEBzdXBwcmVzcyB7Z2xvYmFsVGhpc31cbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHBhcmFtIHs/PX0gcHJvcHNcbiAqIEBwYXJhbSB7Pz19IHBhcmVudENsYXNzXG4gKiBAcGFyYW0gez89fSBjaGFpbkZuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYWtlRGVjb3JhdG9yKG5hbWUsIHByb3BzLCBwYXJlbnRDbGFzcywgY2hhaW5Gbikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG1ldGFDdG9yID0gbWFrZU1ldGFkYXRhQ3Rvcihwcm9wcyk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBvYmpPclR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERlY29yYXRvckZhY3Rvcnkob2JqT3JUeXBlKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgRGVjb3JhdG9yRmFjdG9yeSkge1xuICAgICAgICAgICAgbWV0YUN0b3IuY2FsbCh0aGlzLCBvYmpPclR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYW5ub3RhdGlvbkluc3RhbmNlID0gbmV3ICgvKiogQHR5cGUgez99ICovIChEZWNvcmF0b3JGYWN0b3J5KSkob2JqT3JUeXBlKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gVHlwZURlY29yYXRvciA9IC8qKiBAdHlwZSB7P30gKi8gKGZ1bmN0aW9uIFR5cGVEZWNvcmF0b3IoY2xzKSB7XG4gICAgICAgICAgICAvLyBVc2Ugb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIGltcG9ydGFudCBzaW5jZSBpdCBjcmVhdGVzIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHdoaWNoXG4gICAgICAgICAgICAvLyBwcmV2ZW50cyB0aGUgcHJvcGVydHkgaXMgY29waWVkIGR1cmluZyBzdWJjbGFzc2luZy5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFubm90YXRpb25zID0gY2xzLmhhc093blByb3BlcnR5KEFOTk9UQVRJT05TKSA/XG4gICAgICAgICAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKGNscykpW0FOTk9UQVRJT05TXSA6XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscywgQU5OT1RBVElPTlMsIHsgdmFsdWU6IFtdIH0pW0FOTk9UQVRJT05TXTtcbiAgICAgICAgICAgIGFubm90YXRpb25zLnB1c2goYW5ub3RhdGlvbkluc3RhbmNlKTtcbiAgICAgICAgICAgIHJldHVybiBjbHM7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY2hhaW5GbilcbiAgICAgICAgICAgIGNoYWluRm4oVHlwZURlY29yYXRvcik7XG4gICAgICAgIHJldHVybiBUeXBlRGVjb3JhdG9yO1xuICAgIH1cbiAgICBpZiAocGFyZW50Q2xhc3MpIHtcbiAgICAgICAgRGVjb3JhdG9yRmFjdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudENsYXNzLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIERlY29yYXRvckZhY3RvcnkucHJvdG90eXBlLm5nTWV0YWRhdGFOYW1lID0gbmFtZTtcbiAgICAoLyoqIEB0eXBlIHs/fSAqLyAoRGVjb3JhdG9yRmFjdG9yeSkpLmFubm90YXRpb25DbHMgPSBEZWNvcmF0b3JGYWN0b3J5O1xuICAgIHJldHVybiAvKiogQHR5cGUgez99ICovIChEZWNvcmF0b3JGYWN0b3J5KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/PX0gcHJvcHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG1ha2VNZXRhZGF0YUN0b3IocHJvcHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY3RvcigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlcyA9IHByb3BzLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIHByb3BOYW1lIGluIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gdmFsdWVzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHBhcmFtIHs/PX0gcHJvcHNcbiAqIEBwYXJhbSB7Pz19IHBhcmVudENsYXNzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYWtlUGFyYW1EZWNvcmF0b3IobmFtZSwgcHJvcHMsIHBhcmVudENsYXNzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWV0YUN0b3IgPSBtYWtlTWV0YWRhdGFDdG9yKHByb3BzKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gey4uLj99IGFyZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFBhcmFtRGVjb3JhdG9yRmFjdG9yeSgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFBhcmFtRGVjb3JhdG9yRmFjdG9yeSkge1xuICAgICAgICAgICAgbWV0YUN0b3IuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbm5vdGF0aW9uSW5zdGFuY2UgPSBuZXcgKChfYSA9ICgvKiogQHR5cGUgez99ICovIChQYXJhbURlY29yYXRvckZhY3RvcnkpKSkuYmluZC5hcHBseShfYSwgW3ZvaWQgMF0uY29uY2F0KGFyZ3MpKSkoKTtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKFBhcmFtRGVjb3JhdG9yKSkuYW5ub3RhdGlvbiA9IGFubm90YXRpb25JbnN0YW5jZTtcbiAgICAgICAgcmV0dXJuIFBhcmFtRGVjb3JhdG9yO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHs/fSBjbHNcbiAgICAgICAgICogQHBhcmFtIHs/fSB1bnVzZWRLZXlcbiAgICAgICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUGFyYW1EZWNvcmF0b3IoY2xzLCB1bnVzZWRLZXksIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBVc2Ugb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIGltcG9ydGFudCBzaW5jZSBpdCBjcmVhdGVzIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHdoaWNoXG4gICAgICAgICAgICAvLyBwcmV2ZW50cyB0aGUgcHJvcGVydHkgaXMgY29waWVkIGR1cmluZyBzdWJjbGFzc2luZy5cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtZXRlcnMgPSBjbHMuaGFzT3duUHJvcGVydHkoUEFSQU1FVEVSUykgP1xuICAgICAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovIChjbHMpKVtQQVJBTUVURVJTXSA6XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscywgUEFSQU1FVEVSUywgeyB2YWx1ZTogW10gfSlbUEFSQU1FVEVSU107XG4gICAgICAgICAgICAvLyB0aGVyZSBtaWdodCBiZSBnYXBzIGlmIHNvbWUgaW4gYmV0d2VlbiBwYXJhbWV0ZXJzIGRvIG5vdCBoYXZlIGFubm90YXRpb25zLlxuICAgICAgICAgICAgLy8gd2UgcGFkIHdpdGggbnVsbHMuXG4gICAgICAgICAgICB3aGlsZSAocGFyYW1ldGVycy5sZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAocGFyYW1ldGVyc1tpbmRleF0gPSBwYXJhbWV0ZXJzW2luZGV4XSB8fCBbXSkucHVzaChhbm5vdGF0aW9uSW5zdGFuY2UpO1xuICAgICAgICAgICAgcmV0dXJuIGNscztcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2E7XG4gICAgfVxuICAgIGlmIChwYXJlbnRDbGFzcykge1xuICAgICAgICBQYXJhbURlY29yYXRvckZhY3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRDbGFzcy5wcm90b3R5cGUpO1xuICAgIH1cbiAgICBQYXJhbURlY29yYXRvckZhY3RvcnkucHJvdG90eXBlLm5nTWV0YWRhdGFOYW1lID0gbmFtZTtcbiAgICAoLyoqIEB0eXBlIHs/fSAqLyAoUGFyYW1EZWNvcmF0b3JGYWN0b3J5KSkuYW5ub3RhdGlvbkNscyA9IFBhcmFtRGVjb3JhdG9yRmFjdG9yeTtcbiAgICByZXR1cm4gUGFyYW1EZWNvcmF0b3JGYWN0b3J5O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG5hbWVcbiAqIEBwYXJhbSB7Pz19IHByb3BzXG4gKiBAcGFyYW0gez89fSBwYXJlbnRDbGFzc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbWFrZVByb3BEZWNvcmF0b3IobmFtZSwgcHJvcHMsIHBhcmVudENsYXNzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWV0YUN0b3IgPSBtYWtlTWV0YWRhdGFDdG9yKHByb3BzKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gey4uLj99IGFyZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFByb3BEZWNvcmF0b3JGYWN0b3J5KCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgUHJvcERlY29yYXRvckZhY3RvcnkpIHtcbiAgICAgICAgICAgIG1ldGFDdG9yLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVjb3JhdG9ySW5zdGFuY2UgPSBuZXcgKChfYSA9ICgvKiogQHR5cGUgez99ICovIChQcm9wRGVjb3JhdG9yRmFjdG9yeSkpKS5iaW5kLmFwcGx5KF9hLCBbdm9pZCAwXS5jb25jYXQoYXJncykpKSgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gUHJvcERlY29yYXRvcih0YXJnZXQsIG5hbWUpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbnN0cnVjdG9yID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgLy8gVXNlIG9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBpbXBvcnRhbnQgc2luY2UgaXQgY3JlYXRlcyBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSB3aGljaFxuICAgICAgICAgICAgLy8gcHJldmVudHMgdGhlIHByb3BlcnR5IGlzIGNvcGllZCBkdXJpbmcgc3ViY2xhc3NpbmcuXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtZXRhID0gY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoUFJPUF9NRVRBREFUQSkgP1xuICAgICAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovIChjb25zdHJ1Y3RvcikpW1BST1BfTUVUQURBVEFdIDpcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsIFBST1BfTUVUQURBVEEsIHsgdmFsdWU6IHt9IH0pW1BST1BfTUVUQURBVEFdO1xuICAgICAgICAgICAgbWV0YVtuYW1lXSA9IG1ldGEuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgbWV0YVtuYW1lXSB8fCBbXTtcbiAgICAgICAgICAgIG1ldGFbbmFtZV0udW5zaGlmdChkZWNvcmF0b3JJbnN0YW5jZSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBfYTtcbiAgICB9XG4gICAgaWYgKHBhcmVudENsYXNzKSB7XG4gICAgICAgIFByb3BEZWNvcmF0b3JGYWN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50Q2xhc3MucHJvdG90eXBlKTtcbiAgICB9XG4gICAgUHJvcERlY29yYXRvckZhY3RvcnkucHJvdG90eXBlLm5nTWV0YWRhdGFOYW1lID0gbmFtZTtcbiAgICAoLyoqIEB0eXBlIHs/fSAqLyAoUHJvcERlY29yYXRvckZhY3RvcnkpKS5hbm5vdGF0aW9uQ2xzID0gUHJvcERlY29yYXRvckZhY3Rvcnk7XG4gICAgcmV0dXJuIFByb3BEZWNvcmF0b3JGYWN0b3J5O1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoaXMgdG9rZW4gY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGEgdmlydHVhbCBwcm92aWRlciB0aGF0IHdpbGwgcG9wdWxhdGUgdGhlXG4gKiBgZW50cnlDb21wb25lbnRzYCBmaWVsZHMgb2YgY29tcG9uZW50cyBhbmQgbmcgbW9kdWxlcyBiYXNlZCBvbiBpdHMgYHVzZVZhbHVlYC5cbiAqIEFsbCBjb21wb25lbnRzIHRoYXQgYXJlIHJlZmVyZW5jZWQgaW4gdGhlIGB1c2VWYWx1ZWAgdmFsdWUgKGVpdGhlciBkaXJlY3RseVxuICogb3IgaW4gYSBuZXN0ZWQgYXJyYXkgb3IgbWFwKSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBgZW50cnlDb21wb25lbnRzYCBwcm9wZXJ0eS5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0aGUgcm91dGVyIGNhbiBwb3B1bGF0ZSB0aGUgYGVudHJ5Q29tcG9uZW50c2BcbiAqIGZpZWxkIG9mIGFuIE5nTW9kdWxlIGJhc2VkIG9uIHRoZSByb3V0ZXIgY29uZmlndXJhdGlvbiB3aGljaCByZWZlcnNcbiAqIHRvIGNvbXBvbmVudHMuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gaGVscGVyIGZ1bmN0aW9uIGluc2lkZSB0aGUgcm91dGVyXG4gKiBmdW5jdGlvbiBwcm92aWRlUm91dGVzKHJvdXRlcykge1xuICogICByZXR1cm4gW1xuICogICAgIHtwcm92aWRlOiBST1VURVMsIHVzZVZhbHVlOiByb3V0ZXN9LFxuICogICAgIHtwcm92aWRlOiBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCB1c2VWYWx1ZTogcm91dGVzLCBtdWx0aTogdHJ1ZX1cbiAqICAgXTtcbiAqIH1cbiAqXG4gKiAvLyB1c2VyIGNvZGVcbiAqIGxldCByb3V0ZXMgPSBbXG4gKiAgIHtwYXRoOiAnL3Jvb3QnLCBjb21wb25lbnQ6IFJvb3RDb21wfSxcbiAqICAge3BhdGg6ICcvdGVhbXMnLCBjb21wb25lbnQ6IFRlYW1zQ29tcH1cbiAqIF07XG4gKlxuICogXFxATmdNb2R1bGUoe1xuICogICBwcm92aWRlcnM6IFtwcm92aWRlUm91dGVzKHJvdXRlcyldXG4gKiB9KVxuICogY2xhc3MgTW9kdWxlV2l0aFJvdXRlcyB7fVxuICogYGBgXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTID0gbmV3IEluamVjdGlvblRva2VuKCdBbmFseXplRm9yRW50cnlDb21wb25lbnRzJyk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIEF0dHJpYnV0ZSBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEF0dHJpYnV0ZSBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgQXR0cmlidXRlID0gbWFrZVBhcmFtRGVjb3JhdG9yKCdBdHRyaWJ1dGUnLCBmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkgeyByZXR1cm4gKHsgYXR0cmlidXRlTmFtZTogYXR0cmlidXRlTmFtZSB9KTsgfSk7XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHF1ZXJ5IG1ldGFkYXRhLlxuICpcbiAqIFNlZSB7XFxAbGluayBDb250ZW50Q2hpbGRyZW59LCB7XFxAbGluayBDb250ZW50Q2hpbGR9LCB7XFxAbGluayBWaWV3Q2hpbGRyZW59LCB7XFxAbGluayBWaWV3Q2hpbGR9IGZvclxuICogbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVlcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBRdWVyeTtcbn0oKSk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIENvbnRlbnRDaGlsZHJlbiBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBTZWUge1xcQGxpbmsgQ29udGVudENoaWxkcmVufS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIENvbnRlbnRDaGlsZHJlbiBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqICBcXEBzdGFibGVcbiAqICBcXEBBbm5vdGF0aW9uXG4gKi9cbnZhciBDb250ZW50Q2hpbGRyZW4gPSBtYWtlUHJvcERlY29yYXRvcignQ29udGVudENoaWxkcmVuJywgZnVuY3Rpb24gKHNlbGVjdG9yLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEgPT09IHZvaWQgMCkgeyBkYXRhID0ge307IH1cbiAgICByZXR1cm4gKF9fYXNzaWduKHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBmaXJzdDogZmFsc2UsIGlzVmlld1F1ZXJ5OiBmYWxzZSwgZGVzY2VuZGFudHM6IGZhbHNlIH0sIGRhdGEpKTtcbn0sIFF1ZXJ5KTtcbi8qKlxuICogVHlwZSBvZiB0aGUgQ29udGVudENoaWxkIGRlY29yYXRvciAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIENvbnRlbnRDaGlsZCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgQ29udGVudENoaWxkID0gbWFrZVByb3BEZWNvcmF0b3IoJ0NvbnRlbnRDaGlsZCcsIGZ1bmN0aW9uIChzZWxlY3RvciwgZGF0YSkge1xuICAgIGlmIChkYXRhID09PSB2b2lkIDApIHsgZGF0YSA9IHt9OyB9XG4gICAgcmV0dXJuIChfX2Fzc2lnbih7IHNlbGVjdG9yOiBzZWxlY3RvciwgZmlyc3Q6IHRydWUsIGlzVmlld1F1ZXJ5OiBmYWxzZSwgZGVzY2VuZGFudHM6IHRydWUgfSwgZGF0YSkpO1xufSwgUXVlcnkpO1xuLyoqXG4gKiBUeXBlIG9mIHRoZSBWaWV3Q2hpbGRyZW4gZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogU2VlIHtcXEBsaW5rIFZpZXdDaGlsZHJlbn0uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBWaWV3Q2hpbGRyZW4gZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIFZpZXdDaGlsZHJlbiA9IG1ha2VQcm9wRGVjb3JhdG9yKCdWaWV3Q2hpbGRyZW4nLCBmdW5jdGlvbiAoc2VsZWN0b3IsIGRhdGEpIHtcbiAgICBpZiAoZGF0YSA9PT0gdm9pZCAwKSB7IGRhdGEgPSB7fTsgfVxuICAgIHJldHVybiAoX19hc3NpZ24oeyBzZWxlY3Rvcjogc2VsZWN0b3IsIGZpcnN0OiBmYWxzZSwgaXNWaWV3UXVlcnk6IHRydWUsIGRlc2NlbmRhbnRzOiB0cnVlIH0sIGRhdGEpKTtcbn0sIFF1ZXJ5KTtcbi8qKlxuICogVHlwZSBvZiB0aGUgVmlld0NoaWxkIGRlY29yYXRvciAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFNlZSB7XFxAbGluayBWaWV3Q2hpbGR9XG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBWaWV3Q2hpbGQgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIFZpZXdDaGlsZCA9IG1ha2VQcm9wRGVjb3JhdG9yKCdWaWV3Q2hpbGQnLCBmdW5jdGlvbiAoc2VsZWN0b3IsIGRhdGEpIHtcbiAgICByZXR1cm4gKF9fYXNzaWduKHsgc2VsZWN0b3I6IHNlbGVjdG9yLCBmaXJzdDogdHJ1ZSwgaXNWaWV3UXVlcnk6IHRydWUsIGRlc2NlbmRhbnRzOiB0cnVlIH0sIGRhdGEpKTtcbn0sIFF1ZXJ5KTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqIEBlbnVtIHtudW1iZXJ9ICovXG52YXIgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPSB7XG4gICAgLyoqXG4gICAgICAgKiBgT25QdXNoYCBtZWFucyB0aGF0IHRoZSBjaGFuZ2UgZGV0ZWN0b3IncyBtb2RlIHdpbGwgYmUgaW5pdGlhbGx5IHNldCB0byBgQ2hlY2tPbmNlYC5cbiAgICAgICAqL1xuICAgIE9uUHVzaDogMCxcbiAgICAvKipcbiAgICAgICAqIGBEZWZhdWx0YCBtZWFucyB0aGF0IHRoZSBjaGFuZ2UgZGV0ZWN0b3IncyBtb2RlIHdpbGwgYmUgaW5pdGlhbGx5IHNldCB0byBgQ2hlY2tBbHdheXNgLlxuICAgICAgICovXG4gICAgRGVmYXVsdDogMSxcbn07XG5DaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hdID0gXCJPblB1c2hcIjtcbkNoYW5nZURldGVjdGlvblN0cmF0ZWd5W0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRlZmF1bHRdID0gXCJEZWZhdWx0XCI7XG4vKiogQGVudW0ge251bWJlcn0gKi9cbnZhciBDaGFuZ2VEZXRlY3RvclN0YXR1cyA9IHtcbiAgICAvKipcbiAgICAgICAqIGBDaGVja09uY2VgIG1lYW5zIHRoYXQgYWZ0ZXIgY2FsbGluZyBkZXRlY3RDaGFuZ2VzIHRoZSBtb2RlIG9mIHRoZSBjaGFuZ2UgZGV0ZWN0b3JcbiAgICAgICAqIHdpbGwgYmVjb21lIGBDaGVja2VkYC5cbiAgICAgICAqL1xuICAgIENoZWNrT25jZTogMCxcbiAgICAvKipcbiAgICAgICAqIGBDaGVja2VkYCBtZWFucyB0aGF0IHRoZSBjaGFuZ2UgZGV0ZWN0b3Igc2hvdWxkIGJlIHNraXBwZWQgdW50aWwgaXRzIG1vZGUgY2hhbmdlcyB0b1xuICAgICAgICogYENoZWNrT25jZWAuXG4gICAgICAgKi9cbiAgICBDaGVja2VkOiAxLFxuICAgIC8qKlxuICAgICAgICogYENoZWNrQWx3YXlzYCBtZWFucyB0aGF0IGFmdGVyIGNhbGxpbmcgZGV0ZWN0Q2hhbmdlcyB0aGUgbW9kZSBvZiB0aGUgY2hhbmdlIGRldGVjdG9yXG4gICAgICAgKiB3aWxsIHJlbWFpbiBgQ2hlY2tBbHdheXNgLlxuICAgICAgICovXG4gICAgQ2hlY2tBbHdheXM6IDIsXG4gICAgLyoqXG4gICAgICAgKiBgRGV0YWNoZWRgIG1lYW5zIHRoYXQgdGhlIGNoYW5nZSBkZXRlY3RvciBzdWIgdHJlZSBpcyBub3QgYSBwYXJ0IG9mIHRoZSBtYWluIHRyZWUgYW5kXG4gICAgICAgKiBzaG91bGQgYmUgc2tpcHBlZC5cbiAgICAgICAqL1xuICAgIERldGFjaGVkOiAzLFxuICAgIC8qKlxuICAgICAgICogYEVycm9yZWRgIG1lYW5zIHRoYXQgdGhlIGNoYW5nZSBkZXRlY3RvciBlbmNvdW50ZXJlZCBhbiBlcnJvciBjaGVja2luZyBhIGJpbmRpbmdcbiAgICAgICAqIG9yIGNhbGxpbmcgYSBkaXJlY3RpdmUgbGlmZWN5Y2xlIG1ldGhvZCBhbmQgaXMgbm93IGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS4gQ2hhbmdlXG4gICAgICAgKiBkZXRlY3RvcnMgaW4gdGhpcyBzdGF0ZSB3aWxsIG5vIGxvbmdlciBkZXRlY3QgY2hhbmdlcy5cbiAgICAgICAqL1xuICAgIEVycm9yZWQ6IDQsXG4gICAgLyoqXG4gICAgICAgKiBgRGVzdHJveWVkYCBtZWFucyB0aGF0IHRoZSBjaGFuZ2UgZGV0ZWN0b3IgaXMgZGVzdHJveWVkLlxuICAgICAgICovXG4gICAgRGVzdHJveWVkOiA1LFxufTtcbkNoYW5nZURldGVjdG9yU3RhdHVzW0NoYW5nZURldGVjdG9yU3RhdHVzLkNoZWNrT25jZV0gPSBcIkNoZWNrT25jZVwiO1xuQ2hhbmdlRGV0ZWN0b3JTdGF0dXNbQ2hhbmdlRGV0ZWN0b3JTdGF0dXMuQ2hlY2tlZF0gPSBcIkNoZWNrZWRcIjtcbkNoYW5nZURldGVjdG9yU3RhdHVzW0NoYW5nZURldGVjdG9yU3RhdHVzLkNoZWNrQWx3YXlzXSA9IFwiQ2hlY2tBbHdheXNcIjtcbkNoYW5nZURldGVjdG9yU3RhdHVzW0NoYW5nZURldGVjdG9yU3RhdHVzLkRldGFjaGVkXSA9IFwiRGV0YWNoZWRcIjtcbkNoYW5nZURldGVjdG9yU3RhdHVzW0NoYW5nZURldGVjdG9yU3RhdHVzLkVycm9yZWRdID0gXCJFcnJvcmVkXCI7XG5DaGFuZ2VEZXRlY3RvclN0YXR1c1tDaGFuZ2VEZXRlY3RvclN0YXR1cy5EZXN0cm95ZWRdID0gXCJEZXN0cm95ZWRcIjtcbi8qKlxuICogQHBhcmFtIHs/fSBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3koY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kpIHtcbiAgICByZXR1cm4gY2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPT0gbnVsbCB8fFxuICAgICAgICBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9PT0gQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdDtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUeXBlIG9mIHRoZSBEaXJlY3RpdmUgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBEaXJlY3RpdmUgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIERpcmVjdGl2ZSA9IG1ha2VEZWNvcmF0b3IoJ0RpcmVjdGl2ZScsIGZ1bmN0aW9uIChkaXIpIHtcbiAgICBpZiAoZGlyID09PSB2b2lkIDApIHsgZGlyID0ge307IH1cbiAgICByZXR1cm4gZGlyO1xufSk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIENvbXBvbmVudCBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIENvbXBvbmVudCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgQ29tcG9uZW50ID0gbWFrZURlY29yYXRvcignQ29tcG9uZW50JywgZnVuY3Rpb24gKGMpIHtcbiAgICBpZiAoYyA9PT0gdm9pZCAwKSB7IGMgPSB7fTsgfVxuICAgIHJldHVybiAoX19hc3NpZ24oeyBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LkRlZmF1bHQgfSwgYykpO1xufSwgRGlyZWN0aXZlKTtcbi8qKlxuICogVHlwZSBvZiB0aGUgUGlwZSBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIFBpcGUgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIFBpcGUgPSBtYWtlRGVjb3JhdG9yKCdQaXBlJywgZnVuY3Rpb24gKHApIHsgcmV0dXJuIChfX2Fzc2lnbih7IHB1cmU6IHRydWUgfSwgcCkpOyB9KTtcbi8qKlxuICogVHlwZSBvZiB0aGUgSW5wdXQgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBJbnB1dCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgSW5wdXQgPSBtYWtlUHJvcERlY29yYXRvcignSW5wdXQnLCBmdW5jdGlvbiAoYmluZGluZ1Byb3BlcnR5TmFtZSkgeyByZXR1cm4gKHsgYmluZGluZ1Byb3BlcnR5TmFtZTogYmluZGluZ1Byb3BlcnR5TmFtZSB9KTsgfSk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIE91dHB1dCBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIE91dHB1dCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgT3V0cHV0ID0gbWFrZVByb3BEZWNvcmF0b3IoJ091dHB1dCcsIGZ1bmN0aW9uIChiaW5kaW5nUHJvcGVydHlOYW1lKSB7IHJldHVybiAoeyBiaW5kaW5nUHJvcGVydHlOYW1lOiBiaW5kaW5nUHJvcGVydHlOYW1lIH0pOyB9KTtcbi8qKlxuICogVHlwZSBvZiB0aGUgSG9zdEJpbmRpbmcgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBIb3N0QmluZGluZyBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgSG9zdEJpbmRpbmcgPSBtYWtlUHJvcERlY29yYXRvcignSG9zdEJpbmRpbmcnLCBmdW5jdGlvbiAoaG9zdFByb3BlcnR5TmFtZSkgeyByZXR1cm4gKHsgaG9zdFByb3BlcnR5TmFtZTogaG9zdFByb3BlcnR5TmFtZSB9KTsgfSk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIEhvc3RMaXN0ZW5lciBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEhvc3RMaXN0ZW5lciBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgSG9zdExpc3RlbmVyID0gbWFrZVByb3BEZWNvcmF0b3IoJ0hvc3RMaXN0ZW5lcicsIGZ1bmN0aW9uIChldmVudE5hbWUsIGFyZ3MpIHsgcmV0dXJuICh7IGV2ZW50TmFtZTogZXZlbnROYW1lLCBhcmdzOiBhcmdzIH0pOyB9KTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIGEgbW9kdWxlIHRoYXQgYWxzbyBpbmNsdWRlcyB0aGUgcHJvdmlkZXJzLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogSW50ZXJmYWNlIGZvciBzY2hlbWEgZGVmaW5pdGlvbnMgaW4gXFxATmdNb2R1bGVzLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogRGVmaW5lcyBhIHNjaGVtYSB0aGF0IHdpbGwgYWxsb3c6XG4gKiAtIGFueSBub24tQW5ndWxhciBlbGVtZW50cyB3aXRoIGEgYC1gIGluIHRoZWlyIG5hbWUsXG4gKiAtIGFueSBwcm9wZXJ0aWVzIG9uIGVsZW1lbnRzIHdpdGggYSBgLWAgaW4gdGhlaXIgbmFtZSB3aGljaCBpcyB0aGUgY29tbW9uIHJ1bGUgZm9yIGN1c3RvbVxuICogZWxlbWVudHMuXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBDVVNUT01fRUxFTUVOVFNfU0NIRU1BID0ge1xuICAgIG5hbWU6ICdjdXN0b20tZWxlbWVudHMnXG59O1xuLyoqXG4gKiBEZWZpbmVzIGEgc2NoZW1hIHRoYXQgd2lsbCBhbGxvdyBhbnkgcHJvcGVydHkgb24gYW55IGVsZW1lbnQuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBOT19FUlJPUlNfU0NIRU1BID0ge1xuICAgIG5hbWU6ICduby1lcnJvcnMtc2NoZW1hJ1xufTtcbi8qKlxuICogVHlwZSBvZiB0aGUgTmdNb2R1bGUgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBOZ01vZHVsZSBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgTmdNb2R1bGUgPSBtYWtlRGVjb3JhdG9yKCdOZ01vZHVsZScsIGZ1bmN0aW9uIChuZ01vZHVsZSkgeyByZXR1cm4gbmdNb2R1bGU7IH0pO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKiogQGVudW0ge251bWJlcn0gKi9cbnZhciBWaWV3RW5jYXBzdWxhdGlvbiA9IHtcbiAgICAvKipcbiAgICAgICAqIEVtdWxhdGUgYE5hdGl2ZWAgc2NvcGluZyBvZiBzdHlsZXMgYnkgYWRkaW5nIGFuIGF0dHJpYnV0ZSBjb250YWluaW5nIHN1cnJvZ2F0ZSBpZCB0byB0aGUgSG9zdFxuICAgICAgICogRWxlbWVudCBhbmQgcHJlLXByb2Nlc3NpbmcgdGhlIHN0eWxlIHJ1bGVzIHByb3ZpZGVkIHZpYSB7QGxpbmsgQ29tcG9uZW50I3N0eWxlcyBzdHlsZXN9IG9yXG4gICAgICAgKiB7QGxpbmsgQ29tcG9uZW50I3N0eWxlVXJscyBzdHlsZVVybHN9LCBhbmQgYWRkaW5nIHRoZSBuZXcgSG9zdCBFbGVtZW50IGF0dHJpYnV0ZSB0byBhbGxcbiAgICAgICAqIHNlbGVjdG9ycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGlzIGlzIHRoZSBkZWZhdWx0IG9wdGlvbi5cbiAgICAgICAqL1xuICAgIEVtdWxhdGVkOiAwLFxuICAgIC8qKlxuICAgICAgICogVXNlIHRoZSBuYXRpdmUgZW5jYXBzdWxhdGlvbiBtZWNoYW5pc20gb2YgdGhlIHJlbmRlcmVyLlxuICAgICAgICpcbiAgICAgICAqIEZvciB0aGUgRE9NIHRoaXMgbWVhbnMgdXNpbmcgW1NoYWRvdyBET01dKGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL3NwZWMvc2hhZG93LykgYW5kXG4gICAgICAgKiBjcmVhdGluZyBhIFNoYWRvd1Jvb3QgZm9yIENvbXBvbmVudCdzIEhvc3QgRWxlbWVudC5cbiAgICAgICAqL1xuICAgIE5hdGl2ZTogMSxcbiAgICAvKipcbiAgICAgICAqIERvbid0IHByb3ZpZGUgYW55IHRlbXBsYXRlIG9yIHN0eWxlIGVuY2Fwc3VsYXRpb24uXG4gICAgICAgKi9cbiAgICBOb25lOiAyLFxufTtcblZpZXdFbmNhcHN1bGF0aW9uW1ZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkXSA9IFwiRW11bGF0ZWRcIjtcblZpZXdFbmNhcHN1bGF0aW9uW1ZpZXdFbmNhcHN1bGF0aW9uLk5hdGl2ZV0gPSBcIk5hdGl2ZVwiO1xuVmlld0VuY2Fwc3VsYXRpb25bVmlld0VuY2Fwc3VsYXRpb24uTm9uZV0gPSBcIk5vbmVcIjtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFxcQHdoYXRJdERvZXMgUmVwcmVzZW50cyB0aGUgdmVyc2lvbiBvZiBBbmd1bGFyXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBWZXJzaW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZlcnNpb24oZnVsbCkge1xuICAgICAgICB0aGlzLmZ1bGwgPSBmdWxsO1xuICAgICAgICB0aGlzLm1ham9yID0gZnVsbC5zcGxpdCgnLicpWzBdO1xuICAgICAgICB0aGlzLm1pbm9yID0gZnVsbC5zcGxpdCgnLicpWzFdO1xuICAgICAgICB0aGlzLnBhdGNoID0gZnVsbC5zcGxpdCgnLicpLnNsaWNlKDIpLmpvaW4oJy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIFZlcnNpb247XG59KCkpO1xuLyoqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIFZFUlNJT04gPSBuZXcgVmVyc2lvbignNS4xLjEnKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUeXBlIG9mIHRoZSBJbmplY3QgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBJbmplY3QgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIEluamVjdCA9IG1ha2VQYXJhbURlY29yYXRvcignSW5qZWN0JywgZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiAoeyB0b2tlbjogdG9rZW4gfSk7IH0pO1xuLyoqXG4gKiBUeXBlIG9mIHRoZSBPcHRpb25hbCBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIE9wdGlvbmFsIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogXFxAc3RhYmxlXG4gKiBcXEBBbm5vdGF0aW9uXG4gKi9cbnZhciBPcHRpb25hbCA9IG1ha2VQYXJhbURlY29yYXRvcignT3B0aW9uYWwnKTtcbi8qKlxuICogVHlwZSBvZiB0aGUgSW5qZWN0YWJsZSBkZWNvcmF0b3IgLyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEluamVjdGFibGUgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIEluamVjdGFibGUgPSBtYWtlRGVjb3JhdG9yKCdJbmplY3RhYmxlJyk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIFNlbGYgZGVjb3JhdG9yIC8gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBTZWxmIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogXFxAc3RhYmxlXG4gKiBcXEBBbm5vdGF0aW9uXG4gKi9cbnZhciBTZWxmID0gbWFrZVBhcmFtRGVjb3JhdG9yKCdTZWxmJyk7XG4vKipcbiAqIFR5cGUgb2YgdGhlIFNraXBTZWxmIGRlY29yYXRvciAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogU2tpcFNlbGYgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIFxcQEFubm90YXRpb25cbiAqL1xudmFyIFNraXBTZWxmID0gbWFrZVBhcmFtRGVjb3JhdG9yKCdTa2lwU2VsZicpO1xuLyoqXG4gKiBUeXBlIG9mIHRoZSBIb3N0IGRlY29yYXRvciAvIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogSG9zdCBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIFxcQHN0YWJsZVxuICogXFxAQW5ub3RhdGlvblxuICovXG52YXIgSG9zdCA9IG1ha2VQYXJhbURlY29yYXRvcignSG9zdCcpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgX193aW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3c7XG52YXIgX19zZWxmID0gdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiYgc2VsZjtcbnZhciBfX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbDtcbnZhciBfZ2xvYmFsID0gX193aW5kb3cgfHwgX19nbG9iYWwgfHwgX19zZWxmO1xudmFyIF9zeW1ib2xJdGVyYXRvciA9IG51bGw7XG4vKipcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICghX3N5bWJvbEl0ZXJhdG9yKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIFN5bWJvbF8xID0gX2dsb2JhbFsnU3ltYm9sJ107XG4gICAgICAgIGlmIChTeW1ib2xfMSAmJiBTeW1ib2xfMS5pdGVyYXRvcikge1xuICAgICAgICAgICAgX3N5bWJvbEl0ZXJhdG9yID0gU3ltYm9sXzEuaXRlcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlczYtc2hpbSBzcGVjaWZpYyBsb2dpY1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE1hcC5wcm90b3R5cGUpO1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICdlbnRyaWVzJyAmJiBrZXkgIT09ICdzaXplJyAmJlxuICAgICAgICAgICAgICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAoTWFwKSkucHJvdG90eXBlW2tleV0gPT09IE1hcC5wcm90b3R5cGVbJ2VudHJpZXMnXSkge1xuICAgICAgICAgICAgICAgICAgICBfc3ltYm9sSXRlcmF0b3IgPSBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfc3ltYm9sSXRlcmF0b3I7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZm5cbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNjaGVkdWxlTWljcm9UYXNrKGZuKSB7XG4gICAgWm9uZS5jdXJyZW50LnNjaGVkdWxlTWljcm9UYXNrKCdzY2hlZHVsZU1pY3JvdGFzaycsIGZuKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBhXG4gKiBAcGFyYW0gez99IGJcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGxvb3NlSWRlbnRpY2FsKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYiB8fCB0eXBlb2YgYSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGIgPT09ICdudW1iZXInICYmIGlzTmFOKGEpICYmIGlzTmFOKGIpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHRva2VuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkodG9rZW4pIHtcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICAgIGlmICh0b2tlbiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiAnWycgKyB0b2tlbi5tYXAoc3RyaW5naWZ5KS5qb2luKCcsICcpICsgJ10nO1xuICAgIH1cbiAgICBpZiAodG9rZW4gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJycgKyB0b2tlbjtcbiAgICB9XG4gICAgaWYgKHRva2VuLm92ZXJyaWRkZW5OYW1lKSB7XG4gICAgICAgIHJldHVybiBcIlwiICsgdG9rZW4ub3ZlcnJpZGRlbk5hbWU7XG4gICAgfVxuICAgIGlmICh0b2tlbi5uYW1lKSB7XG4gICAgICAgIHJldHVybiBcIlwiICsgdG9rZW4ubmFtZTtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzID0gdG9rZW4udG9TdHJpbmcoKTtcbiAgICBpZiAocmVzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnICsgcmVzO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXdMaW5lSW5kZXggPSByZXMuaW5kZXhPZignXFxuJyk7XG4gICAgcmV0dXJuIG5ld0xpbmVJbmRleCA9PT0gLTEgPyByZXMgOiByZXMuc3Vic3RyaW5nKDAsIG5ld0xpbmVJbmRleCk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgYSBmdW5jdGlvbiBwYXNzZWQgaW50byB7XFxAbGluayBmb3J3YXJkUmVmfSBoYXMgdG8gaW1wbGVtZW50LlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9kaS90cy9mb3J3YXJkX3JlZi9mb3J3YXJkX3JlZl9zcGVjLnRzIHJlZ2lvbj0nZm9yd2FyZF9yZWZfZm4nfVxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBBbGxvd3MgdG8gcmVmZXIgdG8gcmVmZXJlbmNlcyB3aGljaCBhcmUgbm90IHlldCBkZWZpbmVkLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYGZvcndhcmRSZWZgIGlzIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSBuZWVkIHRvIHJlZmVyIHRvIGZvciB0aGUgcHVycG9zZXMgb2ZcbiAqIERJIGlzIGRlY2xhcmVkLFxuICogYnV0IG5vdCB5ZXQgZGVmaW5lZC4gSXQgaXMgYWxzbyB1c2VkIHdoZW4gdGhlIGB0b2tlbmAgd2hpY2ggd2UgdXNlIHdoZW4gY3JlYXRpbmcgYSBxdWVyeSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiB7XFxAZXhhbXBsZSBjb3JlL2RpL3RzL2ZvcndhcmRfcmVmL2ZvcndhcmRfcmVmX3NwZWMudHMgcmVnaW9uPSdmb3J3YXJkX3JlZid9XG4gKiBcXEBleHBlcmltZW50YWxcbiAqIEBwYXJhbSB7P30gZm9yd2FyZFJlZkZuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBmb3J3YXJkUmVmKGZvcndhcmRSZWZGbikge1xuICAgICgvKiogQHR5cGUgez99ICovIChmb3J3YXJkUmVmRm4pKS5fX2ZvcndhcmRfcmVmX18gPSBmb3J3YXJkUmVmO1xuICAgICgvKiogQHR5cGUgez99ICovIChmb3J3YXJkUmVmRm4pKS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cmluZ2lmeSh0aGlzKCkpOyB9O1xuICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAoLyoqIEB0eXBlIHs/fSAqLyAoZm9yd2FyZFJlZkZuKSkpO1xufVxuLyoqXG4gKiBMYXppbHkgcmV0cmlldmVzIHRoZSByZWZlcmVuY2UgdmFsdWUgZnJvbSBhIGZvcndhcmRSZWYuXG4gKlxuICogQWN0cyBhcyB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gd2hlbiBnaXZlbiBhIG5vbi1mb3J3YXJkLXJlZiB2YWx1ZS5cbiAqXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvR1U3Mm1KcmsxZmlvZENoY21pRFI/cD1wcmV2aWV3KSlcbiAqXG4gKiB7XFxAZXhhbXBsZSBjb3JlL2RpL3RzL2ZvcndhcmRfcmVmL2ZvcndhcmRfcmVmX3NwZWMudHMgcmVnaW9uPSdyZXNvbHZlX2ZvcndhcmRfcmVmJ31cbiAqXG4gKiBTZWU6IHtcXEBsaW5rIGZvcndhcmRSZWZ9XG4gKiBcXEBleHBlcmltZW50YWxcbiAqIEBwYXJhbSB7P30gdHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZvcndhcmRSZWYodHlwZSkge1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlLmhhc093blByb3BlcnR5KCdfX2ZvcndhcmRfcmVmX18nKSAmJlxuICAgICAgICB0eXBlLl9fZm9yd2FyZF9yZWZfXyA9PT0gZm9yd2FyZFJlZikge1xuICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKHR5cGUpKSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgX1RIUk9XX0lGX05PVF9GT1VORCA9IG5ldyBPYmplY3QoKTtcbnZhciBUSFJPV19JRl9OT1RfRk9VTkQgPSBfVEhST1dfSUZfTk9UX0ZPVU5EO1xudmFyIF9OdWxsSW5qZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX051bGxJbmplY3RvcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0b2tlblxuICAgICAqIEBwYXJhbSB7Pz19IG5vdEZvdW5kVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIF9OdWxsSW5qZWN0b3IucHJvdG90eXBlLmdldCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW5cbiAgICAgKiBAcGFyYW0gez89fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodG9rZW4sIG5vdEZvdW5kVmFsdWUpIHtcbiAgICAgICAgaWYgKG5vdEZvdW5kVmFsdWUgPT09IHZvaWQgMCkgeyBub3RGb3VuZFZhbHVlID0gX1RIUk9XX0lGX05PVF9GT1VORDsgfVxuICAgICAgICBpZiAobm90Rm91bmRWYWx1ZSA9PT0gX1RIUk9XX0lGX05PVF9GT1VORCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTnVsbEluamVjdG9yRXJyb3I6IE5vIHByb3ZpZGVyIGZvciBcIiArIHN0cmluZ2lmeSh0b2tlbikgKyBcIiFcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4gX051bGxJbmplY3Rvcjtcbn0oKSk7XG4vKipcbiAqIFxcQHdoYXRJdERvZXMgSW5qZWN0b3IgaW50ZXJmYWNlXG4gKiBcXEBob3dUb1VzZVxuICogYGBgXG4gKiBjb25zdCBpbmplY3RvcjogSW5qZWN0b3IgPSAuLi47XG4gKiBpbmplY3Rvci5nZXQoLi4uKTtcbiAqIGBgYFxuICpcbiAqIFxcQGRlc2NyaXB0aW9uXG4gKiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIHtcXEBsaW5rRG9jcyBndWlkZS9kZXBlbmRlbmN5LWluamVjdGlvbiBcIkRlcGVuZGVuY3kgSW5qZWN0aW9uIEd1aWRlXCJ9LlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nSW5qZWN0b3InfVxuICpcbiAqIGBJbmplY3RvcmAgcmV0dXJucyBpdHNlbGYgd2hlbiBnaXZlbiBgSW5qZWN0b3JgIGFzIGEgdG9rZW46XG4gKiB7XFxAZXhhbXBsZSBjb3JlL2RpL3RzL2luamVjdG9yX3NwZWMudHMgcmVnaW9uPSdpbmplY3RJbmplY3Rvcid9XG4gKlxuICogXFxAc3RhYmxlXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIEluamVjdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEluamVjdG9yKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgSW5qZWN0b3Igd2hpY2ggaXMgY29uZmlndXJlIHVzaW5nIGBTdGF0aWNQcm92aWRlcmBzLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL3Byb3ZpZGVyX3NwZWMudHMgcmVnaW9uPSdDb25zdHJ1Y3RvclByb3ZpZGVyJ31cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgSW5qZWN0b3Igd2hpY2ggaXMgY29uZmlndXJlIHVzaW5nIGBTdGF0aWNQcm92aWRlcmBzLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIHtcXEBleGFtcGxlIGNvcmUvZGkvdHMvcHJvdmlkZXJfc3BlYy50cyByZWdpb249J0NvbnN0cnVjdG9yUHJvdmlkZXInfVxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJzXG4gICAgICogQHBhcmFtIHs/PX0gcGFyZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBJbmplY3Rvci5jcmVhdGUgPSAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgSW5qZWN0b3Igd2hpY2ggaXMgY29uZmlndXJlIHVzaW5nIGBTdGF0aWNQcm92aWRlcmBzLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIHtcXEBleGFtcGxlIGNvcmUvZGkvdHMvcHJvdmlkZXJfc3BlYy50cyByZWdpb249J0NvbnN0cnVjdG9yUHJvdmlkZXInfVxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJzXG4gICAgICogQHBhcmFtIHs/PX0gcGFyZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocHJvdmlkZXJzLCBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0aWNJbmplY3Rvcihwcm92aWRlcnMsIHBhcmVudCk7XG4gICAgfTtcbiAgICBJbmplY3Rvci5USFJPV19JRl9OT1RfRk9VTkQgPSBfVEhST1dfSUZfTk9UX0ZPVU5EO1xuICAgIEluamVjdG9yLk5VTEwgPSBuZXcgX051bGxJbmplY3RvcigpO1xuICAgIHJldHVybiBJbmplY3Rvcjtcbn0oKSk7XG52YXIgSURFTlQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xudmFyIEVNUFRZID0gLyoqIEB0eXBlIHs/fSAqLyAoW10pO1xudmFyIENJUkNVTEFSID0gSURFTlQ7XG52YXIgTVVMVElfUFJPVklERVJfRk4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG59O1xudmFyIEdFVF9QUk9QRVJUWV9OQU1FID0gLyoqIEB0eXBlIHs/fSAqLyAoe30pO1xudmFyIMm1MiA9IEdFVF9QUk9QRVJUWV9OQU1FO1xudmFyIFVTRV9WQUxVRSA9IGdldENsb3N1cmVTYWZlUHJvcGVydHkoeyBwcm92aWRlOiBTdHJpbmcsIHVzZVZhbHVlOiDJtTIgfSk7XG52YXIgTkdfVE9LRU5fUEFUSCA9ICduZ1Rva2VuUGF0aCc7XG52YXIgTkdfVEVNUF9UT0tFTl9QQVRIID0gJ25nVGVtcFRva2VuUGF0aCc7XG52YXIgTlVMTF9JTkpFQ1RPUiA9IEluamVjdG9yLk5VTEw7XG52YXIgTkVXX0xJTkUgPSAvXFxuL2dtO1xudmFyIE5PX05FV19MSU5FID0gJ8m1JztcbnZhciBTdGF0aWNJbmplY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdGF0aWNJbmplY3Rvcihwcm92aWRlcnMsIHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50ID09PSB2b2lkIDApIHsgcGFyZW50ID0gTlVMTF9JTkpFQ1RPUjsgfVxuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkcyA9IHRoaXMuX3JlY29yZHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJlY29yZHMuc2V0KEluamVjdG9yLCAvKiogQHR5cGUgez99ICovICh7IHRva2VuOiBJbmplY3RvciwgZm46IElERU5ULCBkZXBzOiBFTVBUWSwgdmFsdWU6IHRoaXMsIHVzZU5ldzogZmFsc2UgfSkpO1xuICAgICAgICByZWN1cnNpdmVseVByb2Nlc3NQcm92aWRlcnMocmVjb3JkcywgcHJvdmlkZXJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0b2tlblxuICAgICAqIEBwYXJhbSB7Pz19IG5vdEZvdW5kVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFN0YXRpY0luamVjdG9yLnByb3RvdHlwZS5nZXQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHRva2VuXG4gICAgICogQHBhcmFtIHs/PX0gbm90Rm91bmRWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRva2VuLCBub3RGb3VuZFZhbHVlKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZCA9IHRoaXMuX3JlY29yZHMuZ2V0KHRva2VuKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0cnlSZXNvbHZlVG9rZW4odG9rZW4sIHJlY29yZCwgdGhpcy5fcmVjb3JkcywgdGhpcy5wYXJlbnQsIG5vdEZvdW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoICgvKiogQHR5cGUgez99ICovIGUpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRva2VuUGF0aCA9IGVbTkdfVEVNUF9UT0tFTl9QQVRIXTtcbiAgICAgICAgICAgIGUubWVzc2FnZSA9IGZvcm1hdEVycm9yKCdcXG4nICsgZS5tZXNzYWdlLCB0b2tlblBhdGgpO1xuICAgICAgICAgICAgZVtOR19UT0tFTl9QQVRIXSA9IHRva2VuUGF0aDtcbiAgICAgICAgICAgIGVbTkdfVEVNUF9UT0tFTl9QQVRIXSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFN0YXRpY0luamVjdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlbnMgPSAvKiogQHR5cGUgez99ICovIChbXSksIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkcyA9IHRoaXMuX3JlY29yZHM7XG4gICAgICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAodiwgdG9rZW4pIHsgcmV0dXJuIHRva2Vucy5wdXNoKHN0cmluZ2lmeSh0b2tlbikpOyB9KTtcbiAgICAgICAgcmV0dXJuIFwiU3RhdGljSW5qZWN0b3JbXCIgKyB0b2tlbnMuam9pbignLCAnKSArIFwiXVwiO1xuICAgIH07XG4gICAgcmV0dXJuIFN0YXRpY0luamVjdG9yO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBwcm92aWRlclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVwcyA9IGNvbXB1dGVEZXBzKHByb3ZpZGVyKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmbiA9IElERU5UO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlID0gRU1QVFk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdXNlTmV3ID0gZmFsc2U7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZSA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyLnByb3ZpZGUpO1xuICAgIGlmIChVU0VfVkFMVUUgaW4gcHJvdmlkZXIpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1c2UgVVNFX1ZBTFVFIGluIHByb3ZpZGVyIHNpbmNlIHByb3ZpZGVyLnVzZVZhbHVlIGNvdWxkIGJlIGRlZmluZWQgYXMgdW5kZWZpbmVkLlxuICAgICAgICB2YWx1ZSA9ICgvKiogQHR5cGUgez99ICovIChwcm92aWRlcikpLnVzZVZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmICgoLyoqIEB0eXBlIHs/fSAqLyAocHJvdmlkZXIpKS51c2VGYWN0b3J5KSB7XG4gICAgICAgIGZuID0gKC8qKiBAdHlwZSB7P30gKi8gKHByb3ZpZGVyKSkudXNlRmFjdG9yeTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKC8qKiBAdHlwZSB7P30gKi8gKHByb3ZpZGVyKSkudXNlRXhpc3RpbmcpIHtcbiAgICAgICAgLy8gSnVzdCB1c2UgSURFTlRcbiAgICB9XG4gICAgZWxzZSBpZiAoKC8qKiBAdHlwZSB7P30gKi8gKHByb3ZpZGVyKSkudXNlQ2xhc3MpIHtcbiAgICAgICAgdXNlTmV3ID0gdHJ1ZTtcbiAgICAgICAgZm4gPSByZXNvbHZlRm9yd2FyZFJlZigoLyoqIEB0eXBlIHs/fSAqLyAocHJvdmlkZXIpKS51c2VDbGFzcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwcm92aWRlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdXNlTmV3ID0gdHJ1ZTtcbiAgICAgICAgZm4gPSBwcm92aWRlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgc3RhdGljRXJyb3IoJ1N0YXRpY1Byb3ZpZGVyIGRvZXMgbm90IGhhdmUgW3VzZVZhbHVlfHVzZUZhY3Rvcnl8dXNlRXhpc3Rpbmd8dXNlQ2xhc3NdIG9yIFtwcm92aWRlXSBpcyBub3QgbmV3YWJsZScsIHByb3ZpZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZGVwczogZGVwcywgZm46IGZuLCB1c2VOZXc6IHVzZU5ldywgdmFsdWU6IHZhbHVlIH07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdG9rZW5cbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG11bHRpUHJvdmlkZXJNaXhFcnJvcih0b2tlbikge1xuICAgIHJldHVybiBzdGF0aWNFcnJvcignQ2Fubm90IG1peCBtdWx0aSBwcm92aWRlcnMgYW5kIHJlZ3VsYXIgcHJvdmlkZXJzJywgdG9rZW4pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHJlY29yZHNcbiAqIEBwYXJhbSB7P30gcHJvdmlkZXJcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5UHJvY2Vzc1Byb3ZpZGVycyhyZWNvcmRzLCBwcm92aWRlcikge1xuICAgIGlmIChwcm92aWRlcikge1xuICAgICAgICBwcm92aWRlciA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyKTtcbiAgICAgICAgaWYgKHByb3ZpZGVyIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYW4gYXJyYXkgcmVjdXJzZSBpbnRvIHRoZSBhcnJheVxuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHByb3ZpZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVjdXJzaXZlbHlQcm9jZXNzUHJvdmlkZXJzKHJlY29yZHMsIHByb3ZpZGVyW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIEZ1bmN0aW9ucyB3ZXJlIHN1cHBvcnRlZCBpbiBSZWZsZWN0aXZlSW5qZWN0b3IsIGJ1dCBhcmUgbm90IGhlcmUuIEZvciBzYWZldHkgZ2l2ZSB1c2VmdWxcbiAgICAgICAgICAgIC8vIGVycm9yIG1lc3NhZ2VzXG4gICAgICAgICAgICB0aHJvdyBzdGF0aWNFcnJvcignRnVuY3Rpb24vQ2xhc3Mgbm90IHN1cHBvcnRlZCcsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm92aWRlciAmJiB0eXBlb2YgcHJvdmlkZXIgPT09ICdvYmplY3QnICYmIHByb3ZpZGVyLnByb3ZpZGUpIHtcbiAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgaGF2ZSB3aGF0IGxvb2tzIGxpa2UgYSBwcm92aWRlcjoge3Byb3ZpZGU6ID8sIC4uLi59XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyLnByb3ZpZGUpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzb2x2ZWRQcm92aWRlciA9IHJlc29sdmVQcm92aWRlcihwcm92aWRlcik7XG4gICAgICAgICAgICBpZiAocHJvdmlkZXIubXVsdGkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbXVsdGkgcHJvdmlkZXIuXG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbXVsdGlQcm92aWRlciA9IHJlY29yZHMuZ2V0KHRva2VuKTtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobXVsdGlQcm92aWRlci5mbiAhPT0gTVVMVElfUFJPVklERVJfRk4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG11bHRpUHJvdmlkZXJNaXhFcnJvcih0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIHBsYWNlaG9sZGVyIGZhY3Rvcnkgd2hpY2ggd2lsbCBsb29rIHVwIHRoZSBjb25zdGl0dWVudHMgb2YgdGhlIG11bHRpIHByb3ZpZGVyLlxuICAgICAgICAgICAgICAgICAgICByZWNvcmRzLnNldCh0b2tlbiwgbXVsdGlQcm92aWRlciA9IC8qKiBAdHlwZSB7P30gKi8gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiBwcm92aWRlci5wcm92aWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VOZXc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm46IE1VTFRJX1BST1ZJREVSX0ZOLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IEVNUFRZXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVHJlYXQgdGhlIHByb3ZpZGVyIGFzIHRoZSB0b2tlbi5cbiAgICAgICAgICAgICAgICB0b2tlbiA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgICAgIG11bHRpUHJvdmlkZXIuZGVwcy5wdXNoKHsgdG9rZW46IHRva2VuLCBvcHRpb25zOiA2IC8qIERlZmF1bHQgKi8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmQgPSByZWNvcmRzLmdldCh0b2tlbik7XG4gICAgICAgICAgICBpZiAocmVjb3JkICYmIHJlY29yZC5mbiA9PSBNVUxUSV9QUk9WSURFUl9GTikge1xuICAgICAgICAgICAgICAgIHRocm93IG11bHRpUHJvdmlkZXJNaXhFcnJvcih0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmRzLnNldCh0b2tlbiwgcmVzb2x2ZWRQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBzdGF0aWNFcnJvcignVW5leHBlY3RlZCBwcm92aWRlcicsIHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB0b2tlblxuICogQHBhcmFtIHs/fSByZWNvcmRcbiAqIEBwYXJhbSB7P30gcmVjb3Jkc1xuICogQHBhcmFtIHs/fSBwYXJlbnRcbiAqIEBwYXJhbSB7P30gbm90Rm91bmRWYWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdHJ5UmVzb2x2ZVRva2VuKHRva2VuLCByZWNvcmQsIHJlY29yZHMsIHBhcmVudCwgbm90Rm91bmRWYWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlVG9rZW4odG9rZW4sIHJlY29yZCwgcmVjb3JkcywgcGFyZW50LCBub3RGb3VuZFZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKC8qKiBAdHlwZSB7P30gKi8gZSkge1xuICAgICAgICAvLyBlbnN1cmUgdGhhdCAnZScgaXMgb2YgdHlwZSBFcnJvci5cbiAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgICAgZSA9IG5ldyBFcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXRoID0gZVtOR19URU1QX1RPS0VOX1BBVEhdID0gZVtOR19URU1QX1RPS0VOX1BBVEhdIHx8IFtdO1xuICAgICAgICBwYXRoLnVuc2hpZnQodG9rZW4pO1xuICAgICAgICBpZiAocmVjb3JkICYmIHJlY29yZC52YWx1ZSA9PSBDSVJDVUxBUikge1xuICAgICAgICAgICAgLy8gUmVzZXQgdGhlIENpcmN1bGFyIGZsYWcuXG4gICAgICAgICAgICByZWNvcmQudmFsdWUgPSBFTVBUWTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB0b2tlblxuICogQHBhcmFtIHs/fSByZWNvcmRcbiAqIEBwYXJhbSB7P30gcmVjb3Jkc1xuICogQHBhcmFtIHs/fSBwYXJlbnRcbiAqIEBwYXJhbSB7P30gbm90Rm91bmRWYWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRva2VuKHRva2VuLCByZWNvcmQsIHJlY29yZHMsIHBhcmVudCwgbm90Rm91bmRWYWx1ZSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlO1xuICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIHJlY29yZCwgdGhpcyBpbXBsaWVzIHRoYXQgd2UgZG9uJ3Qgb3duIHRoZSBwcm92aWRlciBoZW5jZSBkb24ndCBrbm93IGhvd1xuICAgICAgICAvLyB0byByZXNvbHZlIGl0LlxuICAgICAgICB2YWx1ZSA9IHJlY29yZC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlID09IENJUkNVTEFSKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihOT19ORVdfTElORSArICdDaXJjdWxhciBkZXBlbmRlbmN5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IEVNUFRZKSB7XG4gICAgICAgICAgICByZWNvcmQudmFsdWUgPSBDSVJDVUxBUjtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9iaiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHVzZU5ldyA9IHJlY29yZC51c2VOZXc7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmbiA9IHJlY29yZC5mbjtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlcFJlY29yZHMgPSByZWNvcmQuZGVwcztcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlcHMgPSBFTVBUWTtcbiAgICAgICAgICAgIGlmIChkZXBSZWNvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlcHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgZGVwUmVjb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBSZWNvcmQgPSBkZXBSZWNvcmRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvcHRpb25zID0gZGVwUmVjb3JkLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoaWxkUmVjb3JkID0gb3B0aW9ucyAmIDIgLyogQ2hlY2tTZWxmICovID8gcmVjb3Jkcy5nZXQoZGVwUmVjb3JkLnRva2VuKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZGVwcy5wdXNoKHRyeVJlc29sdmVUb2tlbihcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3VycmVudCBUb2tlbiB0byByZXNvbHZlXG4gICAgICAgICAgICAgICAgICAgIGRlcFJlY29yZC50b2tlbiwgY2hpbGRSZWNvcmQsIHJlY29yZHMsIFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBrbm93IGhvdyB0byByZXNvbHZlIGRlcGVuZGVuY3kgYW5kIHdlIHNob3VsZCBub3QgY2hlY2sgcGFyZW50IGZvciBpdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhbiBwYXNzIGluIE51bGwgaW5qZWN0b3IuXG4gICAgICAgICAgICAgICAgICAgICFjaGlsZFJlY29yZCAmJiAhKG9wdGlvbnMgJiA0IC8qIENoZWNrUGFyZW50ICovKSA/IE5VTExfSU5KRUNUT1IgOiBwYXJlbnQsIG9wdGlvbnMgJiAxIC8qIE9wdGlvbmFsICovID8gbnVsbCA6IEluamVjdG9yLlRIUk9XX0lGX05PVF9GT1VORCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY29yZC52YWx1ZSA9IHZhbHVlID0gdXNlTmV3ID8gbmV3ICgoX2EgPSAoLyoqIEB0eXBlIHs/fSAqLyAoZm4pKSkuYmluZC5hcHBseShfYSwgW3ZvaWQgMF0uY29uY2F0KGRlcHMpKSkoKSA6IGZuLmFwcGx5KG9iaiwgZGVwcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gcGFyZW50LmdldCh0b2tlbiwgbm90Rm91bmRWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgICB2YXIgX2E7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcHJvdmlkZXJcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVEZXBzKHByb3ZpZGVyKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVwcyA9IEVNUFRZO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZpZGVyRGVwcyA9ICgvKiogQHR5cGUgez99ICovIChwcm92aWRlcikpLmRlcHM7XG4gICAgaWYgKHByb3ZpZGVyRGVwcyAmJiBwcm92aWRlckRlcHMubGVuZ3RoKSB7XG4gICAgICAgIGRlcHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHByb3ZpZGVyRGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3B0aW9ucyA9IDY7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyRGVwc1tpXSk7XG4gICAgICAgICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaiA9IDAsIC8qKiBAdHlwZSB7P30gKi8gYW5ub3RhdGlvbnMgPSB0b2tlbjsgaiA8IGFubm90YXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFubm90YXRpb24gPSBhbm5vdGF0aW9uc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFubm90YXRpb24gaW5zdGFuY2VvZiBPcHRpb25hbCB8fCBhbm5vdGF0aW9uID09IE9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8IDEgLyogT3B0aW9uYWwgKi87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYW5ub3RhdGlvbiBpbnN0YW5jZW9mIFNraXBTZWxmIHx8IGFubm90YXRpb24gPT0gU2tpcFNlbGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zICYgfjIgLyogQ2hlY2tTZWxmICovO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFubm90YXRpb24gaW5zdGFuY2VvZiBTZWxmIHx8IGFubm90YXRpb24gPT0gU2VsZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgJiB+NCAvKiBDaGVja1BhcmVudCAqLztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhbm5vdGF0aW9uIGluc3RhbmNlb2YgSW5qZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9ICgvKiogQHR5cGUgez99ICovIChhbm5vdGF0aW9uKSkudG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKGFubm90YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVwcy5wdXNoKHsgdG9rZW46IHRva2VuLCBvcHRpb25zOiBvcHRpb25zIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCgvKiogQHR5cGUgez99ICovIChwcm92aWRlcikpLnVzZUV4aXN0aW5nKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRva2VuID0gcmVzb2x2ZUZvcndhcmRSZWYoKC8qKiBAdHlwZSB7P30gKi8gKHByb3ZpZGVyKSkudXNlRXhpc3RpbmcpO1xuICAgICAgICBkZXBzID0gW3sgdG9rZW46IHRva2VuLCBvcHRpb25zOiA2IC8qIERlZmF1bHQgKi8gfV07XG4gICAgfVxuICAgIGVsc2UgaWYgKCFwcm92aWRlckRlcHMgJiYgIShVU0VfVkFMVUUgaW4gcHJvdmlkZXIpKSB7XG4gICAgICAgIC8vIHVzZVZhbHVlICYgdXNlRXhpc3RpbmcgYXJlIHRoZSBvbmx5IG9uZXMgd2hpY2ggYXJlIGV4ZW1wdCBmcm9tIGRlcHMgYWxsIG90aGVycyBuZWVkIGl0LlxuICAgICAgICB0aHJvdyBzdGF0aWNFcnJvcignXFwnZGVwc1xcJyByZXF1aXJlZCcsIHByb3ZpZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlcHM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdGV4dFxuICogQHBhcmFtIHs/fSBvYmpcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHRleHQsIG9iaikge1xuICAgIHRleHQgPSB0ZXh0ICYmIHRleHQuY2hhckF0KDApID09PSAnXFxuJyAmJiB0ZXh0LmNoYXJBdCgxKSA9PSBOT19ORVdfTElORSA/IHRleHQuc3Vic3RyKDIpIDogdGV4dDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb250ZXh0ID0gc3RyaW5naWZ5KG9iaik7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGNvbnRleHQgPSBvYmoubWFwKHN0cmluZ2lmeSkuam9pbignIC0+ICcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJ0cyA9IC8qKiBAdHlwZSB7P30gKi8gKFtdKTtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goa2V5ICsgJzonICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBzdHJpbmdpZnkodmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dCA9IFwie1wiICsgcGFydHMuam9pbignLCAnKSArIFwifVwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJTdGF0aWNJbmplY3RvckVycm9yW1wiICsgY29udGV4dCArIFwiXTogXCIgKyB0ZXh0LnJlcGxhY2UoTkVXX0xJTkUsICdcXG4gICcpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHRleHRcbiAqIEBwYXJhbSB7P30gb2JqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzdGF0aWNFcnJvcih0ZXh0LCBvYmopIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGZvcm1hdEVycm9yKHRleHQsIG9iaikpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHs/fSBvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3RcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGdldENsb3N1cmVTYWZlUHJvcGVydHkob2JqV2l0aFByb3BlcnR5VG9FeHRyYWN0KSB7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgaW4gb2JqV2l0aFByb3BlcnR5VG9FeHRyYWN0KSB7XG4gICAgICAgIGlmIChvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3Rba2V5XSA9PT0gR0VUX1BST1BFUlRZX05BTUUpIHtcbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoJyFwcm9wJyk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxudmFyIEVSUk9SX0RFQlVHX0NPTlRFWFQgPSAnbmdEZWJ1Z0NvbnRleHQnO1xudmFyIEVSUk9SX09SSUdJTkFMX0VSUk9SID0gJ25nT3JpZ2luYWxFcnJvcic7XG52YXIgRVJST1JfTE9HR0VSID0gJ25nRXJyb3JMb2dnZXInO1xuLyoqXG4gKiBAcGFyYW0gez99IGVycm9yXG4gKiBAcmV0dXJuIHs/fVxuICovXG5cbi8qKlxuICogQHBhcmFtIHs/fSBlcnJvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0RGVidWdDb250ZXh0KGVycm9yKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovIChlcnJvcikpW0VSUk9SX0RFQlVHX0NPTlRFWFRdO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGVycm9yXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBnZXRPcmlnaW5hbEVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovIChlcnJvcikpW0VSUk9SX09SSUdJTkFMX0VSUk9SXTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlcnJvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0RXJyb3JMb2dnZXIoZXJyb3IpIHtcbiAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKGVycm9yKSlbRVJST1JfTE9HR0VSXSB8fCBkZWZhdWx0RXJyb3JMb2dnZXI7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gY29uc29sZVxuICogQHBhcmFtIHsuLi4/fSB2YWx1ZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckxvZ2dlcihjb25zb2xlKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCB2YWx1ZXMpO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFxcQHdoYXRJdERvZXMgUHJvdmlkZXMgYSBob29rIGZvciBjZW50cmFsaXplZCBleGNlcHRpb24gaGFuZGxpbmcuXG4gKlxuICogXFxAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgRXJyb3JIYW5kbGVyYCBwcmludHMgZXJyb3IgbWVzc2FnZXMgdG8gdGhlIGBjb25zb2xlYC4gVG9cbiAqIGludGVyY2VwdCBlcnJvciBoYW5kbGluZywgd3JpdGUgYSBjdXN0b20gZXhjZXB0aW9uIGhhbmRsZXIgdGhhdCByZXBsYWNlcyB0aGlzIGRlZmF1bHQgYXNcbiAqIGFwcHJvcHJpYXRlIGZvciB5b3VyIGFwcC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYFxuICogY2xhc3MgTXlFcnJvckhhbmRsZXIgaW1wbGVtZW50cyBFcnJvckhhbmRsZXIge1xuICogICBoYW5kbGVFcnJvcihlcnJvcikge1xuICogICAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSBleGNlcHRpb25cbiAqICAgfVxuICogfVxuICpcbiAqIFxcQE5nTW9kdWxlKHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEVycm9ySGFuZGxlciwgdXNlQ2xhc3M6IE15RXJyb3JIYW5kbGVyfV1cbiAqIH0pXG4gKiBjbGFzcyBNeU1vZHVsZSB7fVxuICogYGBgXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBFcnJvckhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXJyb3JIYW5kbGVyKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NvbnNvbGUgPSBjb25zb2xlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVycm9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUVycm9yID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9yaWdpbmFsRXJyb3IgPSB0aGlzLl9maW5kT3JpZ2luYWxFcnJvcihlcnJvcik7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbnRleHQgPSB0aGlzLl9maW5kQ29udGV4dChlcnJvcik7XG4gICAgICAgIC8vIE5vdGU6IEJyb3dzZXIgY29uc29sZXMgc2hvdyB0aGUgcGxhY2UgZnJvbSB3aGVyZSBjb25zb2xlLmVycm9yIHdhcyBjYWxsZWQuXG4gICAgICAgIC8vIFdlIGNhbiB1c2UgdGhpcyB0byBnaXZlIHVzZXJzIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGVycm9yLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlcnJvckxvZ2dlciA9IGdldEVycm9yTG9nZ2VyKGVycm9yKTtcbiAgICAgICAgZXJyb3JMb2dnZXIodGhpcy5fY29uc29sZSwgXCJFUlJPUlwiLCBlcnJvcik7XG4gICAgICAgIGlmIChvcmlnaW5hbEVycm9yKSB7XG4gICAgICAgICAgICBlcnJvckxvZ2dlcih0aGlzLl9jb25zb2xlLCBcIk9SSUdJTkFMIEVSUk9SXCIsIG9yaWdpbmFsRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICBlcnJvckxvZ2dlcih0aGlzLl9jb25zb2xlLCAnRVJST1IgQ09OVEVYVCcsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGVycm9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLl9maW5kQ29udGV4dCA9IC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGdldERlYnVnQ29udGV4dChlcnJvcikgPyBnZXREZWJ1Z0NvbnRleHQoZXJyb3IpIDpcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5kQ29udGV4dChnZXRPcmlnaW5hbEVycm9yKGVycm9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IGVycm9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLl9maW5kT3JpZ2luYWxFcnJvciA9IC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBlcnJvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGUgPSBnZXRPcmlnaW5hbEVycm9yKGVycm9yKTtcbiAgICAgICAgd2hpbGUgKGUgJiYgZ2V0T3JpZ2luYWxFcnJvcihlKSkge1xuICAgICAgICAgICAgZSA9IGdldE9yaWdpbmFsRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfTtcbiAgICByZXR1cm4gRXJyb3JIYW5kbGVyO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBtZXNzYWdlXG4gKiBAcGFyYW0gez99IG9yaWdpbmFsRXJyb3JcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHdyYXBwZWRFcnJvcihtZXNzYWdlLCBvcmlnaW5hbEVycm9yKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbXNnID0gbWVzc2FnZSArIFwiIGNhdXNlZCBieTogXCIgKyAob3JpZ2luYWxFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gb3JpZ2luYWxFcnJvci5tZXNzYWdlIDogb3JpZ2luYWxFcnJvcik7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3IgPSBFcnJvcihtc2cpO1xuICAgICgvKiogQHR5cGUgez99ICovIChlcnJvcikpW0VSUk9SX09SSUdJTkFMX0VSUk9SXSA9IG9yaWdpbmFsRXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwYXJhbSB7P30ga2V5c1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZmluZEZpcnN0Q2xvc2VkQ3ljbGUoa2V5cykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChyZXMuaW5kZXhPZihrZXlzW2ldKSA+IC0xKSB7XG4gICAgICAgICAgICByZXMucHVzaChrZXlzW2ldKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goa2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30ga2V5c1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0UmVzb2x2aW5nUGF0aChrZXlzKSB7XG4gICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXZlcnNlZCA9IGZpbmRGaXJzdENsb3NlZEN5Y2xlKGtleXMuc2xpY2UoKS5yZXZlcnNlKCkpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlblN0cnMgPSByZXZlcnNlZC5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIHN0cmluZ2lmeShrLnRva2VuKTsgfSk7XG4gICAgICAgIHJldHVybiAnICgnICsgdG9rZW5TdHJzLmpvaW4oJyAtPiAnKSArICcpJztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0gez99IGluamVjdG9yXG4gKiBAcGFyYW0gez99IGtleVxuICogQHBhcmFtIHs/fSBjb25zdHJ1Y3RSZXNvbHZpbmdNZXNzYWdlXG4gKiBAcGFyYW0gez89fSBvcmlnaW5hbEVycm9yXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbmplY3Rpb25FcnJvcihpbmplY3Rvciwga2V5LCBjb25zdHJ1Y3RSZXNvbHZpbmdNZXNzYWdlLCBvcmlnaW5hbEVycm9yKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2V5cyA9IFtrZXldO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGVyck1zZyA9IGNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2Uoa2V5cyk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3IgPSAvKiogQHR5cGUgez99ICovICgob3JpZ2luYWxFcnJvciA/IHdyYXBwZWRFcnJvcihlcnJNc2csIG9yaWdpbmFsRXJyb3IpIDogRXJyb3IoZXJyTXNnKSkpO1xuICAgIGVycm9yLmFkZEtleSA9IGFkZEtleTtcbiAgICBlcnJvci5rZXlzID0ga2V5cztcbiAgICBlcnJvci5pbmplY3RvcnMgPSBbaW5qZWN0b3JdO1xuICAgIGVycm9yLmNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2UgPSBjb25zdHJ1Y3RSZXNvbHZpbmdNZXNzYWdlO1xuICAgICgvKiogQHR5cGUgez99ICovIChlcnJvcikpW0VSUk9SX09SSUdJTkFMX0VSUk9SXSA9IG9yaWdpbmFsRXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xufVxuLyoqXG4gKiBAdGhpcyB7P31cbiAqIEBwYXJhbSB7P30gaW5qZWN0b3JcbiAqIEBwYXJhbSB7P30ga2V5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhZGRLZXkoaW5qZWN0b3IsIGtleSkge1xuICAgIHRoaXMuaW5qZWN0b3JzLnB1c2goaW5qZWN0b3IpO1xuICAgIHRoaXMua2V5cy5wdXNoKGtleSk7XG4gICAgLy8gTm90ZTogVGhpcyB1cGRhdGVkIG1lc3NhZ2Ugd29uJ3QgYmUgcmVmbGVjdGVkIGluIHRoZSBgLnN0YWNrYCBwcm9wZXJ0eVxuICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuY29uc3RydWN0UmVzb2x2aW5nTWVzc2FnZSh0aGlzLmtleXMpO1xufVxuLyoqXG4gKiBUaHJvd24gd2hlbiB0cnlpbmcgdG8gcmV0cmlldmUgYSBkZXBlbmRlbmN5IGJ5IGtleSBmcm9tIHtcXEBsaW5rIEluamVjdG9yfSwgYnV0IHRoZVxuICoge1xcQGxpbmsgSW5qZWN0b3J9IGRvZXMgbm90IGhhdmUgYSB7XFxAbGluayBQcm92aWRlcn0gZm9yIHRoZSBnaXZlbiBrZXkuXG4gKlxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L3ZxOEQzRlJCOWFHYm5XSnF0RVBFP3A9cHJldmlldykpXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgQSB7XG4gKiAgIGNvbnN0cnVjdG9yKGI6Qikge31cbiAqIH1cbiAqXG4gKiBleHBlY3QoKCkgPT4gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICogQHBhcmFtIHs/fSBpbmplY3RvclxuICogQHBhcmFtIHs/fSBrZXlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vUHJvdmlkZXJFcnJvcihpbmplY3Rvciwga2V5KSB7XG4gICAgcmV0dXJuIGluamVjdGlvbkVycm9yKGluamVjdG9yLCBrZXksIGZ1bmN0aW9uIChrZXlzKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZpcnN0ID0gc3RyaW5naWZ5KGtleXNbMF0udG9rZW4pO1xuICAgICAgICByZXR1cm4gXCJObyBwcm92aWRlciBmb3IgXCIgKyBmaXJzdCArIFwiIVwiICsgY29uc3RydWN0UmVzb2x2aW5nUGF0aChrZXlzKTtcbiAgICB9KTtcbn1cbi8qKlxuICogVGhyb3duIHdoZW4gZGVwZW5kZW5jaWVzIGZvcm0gYSBjeWNsZS5cbiAqXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvd1lRZE5vczBUenFsM2VpMUVWOWo/cD1pbmZvKSlcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcbiAqICAge3Byb3ZpZGU6IFwib25lXCIsIHVzZUZhY3Rvcnk6ICh0d28pID0+IFwidHdvXCIsIGRlcHM6IFtbbmV3IEluamVjdChcInR3b1wiKV1dfSxcbiAqICAge3Byb3ZpZGU6IFwidHdvXCIsIHVzZUZhY3Rvcnk6IChvbmUpID0+IFwib25lXCIsIGRlcHM6IFtbbmV3IEluamVjdChcIm9uZVwiKV1dfVxuICogXSk7XG4gKlxuICogZXhwZWN0KCgpID0+IGluamVjdG9yLmdldChcIm9uZVwiKSkudG9UaHJvd0Vycm9yKCk7XG4gKiBgYGBcbiAqXG4gKiBSZXRyaWV2aW5nIGBBYCBvciBgQmAgdGhyb3dzIGEgYEN5Y2xpY0RlcGVuZGVuY3lFcnJvcmAgYXMgdGhlIGdyYXBoIGFib3ZlIGNhbm5vdCBiZSBjb25zdHJ1Y3RlZC5cbiAqIEBwYXJhbSB7P30gaW5qZWN0b3JcbiAqIEBwYXJhbSB7P30ga2V5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjeWNsaWNEZXBlbmRlbmN5RXJyb3IoaW5qZWN0b3IsIGtleSkge1xuICAgIHJldHVybiBpbmplY3Rpb25FcnJvcihpbmplY3Rvciwga2V5LCBmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICByZXR1cm4gXCJDYW5ub3QgaW5zdGFudGlhdGUgY3ljbGljIGRlcGVuZGVuY3khXCIgKyBjb25zdHJ1Y3RSZXNvbHZpbmdQYXRoKGtleXMpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBUaHJvd24gd2hlbiBhIGNvbnN0cnVjdGluZyB0eXBlIHJldHVybnMgd2l0aCBhbiBFcnJvci5cbiAqXG4gKiBUaGUgYEluc3RhbnRpYXRpb25FcnJvcmAgY2xhc3MgY29udGFpbnMgdGhlIG9yaWdpbmFsIGVycm9yIHBsdXMgdGhlIGRlcGVuZGVuY3kgZ3JhcGggd2hpY2ggY2F1c2VkXG4gKiB0aGlzIG9iamVjdCB0byBiZSBpbnN0YW50aWF0ZWQuXG4gKlxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0LzdhV1lkY3FUUXNQMGVOcUVkVUFmP3A9cHJldmlldykpXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgQSB7XG4gKiAgIGNvbnN0cnVjdG9yKCkge1xuICogICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZScpO1xuICogICB9XG4gKiB9XG4gKlxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pO1xuICogdHJ5IHtcbiAqICAgaW5qZWN0b3IuZ2V0KEEpO1xuICogfSBjYXRjaCAoZSkge1xuICogICBleHBlY3QoZSBpbnN0YW5jZW9mIEluc3RhbnRpYXRpb25FcnJvcikudG9CZSh0cnVlKTtcbiAqICAgZXhwZWN0KGUub3JpZ2luYWxFeGNlcHRpb24ubWVzc2FnZSkudG9FcXVhbChcIm1lc3NhZ2VcIik7XG4gKiAgIGV4cGVjdChlLm9yaWdpbmFsU3RhY2spLnRvQmVEZWZpbmVkKCk7XG4gKiB9XG4gKiBgYGBcbiAqIEBwYXJhbSB7P30gaW5qZWN0b3JcbiAqIEBwYXJhbSB7P30gb3JpZ2luYWxFeGNlcHRpb25cbiAqIEBwYXJhbSB7P30gb3JpZ2luYWxTdGFja1xuICogQHBhcmFtIHs/fSBrZXlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRpb25FcnJvcihpbmplY3Rvciwgb3JpZ2luYWxFeGNlcHRpb24sIG9yaWdpbmFsU3RhY2ssIGtleSkge1xuICAgIHJldHVybiBpbmplY3Rpb25FcnJvcihpbmplY3Rvciwga2V5LCBmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmaXJzdCA9IHN0cmluZ2lmeShrZXlzWzBdLnRva2VuKTtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRXhjZXB0aW9uLm1lc3NhZ2UgKyBcIjogRXJyb3IgZHVyaW5nIGluc3RhbnRpYXRpb24gb2YgXCIgKyBmaXJzdCArIFwiIVwiICsgY29uc3RydWN0UmVzb2x2aW5nUGF0aChrZXlzKSArIFwiLlwiO1xuICAgIH0sIG9yaWdpbmFsRXhjZXB0aW9uKTtcbn1cbi8qKlxuICogVGhyb3duIHdoZW4gYW4gb2JqZWN0IG90aGVyIHRoZW4ge1xcQGxpbmsgUHJvdmlkZXJ9IChvciBgVHlwZWApIGlzIHBhc3NlZCB0byB7XFxAbGluayBJbmplY3Rvcn1cbiAqIGNyZWF0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9ZYXRDRmJQQU1DTDBKU1NRNG12SD9wPXByZXZpZXcpKVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGV4cGVjdCgoKSA9PiBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcIm5vdCBhIHR5cGVcIl0pKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICogQHBhcmFtIHs/fSBwcm92aWRlclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaW52YWxpZFByb3ZpZGVyRXJyb3IocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gRXJyb3IoXCJJbnZhbGlkIHByb3ZpZGVyIC0gb25seSBpbnN0YW5jZXMgb2YgUHJvdmlkZXIgYW5kIFR5cGUgYXJlIGFsbG93ZWQsIGdvdDogXCIgKyBwcm92aWRlcik7XG59XG4vKipcbiAqIFRocm93biB3aGVuIHRoZSBjbGFzcyBoYXMgbm8gYW5ub3RhdGlvbiBpbmZvcm1hdGlvbi5cbiAqXG4gKiBMYWNrIG9mIGFubm90YXRpb24gaW5mb3JtYXRpb24gcHJldmVudHMgdGhlIHtcXEBsaW5rIEluamVjdG9yfSBmcm9tIGRldGVybWluaW5nIHdoaWNoIGRlcGVuZGVuY2llc1xuICogbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvckhuWnRsTlM3dkpPUFE2cGNWa20/cD1wcmV2aWV3KSlcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjbGFzcyBBIHtcbiAqICAgY29uc3RydWN0b3IoYikge31cbiAqIH1cbiAqXG4gKiBleHBlY3QoKCkgPT4gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgZXJyb3IgaXMgYWxzbyB0aHJvd24gd2hlbiB0aGUgY2xhc3Mgbm90IG1hcmtlZCB3aXRoIHtcXEBsaW5rIEluamVjdGFibGV9IGhhcyBwYXJhbWV0ZXIgdHlwZXMuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgQiB7fVxuICpcbiAqIGNsYXNzIEEge1xuICogICBjb25zdHJ1Y3RvcihiOkIpIHt9IC8vIG5vIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwYXJhbWV0ZXIgdHlwZXMgb2YgQSBpcyBhdmFpbGFibGUgYXQgcnVudGltZS5cbiAqIH1cbiAqXG4gKiBleHBlY3QoKCkgPT4gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQSxCXSkpLnRvVGhyb3dFcnJvcigpO1xuICogYGBgXG4gKiBcXEBzdGFibGVcbiAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICogQHBhcmFtIHs/fSBwYXJhbXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vQW5ub3RhdGlvbkVycm9yKHR5cGVPckZ1bmMsIHBhcmFtcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHNpZ25hdHVyZSA9IFtdO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDAsIC8qKiBAdHlwZSB7P30gKi8gaWkgPSBwYXJhbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbWV0ZXIgPSBwYXJhbXNbaV07XG4gICAgICAgIGlmICghcGFyYW1ldGVyIHx8IHBhcmFtZXRlci5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgc2lnbmF0dXJlLnB1c2goJz8nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpZ25hdHVyZS5wdXNoKHBhcmFtZXRlci5tYXAoc3RyaW5naWZ5KS5qb2luKCcgJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBFcnJvcignQ2Fubm90IHJlc29sdmUgYWxsIHBhcmFtZXRlcnMgZm9yIFxcJycgKyBzdHJpbmdpZnkodHlwZU9yRnVuYykgKyAnXFwnKCcgK1xuICAgICAgICBzaWduYXR1cmUuam9pbignLCAnKSArICcpLiAnICtcbiAgICAgICAgJ01ha2Ugc3VyZSB0aGF0IGFsbCB0aGUgcGFyYW1ldGVycyBhcmUgZGVjb3JhdGVkIHdpdGggSW5qZWN0IG9yIGhhdmUgdmFsaWQgdHlwZSBhbm5vdGF0aW9ucyBhbmQgdGhhdCBcXCcnICtcbiAgICAgICAgc3RyaW5naWZ5KHR5cGVPckZ1bmMpICsgJ1xcJyBpcyBkZWNvcmF0ZWQgd2l0aCBJbmplY3RhYmxlLicpO1xufVxuLyoqXG4gKiBUaHJvd24gd2hlbiBnZXR0aW5nIGFuIG9iamVjdCBieSBpbmRleC5cbiAqXG4gKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvYlJzMFNYMk9UUWlKenF2amdsOFA/cD1wcmV2aWV3KSlcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjbGFzcyBBIHt9XG4gKlxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pO1xuICpcbiAqIGV4cGVjdCgoKSA9PiBpbmplY3Rvci5nZXRBdCgxMDApKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICogXFxAc3RhYmxlXG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBvdXRPZkJvdW5kc0Vycm9yKGluZGV4KSB7XG4gICAgcmV0dXJuIEVycm9yKFwiSW5kZXggXCIgKyBpbmRleCArIFwiIGlzIG91dC1vZi1ib3VuZHMuXCIpO1xufVxuLyoqXG4gKiBUaHJvd24gd2hlbiBhIG11bHRpIHByb3ZpZGVyIGFuZCBhIHJlZ3VsYXIgcHJvdmlkZXIgYXJlIGJvdW5kIHRvIHRoZSBzYW1lIHRva2VuLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogZXhwZWN0KCgpID0+IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1xuICogICB7IHByb3ZpZGU6IFwiU3RyaW5nc1wiLCB1c2VWYWx1ZTogXCJzdHJpbmcxXCIsIG11bHRpOiB0cnVlfSxcbiAqICAgeyBwcm92aWRlOiBcIlN0cmluZ3NcIiwgdXNlVmFsdWU6IFwic3RyaW5nMlwiLCBtdWx0aTogZmFsc2V9XG4gKiBdKSkudG9UaHJvd0Vycm9yKCk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7P30gcHJvdmlkZXIxXG4gKiBAcGFyYW0gez99IHByb3ZpZGVyMlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbWl4aW5nTXVsdGlQcm92aWRlcnNXaXRoUmVndWxhclByb3ZpZGVyc0Vycm9yKHByb3ZpZGVyMSwgcHJvdmlkZXIyKSB7XG4gICAgcmV0dXJuIEVycm9yKFwiQ2Fubm90IG1peCBtdWx0aSBwcm92aWRlcnMgYW5kIHJlZ3VsYXIgcHJvdmlkZXJzLCBnb3Q6IFwiICsgcHJvdmlkZXIxICsgXCIgXCIgKyBwcm92aWRlcjIpO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgdW5pcXVlIG9iamVjdCB1c2VkIGZvciByZXRyaWV2aW5nIGl0ZW1zIGZyb20gdGhlIHtcXEBsaW5rIFJlZmxlY3RpdmVJbmplY3Rvcn0uXG4gKlxuICogS2V5cyBoYXZlOlxuICogLSBhIHN5c3RlbS13aWRlIHVuaXF1ZSBgaWRgLlxuICogLSBhIGB0b2tlbmAuXG4gKlxuICogYEtleWAgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IHtcXEBsaW5rIFJlZmxlY3RpdmVJbmplY3Rvcn0gYmVjYXVzZSBpdHMgc3lzdGVtLXdpZGUgdW5pcXVlIGBpZGAgYWxsb3dzXG4gKiB0aGVcbiAqIGluamVjdG9yIHRvIHN0b3JlIGNyZWF0ZWQgb2JqZWN0cyBpbiBhIG1vcmUgZWZmaWNpZW50IHdheS5cbiAqXG4gKiBgS2V5YCBzaG91bGQgbm90IGJlIGNyZWF0ZWQgZGlyZWN0bHkuIHtcXEBsaW5rIFJlZmxlY3RpdmVJbmplY3Rvcn0gY3JlYXRlcyBrZXlzIGF1dG9tYXRpY2FsbHkgd2hlblxuICogcmVzb2x2aW5nXG4gKiBwcm92aWRlcnMuXG4gKiBAZGVwcmVjYXRlZCBObyByZXBsYWNlbWVudFxuICovXG52YXIgUmVmbGVjdGl2ZUtleSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gUmVmbGVjdGl2ZUtleSh0b2tlbiwgaWQpIHtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9rZW4gbXVzdCBiZSBkZWZpbmVkIScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGxheU5hbWUgPSBzdHJpbmdpZnkodGhpcy50b2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIGBLZXlgIGZvciBhIHRva2VuLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIGBLZXlgIGZvciBhIHRva2VuLlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVLZXkuZ2V0ID0gLyoqXG4gICAgICogUmV0cmlldmVzIGEgYEtleWAgZm9yIGEgdG9rZW4uXG4gICAgICogQHBhcmFtIHs/fSB0b2tlblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBfZ2xvYmFsS2V5UmVnaXN0cnkuZ2V0KHJlc29sdmVGb3J3YXJkUmVmKHRva2VuKSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVmbGVjdGl2ZUtleSwgXCJudW1iZXJPZktleXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybnMgdGhlIG51bWJlciBvZiBrZXlzIHJlZ2lzdGVyZWQgaW4gdGhlIHN5c3RlbS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99IHRoZSBudW1iZXIgb2Yga2V5cyByZWdpc3RlcmVkIGluIHRoZSBzeXN0ZW0uXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBfZ2xvYmFsS2V5UmVnaXN0cnkubnVtYmVyT2ZLZXlzOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gUmVmbGVjdGl2ZUtleTtcbn0oKSk7XG52YXIgS2V5UmVnaXN0cnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2V5UmVnaXN0cnkoKSB7XG4gICAgICAgIHRoaXMuX2FsbEtleXMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEtleVJlZ2lzdHJ5LnByb3RvdHlwZS5nZXQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHRva2VuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUmVmbGVjdGl2ZUtleSlcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgaWYgKHRoaXMuX2FsbEtleXMuaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLl9hbGxLZXlzLmdldCh0b2tlbikpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXdLZXkgPSBuZXcgUmVmbGVjdGl2ZUtleSh0b2tlbiwgUmVmbGVjdGl2ZUtleS5udW1iZXJPZktleXMpO1xuICAgICAgICB0aGlzLl9hbGxLZXlzLnNldCh0b2tlbiwgbmV3S2V5KTtcbiAgICAgICAgcmV0dXJuIG5ld0tleTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZXlSZWdpc3RyeS5wcm90b3R5cGUsIFwibnVtYmVyT2ZLZXlzXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2FsbEtleXMuc2l6ZTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEtleVJlZ2lzdHJ5O1xufSgpKTtcbnZhciBfZ2xvYmFsS2V5UmVnaXN0cnkgPSBuZXcgS2V5UmVnaXN0cnkoKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBcXEB3aGF0SXREb2VzIFJlcHJlc2VudHMgYSB0eXBlIHRoYXQgYSBDb21wb25lbnQgb3Igb3RoZXIgb2JqZWN0IGlzIGluc3RhbmNlcyBvZi5cbiAqXG4gKiBcXEBkZXNjcmlwdGlvblxuICpcbiAqIEFuIGV4YW1wbGUgb2YgYSBgVHlwZWAgaXMgYE15Q3VzdG9tQ29tcG9uZW50YCBjbGFzcywgd2hpY2ggaW4gSmF2YVNjcmlwdCBpcyBiZSByZXByZXNlbnRlZCBieVxuICogdGhlIGBNeUN1c3RvbUNvbXBvbmVudGAgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBUeXBlID0gRnVuY3Rpb247XG4vKipcbiAqIEBwYXJhbSB7P30gdlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNUeXBlKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQXR0ZW50aW9uOiBUaGlzIHJlZ2V4IGhhcyB0byBob2xkIGV2ZW4gaWYgdGhlIGNvZGUgaXMgbWluaWZpZWQhXG4gKi9cbnZhciBERUxFR0FURV9DVE9SID0gL15mdW5jdGlvblxccytcXFMrXFwoXFwpXFxzKntbXFxzXFxTXStcXC5hcHBseVxcKHRoaXMsXFxzKmFyZ3VtZW50c1xcKS87XG52YXIgUmVmbGVjdGlvbkNhcGFiaWxpdGllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzKHJlZmxlY3QpIHtcbiAgICAgICAgdGhpcy5fcmVmbGVjdCA9IHJlZmxlY3QgfHwgX2dsb2JhbFsnUmVmbGVjdCddO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLmlzUmVmbGVjdGlvbkVuYWJsZWQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0gez99IHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLmZhY3RvcnkgPSAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3ICh0LmJpbmQuYXBwbHkodCwgW3ZvaWQgMF0uY29uY2F0KGFyZ3MpKSkoKTtcbiAgICB9OyB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1UeXBlc1xuICAgICAqIEBwYXJhbSB7P30gcGFyYW1Bbm5vdGF0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuX3ppcFR5cGVzQW5kQW5ub3RhdGlvbnMgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcGFyYW1UeXBlc1xuICAgICAqIEBwYXJhbSB7P30gcGFyYW1Bbm5vdGF0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmFtVHlwZXMsIHBhcmFtQW5ub3RhdGlvbnMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzdWx0O1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtVHlwZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkocGFyYW1Bbm5vdGF0aW9ucy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KHBhcmFtVHlwZXMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBUUyBvdXRwdXRzIE9iamVjdCBmb3IgcGFyYW1ldGVycyB3aXRob3V0IHR5cGVzLCB3aGlsZSBUcmFjZXVyIG9taXRzXG4gICAgICAgICAgICAvLyB0aGUgYW5ub3RhdGlvbnMuIEZvciBub3cgd2UgcHJlc2VydmUgdGhlIFRyYWNldXIgYmVoYXZpb3IgdG8gYWlkXG4gICAgICAgICAgICAvLyBtaWdyYXRpb24sIGJ1dCB0aGlzIGNhbiBiZSByZXZpc2l0ZWQuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtVHlwZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJhbVR5cGVzW2ldICE9IE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IFtwYXJhbVR5cGVzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtQW5ub3RhdGlvbnMgJiYgcGFyYW1Bbm5vdGF0aW9uc1tpXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gcmVzdWx0W2ldLmNvbmNhdChwYXJhbUFubm90YXRpb25zW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRDdG9yXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5fb3duUGFyYW1ldGVycyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50Q3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHR5cGUsIHBhcmVudEN0b3IpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBubyBkZWNvcmF0b3JzLCB3ZSBvbmx5IGhhdmUgZnVuY3Rpb24ubGVuZ3RoIGFzIG1ldGFkYXRhLlxuICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIHRvIGRldGVjdCB3aGV0aGVyIGEgY2hpbGQgY2xhc3MgZGVjbGFyZWQgYW4gb3duIGNvbnN0cnVjdG9yIG9yIG5vdCxcbiAgICAgICAgLy8gd2UgbmVlZCB0byBsb29rIGluc2lkZSBvZiB0aGF0IGNvbnN0cnVjdG9yIHRvIGNoZWNrIHdoZXRoZXIgaXQgaXNcbiAgICAgICAgLy8ganVzdCBjYWxsaW5nIHRoZSBwYXJlbnQuXG4gICAgICAgIC8vIFRoaXMgYWxzbyBoZWxwcyB0byB3b3JrIGFyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xMjQzOVxuICAgICAgICAvLyB0aGF0IHNldHMgJ2Rlc2lnbjpwYXJhbXR5cGVzJyB0byBbXVxuICAgICAgICAvLyBpZiBhIGNsYXNzIGluaGVyaXRzIGZyb20gYW5vdGhlciBjbGFzcyBidXQgaGFzIG5vIGN0b3IgZGVjbGFyZWQgaXRzZWxmLlxuICAgICAgICBpZiAoREVMRUdBVEVfQ1RPUi5leGVjKHR5cGUudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZWZlciB0aGUgZGlyZWN0IEFQSS5cbiAgICAgICAgaWYgKCgvKiogQHR5cGUgez99ICovICh0eXBlKSkucGFyYW1ldGVycyAmJiAoLyoqIEB0eXBlIHs/fSAqLyAodHlwZSkpLnBhcmFtZXRlcnMgIT09IHBhcmVudEN0b3IucGFyYW1ldGVycykge1xuICAgICAgICAgICAgcmV0dXJuICgvKiogQHR5cGUgez99ICovICh0eXBlKSkucGFyYW1ldGVycztcbiAgICAgICAgfVxuICAgICAgICAvLyBBUEkgb2YgdHNpY2tsZSBmb3IgbG93ZXJpbmcgZGVjb3JhdG9ycyB0byBwcm9wZXJ0aWVzIG9uIHRoZSBjbGFzcy5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdHNpY2tsZUN0b3JQYXJhbXMgPSAoLyoqIEB0eXBlIHs/fSAqLyAodHlwZSkpLmN0b3JQYXJhbWV0ZXJzO1xuICAgICAgICBpZiAodHNpY2tsZUN0b3JQYXJhbXMgJiYgdHNpY2tsZUN0b3JQYXJhbXMgIT09IHBhcmVudEN0b3IuY3RvclBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIC8vIE5ld2VyIHRzaWNrbGUgdXNlcyBhIGZ1bmN0aW9uIGNsb3N1cmVcbiAgICAgICAgICAgIC8vIFJldGFpbiB0aGUgbm9uLWZ1bmN0aW9uIGNhc2UgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBvbGRlciB0c2lja2xlXG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjdG9yUGFyYW1ldGVycyA9IHR5cGVvZiB0c2lja2xlQ3RvclBhcmFtcyA9PT0gJ2Z1bmN0aW9uJyA/IHRzaWNrbGVDdG9yUGFyYW1zKCkgOiB0c2lja2xlQ3RvclBhcmFtcztcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtVHlwZXNfMSA9IGN0b3JQYXJhbWV0ZXJzLm1hcChmdW5jdGlvbiAoY3RvclBhcmFtKSB7IHJldHVybiBjdG9yUGFyYW0gJiYgY3RvclBhcmFtLnR5cGU7IH0pO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1Bbm5vdGF0aW9uc18xID0gY3RvclBhcmFtZXRlcnMubWFwKGZ1bmN0aW9uIChjdG9yUGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3RvclBhcmFtICYmIGNvbnZlcnRUc2lja2xlRGVjb3JhdG9ySW50b01ldGFkYXRhKGN0b3JQYXJhbS5kZWNvcmF0b3JzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ppcFR5cGVzQW5kQW5ub3RhdGlvbnMocGFyYW1UeXBlc18xLCBwYXJhbUFubm90YXRpb25zXzEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFQSSBmb3IgbWV0YWRhdGEgY3JlYXRlZCBieSBpbnZva2luZyB0aGUgZGVjb3JhdG9ycy5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1Bbm5vdGF0aW9ucyA9IHR5cGUuaGFzT3duUHJvcGVydHkoUEFSQU1FVEVSUykgJiYgKC8qKiBAdHlwZSB7P30gKi8gKHR5cGUpKVtQQVJBTUVURVJTXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1UeXBlcyA9IHRoaXMuX3JlZmxlY3QgJiYgdGhpcy5fcmVmbGVjdC5nZXRPd25NZXRhZGF0YSAmJlxuICAgICAgICAgICAgdGhpcy5fcmVmbGVjdC5nZXRPd25NZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCB0eXBlKTtcbiAgICAgICAgaWYgKHBhcmFtVHlwZXMgfHwgcGFyYW1Bbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ppcFR5cGVzQW5kQW5ub3RhdGlvbnMocGFyYW1UeXBlcywgcGFyYW1Bbm5vdGF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYSBjbGFzcyBoYXMgbm8gZGVjb3JhdG9ycywgYXQgbGVhc3QgY3JlYXRlIG1ldGFkYXRhXG4gICAgICAgIC8vIGJhc2VkIG9uIGZ1bmN0aW9uLmxlbmd0aC5cbiAgICAgICAgLy8gTm90ZTogV2Uga25vdyB0aGF0IHRoaXMgaXMgYSByZWFsIGNvbnN0cnVjdG9yIGFzIHdlIGNoZWNrZWRcbiAgICAgICAgLy8gdGhlIGNvbnRlbnQgb2YgdGhlIGNvbnN0cnVjdG9yIGFib3ZlLlxuICAgICAgICByZXR1cm4gbmV3IEFycmF5KCgvKiogQHR5cGUgez99ICovICh0eXBlLmxlbmd0aCkpKS5maWxsKHVuZGVmaW5lZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLnBhcmFtZXRlcnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIC8vIE5vdGU6IG9ubHkgcmVwb3J0IG1ldGFkYXRhIGlmIHdlIGhhdmUgYXQgbGVhc3Qgb25lIGNsYXNzIGRlY29yYXRvclxuICAgICAgICAvLyB0byBzdGF5IGluIHN5bmMgd2l0aCB0aGUgc3RhdGljIHJlZmxlY3Rvci5cbiAgICAgICAgaWYgKCFpc1R5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnRDdG9yID0gZ2V0UGFyZW50Q3Rvcih0eXBlKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1ldGVycyA9IHRoaXMuX293blBhcmFtZXRlcnModHlwZSwgcGFyZW50Q3Rvcik7XG4gICAgICAgIGlmICghcGFyYW1ldGVycyAmJiBwYXJlbnRDdG9yICE9PSBPYmplY3QpIHtcbiAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnMocGFyZW50Q3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnMgfHwgW107XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVPckZ1bmNcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudEN0b3JcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLl9vd25Bbm5vdGF0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEBwYXJhbSB7P30gcGFyZW50Q3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHR5cGVPckZ1bmMsIHBhcmVudEN0b3IpIHtcbiAgICAgICAgLy8gUHJlZmVyIHRoZSBkaXJlY3QgQVBJLlxuICAgICAgICBpZiAoKC8qKiBAdHlwZSB7P30gKi8gKHR5cGVPckZ1bmMpKS5hbm5vdGF0aW9ucyAmJiAoLyoqIEB0eXBlIHs/fSAqLyAodHlwZU9yRnVuYykpLmFubm90YXRpb25zICE9PSBwYXJlbnRDdG9yLmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbm5vdGF0aW9ucyA9ICgvKiogQHR5cGUgez99ICovICh0eXBlT3JGdW5jKSkuYW5ub3RhdGlvbnM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFubm90YXRpb25zID09PSAnZnVuY3Rpb24nICYmIGFubm90YXRpb25zLmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnMgPSBhbm5vdGF0aW9ucy5hbm5vdGF0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9ucztcbiAgICAgICAgfVxuICAgICAgICAvLyBBUEkgb2YgdHNpY2tsZSBmb3IgbG93ZXJpbmcgZGVjb3JhdG9ycyB0byBwcm9wZXJ0aWVzIG9uIHRoZSBjbGFzcy5cbiAgICAgICAgaWYgKCgvKiogQHR5cGUgez99ICovICh0eXBlT3JGdW5jKSkuZGVjb3JhdG9ycyAmJiAoLyoqIEB0eXBlIHs/fSAqLyAodHlwZU9yRnVuYykpLmRlY29yYXRvcnMgIT09IHBhcmVudEN0b3IuZGVjb3JhdG9ycykge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRUc2lja2xlRGVjb3JhdG9ySW50b01ldGFkYXRhKCgvKiogQHR5cGUgez99ICovICh0eXBlT3JGdW5jKSkuZGVjb3JhdG9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIGZvciBtZXRhZGF0YSBjcmVhdGVkIGJ5IGludm9raW5nIHRoZSBkZWNvcmF0b3JzLlxuICAgICAgICBpZiAodHlwZU9yRnVuYy5oYXNPd25Qcm9wZXJ0eShBTk5PVEFUSU9OUykpIHtcbiAgICAgICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodHlwZU9yRnVuYykpW0FOTk9UQVRJT05TXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuYW5ub3RhdGlvbnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVPckZ1bmNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0eXBlT3JGdW5jKSB7XG4gICAgICAgIGlmICghaXNUeXBlKHR5cGVPckZ1bmMpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50Q3RvciA9IGdldFBhcmVudEN0b3IodHlwZU9yRnVuYyk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG93bkFubm90YXRpb25zID0gdGhpcy5fb3duQW5ub3RhdGlvbnModHlwZU9yRnVuYywgcGFyZW50Q3RvcikgfHwgW107XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudEFubm90YXRpb25zID0gcGFyZW50Q3RvciAhPT0gT2JqZWN0ID8gdGhpcy5hbm5vdGF0aW9ucyhwYXJlbnRDdG9yKSA6IFtdO1xuICAgICAgICByZXR1cm4gcGFyZW50QW5ub3RhdGlvbnMuY29uY2F0KG93bkFubm90YXRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEBwYXJhbSB7P30gcGFyZW50Q3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuX293blByb3BNZXRhZGF0YSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEBwYXJhbSB7P30gcGFyZW50Q3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHR5cGVPckZ1bmMsIHBhcmVudEN0b3IpIHtcbiAgICAgICAgLy8gUHJlZmVyIHRoZSBkaXJlY3QgQVBJLlxuICAgICAgICBpZiAoKC8qKiBAdHlwZSB7P30gKi8gKHR5cGVPckZ1bmMpKS5wcm9wTWV0YWRhdGEgJiZcbiAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovICh0eXBlT3JGdW5jKSkucHJvcE1ldGFkYXRhICE9PSBwYXJlbnRDdG9yLnByb3BNZXRhZGF0YSkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcE1ldGFkYXRhID0gKC8qKiBAdHlwZSB7P30gKi8gKHR5cGVPckZ1bmMpKS5wcm9wTWV0YWRhdGE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByb3BNZXRhZGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wTWV0YWRhdGEucHJvcE1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgcHJvcE1ldGFkYXRhID0gcHJvcE1ldGFkYXRhLnByb3BNZXRhZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9wTWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIG9mIHRzaWNrbGUgZm9yIGxvd2VyaW5nIGRlY29yYXRvcnMgdG8gcHJvcGVydGllcyBvbiB0aGUgY2xhc3MuXG4gICAgICAgIGlmICgoLyoqIEB0eXBlIHs/fSAqLyAodHlwZU9yRnVuYykpLnByb3BEZWNvcmF0b3JzICYmXG4gICAgICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAodHlwZU9yRnVuYykpLnByb3BEZWNvcmF0b3JzICE9PSBwYXJlbnRDdG9yLnByb3BEZWNvcmF0b3JzKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9wRGVjb3JhdG9yc18xID0gKC8qKiBAdHlwZSB7P30gKi8gKHR5cGVPckZ1bmMpKS5wcm9wRGVjb3JhdG9ycztcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3BNZXRhZGF0YV8xID0gLyoqIEB0eXBlIHs/fSAqLyAoe30pO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMocHJvcERlY29yYXRvcnNfMSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIHByb3BNZXRhZGF0YV8xW3Byb3BdID0gY29udmVydFRzaWNrbGVEZWNvcmF0b3JJbnRvTWV0YWRhdGEocHJvcERlY29yYXRvcnNfMVtwcm9wXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwcm9wTWV0YWRhdGFfMTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBUEkgZm9yIG1ldGFkYXRhIGNyZWF0ZWQgYnkgaW52b2tpbmcgdGhlIGRlY29yYXRvcnMuXG4gICAgICAgIGlmICh0eXBlT3JGdW5jLmhhc093blByb3BlcnR5KFBST1BfTUVUQURBVEEpKSB7XG4gICAgICAgICAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKHR5cGVPckZ1bmMpKVtQUk9QX01FVEFEQVRBXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUucHJvcE1ldGFkYXRhID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlT3JGdW5jXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHlwZU9yRnVuYykge1xuICAgICAgICBpZiAoIWlzVHlwZSh0eXBlT3JGdW5jKSkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudEN0b3IgPSBnZXRQYXJlbnRDdG9yKHR5cGVPckZ1bmMpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9wTWV0YWRhdGEgPSB7fTtcbiAgICAgICAgaWYgKHBhcmVudEN0b3IgIT09IE9iamVjdCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50UHJvcE1ldGFkYXRhXzEgPSB0aGlzLnByb3BNZXRhZGF0YShwYXJlbnRDdG9yKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmVudFByb3BNZXRhZGF0YV8xKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIHByb3BNZXRhZGF0YVtwcm9wTmFtZV0gPSBwYXJlbnRQcm9wTWV0YWRhdGFfMVtwcm9wTmFtZV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvd25Qcm9wTWV0YWRhdGEgPSB0aGlzLl9vd25Qcm9wTWV0YWRhdGEodHlwZU9yRnVuYywgcGFyZW50Q3Rvcik7XG4gICAgICAgIGlmIChvd25Qcm9wTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG93blByb3BNZXRhZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWNvcmF0b3JzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByb3BNZXRhZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVjb3JhdG9ycy5wdXNoLmFwcGx5KGRlY29yYXRvcnMsIHByb3BNZXRhZGF0YVtwcm9wTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWNvcmF0b3JzLnB1c2guYXBwbHkoZGVjb3JhdG9ycywgb3duUHJvcE1ldGFkYXRhW3Byb3BOYW1lXSk7XG4gICAgICAgICAgICAgICAgcHJvcE1ldGFkYXRhW3Byb3BOYW1lXSA9IGRlY29yYXRvcnM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcE1ldGFkYXRhO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHBhcmFtIHs/fSBsY1Byb3BlcnR5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5oYXNMaWZlY3ljbGVIb29rID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHBhcmFtIHs/fSBsY1Byb3BlcnR5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHlwZSwgbGNQcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gdHlwZSBpbnN0YW5jZW9mIFR5cGUgJiYgbGNQcm9wZXJ0eSBpbiB0eXBlLnByb3RvdHlwZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUuZ2V0dGVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAobmV3IEZ1bmN0aW9uKCdvJywgJ3JldHVybiBvLicgKyBuYW1lICsgJzsnKSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5zZXR0ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovIChuZXcgRnVuY3Rpb24oJ28nLCAndicsICdyZXR1cm4gby4nICsgbmFtZSArICcgPSB2OycpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUubWV0aG9kID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmdW5jdGlvbkJvZHkgPSBcImlmICghby5cIiArIG5hbWUgKyBcIikgdGhyb3cgbmV3IEVycm9yKCdcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIHVuZGVmaW5lZCcpO1xcbiAgICAgICAgcmV0dXJuIG8uXCIgKyBuYW1lICsgXCIuYXBwbHkobywgYXJncyk7XCI7XG4gICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovIChuZXcgRnVuY3Rpb24oJ28nLCAnYXJncycsIGZ1bmN0aW9uQm9keSkpO1xuICAgIH07XG4gICAgLy8gVGhlcmUgaXMgbm90IGEgY29uY2VwdCBvZiBpbXBvcnQgdXJpIGluIEpzLCBidXQgdGhpcyBpcyB1c2VmdWwgaW4gZGV2ZWxvcGluZyBEYXJ0IGFwcGxpY2F0aW9ucy5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLmltcG9ydFVyaSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgLy8gU3RhdGljU3ltYm9sXG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZVsnZmlsZVBhdGgnXSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVbJ2ZpbGVQYXRoJ107XG4gICAgICAgIH1cbiAgICAgICAgLy8gUnVudGltZSB0eXBlXG4gICAgICAgIHJldHVybiBcIi4vXCIgKyBzdHJpbmdpZnkodHlwZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvdG90eXBlLnJlc291cmNlVXJpID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gXCIuL1wiICsgc3RyaW5naWZ5KHR5cGUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVXJsXG4gICAgICogQHBhcmFtIHs/fSBtZW1iZXJzXG4gICAgICogQHBhcmFtIHs/fSBydW50aW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3RvdHlwZS5yZXNvbHZlSWRlbnRpZmllciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVXJsXG4gICAgICogQHBhcmFtIHs/fSBtZW1iZXJzXG4gICAgICogQHBhcmFtIHs/fSBydW50aW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSwgbW9kdWxlVXJsLCBtZW1iZXJzLCBydW50aW1lKSB7XG4gICAgICAgIHJldHVybiBydW50aW1lO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbnVtSWRlbnRpZmllclxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGlvbkNhcGFiaWxpdGllcy5wcm90b3R5cGUucmVzb2x2ZUVudW0gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVudW1JZGVudGlmaWVyXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZW51bUlkZW50aWZpZXIsIG5hbWUpIHsgcmV0dXJuIGVudW1JZGVudGlmaWVyW25hbWVdOyB9O1xuICAgIHJldHVybiBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBkZWNvcmF0b3JJbnZvY2F0aW9uc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY29udmVydFRzaWNrbGVEZWNvcmF0b3JJbnRvTWV0YWRhdGEoZGVjb3JhdG9ySW52b2NhdGlvbnMpIHtcbiAgICBpZiAoIWRlY29yYXRvckludm9jYXRpb25zKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29yYXRvckludm9jYXRpb25zLm1hcChmdW5jdGlvbiAoZGVjb3JhdG9ySW52b2NhdGlvbikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWNvcmF0b3JUeXBlID0gZGVjb3JhdG9ySW52b2NhdGlvbi50eXBlO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbm5vdGF0aW9uQ2xzID0gZGVjb3JhdG9yVHlwZS5hbm5vdGF0aW9uQ2xzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbm5vdGF0aW9uQXJncyA9IGRlY29yYXRvckludm9jYXRpb24uYXJncyA/IGRlY29yYXRvckludm9jYXRpb24uYXJncyA6IFtdO1xuICAgICAgICByZXR1cm4gbmV3IChhbm5vdGF0aW9uQ2xzLmJpbmQuYXBwbHkoYW5ub3RhdGlvbkNscywgW3ZvaWQgMF0uY29uY2F0KGFubm90YXRpb25BcmdzKSkpKCk7XG4gICAgfSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gY3RvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Q3RvcihjdG9yKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3Rvci5wcm90b3R5cGUpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudEN0b3IgPSBwYXJlbnRQcm90byA/IHBhcmVudFByb3RvLmNvbnN0cnVjdG9yIDogbnVsbDtcbiAgICAvLyBOb3RlOiBXZSBhbHdheXMgdXNlIGBPYmplY3RgIGFzIHRoZSBudWxsIHZhbHVlXG4gICAgLy8gdG8gc2ltcGxpZnkgY2hlY2tpbmcgbGF0ZXIgb24uXG4gICAgcmV0dXJuIHBhcmVudEN0b3IgfHwgT2JqZWN0O1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byByZWZsZWN0aW9uIGRhdGEgYWJvdXQgc3ltYm9scy4gVXNlZCBpbnRlcm5hbGx5IGJ5IEFuZ3VsYXJcbiAqIHRvIHBvd2VyIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGFuZCBjb21waWxhdGlvbi5cbiAqL1xudmFyIFJlZmxlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWZsZWN0b3IocmVmbGVjdGlvbkNhcGFiaWxpdGllcykge1xuICAgICAgICB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgPSByZWZsZWN0aW9uQ2FwYWJpbGl0aWVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNhcHNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3Rvci5wcm90b3R5cGUudXBkYXRlQ2FwYWJpbGl0aWVzID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjYXBzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY2FwcykgeyB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMgPSBjYXBzOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5mYWN0b3J5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLmZhY3RvcnkodHlwZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlT3JGdW5jXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLnBhcmFtZXRlcnMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVPckZ1bmNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0eXBlT3JGdW5jKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucGFyYW1ldGVycyh0eXBlT3JGdW5jKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5hbm5vdGF0aW9ucyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHR5cGVPckZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5hbm5vdGF0aW9ucyh0eXBlT3JGdW5jKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5wcm9wTWV0YWRhdGEgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVPckZ1bmNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0eXBlT3JGdW5jKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucHJvcE1ldGFkYXRhKHR5cGVPckZ1bmMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHBhcmFtIHs/fSBsY1Byb3BlcnR5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0b3IucHJvdG90eXBlLmhhc0xpZmVjeWNsZUhvb2sgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcGFyYW0gez99IGxjUHJvcGVydHlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0eXBlLCBsY1Byb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuaGFzTGlmZWN5Y2xlSG9vayh0eXBlLCBsY1Byb3BlcnR5KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5nZXR0ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuZ2V0dGVyKG5hbWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5zZXR0ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuc2V0dGVyKG5hbWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5tZXRob2QgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMubWV0aG9kKG5hbWUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5pbXBvcnRVcmkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0eXBlKSB7IHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuaW1wb3J0VXJpKHR5cGUpOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZXNvdXJjZVVyaSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5yZXNvdXJjZVVyaSh0eXBlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZVVybFxuICAgICAqIEBwYXJhbSB7P30gbWVtYmVyc1xuICAgICAqIEBwYXJhbSB7P30gcnVudGltZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZXNvbHZlSWRlbnRpZmllciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVXJsXG4gICAgICogQHBhcmFtIHs/fSBtZW1iZXJzXG4gICAgICogQHBhcmFtIHs/fSBydW50aW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSwgbW9kdWxlVXJsLCBtZW1iZXJzLCBydW50aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucmVzb2x2ZUlkZW50aWZpZXIobmFtZSwgbW9kdWxlVXJsLCBtZW1iZXJzLCBydW50aW1lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdG9yLnByb3RvdHlwZS5yZXNvbHZlRW51bSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaWRlbnRpZmllclxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGlkZW50aWZpZXIsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5yZXNvbHZlRW51bShpZGVudGlmaWVyLCBuYW1lKTtcbiAgICB9O1xuICAgIHJldHVybiBSZWZsZWN0b3I7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoZSB7XFxAbGluayBSZWZsZWN0b3J9IHVzZWQgaW50ZXJuYWxseSBpbiBBbmd1bGFyIHRvIGFjY2VzcyBtZXRhZGF0YVxuICogYWJvdXQgc3ltYm9scy5cbiAqL1xudmFyIHJlZmxlY3RvciA9IG5ldyBSZWZsZWN0b3IobmV3IFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMoKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogYERlcGVuZGVuY3lgIGlzIHVzZWQgYnkgdGhlIGZyYW1ld29yayB0byBleHRlbmQgREkuXG4gKiBUaGlzIGlzIGludGVybmFsIHRvIEFuZ3VsYXIgYW5kIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseS5cbiAqL1xudmFyIFJlZmxlY3RpdmVEZXBlbmRlbmN5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlZmxlY3RpdmVEZXBlbmRlbmN5KGtleSwgb3B0aW9uYWwsIHZpc2liaWxpdHkpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMub3B0aW9uYWwgPSBvcHRpb25hbDtcbiAgICAgICAgdGhpcy52aXNpYmlsaXR5ID0gdmlzaWJpbGl0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBrZXlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVEZXBlbmRlbmN5LmZyb21LZXkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGtleVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZmxlY3RpdmVEZXBlbmRlbmN5KGtleSwgZmFsc2UsIG51bGwpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlZmxlY3RpdmVEZXBlbmRlbmN5O1xufSgpKTtcbnZhciBfRU1QVFlfTElTVCA9IFtdO1xuLyoqXG4gKiBBbiBpbnRlcm5hbCByZXNvbHZlZCByZXByZXNlbnRhdGlvbiBvZiBhIHtcXEBsaW5rIFByb3ZpZGVyfSB1c2VkIGJ5IHRoZSB7XFxAbGluayBJbmplY3Rvcn0uXG4gKlxuICogSXQgaXMgdXN1YWxseSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgYnkgYEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGVgLlxuICpcbiAqIEl0IGNhbiBiZSBjcmVhdGVkIG1hbnVhbGx5LCBhcyBmb2xsb3dzOlxuICpcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9SZkVuaGg4a1VFSTBHM3FzbkllVD9wJTNEcHJldmlldyZwPXByZXZpZXcpKVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHZhciByZXNvbHZlZFByb3ZpZGVycyA9IEluamVjdG9yLnJlc29sdmUoW3sgcHJvdmlkZTogJ21lc3NhZ2UnLCB1c2VWYWx1ZTogJ0hlbGxvJyB9XSk7XG4gKiB2YXIgaW5qZWN0b3IgPSBJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMocmVzb2x2ZWRQcm92aWRlcnMpO1xuICpcbiAqIGV4cGVjdChpbmplY3Rvci5nZXQoJ21lc3NhZ2UnKSkudG9FcXVhbCgnSGVsbG8nKTtcbiAqIGBgYFxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHJlY29yZFxuICovXG5cbnZhciBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcl8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJfKGtleSwgcmVzb2x2ZWRGYWN0b3JpZXMsIG11bHRpUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMucmVzb2x2ZWRGYWN0b3JpZXMgPSByZXNvbHZlZEZhY3RvcmllcztcbiAgICAgICAgdGhpcy5tdWx0aVByb3ZpZGVyID0gbXVsdGlQcm92aWRlcjtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyXy5wcm90b3R5cGUsIFwicmVzb2x2ZWRGYWN0b3J5XCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucmVzb2x2ZWRGYWN0b3JpZXNbMF07IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcl87XG59KCkpO1xuLyoqXG4gKiBBbiBpbnRlcm5hbCByZXNvbHZlZCByZXByZXNlbnRhdGlvbiBvZiBhIGZhY3RvcnkgZnVuY3Rpb24gY3JlYXRlZCBieSByZXNvbHZpbmcge1xcQGxpbmtcbiAqIFByb3ZpZGVyfS5cbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXNvbHZlZFJlZmxlY3RpdmVGYWN0b3J5KGZhY3RvcnksIGRlcGVuZGVuY2llcykge1xuICAgICAgICB0aGlzLmZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICB9XG4gICAgcmV0dXJuIFJlc29sdmVkUmVmbGVjdGl2ZUZhY3Rvcnk7XG59KCkpO1xuLyoqXG4gKiBSZXNvbHZlIGEgc2luZ2xlIHByb3ZpZGVyLlxuICogQHBhcmFtIHs/fSBwcm92aWRlclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVJlZmxlY3RpdmVGYWN0b3J5KHByb3ZpZGVyKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmFjdG9yeUZuO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlc29sdmVkRGVwcztcbiAgICBpZiAocHJvdmlkZXIudXNlQ2xhc3MpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdXNlQ2xhc3MgPSByZXNvbHZlRm9yd2FyZFJlZihwcm92aWRlci51c2VDbGFzcyk7XG4gICAgICAgIGZhY3RvcnlGbiA9IHJlZmxlY3Rvci5mYWN0b3J5KHVzZUNsYXNzKTtcbiAgICAgICAgcmVzb2x2ZWREZXBzID0gX2RlcGVuZGVuY2llc0Zvcih1c2VDbGFzcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb3ZpZGVyLnVzZUV4aXN0aW5nKSB7XG4gICAgICAgIGZhY3RvcnlGbiA9IGZ1bmN0aW9uIChhbGlhc0luc3RhbmNlKSB7IHJldHVybiBhbGlhc0luc3RhbmNlOyB9O1xuICAgICAgICByZXNvbHZlZERlcHMgPSBbUmVmbGVjdGl2ZURlcGVuZGVuY3kuZnJvbUtleShSZWZsZWN0aXZlS2V5LmdldChwcm92aWRlci51c2VFeGlzdGluZykpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvdmlkZXIudXNlRmFjdG9yeSkge1xuICAgICAgICBmYWN0b3J5Rm4gPSBwcm92aWRlci51c2VGYWN0b3J5O1xuICAgICAgICByZXNvbHZlZERlcHMgPSBjb25zdHJ1Y3REZXBlbmRlbmNpZXMocHJvdmlkZXIudXNlRmFjdG9yeSwgcHJvdmlkZXIuZGVwcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmYWN0b3J5Rm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm92aWRlci51c2VWYWx1ZTsgfTtcbiAgICAgICAgcmVzb2x2ZWREZXBzID0gX0VNUFRZX0xJU1Q7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeShmYWN0b3J5Rm4sIHJlc29sdmVkRGVwcyk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSB7XFxAbGluayBQcm92aWRlcn0gaW50byB7XFxAbGluayBSZXNvbHZlZFByb3ZpZGVyfS5cbiAqXG4gKiB7XFxAbGluayBJbmplY3Rvcn0gaW50ZXJuYWxseSBvbmx5IHVzZXMge1xcQGxpbmsgUmVzb2x2ZWRQcm92aWRlcn0sIHtcXEBsaW5rIFByb3ZpZGVyfSBjb250YWluc1xuICogY29udmVuaWVuY2UgcHJvdmlkZXIgc3ludGF4LlxuICogQHBhcmFtIHs/fSBwcm92aWRlclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVJlZmxlY3RpdmVQcm92aWRlcihwcm92aWRlcikge1xuICAgIHJldHVybiBuZXcgUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJfKFJlZmxlY3RpdmVLZXkuZ2V0KHByb3ZpZGVyLnByb3ZpZGUpLCBbcmVzb2x2ZVJlZmxlY3RpdmVGYWN0b3J5KHByb3ZpZGVyKV0sIHByb3ZpZGVyLm11bHRpIHx8IGZhbHNlKTtcbn1cbi8qKlxuICogUmVzb2x2ZSBhIGxpc3Qgb2YgUHJvdmlkZXJzLlxuICogQHBhcmFtIHs/fSBwcm92aWRlcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVSZWZsZWN0aXZlUHJvdmlkZXJzKHByb3ZpZGVycykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vcm1hbGl6ZWQgPSBfbm9ybWFsaXplUHJvdmlkZXJzKHByb3ZpZGVycywgW10pO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlc29sdmVkID0gbm9ybWFsaXplZC5tYXAocmVzb2x2ZVJlZmxlY3RpdmVQcm92aWRlcik7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzb2x2ZWRQcm92aWRlck1hcCA9IG1lcmdlUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJzKHJlc29sdmVkLCBuZXcgTWFwKCkpO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHJlc29sdmVkUHJvdmlkZXJNYXAudmFsdWVzKCkpO1xufVxuLyoqXG4gKiBNZXJnZXMgYSBsaXN0IG9mIFJlc29sdmVkUHJvdmlkZXJzIGludG8gYSBsaXN0IHdoZXJlXG4gKiBlYWNoIGtleSBpcyBjb250YWluZWQgZXhhY3RseSBvbmNlIGFuZCBtdWx0aSBwcm92aWRlcnNcbiAqIGhhdmUgYmVlbiBtZXJnZWQuXG4gKiBAcGFyYW0gez99IHByb3ZpZGVyc1xuICogQHBhcmFtIHs/fSBub3JtYWxpemVkUHJvdmlkZXJzTWFwXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtZXJnZVJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyhwcm92aWRlcnMsIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXApIHtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgcHJvdmlkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZpZGVyID0gcHJvdmlkZXJzW2ldO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBleGlzdGluZyA9IG5vcm1hbGl6ZWRQcm92aWRlcnNNYXAuZ2V0KHByb3ZpZGVyLmtleS5pZCk7XG4gICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyLm11bHRpUHJvdmlkZXIgIT09IGV4aXN0aW5nLm11bHRpUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBtaXhpbmdNdWx0aVByb3ZpZGVyc1dpdGhSZWd1bGFyUHJvdmlkZXJzRXJyb3IoZXhpc3RpbmcsIHByb3ZpZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm92aWRlci5tdWx0aVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBqID0gMDsgaiA8IHByb3ZpZGVyLnJlc29sdmVkRmFjdG9yaWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLnJlc29sdmVkRmFjdG9yaWVzLnB1c2gocHJvdmlkZXIucmVzb2x2ZWRGYWN0b3JpZXNbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXAuc2V0KHByb3ZpZGVyLmtleS5pZCwgcHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVzb2x2ZWRQcm92aWRlciA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChwcm92aWRlci5tdWx0aVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRQcm92aWRlciA9IG5ldyBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcl8ocHJvdmlkZXIua2V5LCBwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllcy5zbGljZSgpLCBwcm92aWRlci5tdWx0aVByb3ZpZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkUHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXAuc2V0KHByb3ZpZGVyLmtleS5pZCwgcmVzb2x2ZWRQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXA7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcHJvdmlkZXJzXG4gKiBAcGFyYW0gez99IHJlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX25vcm1hbGl6ZVByb3ZpZGVycyhwcm92aWRlcnMsIHJlcykge1xuICAgIHByb3ZpZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIGlmIChiIGluc3RhbmNlb2YgVHlwZSkge1xuICAgICAgICAgICAgcmVzLnB1c2goeyBwcm92aWRlOiBiLCB1c2VDbGFzczogYiB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiICYmIHR5cGVvZiBiID09ICdvYmplY3QnICYmICgvKiogQHR5cGUgez99ICovIChiKSkucHJvdmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXMucHVzaCgvKiogQHR5cGUgez99ICovIChiKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBfbm9ybWFsaXplUHJvdmlkZXJzKGIsIHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkUHJvdmlkZXJFcnJvcihiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdHlwZU9yRnVuY1xuICogQHBhcmFtIHs/PX0gZGVwZW5kZW5jaWVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3REZXBlbmRlbmNpZXModHlwZU9yRnVuYywgZGVwZW5kZW5jaWVzKSB7XG4gICAgaWYgKCFkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgcmV0dXJuIF9kZXBlbmRlbmNpZXNGb3IodHlwZU9yRnVuYyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJhbXNfMSA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIFt0XTsgfSk7XG4gICAgICAgIHJldHVybiBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiBfZXh0cmFjdFRva2VuKHR5cGVPckZ1bmMsIHQsIHBhcmFtc18xKTsgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHR5cGVPckZ1bmNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9kZXBlbmRlbmNpZXNGb3IodHlwZU9yRnVuYykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtcyA9IHJlZmxlY3Rvci5wYXJhbWV0ZXJzKHR5cGVPckZ1bmMpO1xuICAgIGlmICghcGFyYW1zKVxuICAgICAgICByZXR1cm4gW107XG4gICAgaWYgKHBhcmFtcy5zb21lKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwID09IG51bGw7IH0pKSB7XG4gICAgICAgIHRocm93IG5vQW5ub3RhdGlvbkVycm9yKHR5cGVPckZ1bmMsIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXMubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBfZXh0cmFjdFRva2VuKHR5cGVPckZ1bmMsIHAsIHBhcmFtcyk7IH0pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHR5cGVPckZ1bmNcbiAqIEBwYXJhbSB7P30gbWV0YWRhdGFcbiAqIEBwYXJhbSB7P30gcGFyYW1zXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfZXh0cmFjdFRva2VuKHR5cGVPckZ1bmMsIG1ldGFkYXRhLCBwYXJhbXMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlbiA9IG51bGw7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3B0aW9uYWwgPSBmYWxzZTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobWV0YWRhdGEpKSB7XG4gICAgICAgIGlmIChtZXRhZGF0YSBpbnN0YW5jZW9mIEluamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVEZXBlbmRlbmN5KG1ldGFkYXRhLnRva2VuLCBvcHRpb25hbCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZURlcGVuZGVuY3kobWV0YWRhdGEsIG9wdGlvbmFsLCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2aXNpYmlsaXR5ID0gbnVsbDtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgbWV0YWRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyYW1NZXRhZGF0YSA9IG1ldGFkYXRhW2ldO1xuICAgICAgICBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIFR5cGUpIHtcbiAgICAgICAgICAgIHRva2VuID0gcGFyYW1NZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbU1ldGFkYXRhIGluc3RhbmNlb2YgSW5qZWN0KSB7XG4gICAgICAgICAgICB0b2tlbiA9IHBhcmFtTWV0YWRhdGEudG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIE9wdGlvbmFsKSB7XG4gICAgICAgICAgICBvcHRpb25hbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIFNlbGYgfHwgcGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIFNraXBTZWxmKSB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5ID0gcGFyYW1NZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbU1ldGFkYXRhIGluc3RhbmNlb2YgSW5qZWN0aW9uVG9rZW4pIHtcbiAgICAgICAgICAgIHRva2VuID0gcGFyYW1NZXRhZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2tlbiA9IHJlc29sdmVGb3J3YXJkUmVmKHRva2VuKTtcbiAgICBpZiAodG9rZW4gIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gX2NyZWF0ZURlcGVuZGVuY3kodG9rZW4sIG9wdGlvbmFsLCB2aXNpYmlsaXR5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5vQW5ub3RhdGlvbkVycm9yKHR5cGVPckZ1bmMsIHBhcmFtcyk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHRva2VuXG4gKiBAcGFyYW0gez99IG9wdGlvbmFsXG4gKiBAcGFyYW0gez99IHZpc2liaWxpdHlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9jcmVhdGVEZXBlbmRlbmN5KHRva2VuLCBvcHRpb25hbCwgdmlzaWJpbGl0eSkge1xuICAgIHJldHVybiBuZXcgUmVmbGVjdGl2ZURlcGVuZGVuY3koUmVmbGVjdGl2ZUtleS5nZXQodG9rZW4pLCBvcHRpb25hbCwgdmlzaWJpbGl0eSk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIFRocmVzaG9sZCBmb3IgdGhlIGR5bmFtaWMgdmVyc2lvblxudmFyIFVOREVGSU5FRCA9IG5ldyBPYmplY3QoKTtcbi8qKlxuICogQSBSZWZsZWN0aXZlRGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyIHVzZWQgZm9yIGluc3RhbnRpYXRpbmcgb2JqZWN0cyBhbmQgcmVzb2x2aW5nXG4gKiBkZXBlbmRlbmNpZXMuXG4gKlxuICogQW4gYEluamVjdG9yYCBpcyBhIHJlcGxhY2VtZW50IGZvciBhIGBuZXdgIG9wZXJhdG9yLCB3aGljaCBjYW4gYXV0b21hdGljYWxseSByZXNvbHZlIHRoZVxuICogY29uc3RydWN0b3IgZGVwZW5kZW5jaWVzLlxuICpcbiAqIEluIHR5cGljYWwgdXNlLCBhcHBsaWNhdGlvbiBjb2RlIGFza3MgZm9yIHRoZSBkZXBlbmRlbmNpZXMgaW4gdGhlIGNvbnN0cnVjdG9yIGFuZCB0aGV5IGFyZVxuICogcmVzb2x2ZWQgYnkgdGhlIGBJbmplY3RvcmAuXG4gKlxuICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2p6amVjMD9wPXByZXZpZXcpKVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGFuIGBJbmplY3RvcmAgY29uZmlndXJlZCB0byBjcmVhdGUgYEVuZ2luZWAgYW5kIGBDYXJgLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIFxcQEluamVjdGFibGUoKVxuICogY2xhc3MgRW5naW5lIHtcbiAqIH1cbiAqXG4gKiBcXEBJbmplY3RhYmxlKClcbiAqIGNsYXNzIENhciB7XG4gKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICogfVxuICpcbiAqIHZhciBpbmplY3RvciA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtDYXIsIEVuZ2luZV0pO1xuICogdmFyIGNhciA9IGluamVjdG9yLmdldChDYXIpO1xuICogZXhwZWN0KGNhciBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcbiAqIGV4cGVjdChjYXIuZW5naW5lIGluc3RhbmNlb2YgRW5naW5lKS50b0JlKHRydWUpO1xuICogYGBgXG4gKlxuICogTm90aWNlLCB3ZSBkb24ndCB1c2UgdGhlIGBuZXdgIG9wZXJhdG9yIGJlY2F1c2Ugd2UgZXhwbGljaXRseSB3YW50IHRvIGhhdmUgdGhlIGBJbmplY3RvcmBcbiAqIHJlc29sdmUgYWxsIG9mIHRoZSBvYmplY3QncyBkZXBlbmRlbmNpZXMgYXV0b21hdGljYWxseS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBmcm9tIHY1IC0gc2xvdyBhbmQgYnJpbmdzIGluIGEgbG90IG9mIGNvZGUsIFVzZSBgSW5qZWN0b3IuY3JlYXRlYCBpbnN0ZWFkLlxuICogQGFic3RyYWN0XG4gKi9cbnZhciBSZWZsZWN0aXZlSW5qZWN0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVmbGVjdGl2ZUluamVjdG9yKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUdXJucyBhbiBhcnJheSBvZiBwcm92aWRlciBkZWZpbml0aW9ucyBpbnRvIGFuIGFycmF5IG9mIHJlc29sdmVkIHByb3ZpZGVycy5cbiAgICAgKlxuICAgICAqIEEgcmVzb2x1dGlvbiBpcyBhIHByb2Nlc3Mgb2YgZmxhdHRlbmluZyBtdWx0aXBsZSBuZXN0ZWQgYXJyYXlzIGFuZCBjb252ZXJ0aW5nIGluZGl2aWR1YWxcbiAgICAgKiBwcm92aWRlcnMgaW50byBhbiBhcnJheSBvZiB7QGxpbmsgUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJ9cy5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9BaVhUSGk/cD1wcmV2aWV3KSlcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgRW5naW5lIHtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgQ2FyIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBwcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShbQ2FyLCBbW0VuZ2luZV1dXSk7XG4gICAgICpcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzLmxlbmd0aCkudG9FcXVhbCgyKTtcbiAgICAgKlxuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0gaW5zdGFuY2VvZiBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcikudG9CZSh0cnVlKTtcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdLmtleS5kaXNwbGF5TmFtZSkudG9CZShcIkNhclwiKTtcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdLmRlcGVuZGVuY2llcy5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1swXS5mYWN0b3J5KS50b0JlRGVmaW5lZCgpO1xuICAgICAqXG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1sxXS5rZXkuZGlzcGxheU5hbWUpLnRvQmUoXCJFbmdpbmVcIik7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUge0BsaW5rIFJlZmxlY3RpdmVJbmplY3RvciNmcm9tUmVzb2x2ZWRQcm92aWRlcnMgZnJvbVJlc29sdmVkUHJvdmlkZXJzfSBmb3IgbW9yZSBpbmZvLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFR1cm5zIGFuIGFycmF5IG9mIHByb3ZpZGVyIGRlZmluaXRpb25zIGludG8gYW4gYXJyYXkgb2YgcmVzb2x2ZWQgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogQSByZXNvbHV0aW9uIGlzIGEgcHJvY2VzcyBvZiBmbGF0dGVuaW5nIG11bHRpcGxlIG5lc3RlZCBhcnJheXMgYW5kIGNvbnZlcnRpbmcgaW5kaXZpZHVhbFxuICAgICAqIHByb3ZpZGVycyBpbnRvIGFuIGFycmF5IG9mIHtcXEBsaW5rIFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyfXMuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvQWlYVEhpP3A9cHJldmlldykpXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogXFxASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgRW5naW5lIHtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBcXEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBDYXIge1xuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGVuZ2luZTpFbmdpbmUpIHt9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHByb3ZpZGVycyA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlKFtDYXIsIFtbRW5naW5lXV1dKTtcbiAgICAgKlxuICAgICAqIGV4cGVjdChwcm92aWRlcnMubGVuZ3RoKS50b0VxdWFsKDIpO1xuICAgICAqXG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1swXSBpbnN0YW5jZW9mIFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyKS50b0JlKHRydWUpO1xuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0ua2V5LmRpc3BsYXlOYW1lKS50b0JlKFwiQ2FyXCIpO1xuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0uZGVwZW5kZW5jaWVzLmxlbmd0aCkudG9FcXVhbCgxKTtcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdLmZhY3RvcnkpLnRvQmVEZWZpbmVkKCk7XG4gICAgICpcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzFdLmtleS5kaXNwbGF5TmFtZSkudG9CZShcIkVuZ2luZVwiKTtcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFNlZSB7XFxAbGluayBSZWZsZWN0aXZlSW5qZWN0b3IjZnJvbVJlc29sdmVkUHJvdmlkZXJzIGZyb21SZXNvbHZlZFByb3ZpZGVyc30gZm9yIG1vcmUgaW5mby5cbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmUgPSAvKipcbiAgICAgKiBUdXJucyBhbiBhcnJheSBvZiBwcm92aWRlciBkZWZpbml0aW9ucyBpbnRvIGFuIGFycmF5IG9mIHJlc29sdmVkIHByb3ZpZGVycy5cbiAgICAgKlxuICAgICAqIEEgcmVzb2x1dGlvbiBpcyBhIHByb2Nlc3Mgb2YgZmxhdHRlbmluZyBtdWx0aXBsZSBuZXN0ZWQgYXJyYXlzIGFuZCBjb252ZXJ0aW5nIGluZGl2aWR1YWxcbiAgICAgKiBwcm92aWRlcnMgaW50byBhbiBhcnJheSBvZiB7XFxAbGluayBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcn1zLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L0FpWFRIaT9wPXByZXZpZXcpKVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIFxcQEluamVjdGFibGUoKVxuICAgICAqIGNsYXNzIEVuZ2luZSB7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXFxASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgQ2FyIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBwcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShbQ2FyLCBbW0VuZ2luZV1dXSk7XG4gICAgICpcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzLmxlbmd0aCkudG9FcXVhbCgyKTtcbiAgICAgKlxuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0gaW5zdGFuY2VvZiBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcikudG9CZSh0cnVlKTtcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdLmtleS5kaXNwbGF5TmFtZSkudG9CZShcIkNhclwiKTtcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdLmRlcGVuZGVuY2llcy5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1swXS5mYWN0b3J5KS50b0JlRGVmaW5lZCgpO1xuICAgICAqXG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1sxXS5rZXkuZGlzcGxheU5hbWUpLnRvQmUoXCJFbmdpbmVcIik7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUge1xcQGxpbmsgUmVmbGVjdGl2ZUluamVjdG9yI2Zyb21SZXNvbHZlZFByb3ZpZGVycyBmcm9tUmVzb2x2ZWRQcm92aWRlcnN9IGZvciBtb3JlIGluZm8uXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwcm92aWRlcnMpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVSZWZsZWN0aXZlUHJvdmlkZXJzKHByb3ZpZGVycyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyBhbiBhcnJheSBvZiBwcm92aWRlcnMgYW5kIGNyZWF0ZXMgYW4gaW5qZWN0b3IgZnJvbSB0aG9zZSBwcm92aWRlcnMuXG4gICAgICpcbiAgICAgKiBUaGUgcGFzc2VkLWluIHByb3ZpZGVycyBjYW4gYmUgYW4gYXJyYXkgb2YgYFR5cGVgLCB7QGxpbmsgUHJvdmlkZXJ9LFxuICAgICAqIG9yIGEgcmVjdXJzaXZlIGFycmF5IG9mIG1vcmUgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2VQT2NjQT9wPXByZXZpZXcpKVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBFbmdpbmUge1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBDYXIge1xuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGVuZ2luZTpFbmdpbmUpIHt9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGluamVjdG9yID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0NhciwgRW5naW5lXSk7XG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldChDYXIpIGluc3RhbmNlb2YgQ2FyKS50b0JlKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBzbG93ZXIgdGhhbiB0aGUgY29ycmVzcG9uZGluZyBgZnJvbVJlc29sdmVkUHJvdmlkZXJzYFxuICAgICAqIGJlY2F1c2UgaXQgbmVlZHMgdG8gcmVzb2x2ZSB0aGUgcGFzc2VkLWluIHByb3ZpZGVycyBmaXJzdC5cbiAgICAgKiBTZWUge0BsaW5rIFJlZmxlY3RpdmVJbmplY3RvciNyZXNvbHZlIHJlc29sdmV9IGFuZFxuICAgICAqIHtAbGluayBSZWZsZWN0aXZlSW5qZWN0b3IjZnJvbVJlc29sdmVkUHJvdmlkZXJzIGZyb21SZXNvbHZlZFByb3ZpZGVyc30uXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYW4gYXJyYXkgb2YgcHJvdmlkZXJzIGFuZCBjcmVhdGVzIGFuIGluamVjdG9yIGZyb20gdGhvc2UgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogVGhlIHBhc3NlZC1pbiBwcm92aWRlcnMgY2FuIGJlIGFuIGFycmF5IG9mIGBUeXBlYCwge1xcQGxpbmsgUHJvdmlkZXJ9LFxuICAgICAqIG9yIGEgcmVjdXJzaXZlIGFycmF5IG9mIG1vcmUgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L2VQT2NjQT9wPXByZXZpZXcpKVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIFxcQEluamVjdGFibGUoKVxuICAgICAqIGNsYXNzIEVuZ2luZSB7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXFxASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgQ2FyIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBpbmplY3RvciA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtDYXIsIEVuZ2luZV0pO1xuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoQ2FyKSBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgc2xvd2VyIHRoYW4gdGhlIGNvcnJlc3BvbmRpbmcgYGZyb21SZXNvbHZlZFByb3ZpZGVyc2BcbiAgICAgKiBiZWNhdXNlIGl0IG5lZWRzIHRvIHJlc29sdmUgdGhlIHBhc3NlZC1pbiBwcm92aWRlcnMgZmlyc3QuXG4gICAgICogU2VlIHtcXEBsaW5rIFJlZmxlY3RpdmVJbmplY3RvciNyZXNvbHZlIHJlc29sdmV9IGFuZFxuICAgICAqIHtcXEBsaW5rIFJlZmxlY3RpdmVJbmplY3RvciNmcm9tUmVzb2x2ZWRQcm92aWRlcnMgZnJvbVJlc29sdmVkUHJvdmlkZXJzfS5cbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyc1xuICAgICAqIEBwYXJhbSB7Pz19IHBhcmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUgPSAvKipcbiAgICAgKiBSZXNvbHZlcyBhbiBhcnJheSBvZiBwcm92aWRlcnMgYW5kIGNyZWF0ZXMgYW4gaW5qZWN0b3IgZnJvbSB0aG9zZSBwcm92aWRlcnMuXG4gICAgICpcbiAgICAgKiBUaGUgcGFzc2VkLWluIHByb3ZpZGVycyBjYW4gYmUgYW4gYXJyYXkgb2YgYFR5cGVgLCB7XFxAbGluayBQcm92aWRlcn0sXG4gICAgICogb3IgYSByZWN1cnNpdmUgYXJyYXkgb2YgbW9yZSBwcm92aWRlcnMuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZSAoW2xpdmUgZGVtb10oaHR0cDovL3BsbmtyLmNvL2VkaXQvZVBPY2NBP3A9cHJldmlldykpXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogXFxASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgRW5naW5lIHtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBcXEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBDYXIge1xuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGVuZ2luZTpFbmdpbmUpIHt9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGluamVjdG9yID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0NhciwgRW5naW5lXSk7XG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldChDYXIpIGluc3RhbmNlb2YgQ2FyKS50b0JlKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBzbG93ZXIgdGhhbiB0aGUgY29ycmVzcG9uZGluZyBgZnJvbVJlc29sdmVkUHJvdmlkZXJzYFxuICAgICAqIGJlY2F1c2UgaXQgbmVlZHMgdG8gcmVzb2x2ZSB0aGUgcGFzc2VkLWluIHByb3ZpZGVycyBmaXJzdC5cbiAgICAgKiBTZWUge1xcQGxpbmsgUmVmbGVjdGl2ZUluamVjdG9yI3Jlc29sdmUgcmVzb2x2ZX0gYW5kXG4gICAgICoge1xcQGxpbmsgUmVmbGVjdGl2ZUluamVjdG9yI2Zyb21SZXNvbHZlZFByb3ZpZGVycyBmcm9tUmVzb2x2ZWRQcm92aWRlcnN9LlxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJzXG4gICAgICogQHBhcmFtIHs/PX0gcGFyZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocHJvdmlkZXJzLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJzID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmUocHJvdmlkZXJzKTtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3RpdmVJbmplY3Rvci5mcm9tUmVzb2x2ZWRQcm92aWRlcnMoUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJzLCBwYXJlbnQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbmplY3RvciBmcm9tIHByZXZpb3VzbHkgcmVzb2x2ZWQgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogVGhpcyBBUEkgaXMgdGhlIHJlY29tbWVuZGVkIHdheSB0byBjb25zdHJ1Y3QgaW5qZWN0b3JzIGluIHBlcmZvcm1hbmNlLXNlbnNpdGl2ZSBwYXJ0cy5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9LclNNY2k/cD1wcmV2aWV3KSlcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgRW5naW5lIHtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgQ2FyIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBwcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShbQ2FyLCBFbmdpbmVdKTtcbiAgICAgKiB2YXIgaW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IuZnJvbVJlc29sdmVkUHJvdmlkZXJzKHByb3ZpZGVycyk7XG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldChDYXIpIGluc3RhbmNlb2YgQ2FyKS50b0JlKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqIEBleHBlcmltZW50YWxcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluamVjdG9yIGZyb20gcHJldmlvdXNseSByZXNvbHZlZCBwcm92aWRlcnMuXG4gICAgICpcbiAgICAgKiBUaGlzIEFQSSBpcyB0aGUgcmVjb21tZW5kZWQgd2F5IHRvIGNvbnN0cnVjdCBpbmplY3RvcnMgaW4gcGVyZm9ybWFuY2Utc2Vuc2l0aXZlIHBhcnRzLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGUgKFtsaXZlIGRlbW9dKGh0dHA6Ly9wbG5rci5jby9lZGl0L0tyU01jaT9wPXByZXZpZXcpKVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIFxcQEluamVjdGFibGUoKVxuICAgICAqIGNsYXNzIEVuZ2luZSB7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXFxASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgQ2FyIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBwcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShbQ2FyLCBFbmdpbmVdKTtcbiAgICAgKiB2YXIgaW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IuZnJvbVJlc29sdmVkUHJvdmlkZXJzKHByb3ZpZGVycyk7XG4gICAgICogZXhwZWN0KGluamVjdG9yLmdldChDYXIpIGluc3RhbmNlb2YgQ2FyKS50b0JlKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqIFxcQGV4cGVyaW1lbnRhbFxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJzXG4gICAgICogQHBhcmFtIHs/PX0gcGFyZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3IuZnJvbVJlc29sdmVkUHJvdmlkZXJzID0gLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbmplY3RvciBmcm9tIHByZXZpb3VzbHkgcmVzb2x2ZWQgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogVGhpcyBBUEkgaXMgdGhlIHJlY29tbWVuZGVkIHdheSB0byBjb25zdHJ1Y3QgaW5qZWN0b3JzIGluIHBlcmZvcm1hbmNlLXNlbnNpdGl2ZSBwYXJ0cy5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9LclNNY2k/cD1wcmV2aWV3KSlcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBcXEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBFbmdpbmUge1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIFxcQEluamVjdGFibGUoKVxuICAgICAqIGNsYXNzIENhciB7XG4gICAgICogICBjb25zdHJ1Y3RvcihwdWJsaWMgZW5naW5lOkVuZ2luZSkge31cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgcHJvdmlkZXJzID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmUoW0NhciwgRW5naW5lXSk7XG4gICAgICogdmFyIGluamVjdG9yID0gUmVmbGVjdGl2ZUluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhwcm92aWRlcnMpO1xuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoQ2FyKSBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKiBcXEBleHBlcmltZW50YWxcbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyc1xuICAgICAqIEBwYXJhbSB7Pz19IHBhcmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByb3ZpZGVycywgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVmbGVjdGl2ZUluamVjdG9yXyhwcm92aWRlcnMsIHBhcmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVmbGVjdGl2ZUluamVjdG9yO1xufSgpKTtcbnZhciBSZWZsZWN0aXZlSW5qZWN0b3JfID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIFByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWZsZWN0aXZlSW5qZWN0b3JfKF9wcm92aWRlcnMsIF9wYXJlbnQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jb25zdHJ1Y3Rpb25Db3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXJzID0gX3Byb3ZpZGVycztcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBfcGFyZW50IHx8IG51bGw7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGxlbiA9IF9wcm92aWRlcnMubGVuZ3RoO1xuICAgICAgICB0aGlzLmtleUlkcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICB0aGlzLm9ianMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmtleUlkc1tpXSA9IF9wcm92aWRlcnNbaV0ua2V5LmlkO1xuICAgICAgICAgICAgdGhpcy5vYmpzW2ldID0gVU5ERUZJTkVEO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW5cbiAgICAgKiBAcGFyYW0gez89fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3JfLnByb3RvdHlwZS5nZXQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHRva2VuXG4gICAgICogQHBhcmFtIHs/PX0gbm90Rm91bmRWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRva2VuLCBub3RGb3VuZFZhbHVlKSB7XG4gICAgICAgIGlmIChub3RGb3VuZFZhbHVlID09PSB2b2lkIDApIHsgbm90Rm91bmRWYWx1ZSA9IFRIUk9XX0lGX05PVF9GT1VORDsgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXkoUmVmbGVjdGl2ZUtleS5nZXQodG9rZW4pLCBudWxsLCBub3RGb3VuZFZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3JfLnByb3RvdHlwZS5yZXNvbHZlQW5kQ3JlYXRlQ2hpbGQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByb3ZpZGVycykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShwcm92aWRlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDaGlsZEZyb21SZXNvbHZlZChSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLmNyZWF0ZUNoaWxkRnJvbVJlc29sdmVkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwcm92aWRlcnMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5qID0gbmV3IFJlZmxlY3RpdmVJbmplY3Rvcl8ocHJvdmlkZXJzKTtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKGluaikpLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBpbmo7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3JfLnByb3RvdHlwZS5yZXNvbHZlQW5kSW5zdGFudGlhdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFudGlhdGVSZXNvbHZlZChSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShbcHJvdmlkZXJdKVswXSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHByb3ZpZGVyXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3JfLnByb3RvdHlwZS5pbnN0YW50aWF0ZVJlc29sdmVkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW50aWF0ZVByb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLmdldFByb3ZpZGVyQXRJbmRleCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuX3Byb3ZpZGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG91dE9mQm91bmRzRXJyb3IoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlcnNbaW5kZXhdO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVmbGVjdGl2ZUluamVjdG9yXy5wcm90b3R5cGUuX25ldyA9IC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb25zdHJ1Y3Rpb25Db3VudGVyKysgPiB0aGlzLl9nZXRNYXhOdW1iZXJPZk9iamVjdHMoKSkge1xuICAgICAgICAgICAgdGhyb3cgY3ljbGljRGVwZW5kZW5jeUVycm9yKHRoaXMsIHByb3ZpZGVyLmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbnRpYXRlUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3JfLnByb3RvdHlwZS5fZ2V0TWF4TnVtYmVyT2ZPYmplY3RzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm9ianMubGVuZ3RoOyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl9pbnN0YW50aWF0ZVByb3ZpZGVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcm92aWRlclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgICAgIGlmIChwcm92aWRlci5tdWx0aVByb3ZpZGVyKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXMgPSBuZXcgQXJyYXkocHJvdmlkZXIucmVzb2x2ZWRGYWN0b3JpZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHJlc1tpXSA9IHRoaXMuX2luc3RhbnRpYXRlKHByb3ZpZGVyLCBwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbnRpYXRlKHByb3ZpZGVyLCBwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllc1swXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJcbiAgICAgKiBAcGFyYW0gez99IFJlc29sdmVkUmVmbGVjdGl2ZUZhY3RvcnlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl9pbnN0YW50aWF0ZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXJcbiAgICAgKiBAcGFyYW0gez99IFJlc29sdmVkUmVmbGVjdGl2ZUZhY3RvcnlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChwcm92aWRlciwgUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeSQkMSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmYWN0b3J5ID0gUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeSQkMS5mYWN0b3J5O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGVwcyA9XG4gICAgICAgICAgICAgICAgUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeSQkMS5kZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHsgcmV0dXJuIF90aGlzLl9nZXRCeVJlZmxlY3RpdmVEZXBlbmRlbmN5KGRlcCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoICgvKiogQHR5cGUgez99ICovIGUpIHtcbiAgICAgICAgICAgIGlmIChlLmFkZEtleSkge1xuICAgICAgICAgICAgICAgIGUuYWRkS2V5KHRoaXMsIHByb3ZpZGVyLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9iajtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9iaiA9IGZhY3RvcnkuYXBwbHkodm9pZCAwLCBkZXBzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoLyoqIEB0eXBlIHs/fSAqLyBlKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnN0YW50aWF0aW9uRXJyb3IodGhpcywgZSwgZS5zdGFjaywgcHJvdmlkZXIua2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBkZXBcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl9nZXRCeVJlZmxlY3RpdmVEZXBlbmRlbmN5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBkZXBcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChkZXApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJ5S2V5KGRlcC5rZXksIGRlcC52aXNpYmlsaXR5LCBkZXAub3B0aW9uYWwgPyBudWxsIDogVEhST1dfSUZfTk9UX0ZPVU5EKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30ga2V5XG4gICAgICogQHBhcmFtIHs/fSB2aXNpYmlsaXR5XG4gICAgICogQHBhcmFtIHs/fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZWZsZWN0aXZlSW5qZWN0b3JfLnByb3RvdHlwZS5fZ2V0QnlLZXkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGtleVxuICAgICAqIEBwYXJhbSB7P30gdmlzaWJpbGl0eVxuICAgICAqIEBwYXJhbSB7P30gbm90Rm91bmRWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGtleSwgdmlzaWJpbGl0eSwgbm90Rm91bmRWYWx1ZSkge1xuICAgICAgICBpZiAoa2V5ID09PSBSZWZsZWN0aXZlSW5qZWN0b3JfLklOSkVDVE9SX0tFWSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2liaWxpdHkgaW5zdGFuY2VvZiBTZWxmKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXlTZWxmKGtleSwgbm90Rm91bmRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXlEZWZhdWx0KGtleSwgbm90Rm91bmRWYWx1ZSwgdmlzaWJpbGl0eSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30ga2V5SWRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl9nZXRPYmpCeUtleUlkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBrZXlJZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGtleUlkKSB7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCB0aGlzLmtleUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMua2V5SWRzW2ldID09PSBrZXlJZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ianNbaV0gPT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ianNbaV0gPSB0aGlzLl9uZXcodGhpcy5fcHJvdmlkZXJzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Jqc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVU5ERUZJTkVEO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBrZXlcbiAgICAgKiBAcGFyYW0gez99IG5vdEZvdW5kVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl90aHJvd09yTnVsbCA9IC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBrZXlcbiAgICAgKiBAcGFyYW0gez99IG5vdEZvdW5kVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChrZXksIG5vdEZvdW5kVmFsdWUpIHtcbiAgICAgICAgaWYgKG5vdEZvdW5kVmFsdWUgIT09IFRIUk9XX0lGX05PVF9GT1VORCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBub1Byb3ZpZGVyRXJyb3IodGhpcywga2V5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBrZXlcbiAgICAgKiBAcGFyYW0gez99IG5vdEZvdW5kVmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl9nZXRCeUtleVNlbGYgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30ga2V5XG4gICAgICogQHBhcmFtIHs/fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoa2V5LCBub3RGb3VuZFZhbHVlKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9iaiA9IHRoaXMuX2dldE9iakJ5S2V5SWQoa2V5LmlkKTtcbiAgICAgICAgcmV0dXJuIChvYmogIT09IFVOREVGSU5FRCkgPyBvYmogOiB0aGlzLl90aHJvd09yTnVsbChrZXksIG5vdEZvdW5kVmFsdWUpO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSBrZXlcbiAgICAgKiBAcGFyYW0gez99IG5vdEZvdW5kVmFsdWVcbiAgICAgKiBAcGFyYW0gez99IHZpc2liaWxpdHlcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLl9nZXRCeUtleURlZmF1bHQgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30ga2V5XG4gICAgICogQHBhcmFtIHs/fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHBhcmFtIHs/fSB2aXNpYmlsaXR5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoa2V5LCBub3RGb3VuZFZhbHVlLCB2aXNpYmlsaXR5KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluajtcbiAgICAgICAgaWYgKHZpc2liaWxpdHkgaW5zdGFuY2VvZiBTa2lwU2VsZikge1xuICAgICAgICAgICAgaW5qID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmogPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmogaW5zdGFuY2VvZiBSZWZsZWN0aXZlSW5qZWN0b3JfKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbmpfID0gLyoqIEB0eXBlIHs/fSAqLyAoaW5qKTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9iaiA9IGlual8uX2dldE9iakJ5S2V5SWQoa2V5LmlkKTtcbiAgICAgICAgICAgIGlmIChvYmogIT09IFVOREVGSU5FRClcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgaW5qID0gaW5qXy5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluaiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGluai5nZXQoa2V5LnRva2VuLCBub3RGb3VuZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aHJvd09yTnVsbChrZXksIG5vdEZvdW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVmbGVjdGl2ZUluamVjdG9yXy5wcm90b3R5cGUsIFwiZGlzcGxheU5hbWVcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZXJzID0gX21hcFByb3ZpZGVycyh0aGlzLCBmdW5jdGlvbiAoYikgeyByZXR1cm4gJyBcIicgKyBiLmtleS5kaXNwbGF5TmFtZSArICdcIiAnOyB9KVxuICAgICAgICAgICAgICAgIC5qb2luKCcsICcpO1xuICAgICAgICAgICAgcmV0dXJuIFwiUmVmbGVjdGl2ZUluamVjdG9yKHByb3ZpZGVyczogW1wiICsgcHJvdmlkZXJzICsgXCJdKVwiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8ucHJvdG90eXBlLnRvU3RyaW5nID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRpc3BsYXlOYW1lOyB9O1xuICAgIFJlZmxlY3RpdmVJbmplY3Rvcl8uSU5KRUNUT1JfS0VZID0gUmVmbGVjdGl2ZUtleS5nZXQoSW5qZWN0b3IpO1xuICAgIHJldHVybiBSZWZsZWN0aXZlSW5qZWN0b3JfO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBpbmplY3RvclxuICogQHBhcmFtIHs/fSBmblxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX21hcFByb3ZpZGVycyhpbmplY3RvciwgZm4pIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXMgPSBuZXcgQXJyYXkoaW5qZWN0b3IuX3Byb3ZpZGVycy5sZW5ndGgpO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBpbmplY3Rvci5fcHJvdmlkZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc1tpXSA9IGZuKGluamVjdG9yLmdldFByb3ZpZGVyQXRJbmRleChpKSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYGRpYCBtb2R1bGUgcHJvdmlkZXMgZGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyIHNlcnZpY2VzLlxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHRoZSBhcmd1bWVudCBpcyBzaGFwZWQgbGlrZSBhIFByb21pc2VcbiAqIEBwYXJhbSB7P30gb2JqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gICAgLy8gYWxsb3cgYW55IFByb21pc2UvQSsgY29tcGxpYW50IHRoZW5hYmxlLlxuICAgIC8vIEl0J3MgdXAgdG8gdGhlIGNhbGxlciB0byBlbnN1cmUgdGhhdCBvYmoudGhlbiBjb25mb3JtcyB0byB0aGUgc3BlY1xuICAgIHJldHVybiAhIW9iaiAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gT2JzZXJ2YWJsZVxuICogQHBhcmFtIHs/fSBvYmpcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGlzT2JzZXJ2YWJsZShvYmopIHtcbiAgICAvLyBUT0RPIHVzZSBTeW1ib2wub2JzZXJ2YWJsZSB3aGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvcnhqcy9pc3N1ZXMvMjQxNSB3aWxsIGJlIHJlc29sdmVkXG4gICAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmouc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gYW4gYXBwbGljYXRpb24gaXMgaW5pdGlhbGl6ZWQuXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIEFQUF9JTklUSUFMSVpFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbignQXBwbGljYXRpb24gSW5pdGlhbGl6ZXInKTtcbi8qKlxuICogQSBjbGFzcyB0aGF0IHJlZmxlY3RzIHRoZSBzdGF0ZSBvZiBydW5uaW5nIHtcXEBsaW5rIEFQUF9JTklUSUFMSVpFUn1zLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgQXBwbGljYXRpb25Jbml0U3RhdHVzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uSW5pdFN0YXR1cyhhcHBJbml0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmFwcEluaXRzID0gYXBwSW5pdHM7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9uZVByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzLCByZWopIHtcbiAgICAgICAgICAgIF90aGlzLnJlc29sdmUgPSByZXM7XG4gICAgICAgICAgICBfdGhpcy5yZWplY3QgPSByZWo7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFwcGxpY2F0aW9uSW5pdFN0YXR1cy5wcm90b3R5cGUucnVuSW5pdGlhbGl6ZXJzID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhc3luY0luaXRQcm9taXNlcyA9IFtdO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovIChfdGhpcykpLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgX3RoaXMucmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5hcHBJbml0cykge1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHRoaXMuYXBwSW5pdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbml0UmVzdWx0ID0gdGhpcy5hcHBJbml0c1tpXSgpO1xuICAgICAgICAgICAgICAgIGlmIChpc1Byb21pc2UoaW5pdFJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJbml0UHJvbWlzZXMucHVzaChpbml0UmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUHJvbWlzZS5hbGwoYXN5bmNJbml0UHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkgeyBjb21wbGV0ZSgpOyB9KS5jYXRjaChmdW5jdGlvbiAoZSkgeyBfdGhpcy5yZWplY3QoZSk7IH0pO1xuICAgICAgICBpZiAoYXN5bmNJbml0UHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgQXBwbGljYXRpb25Jbml0U3RhdHVzLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgQXBwbGljYXRpb25Jbml0U3RhdHVzLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBJbmplY3QsIGFyZ3M6IFtBUFBfSU5JVElBTElaRVIsXSB9LCB7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIEFwcGxpY2F0aW9uSW5pdFN0YXR1cztcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQSBESSBUb2tlbiByZXByZXNlbnRpbmcgYSB1bmlxdWUgc3RyaW5nIGlkIGFzc2lnbmVkIHRvIHRoZSBhcHBsaWNhdGlvbiBieSBBbmd1bGFyIGFuZCB1c2VkXG4gKiBwcmltYXJpbHkgZm9yIHByZWZpeGluZyBhcHBsaWNhdGlvbiBhdHRyaWJ1dGVzIGFuZCBDU1Mgc3R5bGVzIHdoZW5cbiAqIHtcXEBsaW5rIFZpZXdFbmNhcHN1bGF0aW9uI0VtdWxhdGVkIFZpZXdFbmNhcHN1bGF0aW9uLkVtdWxhdGVkfSBpcyBiZWluZyB1c2VkLlxuICpcbiAqIElmIHlvdSBuZWVkIHRvIGF2b2lkIHJhbmRvbWx5IGdlbmVyYXRlZCB2YWx1ZSB0byBiZSB1c2VkIGFzIGFuIGFwcGxpY2F0aW9uIGlkLCB5b3UgY2FuIHByb3ZpZGVcbiAqIGEgY3VzdG9tIHZhbHVlIHZpYSBhIERJIHByb3ZpZGVyIDwhLS0gVE9ETzogcHJvdmlkZXIgLS0+IGNvbmZpZ3VyaW5nIHRoZSByb290IHtcXEBsaW5rIEluamVjdG9yfVxuICogdXNpbmcgdGhpcyB0b2tlbi5cbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgQVBQX0lEID0gbmV3IEluamVjdGlvblRva2VuKCdBcHBJZCcpO1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfYXBwSWRSYW5kb21Qcm92aWRlckZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIFwiXCIgKyBfcmFuZG9tQ2hhcigpICsgX3JhbmRvbUNoYXIoKSArIF9yYW5kb21DaGFyKCk7XG59XG4vKipcbiAqIFByb3ZpZGVycyB0aGF0IHdpbGwgZ2VuZXJhdGUgYSByYW5kb20gQVBQX0lEX1RPS0VOLlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBBUFBfSURfUkFORE9NX1BST1ZJREVSID0ge1xuICAgIHByb3ZpZGU6IEFQUF9JRCxcbiAgICB1c2VGYWN0b3J5OiBfYXBwSWRSYW5kb21Qcm92aWRlckZhY3RvcnksXG4gICAgZGVwczogLyoqIEB0eXBlIHs/fSAqLyAoW10pLFxufTtcbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX3JhbmRvbUNoYXIoKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNSkpO1xufVxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIGEgcGxhdGZvcm0gaXMgaW5pdGlhbGl6ZWQuXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIFBMQVRGT1JNX0lOSVRJQUxJWkVSID0gbmV3IEluamVjdGlvblRva2VuKCdQbGF0Zm9ybSBJbml0aWFsaXplcicpO1xuLyoqXG4gKiBBIHRva2VuIHRoYXQgaW5kaWNhdGVzIGFuIG9wYXF1ZSBwbGF0Zm9ybSBpZC5cbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgUExBVEZPUk1fSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1BsYXRmb3JtIElEJyk7XG4vKipcbiAqIEFsbCBjYWxsYmFja3MgcHJvdmlkZWQgdmlhIHRoaXMgdG9rZW4gd2lsbCBiZSBjYWxsZWQgZm9yIGV2ZXJ5IGNvbXBvbmVudCB0aGF0IGlzIGJvb3RzdHJhcHBlZC5cbiAqIFNpZ25hdHVyZSBvZiB0aGUgY2FsbGJhY2s6XG4gKlxuICogYChjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZikgPT4gdm9pZGAuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSID0gbmV3IEluamVjdGlvblRva2VuKCdhcHBCb290c3RyYXBMaXN0ZW5lcicpO1xuLyoqXG4gKiBBIHRva2VuIHdoaWNoIGluZGljYXRlcyB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhlIGFwcGxpY2F0aW9uXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIFBBQ0tBR0VfUk9PVF9VUkwgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FwcGxpY2F0aW9uIFBhY2thZ2VzIFJvb3QgVVJMJyk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBDb25zb2xlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnNvbGUoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gbWVzc2FnZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQ29uc29sZS5wcm90b3R5cGUubG9nID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICB9O1xuICAgIC8vIE5vdGU6IGZvciByZXBvcnRpbmcgZXJyb3JzIHVzZSBgRE9NLmxvZ0Vycm9yKClgIGFzIGl0IGlzIHBsYXRmb3JtIHNwZWNpZmljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb25zb2xlLnByb3RvdHlwZS53YXJuID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBtZXNzYWdlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfTtcbiAgICBDb25zb2xlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgQ29uc29sZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBDb25zb2xlO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDb21iaW5hdGlvbiBvZiBOZ01vZHVsZUZhY3RvcnkgYW5kIENvbXBvbmVudEZhY3RvcnlzLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgTW9kdWxlV2l0aENvbXBvbmVudEZhY3RvcmllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNb2R1bGVXaXRoQ29tcG9uZW50RmFjdG9yaWVzKG5nTW9kdWxlRmFjdG9yeSwgY29tcG9uZW50RmFjdG9yaWVzKSB7XG4gICAgICAgIHRoaXMubmdNb2R1bGVGYWN0b3J5ID0gbmdNb2R1bGVGYWN0b3J5O1xuICAgICAgICB0aGlzLmNvbXBvbmVudEZhY3RvcmllcyA9IGNvbXBvbmVudEZhY3RvcmllcztcbiAgICB9XG4gICAgcmV0dXJuIE1vZHVsZVdpdGhDb21wb25lbnRGYWN0b3JpZXM7XG59KCkpO1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfdGhyb3dFcnJvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSdW50aW1lIGNvbXBpbGVyIGlzIG5vdCBsb2FkZWRcIik7XG59XG4vKipcbiAqIExvdy1sZXZlbCBzZXJ2aWNlIGZvciBydW5uaW5nIHRoZSBhbmd1bGFyIGNvbXBpbGVyIGR1cmluZyBydW50aW1lXG4gKiB0byBjcmVhdGUge1xcQGxpbmsgQ29tcG9uZW50RmFjdG9yeX1zLCB3aGljaFxuICogY2FuIGxhdGVyIGJlIHVzZWQgdG8gY3JlYXRlIGFuZCByZW5kZXIgYSBDb21wb25lbnQgaW5zdGFuY2UuXG4gKlxuICogRWFjaCBgXFxATmdNb2R1bGVgIHByb3ZpZGVzIGFuIG93biBgQ29tcGlsZXJgIHRvIGl0cyBpbmplY3RvcixcbiAqIHRoYXQgd2lsbCB1c2UgdGhlIGRpcmVjdGl2ZXMvcGlwZXMgb2YgdGhlIG5nIG1vZHVsZSBmb3IgY29tcGlsYXRpb25cbiAqIG9mIGNvbXBvbmVudHMuXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIENvbXBpbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBpbGVyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21waWxlcyB0aGUgZ2l2ZW4gTmdNb2R1bGUgYW5kIGFsbCBvZiBpdHMgY29tcG9uZW50cy4gQWxsIHRlbXBsYXRlcyBvZiB0aGUgY29tcG9uZW50cyBsaXN0ZWRcbiAgICAgKiBpbiBgZW50cnlDb21wb25lbnRzYCBoYXZlIHRvIGJlIGlubGluZWQuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ29tcGlsZXMgdGhlIGdpdmVuIE5nTW9kdWxlIGFuZCBhbGwgb2YgaXRzIGNvbXBvbmVudHMuIEFsbCB0ZW1wbGF0ZXMgb2YgdGhlIGNvbXBvbmVudHMgbGlzdGVkXG4gICAgICogaW4gYGVudHJ5Q29tcG9uZW50c2AgaGF2ZSB0byBiZSBpbmxpbmVkLlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHs/fSBtb2R1bGVUeXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb21waWxlci5wcm90b3R5cGUuY29tcGlsZU1vZHVsZVN5bmMgPSAvKipcbiAgICAgKiBDb21waWxlcyB0aGUgZ2l2ZW4gTmdNb2R1bGUgYW5kIGFsbCBvZiBpdHMgY29tcG9uZW50cy4gQWxsIHRlbXBsYXRlcyBvZiB0aGUgY29tcG9uZW50cyBsaXN0ZWRcbiAgICAgKiBpbiBgZW50cnlDb21wb25lbnRzYCBoYXZlIHRvIGJlIGlubGluZWQuXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZVR5cGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtb2R1bGVUeXBlKSB7IHRocm93IF90aHJvd0Vycm9yKCk7IH07XG4gICAgLyoqXG4gICAgICogQ29tcGlsZXMgdGhlIGdpdmVuIE5nTW9kdWxlIGFuZCBhbGwgb2YgaXRzIGNvbXBvbmVudHNcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDb21waWxlcyB0aGUgZ2l2ZW4gTmdNb2R1bGUgYW5kIGFsbCBvZiBpdHMgY29tcG9uZW50c1xuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHs/fSBtb2R1bGVUeXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb21waWxlci5wcm90b3R5cGUuY29tcGlsZU1vZHVsZUFzeW5jID0gLyoqXG4gICAgICogQ29tcGlsZXMgdGhlIGdpdmVuIE5nTW9kdWxlIGFuZCBhbGwgb2YgaXRzIGNvbXBvbmVudHNcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1vZHVsZVR5cGUpIHsgdGhyb3cgX3Rocm93RXJyb3IoKTsgfTtcbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHtAbGluayAjY29tcGlsZU1vZHVsZVN5bmN9IGJ1dCBhbHNvIGNyZWF0ZXMgQ29tcG9uZW50RmFjdG9yaWVzIGZvciBhbGwgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHtcXEBsaW5rICNjb21waWxlTW9kdWxlU3luY30gYnV0IGFsc28gY3JlYXRlcyBDb21wb25lbnRGYWN0b3JpZXMgZm9yIGFsbCBjb21wb25lbnRzLlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHs/fSBtb2R1bGVUeXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb21waWxlci5wcm90b3R5cGUuY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNTeW5jID0gLyoqXG4gICAgICogU2FtZSBhcyB7XFxAbGluayAjY29tcGlsZU1vZHVsZVN5bmN9IGJ1dCBhbHNvIGNyZWF0ZXMgQ29tcG9uZW50RmFjdG9yaWVzIGZvciBhbGwgY29tcG9uZW50cy5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1vZHVsZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgX3Rocm93RXJyb3IoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNhbWUgYXMge0BsaW5rICNjb21waWxlTW9kdWxlQXN5bmN9IGJ1dCBhbHNvIGNyZWF0ZXMgQ29tcG9uZW50RmFjdG9yaWVzIGZvciBhbGwgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHtcXEBsaW5rICNjb21waWxlTW9kdWxlQXN5bmN9IGJ1dCBhbHNvIGNyZWF0ZXMgQ29tcG9uZW50RmFjdG9yaWVzIGZvciBhbGwgY29tcG9uZW50cy5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzQXN5bmMgPSAvKipcbiAgICAgKiBTYW1lIGFzIHtcXEBsaW5rICNjb21waWxlTW9kdWxlQXN5bmN9IGJ1dCBhbHNvIGNyZWF0ZXMgQ29tcG9uZW50RmFjdG9yaWVzIGZvciBhbGwgY29tcG9uZW50cy5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVHlwZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1vZHVsZVR5cGUpIHtcbiAgICAgICAgdGhyb3cgX3Rocm93RXJyb3IoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY2FjaGVzLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgY2FjaGVzLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQ29tcGlsZXIucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSAvKipcbiAgICAgKiBDbGVhcnMgYWxsIGNhY2hlcy5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGNhY2hlIGZvciB0aGUgZ2l2ZW4gY29tcG9uZW50L25nTW9kdWxlLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgY2FjaGUgZm9yIHRoZSBnaXZlbiBjb21wb25lbnQvbmdNb2R1bGUuXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb21waWxlci5wcm90b3R5cGUuY2xlYXJDYWNoZUZvciA9IC8qKlxuICAgICAqIENsZWFycyB0aGUgY2FjaGUgZm9yIHRoZSBnaXZlbiBjb21wb25lbnQvbmdNb2R1bGUuXG4gICAgICogQHBhcmFtIHs/fSB0eXBlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHlwZSkgeyB9O1xuICAgIENvbXBpbGVyLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgQ29tcGlsZXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gQ29tcGlsZXI7XG59KCkpO1xuLyoqXG4gKiBUb2tlbiB0byBwcm92aWRlIENvbXBpbGVyT3B0aW9ucyBpbiB0aGUgcGxhdGZvcm0gaW5qZWN0b3IuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBDT01QSUxFUl9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuKCdjb21waWxlck9wdGlvbnMnKTtcbi8qKlxuICogQSBmYWN0b3J5IGZvciBjcmVhdGluZyBhIENvbXBpbGVyXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIENvbXBpbGVyRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21waWxlckZhY3RvcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBDb21waWxlckZhY3Rvcnk7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gaW5zdGFuY2Ugb2YgYSBDb21wb25lbnQgY3JlYXRlZCB2aWEgYSB7XFxAbGluayBDb21wb25lbnRGYWN0b3J5fS5cbiAqXG4gKiBgQ29tcG9uZW50UmVmYCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIENvbXBvbmVudCBJbnN0YW5jZSBhcyB3ZWxsIG90aGVyIG9iamVjdHMgcmVsYXRlZCB0byB0aGlzXG4gKiBDb21wb25lbnQgSW5zdGFuY2UgYW5kIGFsbG93cyB5b3UgdG8gZGVzdHJveSB0aGUgQ29tcG9uZW50IEluc3RhbmNlIHZpYSB0aGUge1xcQGxpbmsgI2Rlc3Ryb3l9XG4gKiBtZXRob2QuXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgQ29tcG9uZW50UmVmID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBvbmVudFJlZigpIHtcbiAgICB9XG4gICAgcmV0dXJuIENvbXBvbmVudFJlZjtcbn0oKSk7XG4vKipcbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBDb21wb25lbnRGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBvbmVudEZhY3RvcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBDb21wb25lbnRGYWN0b3J5O1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcGFyYW0gez99IGNvbXBvbmVudFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3IgPSBFcnJvcihcIk5vIGNvbXBvbmVudCBmYWN0b3J5IGZvdW5kIGZvciBcIiArIHN0cmluZ2lmeShjb21wb25lbnQpICsgXCIuIERpZCB5b3UgYWRkIGl0IHRvIEBOZ01vZHVsZS5lbnRyeUNvbXBvbmVudHM/XCIpO1xuICAgICgvKiogQHR5cGUgez99ICovIChlcnJvcikpW0VSUk9SX0NPTVBPTkVOVF0gPSBjb21wb25lbnQ7XG4gICAgcmV0dXJuIGVycm9yO1xufVxudmFyIEVSUk9SX0NPTVBPTkVOVCA9ICduZ0NvbXBvbmVudCc7XG4vKipcbiAqIEBwYXJhbSB7P30gZXJyb3JcbiAqIEByZXR1cm4gez99XG4gKi9cblxudmFyIF9OdWxsQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIF9OdWxsQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfTnVsbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5wcm90b3R5cGUucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkgPSAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5vQ29tcG9uZW50RmFjdG9yeUVycm9yKGNvbXBvbmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gX051bGxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG59KCkpO1xuLyoqXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcigpIHtcbiAgICB9XG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLk5VTEwgPSBuZXcgX051bGxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoKTtcbiAgICByZXR1cm4gQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xufSgpKTtcbnZhciBDb2RlZ2VuQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvZGVnZW5Db21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoZmFjdG9yaWVzLCBfcGFyZW50LCBfbmdNb2R1bGUpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5fbmdNb2R1bGUgPSBfbmdNb2R1bGU7XG4gICAgICAgIHRoaXMuX2ZhY3RvcmllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGZhY3Rvcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmFjdG9yeSA9IGZhY3Rvcmllc1tpXTtcbiAgICAgICAgICAgIHRoaXMuX2ZhY3Rvcmllcy5zZXQoZmFjdG9yeS5jb21wb25lbnRUeXBlLCBmYWN0b3J5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb2RlZ2VuQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnByb3RvdHlwZS5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSA9IC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHs/fSBjb21wb25lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmFjdG9yeSA9IHRoaXMuX2ZhY3Rvcmllcy5nZXQoY29tcG9uZW50KTtcbiAgICAgICAgaWYgKCFmYWN0b3J5ICYmIHRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgZmFjdG9yeSA9IHRoaXMuX3BhcmVudC5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZmFjdG9yeSkge1xuICAgICAgICAgICAgdGhyb3cgbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlKGZhY3RvcnksIHRoaXMuX25nTW9kdWxlKTtcbiAgICB9O1xuICAgIHJldHVybiBDb2RlZ2VuQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xufSgpKTtcbnZhciBDb21wb25lbnRGYWN0b3J5Qm91bmRUb01vZHVsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tcG9uZW50RmFjdG9yeUJvdW5kVG9Nb2R1bGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tcG9uZW50RmFjdG9yeUJvdW5kVG9Nb2R1bGUoZmFjdG9yeSwgbmdNb2R1bGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgICAgIF90aGlzLm5nTW9kdWxlID0gbmdNb2R1bGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlLnByb3RvdHlwZSwgXCJzZWxlY3RvclwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZhY3Rvcnkuc2VsZWN0b3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnRGYWN0b3J5Qm91bmRUb01vZHVsZS5wcm90b3R5cGUsIFwiY29tcG9uZW50VHlwZVwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZhY3RvcnkuY29tcG9uZW50VHlwZTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlLnByb3RvdHlwZSwgXCJuZ0NvbnRlbnRTZWxlY3RvcnNcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mYWN0b3J5Lm5nQ29udGVudFNlbGVjdG9yczsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlLnByb3RvdHlwZSwgXCJpbnB1dHNcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mYWN0b3J5LmlucHV0czsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlLnByb3RvdHlwZSwgXCJvdXRwdXRzXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZmFjdG9yeS5vdXRwdXRzOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGluamVjdG9yXG4gICAgICogQHBhcmFtIHs/PX0gcHJvamVjdGFibGVOb2Rlc1xuICAgICAqIEBwYXJhbSB7Pz19IHJvb3RTZWxlY3Rvck9yTm9kZVxuICAgICAqIEBwYXJhbSB7Pz19IG5nTW9kdWxlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb21wb25lbnRGYWN0b3J5Qm91bmRUb01vZHVsZS5wcm90b3R5cGUuY3JlYXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBpbmplY3RvclxuICAgICAqIEBwYXJhbSB7Pz19IHByb2plY3RhYmxlTm9kZXNcbiAgICAgKiBAcGFyYW0gez89fSByb290U2VsZWN0b3JPck5vZGVcbiAgICAgKiBAcGFyYW0gez89fSBuZ01vZHVsZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzLCByb290U2VsZWN0b3JPck5vZGUsIG5nTW9kdWxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnkuY3JlYXRlKGluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzLCByb290U2VsZWN0b3JPck5vZGUsIG5nTW9kdWxlIHx8IHRoaXMubmdNb2R1bGUpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXBvbmVudEZhY3RvcnlCb3VuZFRvTW9kdWxlO1xufShDb21wb25lbnRGYWN0b3J5KSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbnN0YW5jZSBvZiBhbiBOZ01vZHVsZSBjcmVhdGVkIHZpYSBhIHtcXEBsaW5rIE5nTW9kdWxlRmFjdG9yeX0uXG4gKlxuICogYE5nTW9kdWxlUmVmYCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIE5nTW9kdWxlIEluc3RhbmNlIGFzIHdlbGwgb3RoZXIgb2JqZWN0cyByZWxhdGVkIHRvIHRoaXNcbiAqIE5nTW9kdWxlIEluc3RhbmNlLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBOZ01vZHVsZVJlZiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOZ01vZHVsZVJlZigpIHtcbiAgICB9XG4gICAgcmV0dXJuIE5nTW9kdWxlUmVmO1xufSgpKTtcbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIE5nTW9kdWxlRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOZ01vZHVsZUZhY3RvcnkoKSB7XG4gICAgfVxuICAgIHJldHVybiBOZ01vZHVsZUZhY3Rvcnk7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgc2NvcGUgZnVuY3Rpb24gZm9yIHRoZSBXZWIgVHJhY2luZyBGcmFtZXdvcmsgKFdURikuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxudmFyIHRyYWNlO1xudmFyIGV2ZW50cztcbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGV0ZWN0V1RGKCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHd0ZiA9ICgvKiogQHR5cGUgez99ICovIChfZ2xvYmFsIC8qKiBUT0RPICM5MTAwICovKSAvKiogVE9ETyAjOTEwMCAqLylbJ3d0ZiddO1xuICAgIGlmICh3dGYpIHtcbiAgICAgICAgdHJhY2UgPSB3dGZbJ3RyYWNlJ107XG4gICAgICAgIGlmICh0cmFjZSkge1xuICAgICAgICAgICAgZXZlbnRzID0gdHJhY2VbJ2V2ZW50cyddO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHNpZ25hdHVyZVxuICogQHBhcmFtIHs/PX0gZmxhZ3NcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNjb3BlKHNpZ25hdHVyZSwgZmxhZ3MpIHtcbiAgICBpZiAoZmxhZ3MgPT09IHZvaWQgMCkgeyBmbGFncyA9IG51bGw7IH1cbiAgICByZXR1cm4gZXZlbnRzLmNyZWF0ZVNjb3BlKHNpZ25hdHVyZSwgZmxhZ3MpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHs/fSBzY29wZVxuICogQHBhcmFtIHs/PX0gcmV0dXJuVmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGxlYXZlKHNjb3BlLCByZXR1cm5WYWx1ZSkge1xuICAgIHRyYWNlLmxlYXZlU2NvcGUoc2NvcGUsIHJldHVyblZhbHVlKTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcmFuZ2VUeXBlXG4gKiBAcGFyYW0gez99IGFjdGlvblxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gc3RhcnRUaW1lUmFuZ2UocmFuZ2VUeXBlLCBhY3Rpb24pIHtcbiAgICByZXR1cm4gdHJhY2UuYmVnaW5UaW1lUmFuZ2UocmFuZ2VUeXBlLCBhY3Rpb24pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHJhbmdlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBlbmRUaW1lUmFuZ2UocmFuZ2UpIHtcbiAgICB0cmFjZS5lbmRUaW1lUmFuZ2UocmFuZ2UpO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRydWUgaWYgV1RGIGlzIGVuYWJsZWQuXG4gKi9cbnZhciB3dGZFbmFibGVkID0gZGV0ZWN0V1RGKCk7XG4vKipcbiAqIEBwYXJhbSB7Pz19IGFyZzBcbiAqIEBwYXJhbSB7Pz19IGFyZzFcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5vb3BTY29wZShhcmcwLCBhcmcxKSB7XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIENyZWF0ZSB0cmFjZSBzY29wZS5cbiAqXG4gKiBTY29wZXMgbXVzdCBiZSBzdHJpY3RseSBuZXN0ZWQgYW5kIGFyZSBhbmFsb2dvdXMgdG8gc3RhY2sgZnJhbWVzLCBidXRcbiAqIGRvIG5vdCBoYXZlIHRvIGZvbGxvdyB0aGUgc3RhY2sgZnJhbWVzLiBJbnN0ZWFkIGl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhleSBmb2xsb3cgbG9naWNhbFxuICogbmVzdGluZy4gWW91IG1heSB3YW50IHRvIHVzZVxuICogW0V2ZW50XG4gKiBTaWduYXR1cmVzXShodHRwOi8vZ29vZ2xlLmdpdGh1Yi5pby90cmFjaW5nLWZyYW1ld29yay9pbnN0cnVtZW50aW5nLWNvZGUuaHRtbCNjdXN0b20tZXZlbnRzKVxuICogYXMgdGhleSBhcmUgZGVmaW5lZCBpbiBXVEYuXG4gKlxuICogVXNlZCB0byBtYXJrIHNjb3BlIGVudHJ5LiBUaGUgcmV0dXJuIHZhbHVlIGlzIHVzZWQgdG8gbGVhdmUgdGhlIHNjb3BlLlxuICpcbiAqICAgICB2YXIgbXlTY29wZSA9IHd0ZkNyZWF0ZVNjb3BlKCdNeUNsYXNzI215TWV0aG9kKGFzY2lpIHNvbWVWYWwpJyk7XG4gKlxuICogICAgIHNvbWVNZXRob2QoKSB7XG4gKiAgICAgICAgdmFyIHMgPSBteVNjb3BlKCdGb28nKTsgLy8gJ0ZvbycgZ2V0cyBzdG9yZWQgaW4gdHJhY2luZyBVSVxuICogICAgICAgIC8vIERPIFNPTUUgV09SSyBIRVJFXG4gKiAgICAgICAgcmV0dXJuIHd0ZkxlYXZlKHMsIDEyMyk7IC8vIFJldHVybiB2YWx1ZSAxMjNcbiAqICAgICB9XG4gKlxuICogTm90ZSwgYWRkaW5nIHRyeS1maW5hbGx5IGJsb2NrIGFyb3VuZCB0aGUgd29yayB0byBlbnN1cmUgdGhhdCBgd3RmTGVhdmVgIGdldHMgY2FsbGVkIGNhblxuICogbmVnYXRpdmVseSBpbXBhY3QgdGhlIHBlcmZvcm1hbmNlIG9mIHlvdXIgYXBwbGljYXRpb24uIEZvciB0aGlzIHJlYXNvbiB3ZSByZWNvbW1lbmQgdGhhdFxuICogeW91IGRvbid0IGFkZCB0aGVtIHRvIGVuc3VyZSB0aGF0IGB3dGZMZWF2ZWAgZ2V0cyBjYWxsZWQuIEluIHByb2R1Y3Rpb24gYHd0ZkxlYXZlYCBpcyBhIG5vb3AgYW5kXG4gKiBzbyB0cnktZmluYWxseSBibG9jayBoYXMgbm8gdmFsdWUuIFdoZW4gZGVidWdnaW5nIHBlcmYgaXNzdWVzLCBza2lwcGluZyBgd3RmTGVhdmVgLCBkbyB0b1xuICogZXhjZXB0aW9uLCB3aWxsIHByb2R1Y2UgaW5jb3JyZWN0IHRyYWNlLCBidXQgcHJlc2VuY2Ugb2YgZXhjZXB0aW9uIHNpZ25pZmllcyBsb2dpYyBlcnJvciB3aGljaFxuICogbmVlZHMgdG8gYmUgZml4ZWQgYmVmb3JlIHRoZSBhcHAgc2hvdWxkIGJlIHByb2ZpbGVkLiBBZGQgdHJ5LWZpbmFsbHkgb25seSB3aGVuIHlvdSBleHBlY3QgdGhhdFxuICogYW4gZXhjZXB0aW9uIGlzIGV4cGVjdGVkIGR1cmluZyBub3JtYWwgZXhlY3V0aW9uIHdoaWxlIHByb2ZpbGluZy5cbiAqXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIHd0ZkNyZWF0ZVNjb3BlID0gd3RmRW5hYmxlZCA/IGNyZWF0ZVNjb3BlIDogZnVuY3Rpb24gKHNpZ25hdHVyZSwgZmxhZ3MpIHsgcmV0dXJuIG5vb3BTY29wZTsgfTtcbi8qKlxuICogVXNlZCB0byBtYXJrIGVuZCBvZiBTY29wZS5cbiAqXG4gKiAtIGBzY29wZWAgdG8gZW5kLlxuICogLSBgcmV0dXJuVmFsdWVgIChvcHRpb25hbCkgdG8gYmUgcGFzc2VkIHRvIHRoZSBXVEYuXG4gKlxuICogUmV0dXJucyB0aGUgYHJldHVyblZhbHVlIGZvciBlYXN5IGNoYWluaW5nLlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciB3dGZMZWF2ZSA9IHd0ZkVuYWJsZWQgPyBsZWF2ZSA6IGZ1bmN0aW9uIChzLCByKSB7IHJldHVybiByOyB9O1xuLyoqXG4gKiBVc2VkIHRvIG1hcmsgQXN5bmMgc3RhcnQuIEFzeW5jIGFyZSBzaW1pbGFyIHRvIHNjb3BlIGJ1dCB0aGV5IGRvbid0IGhhdmUgdG8gYmUgc3RyaWN0bHkgbmVzdGVkLlxuICogVGhlIHJldHVybiB2YWx1ZSBpcyB1c2VkIGluIHRoZSBjYWxsIHRvIFtlbmRBc3luY10uIEFzeW5jIHJhbmdlcyBvbmx5IHdvcmsgaWYgV1RGIGhhcyBiZWVuXG4gKiBlbmFibGVkLlxuICpcbiAqICAgICBzb21lTWV0aG9kKCkge1xuICogICAgICAgIHZhciBzID0gd3RmU3RhcnRUaW1lUmFuZ2UoJ0hUVFA6R0VUJywgJ3NvbWUudXJsJyk7XG4gKiAgICAgICAgdmFyIGZ1dHVyZSA9IG5ldyBGdXR1cmUuZGVsYXkoNSkudGhlbigoXykge1xuICogICAgICAgICAgd3RmRW5kVGltZVJhbmdlKHMpO1xuICogICAgICAgIH0pO1xuICogICAgIH1cbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgd3RmU3RhcnRUaW1lUmFuZ2UgPSB3dGZFbmFibGVkID8gc3RhcnRUaW1lUmFuZ2UgOiBmdW5jdGlvbiAocmFuZ2VUeXBlLCBhY3Rpb24pIHsgcmV0dXJuIG51bGw7IH07XG4vKipcbiAqIEVuZHMgYSBhc3luYyB0aW1lIHJhbmdlIG9wZXJhdGlvbi5cbiAqIFtyYW5nZV0gaXMgdGhlIHJldHVybiB2YWx1ZSBmcm9tIFt3dGZTdGFydFRpbWVSYW5nZV0gQXN5bmMgcmFuZ2VzIG9ubHkgd29yayBpZiBXVEYgaGFzIGJlZW5cbiAqIGVuYWJsZWQuXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIHd0ZkVuZFRpbWVSYW5nZSA9IHd0ZkVuYWJsZWQgPyBlbmRUaW1lUmFuZ2UgOiBmdW5jdGlvbiAocikgeyByZXR1cm4gbnVsbDsgfTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBVc2UgYnkgZGlyZWN0aXZlcyBhbmQgY29tcG9uZW50cyB0byBlbWl0IGN1c3RvbSBFdmVudHMuXG4gKlxuICogIyMjIEV4YW1wbGVzXG4gKlxuICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCBgWmlwcHlgIGFsdGVybmF0aXZlbHkgZW1pdHMgYG9wZW5gIGFuZCBgY2xvc2VgIGV2ZW50cyB3aGVuIGl0c1xuICogdGl0bGUgZ2V0cyBjbGlja2VkOlxuICpcbiAqIGBgYFxuICogXFxAQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICd6aXBweScsXG4gKiAgIHRlbXBsYXRlOiBgXG4gKiAgIDxkaXYgY2xhc3M9XCJ6aXBweVwiPlxuICogICAgIDxkaXYgKGNsaWNrKT1cInRvZ2dsZSgpXCI+VG9nZ2xlPC9kaXY+XG4gKiAgICAgPGRpdiBbaGlkZGVuXT1cIiF2aXNpYmxlXCI+XG4gKiAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gKiAgICAgPC9kaXY+XG4gKiAgPC9kaXY+YH0pXG4gKiBleHBvcnQgY2xhc3MgWmlwcHkge1xuICogICB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZTtcbiAqICAgXFxAT3V0cHV0KCkgb3BlbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gKiAgIFxcQE91dHB1dCgpIGNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAqXG4gKiAgIHRvZ2dsZSgpIHtcbiAqICAgICB0aGlzLnZpc2libGUgPSAhdGhpcy52aXNpYmxlO1xuICogICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAqICAgICAgIHRoaXMub3Blbi5lbWl0KG51bGwpO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICB0aGlzLmNsb3NlLmVtaXQobnVsbCk7XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgZXZlbnRzIHBheWxvYWQgY2FuIGJlIGFjY2Vzc2VkIGJ5IHRoZSBwYXJhbWV0ZXIgYCRldmVudGAgb24gdGhlIGNvbXBvbmVudHMgb3V0cHV0IGV2ZW50XG4gKiBoYW5kbGVyOlxuICpcbiAqIGBgYFxuICogPHppcHB5IChvcGVuKT1cIm9uT3BlbigkZXZlbnQpXCIgKGNsb3NlKT1cIm9uQ2xvc2UoJGV2ZW50KVwiPjwvemlwcHk+XG4gKiBgYGBcbiAqXG4gKiBVc2VzIFJ4Lk9ic2VydmFibGUgYnV0IHByb3ZpZGVzIGFuIGFkYXB0ZXIgdG8gbWFrZSBpdCB3b3JrIGFzIHNwZWNpZmllZCBoZXJlOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2podXNhaW4vb2JzZXJ2YWJsZS1zcGVjXG4gKlxuICogT25jZSBhIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgc3BlYyBpcyBhdmFpbGFibGUsIHN3aXRjaCB0byBpdC5cbiAqIFxcQHN0YWJsZVxuICovXG52YXIgRXZlbnRFbWl0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFdmVudEVtaXR0ZXIsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgRXZlbnRFbWl0dGVyfSwgd2hpY2ggZGVwZW5kaW5nIG9uIGBpc0FzeW5jYCxcbiAgICAgKiBkZWxpdmVycyBldmVudHMgc3luY2hyb25vdXNseSBvciBhc3luY2hyb25vdXNseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpc0FzeW5jIEJ5IGRlZmF1bHQsIGV2ZW50cyBhcmUgZGVsaXZlcmVkIHN5bmNocm9ub3VzbHkgKGRlZmF1bHQgdmFsdWU6IGBmYWxzZWApLlxuICAgICAqIFNldCB0byBgdHJ1ZWAgZm9yIGFzeW5jaHJvbm91cyBldmVudCBkZWxpdmVyeS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoaXNBc3luYykge1xuICAgICAgICBpZiAoaXNBc3luYyA9PT0gdm9pZCAwKSB7IGlzQXN5bmMgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fX2lzQXN5bmMgPSBpc0FzeW5jO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSAvKipcbiAgICAgKiBAcGFyYW0gez89fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7IF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHZhbHVlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez89fSBnZW5lcmF0b3JPck5leHRcbiAgICAgKiBAcGFyYW0gez89fSBlcnJvclxuICAgICAqIEBwYXJhbSB7Pz19IGNvbXBsZXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IGdlbmVyYXRvck9yTmV4dFxuICAgICAqIEBwYXJhbSB7Pz19IGVycm9yXG4gICAgICogQHBhcmFtIHs/PX0gY29tcGxldGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChnZW5lcmF0b3JPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzY2hlZHVsZXJGbjtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JGbiA9IGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIG51bGw7IH07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbXBsZXRlRm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9O1xuICAgICAgICBpZiAoZ2VuZXJhdG9yT3JOZXh0ICYmIHR5cGVvZiBnZW5lcmF0b3JPck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXJGbiA9IHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBnZW5lcmF0b3JPck5leHQubmV4dCh2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICh2YWx1ZSkgeyBnZW5lcmF0b3JPck5leHQubmV4dCh2YWx1ZSk7IH07XG4gICAgICAgICAgICBpZiAoZ2VuZXJhdG9yT3JOZXh0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JGbiA9IHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKGVycikgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRvck9yTmV4dC5lcnJvcihlcnIpOyB9KTsgfSA6XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlcnIpIHsgZ2VuZXJhdG9yT3JOZXh0LmVycm9yKGVycik7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2VuZXJhdG9yT3JOZXh0LmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVGbiA9IHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKCkgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRvck9yTmV4dC5jb21wbGV0ZSgpOyB9KTsgfSA6XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgZ2VuZXJhdG9yT3JOZXh0LmNvbXBsZXRlKCk7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzY2hlZHVsZXJGbiA9IHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKHZhbHVlKSB7IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuZXJhdG9yT3JOZXh0KHZhbHVlKTsgfSk7IH0gOlxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkgeyBnZW5lcmF0b3JPck5leHQodmFsdWUpOyB9O1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JGbiA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKGVycikgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yKGVycik7IH0pOyB9IDogZnVuY3Rpb24gKGVycikgeyBlcnJvcihlcnIpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVGbiA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKCkgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXBsZXRlKCk7IH0pOyB9IDogZnVuY3Rpb24gKCkgeyBjb21wbGV0ZSgpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnN1YnNjcmliZS5jYWxsKHRoaXMsIHNjaGVkdWxlckZuLCBlcnJvckZuLCBjb21wbGV0ZUZuKTtcbiAgICB9O1xuICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KFN1YmplY3QpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBbiBpbmplY3RhYmxlIHNlcnZpY2UgZm9yIGV4ZWN1dGluZyB3b3JrIGluc2lkZSBvciBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUuXG4gKlxuICogVGhlIG1vc3QgY29tbW9uIHVzZSBvZiB0aGlzIHNlcnZpY2UgaXMgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2Ugd2hlbiBzdGFydGluZyBhIHdvcmsgY29uc2lzdGluZyBvZlxuICogb25lIG9yIG1vcmUgYXN5bmNocm9ub3VzIHRhc2tzIHRoYXQgZG9uJ3QgcmVxdWlyZSBVSSB1cGRhdGVzIG9yIGVycm9yIGhhbmRsaW5nIHRvIGJlIGhhbmRsZWQgYnlcbiAqIEFuZ3VsYXIuIFN1Y2ggdGFza3MgY2FuIGJlIGtpY2tlZCBvZmYgdmlhIHtcXEBsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0gYW5kIGlmIG5lZWRlZCwgdGhlc2UgdGFza3NcbiAqIGNhbiByZWVudGVyIHRoZSBBbmd1bGFyIHpvbmUgdmlhIHtcXEBsaW5rICNydW59LlxuICpcbiAqIDwhLS0gVE9ETzogYWRkL2ZpeCBsaW5rcyB0bzpcbiAqICAgLSBkb2NzIGV4cGxhaW5pbmcgem9uZXMgYW5kIHRoZSB1c2Ugb2Ygem9uZXMgaW4gQW5ndWxhciBhbmQgY2hhbmdlLWRldGVjdGlvblxuICogICAtIGxpbmsgdG8gcnVuT3V0c2lkZUFuZ3VsYXIvcnVuICh0aHJvdWdob3V0IHRoaXMgZmlsZSEpXG4gKiAgIC0tPlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgXG4gKiBpbXBvcnQge0NvbXBvbmVudCwgTmdab25lfSBmcm9tICdcXEBhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHtOZ0lmfSBmcm9tICdcXEBhbmd1bGFyL2NvbW1vbic7XG4gKlxuICogXFxAQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICduZy16b25lLWRlbW8nLFxuICogICB0ZW1wbGF0ZTogYFxuICogICAgIDxoMj5EZW1vOiBOZ1pvbmU8L2gyPlxuICpcbiAqICAgICA8cD5Qcm9ncmVzczoge3twcm9ncmVzc319JTwvcD5cbiAqICAgICA8cCAqbmdJZj1cInByb2dyZXNzID49IDEwMFwiPkRvbmUgcHJvY2Vzc2luZyB7e2xhYmVsfX0gb2YgQW5ndWxhciB6b25lITwvcD5cbiAqXG4gKiAgICAgPGJ1dHRvbiAoY2xpY2spPVwicHJvY2Vzc1dpdGhpbkFuZ3VsYXJab25lKClcIj5Qcm9jZXNzIHdpdGhpbiBBbmd1bGFyIHpvbmU8L2J1dHRvbj5cbiAqICAgICA8YnV0dG9uIChjbGljayk9XCJwcm9jZXNzT3V0c2lkZU9mQW5ndWxhclpvbmUoKVwiPlByb2Nlc3Mgb3V0c2lkZSBvZiBBbmd1bGFyIHpvbmU8L2J1dHRvbj5cbiAqICAgYCxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgTmdab25lRGVtbyB7XG4gKiAgIHByb2dyZXNzOiBudW1iZXIgPSAwO1xuICogICBsYWJlbDogc3RyaW5nO1xuICpcbiAqICAgY29uc3RydWN0b3IocHJpdmF0ZSBfbmdab25lOiBOZ1pvbmUpIHt9XG4gKlxuICogICAvLyBMb29wIGluc2lkZSB0aGUgQW5ndWxhciB6b25lXG4gKiAgIC8vIHNvIHRoZSBVSSBET0VTIHJlZnJlc2ggYWZ0ZXIgZWFjaCBzZXRUaW1lb3V0IGN5Y2xlXG4gKiAgIHByb2Nlc3NXaXRoaW5Bbmd1bGFyWm9uZSgpIHtcbiAqICAgICB0aGlzLmxhYmVsID0gJ2luc2lkZSc7XG4gKiAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gKiAgICAgdGhpcy5faW5jcmVhc2VQcm9ncmVzcygoKSA9PiBjb25zb2xlLmxvZygnSW5zaWRlIERvbmUhJykpO1xuICogICB9XG4gKlxuICogICAvLyBMb29wIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZVxuICogICAvLyBzbyB0aGUgVUkgRE9FUyBOT1QgcmVmcmVzaCBhZnRlciBlYWNoIHNldFRpbWVvdXQgY3ljbGVcbiAqICAgcHJvY2Vzc091dHNpZGVPZkFuZ3VsYXJab25lKCkge1xuICogICAgIHRoaXMubGFiZWwgPSAnb3V0c2lkZSc7XG4gKiAgICAgdGhpcy5wcm9ncmVzcyA9IDA7XG4gKiAgICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAqICAgICAgIHRoaXMuX2luY3JlYXNlUHJvZ3Jlc3MoKCkgPT4ge1xuICogICAgICAgICAvLyByZWVudGVyIHRoZSBBbmd1bGFyIHpvbmUgYW5kIGRpc3BsYXkgZG9uZVxuICogICAgICAgICB0aGlzLl9uZ1pvbmUucnVuKCgpID0+IHsgY29uc29sZS5sb2coJ091dHNpZGUgRG9uZSEnKTsgfSk7XG4gKiAgICAgICB9KTtcbiAqICAgICB9KTtcbiAqICAgfVxuICpcbiAqICAgX2luY3JlYXNlUHJvZ3Jlc3MoZG9uZUNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gKiAgICAgdGhpcy5wcm9ncmVzcyArPSAxO1xuICogICAgIGNvbnNvbGUubG9nKGBDdXJyZW50IHByb2dyZXNzOiAke3RoaXMucHJvZ3Jlc3N9JWApO1xuICpcbiAqICAgICBpZiAodGhpcy5wcm9ncmVzcyA8IDEwMCkge1xuICogICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy5faW5jcmVhc2VQcm9ncmVzcyhkb25lQ2FsbGJhY2spLCAxMCk7XG4gKiAgICAgfSBlbHNlIHtcbiAqICAgICAgIGRvbmVDYWxsYmFjaygpO1xuICogICAgIH1cbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBOZ1pvbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdab25lKF9hKSB7XG4gICAgICAgIHZhciBfYiA9IF9hLmVuYWJsZUxvbmdTdGFja1RyYWNlLCBlbmFibGVMb25nU3RhY2tUcmFjZSA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xuICAgICAgICB0aGlzLmhhc1BlbmRpbmdNaWNyb3Rhc2tzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ01hY3JvdGFza3MgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlcmUgYXJlIG5vIG91dHN0YW5kaW5nIG1pY3JvdGFza3Mgb3IgbWFjcm90YXNrcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaXNTdGFibGUgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogTm90aWZpZXMgd2hlbiBjb2RlIGVudGVycyBBbmd1bGFyIFpvbmUuIFRoaXMgZ2V0cyBmaXJlZCBmaXJzdCBvbiBWTSBUdXJuLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblVuc3RhYmxlID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RpZmllcyB3aGVuIHRoZXJlIGlzIG5vIG1vcmUgbWljcm90YXNrcyBlbnF1ZXVlZCBpbiB0aGUgY3VycmVudCBWTSBUdXJuLlxuICAgICAgICAgKiBUaGlzIGlzIGEgaGludCBmb3IgQW5ndWxhciB0byBkbyBjaGFuZ2UgZGV0ZWN0aW9uLCB3aGljaCBtYXkgZW5xdWV1ZSBtb3JlIG1pY3JvdGFza3MuXG4gICAgICAgICAqIEZvciB0aGlzIHJlYXNvbiB0aGlzIGV2ZW50IGNhbiBmaXJlIG11bHRpcGxlIHRpbWVzIHBlciBWTSBUdXJuLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbk1pY3JvdGFza0VtcHR5ID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RpZmllcyB3aGVuIHRoZSBsYXN0IGBvbk1pY3JvdGFza0VtcHR5YCBoYXMgcnVuIGFuZCB0aGVyZSBhcmUgbm8gbW9yZSBtaWNyb3Rhc2tzLCB3aGljaFxuICAgICAgICAgKiBpbXBsaWVzIHdlIGFyZSBhYm91dCB0byByZWxpbnF1aXNoIFZNIHR1cm4uXG4gICAgICAgICAqIFRoaXMgZXZlbnQgZ2V0cyBjYWxsZWQganVzdCBvbmNlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vblN0YWJsZSA9IG5ldyBFdmVudEVtaXR0ZXIoZmFsc2UpO1xuICAgICAgICAvKipcbiAgICAgICAgICogTm90aWZpZXMgdGhhdCBhbiBlcnJvciBoYXMgYmVlbiBkZWxpdmVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBab25lID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbiB0aGlzIGNvbmZpZ3VyYXRpb24gQW5ndWxhciByZXF1aXJlcyBab25lLmpzXCIpO1xuICAgICAgICB9XG4gICAgICAgIFpvbmUuYXNzZXJ0Wm9uZVBhdGNoZWQoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VsZiA9IC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzKSk7XG4gICAgICAgIHNlbGYuX25lc3RpbmcgPSAwO1xuICAgICAgICBzZWxmLl9vdXRlciA9IHNlbGYuX2lubmVyID0gWm9uZS5jdXJyZW50O1xuICAgICAgICBpZiAoKC8qKiBAdHlwZSB7P30gKi8gKFpvbmUpKVsnd3RmWm9uZVNwZWMnXSkge1xuICAgICAgICAgICAgc2VsZi5faW5uZXIgPSBzZWxmLl9pbm5lci5mb3JrKCgvKiogQHR5cGUgez99ICovIChab25lKSlbJ3d0ZlpvbmVTcGVjJ10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmFibGVMb25nU3RhY2tUcmFjZSAmJiAoLyoqIEB0eXBlIHs/fSAqLyAoWm9uZSkpWydsb25nU3RhY2tUcmFjZVpvbmVTcGVjJ10pIHtcbiAgICAgICAgICAgIHNlbGYuX2lubmVyID0gc2VsZi5faW5uZXIuZm9yaygoLyoqIEB0eXBlIHs/fSAqLyAoWm9uZSkpWydsb25nU3RhY2tUcmFjZVpvbmVTcGVjJ10pO1xuICAgICAgICB9XG4gICAgICAgIGZvcmtJbm5lclpvbmVXaXRoQW5ndWxhckJlaGF2aW9yKHNlbGYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nWm9uZS5pc0luQW5ndWxhclpvbmUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFpvbmUuY3VycmVudC5nZXQoJ2lzQW5ndWxhclpvbmUnKSA9PT0gdHJ1ZTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nWm9uZS5hc3NlcnRJbkFuZ3VsYXJab25lID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghTmdab25lLmlzSW5Bbmd1bGFyWm9uZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRvIGJlIGluIEFuZ3VsYXIgWm9uZSwgYnV0IGl0IGlzIG5vdCEnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ1pvbmUuYXNzZXJ0Tm90SW5Bbmd1bGFyWm9uZSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoTmdab25lLmlzSW5Bbmd1bGFyWm9uZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRvIG5vdCBiZSBpbiBBbmd1bGFyIFpvbmUsIGJ1dCBpdCBpcyEnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZSBhbmQgcmV0dXJucyB2YWx1ZSByZXR1cm5lZCBieVxuICAgICAqIHRoZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFJ1bm5pbmcgZnVuY3Rpb25zIHZpYSBgcnVuYCBhbGxvd3MgeW91IHRvIHJlZW50ZXIgQW5ndWxhciB6b25lIGZyb20gYSB0YXNrIHRoYXQgd2FzIGV4ZWN1dGVkXG4gICAgICogb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lICh0eXBpY2FsbHkgc3RhcnRlZCB2aWEge0BsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0pLlxuICAgICAqXG4gICAgICogQW55IGZ1dHVyZSB0YXNrcyBvciBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udGludWUgZXhlY3V0aW5nIGZyb21cbiAgICAgKiB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZS5cbiAgICAgKlxuICAgICAqIElmIGEgc3luY2hyb25vdXMgZXJyb3IgaGFwcGVucyBpdCB3aWxsIGJlIHJldGhyb3duIGFuZCBub3QgcmVwb3J0ZWQgdmlhIGBvbkVycm9yYC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbiBzeW5jaHJvbm91c2x5IHdpdGhpbiB0aGUgQW5ndWxhciB6b25lIGFuZCByZXR1cm5zIHZhbHVlIHJldHVybmVkIGJ5XG4gICAgICogdGhlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogUnVubmluZyBmdW5jdGlvbnMgdmlhIGBydW5gIGFsbG93cyB5b3UgdG8gcmVlbnRlciBBbmd1bGFyIHpvbmUgZnJvbSBhIHRhc2sgdGhhdCB3YXMgZXhlY3V0ZWRcbiAgICAgKiBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUgKHR5cGljYWxseSBzdGFydGVkIHZpYSB7XFxAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9KS5cbiAgICAgKlxuICAgICAqIEFueSBmdXR1cmUgdGFza3Mgb3IgbWljcm90YXNrcyBzY2hlZHVsZWQgZnJvbSB3aXRoaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnRpbnVlIGV4ZWN1dGluZyBmcm9tXG4gICAgICogd2l0aGluIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAgICpcbiAgICAgKiBJZiBhIHN5bmNocm9ub3VzIGVycm9yIGhhcHBlbnMgaXQgd2lsbCBiZSByZXRocm93biBhbmQgbm90IHJlcG9ydGVkIHZpYSBgb25FcnJvcmAuXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHBhcmFtIHs/PX0gYXBwbHlUaGlzXG4gICAgICogQHBhcmFtIHs/PX0gYXBwbHlBcmdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ1pvbmUucHJvdG90eXBlLnJ1biA9IC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uIHN5bmNocm9ub3VzbHkgd2l0aGluIHRoZSBBbmd1bGFyIHpvbmUgYW5kIHJldHVybnMgdmFsdWUgcmV0dXJuZWQgYnlcbiAgICAgKiB0aGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEgYHJ1bmAgYWxsb3dzIHlvdSB0byByZWVudGVyIEFuZ3VsYXIgem9uZSBmcm9tIGEgdGFzayB0aGF0IHdhcyBleGVjdXRlZFxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZSAodHlwaWNhbGx5IHN0YXJ0ZWQgdmlhIHtcXEBsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0pLlxuICAgICAqXG4gICAgICogQW55IGZ1dHVyZSB0YXNrcyBvciBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udGludWUgZXhlY3V0aW5nIGZyb21cbiAgICAgKiB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZS5cbiAgICAgKlxuICAgICAqIElmIGEgc3luY2hyb25vdXMgZXJyb3IgaGFwcGVucyBpdCB3aWxsIGJlIHJldGhyb3duIGFuZCBub3QgcmVwb3J0ZWQgdmlhIGBvbkVycm9yYC5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcGFyYW0gez89fSBhcHBseVRoaXNcbiAgICAgKiBAcGFyYW0gez89fSBhcHBseUFyZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgodGhpcykpKS5faW5uZXIucnVuKGZuLCBhcHBseVRoaXMsIGFwcGx5QXJncykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZSBhcyBhIHRhc2sgYW5kIHJldHVybnMgdmFsdWVcbiAgICAgKiByZXR1cm5lZCBieSB0aGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEgYHJ1bmAgYWxsb3dzIHlvdSB0byByZWVudGVyIEFuZ3VsYXIgem9uZSBmcm9tIGEgdGFzayB0aGF0IHdhcyBleGVjdXRlZFxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZSAodHlwaWNhbGx5IHN0YXJ0ZWQgdmlhIHtAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9KS5cbiAgICAgKlxuICAgICAqIEFueSBmdXR1cmUgdGFza3Mgb3IgbWljcm90YXNrcyBzY2hlZHVsZWQgZnJvbSB3aXRoaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnRpbnVlIGV4ZWN1dGluZyBmcm9tXG4gICAgICogd2l0aGluIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAgICpcbiAgICAgKiBJZiBhIHN5bmNocm9ub3VzIGVycm9yIGhhcHBlbnMgaXQgd2lsbCBiZSByZXRocm93biBhbmQgbm90IHJlcG9ydGVkIHZpYSBgb25FcnJvcmAuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZSBhcyBhIHRhc2sgYW5kIHJldHVybnMgdmFsdWVcbiAgICAgKiByZXR1cm5lZCBieSB0aGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEgYHJ1bmAgYWxsb3dzIHlvdSB0byByZWVudGVyIEFuZ3VsYXIgem9uZSBmcm9tIGEgdGFzayB0aGF0IHdhcyBleGVjdXRlZFxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZSAodHlwaWNhbGx5IHN0YXJ0ZWQgdmlhIHtcXEBsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0pLlxuICAgICAqXG4gICAgICogQW55IGZ1dHVyZSB0YXNrcyBvciBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udGludWUgZXhlY3V0aW5nIGZyb21cbiAgICAgKiB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZS5cbiAgICAgKlxuICAgICAqIElmIGEgc3luY2hyb25vdXMgZXJyb3IgaGFwcGVucyBpdCB3aWxsIGJlIHJldGhyb3duIGFuZCBub3QgcmVwb3J0ZWQgdmlhIGBvbkVycm9yYC5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcGFyYW0gez89fSBhcHBseVRoaXNcbiAgICAgKiBAcGFyYW0gez89fSBhcHBseUFyZ3NcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ1pvbmUucHJvdG90eXBlLnJ1blRhc2sgPSAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbiBzeW5jaHJvbm91c2x5IHdpdGhpbiB0aGUgQW5ndWxhciB6b25lIGFzIGEgdGFzayBhbmQgcmV0dXJucyB2YWx1ZVxuICAgICAqIHJldHVybmVkIGJ5IHRoZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFJ1bm5pbmcgZnVuY3Rpb25zIHZpYSBgcnVuYCBhbGxvd3MgeW91IHRvIHJlZW50ZXIgQW5ndWxhciB6b25lIGZyb20gYSB0YXNrIHRoYXQgd2FzIGV4ZWN1dGVkXG4gICAgICogb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lICh0eXBpY2FsbHkgc3RhcnRlZCB2aWEge1xcQGxpbmsgI3J1bk91dHNpZGVBbmd1bGFyfSkuXG4gICAgICpcbiAgICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxuICAgICAqIHdpdGhpbiB0aGUgQW5ndWxhciB6b25lLlxuICAgICAqXG4gICAgICogSWYgYSBzeW5jaHJvbm91cyBlcnJvciBoYXBwZW5zIGl0IHdpbGwgYmUgcmV0aHJvd24gYW5kIG5vdCByZXBvcnRlZCB2aWEgYG9uRXJyb3JgLlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEBwYXJhbSB7Pz19IGFwcGx5VGhpc1xuICAgICAqIEBwYXJhbSB7Pz19IGFwcGx5QXJnc1xuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MsIG5hbWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gem9uZSA9ICgvKiogQHR5cGUgez99ICovICgodGhpcykpKS5faW5uZXI7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRhc2sgPSB6b25lLnNjaGVkdWxlRXZlbnRUYXNrKCdOZ1pvbmVFdmVudDogJyArIG5hbWUsIGZuLCBFTVBUWV9QQVlMT0FELCBub29wLCBub29wKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICh6b25lLnJ1blRhc2sodGFzaywgYXBwbHlUaGlzLCBhcHBseUFyZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHpvbmUuY2FuY2VsVGFzayh0YXNrKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2FtZSBhcyBgcnVuYCwgZXhjZXB0IHRoYXQgc3luY2hyb25vdXMgZXJyb3JzIGFyZSBjYXVnaHQgYW5kIGZvcndhcmRlZCB2aWEgYG9uRXJyb3JgIGFuZCBub3RcbiAgICAgKiByZXRocm93bi5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIGBydW5gLCBleGNlcHQgdGhhdCBzeW5jaHJvbm91cyBlcnJvcnMgYXJlIGNhdWdodCBhbmQgZm9yd2FyZGVkIHZpYSBgb25FcnJvcmAgYW5kIG5vdFxuICAgICAqIHJldGhyb3duLlxuICAgICAqIEB0ZW1wbGF0ZSBUXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEBwYXJhbSB7Pz19IGFwcGx5VGhpc1xuICAgICAqIEBwYXJhbSB7Pz19IGFwcGx5QXJnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTmdab25lLnByb3RvdHlwZS5ydW5HdWFyZGVkID0gLyoqXG4gICAgICogU2FtZSBhcyBgcnVuYCwgZXhjZXB0IHRoYXQgc3luY2hyb25vdXMgZXJyb3JzIGFyZSBjYXVnaHQgYW5kIGZvcndhcmRlZCB2aWEgYG9uRXJyb3JgIGFuZCBub3RcbiAgICAgKiByZXRocm93bi5cbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcGFyYW0gez89fSBhcHBseVRoaXNcbiAgICAgKiBAcGFyYW0gez89fSBhcHBseUFyZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgodGhpcykpKS5faW5uZXIucnVuR3VhcmRlZChmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uIHN5bmNocm9ub3VzbHkgaW4gQW5ndWxhcidzIHBhcmVudCB6b25lIGFuZCByZXR1cm5zIHZhbHVlIHJldHVybmVkIGJ5XG4gICAgICogdGhlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogUnVubmluZyBmdW5jdGlvbnMgdmlhIHtAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9IGFsbG93cyB5b3UgdG8gZXNjYXBlIEFuZ3VsYXIncyB6b25lIGFuZCBkb1xuICAgICAqIHdvcmsgdGhhdFxuICAgICAqIGRvZXNuJ3QgdHJpZ2dlciBBbmd1bGFyIGNoYW5nZS1kZXRlY3Rpb24gb3IgaXMgc3ViamVjdCB0byBBbmd1bGFyJ3MgZXJyb3IgaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZS5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgI3J1bn0gdG8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkbyB3b3JrIHRoYXQgdXBkYXRlcyB0aGUgYXBwbGljYXRpb24gbW9kZWwuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSBpbiBBbmd1bGFyJ3MgcGFyZW50IHpvbmUgYW5kIHJldHVybnMgdmFsdWUgcmV0dXJuZWQgYnlcbiAgICAgKiB0aGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEge1xcQGxpbmsgI3J1bk91dHNpZGVBbmd1bGFyfSBhbGxvd3MgeW91IHRvIGVzY2FwZSBBbmd1bGFyJ3Mgem9uZSBhbmQgZG9cbiAgICAgKiB3b3JrIHRoYXRcbiAgICAgKiBkb2Vzbid0IHRyaWdnZXIgQW5ndWxhciBjaGFuZ2UtZGV0ZWN0aW9uIG9yIGlzIHN1YmplY3QgdG8gQW5ndWxhcidzIGVycm9yIGhhbmRsaW5nLlxuICAgICAqXG4gICAgICogQW55IGZ1dHVyZSB0YXNrcyBvciBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udGludWUgZXhlY3V0aW5nIGZyb21cbiAgICAgKiBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAgICpcbiAgICAgKiBVc2Uge1xcQGxpbmsgI3J1bn0gdG8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkbyB3b3JrIHRoYXQgdXBkYXRlcyB0aGUgYXBwbGljYXRpb24gbW9kZWwuXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ1pvbmUucHJvdG90eXBlLnJ1bk91dHNpZGVBbmd1bGFyID0gLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSBpbiBBbmd1bGFyJ3MgcGFyZW50IHpvbmUgYW5kIHJldHVybnMgdmFsdWUgcmV0dXJuZWQgYnlcbiAgICAgKiB0aGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEge1xcQGxpbmsgI3J1bk91dHNpZGVBbmd1bGFyfSBhbGxvd3MgeW91IHRvIGVzY2FwZSBBbmd1bGFyJ3Mgem9uZSBhbmQgZG9cbiAgICAgKiB3b3JrIHRoYXRcbiAgICAgKiBkb2Vzbid0IHRyaWdnZXIgQW5ndWxhciBjaGFuZ2UtZGV0ZWN0aW9uIG9yIGlzIHN1YmplY3QgdG8gQW5ndWxhcidzIGVycm9yIGhhbmRsaW5nLlxuICAgICAqXG4gICAgICogQW55IGZ1dHVyZSB0YXNrcyBvciBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udGludWUgZXhlY3V0aW5nIGZyb21cbiAgICAgKiBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAgICpcbiAgICAgKiBVc2Uge1xcQGxpbmsgI3J1bn0gdG8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkbyB3b3JrIHRoYXQgdXBkYXRlcyB0aGUgYXBwbGljYXRpb24gbW9kZWwuXG4gICAgICogQHRlbXBsYXRlIFRcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgodGhpcykpKS5fb3V0ZXIucnVuKGZuKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTmdab25lO1xufSgpKTtcbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHsgfVxudmFyIEVNUFRZX1BBWUxPQUQgPSB7fTtcbi8qKlxuICogQHBhcmFtIHs/fSB6b25lXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja1N0YWJsZSh6b25lKSB7XG4gICAgaWYgKHpvbmUuX25lc3RpbmcgPT0gMCAmJiAhem9uZS5oYXNQZW5kaW5nTWljcm90YXNrcyAmJiAhem9uZS5pc1N0YWJsZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgem9uZS5fbmVzdGluZysrO1xuICAgICAgICAgICAgem9uZS5vbk1pY3JvdGFza0VtcHR5LmVtaXQobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB6b25lLl9uZXN0aW5nLS07XG4gICAgICAgICAgICBpZiAoIXpvbmUuaGFzUGVuZGluZ01pY3JvdGFza3MpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHpvbmUub25TdGFibGUuZW1pdChudWxsKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB6b25lLmlzU3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gem9uZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZm9ya0lubmVyWm9uZVdpdGhBbmd1bGFyQmVoYXZpb3Ioem9uZSkge1xuICAgIHpvbmUuX2lubmVyID0gem9uZS5faW5uZXIuZm9yayh7XG4gICAgICAgIG5hbWU6ICdhbmd1bGFyJyxcbiAgICAgICAgcHJvcGVydGllczogLyoqIEB0eXBlIHs/fSAqLyAoeyAnaXNBbmd1bGFyWm9uZSc6IHRydWUgfSksXG4gICAgICAgIG9uSW52b2tlVGFzazogZnVuY3Rpb24gKGRlbGVnYXRlLCBjdXJyZW50LCB0YXJnZXQsIHRhc2ssIGFwcGx5VGhpcywgYXBwbHlBcmdzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9uRW50ZXIoem9uZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmludm9rZVRhc2sodGFyZ2V0LCB0YXNrLCBhcHBseVRoaXMsIGFwcGx5QXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBvbkxlYXZlKHpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkludm9rZTogZnVuY3Rpb24gKGRlbGVnYXRlLCBjdXJyZW50LCB0YXJnZXQsIGNhbGxiYWNrLCBhcHBseVRoaXMsIGFwcGx5QXJncywgc291cmNlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9uRW50ZXIoem9uZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmludm9rZSh0YXJnZXQsIGNhbGxiYWNrLCBhcHBseVRoaXMsIGFwcGx5QXJncywgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIG9uTGVhdmUoem9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uSGFzVGFzazogZnVuY3Rpb24gKGRlbGVnYXRlLCBjdXJyZW50LCB0YXJnZXQsIGhhc1Rhc2tTdGF0ZSkge1xuICAgICAgICAgICAgZGVsZWdhdGUuaGFzVGFzayh0YXJnZXQsIGhhc1Rhc2tTdGF0ZSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiBoYXNUYXNrIGV2ZW50cyB3aGljaCBvcmlnaW5hdGUgZnJvbSBvdXIgem9uZVxuICAgICAgICAgICAgICAgIC8vIChBIGNoaWxkIGhhc1Rhc2sgZXZlbnQgaXMgbm90IGludGVyZXN0aW5nIHRvIHVzKVxuICAgICAgICAgICAgICAgIGlmIChoYXNUYXNrU3RhdGUuY2hhbmdlID09ICdtaWNyb1Rhc2snKSB7XG4gICAgICAgICAgICAgICAgICAgIHpvbmUuaGFzUGVuZGluZ01pY3JvdGFza3MgPSBoYXNUYXNrU3RhdGUubWljcm9UYXNrO1xuICAgICAgICAgICAgICAgICAgICBjaGVja1N0YWJsZSh6b25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaGFzVGFza1N0YXRlLmNoYW5nZSA9PSAnbWFjcm9UYXNrJykge1xuICAgICAgICAgICAgICAgICAgICB6b25lLmhhc1BlbmRpbmdNYWNyb3Rhc2tzID0gaGFzVGFza1N0YXRlLm1hY3JvVGFzaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uSGFuZGxlRXJyb3I6IGZ1bmN0aW9uIChkZWxlZ2F0ZSwgY3VycmVudCwgdGFyZ2V0LCBlcnJvcikge1xuICAgICAgICAgICAgZGVsZWdhdGUuaGFuZGxlRXJyb3IodGFyZ2V0LCBlcnJvcik7XG4gICAgICAgICAgICB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHpvbmUub25FcnJvci5lbWl0KGVycm9yKTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB6b25lXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBvbkVudGVyKHpvbmUpIHtcbiAgICB6b25lLl9uZXN0aW5nKys7XG4gICAgaWYgKHpvbmUuaXNTdGFibGUpIHtcbiAgICAgICAgem9uZS5pc1N0YWJsZSA9IGZhbHNlO1xuICAgICAgICB6b25lLm9uVW5zdGFibGUuZW1pdChudWxsKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gem9uZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gb25MZWF2ZSh6b25lKSB7XG4gICAgem9uZS5fbmVzdGluZy0tO1xuICAgIGNoZWNrU3RhYmxlKHpvbmUpO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhIG5vb3AgaW1wbGVtZW50YXRpb24gb2YgYE5nWm9uZWAgd2hpY2ggZG9lcyBub3RoaW5nLiBUaGlzIHpvbmUgcmVxdWlyZXMgZXhwbGljaXQgY2FsbHNcbiAqIHRvIGZyYW1ld29yayB0byBwZXJmb3JtIHJlbmRlcmluZy5cbiAqL1xudmFyIE5vb3BOZ1pvbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9vcE5nWm9uZSgpIHtcbiAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWljcm90YXNrcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhhc1BlbmRpbmdNYWNyb3Rhc2tzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdGFibGUgPSB0cnVlO1xuICAgICAgICB0aGlzLm9uVW5zdGFibGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25NaWNyb3Rhc2tFbXB0eSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vblN0YWJsZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOb29wTmdab25lLnByb3RvdHlwZS5ydW4gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTm9vcE5nWm9uZS5wcm90b3R5cGUucnVuR3VhcmRlZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOb29wTmdab25lLnByb3RvdHlwZS5ydW5PdXRzaWRlQW5ndWxhciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5vb3BOZ1pvbmUucHJvdG90eXBlLnJ1blRhc2sgPSAvKipcbiAgICAgKiBAdGVtcGxhdGUgVFxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcbiAgICByZXR1cm4gTm9vcE5nWm9uZTtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogVGhlIFRlc3RhYmlsaXR5IHNlcnZpY2UgcHJvdmlkZXMgdGVzdGluZyBob29rcyB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBmcm9tXG4gKiB0aGUgYnJvd3NlciBhbmQgYnkgc2VydmljZXMgc3VjaCBhcyBQcm90cmFjdG9yLiBFYWNoIGJvb3RzdHJhcHBlZCBBbmd1bGFyXG4gKiBhcHBsaWNhdGlvbiBvbiB0aGUgcGFnZSB3aWxsIGhhdmUgYW4gaW5zdGFuY2Ugb2YgVGVzdGFiaWxpdHkuXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIFRlc3RhYmlsaXR5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRlc3RhYmlsaXR5KF9uZ1pvbmUpIHtcbiAgICAgICAgdGhpcy5fbmdab25lID0gX25nWm9uZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9wZW5kaW5nQ291bnQgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2lzWm9uZVN0YWJsZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGFueSB3b3JrIHdhcyBkb25lIHNpbmNlIHRoZSBsYXN0ICd3aGVuU3RhYmxlJyBjYWxsYmFjay4gVGhpcyBpc1xuICAgICAgICAgKiB1c2VmdWwgdG8gZGV0ZWN0IGlmIHRoaXMgY291bGQgaGF2ZSBwb3RlbnRpYWxseSBkZXN0YWJpbGl6ZWQgYW5vdGhlclxuICAgICAgICAgKiBjb21wb25lbnQgd2hpbGUgaXQgaXMgc3RhYmlsaXppbmcuXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9kaWRXb3JrID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMuX3dhdGNoQW5ndWxhckV2ZW50cygpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlc3RhYmlsaXR5LnByb3RvdHlwZS5fd2F0Y2hBbmd1bGFyRXZlbnRzID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fbmdab25lLm9uVW5zdGFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fZGlkV29yayA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2lzWm9uZVN0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9uZ1pvbmUub25TdGFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE5nWm9uZS5hc3NlcnROb3RJbkFuZ3VsYXJab25lKCk7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlTWljcm9UYXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9pc1pvbmVTdGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3J1bkNhbGxiYWNrc0lmUmVhZHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0XG4gICAgICovXG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUZXN0YWJpbGl0eS5wcm90b3R5cGUuaW5jcmVhc2VQZW5kaW5nUmVxdWVzdENvdW50ID0gLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdDb3VudCArPSAxO1xuICAgICAgICB0aGlzLl9kaWRXb3JrID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdDb3VudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVxdWVzdFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIERlY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVxdWVzdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLmRlY3JlYXNlUGVuZGluZ1JlcXVlc3RDb3VudCA9IC8qKlxuICAgICAqIERlY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVxdWVzdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9wZW5kaW5nQ291bnQgLT0gMTtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdDb3VudCA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncGVuZGluZyBhc3luYyByZXF1ZXN0cyBiZWxvdyB6ZXJvJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcnVuQ2FsbGJhY2tzSWZSZWFkeSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcGVuZGluZ0NvdW50O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV2hldGhlciBhbiBhc3NvY2lhdGVkIGFwcGxpY2F0aW9uIGlzIHN0YWJsZVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgYW4gYXNzb2NpYXRlZCBhcHBsaWNhdGlvbiBpcyBzdGFibGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlc3RhYmlsaXR5LnByb3RvdHlwZS5pc1N0YWJsZSA9IC8qKlxuICAgICAqIFdoZXRoZXIgYW4gYXNzb2NpYXRlZCBhcHBsaWNhdGlvbiBpcyBzdGFibGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzWm9uZVN0YWJsZSAmJiB0aGlzLl9wZW5kaW5nQ291bnQgPT0gMCAmJiAhdGhpcy5fbmdab25lLmhhc1BlbmRpbmdNYWNyb3Rhc2tzO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUZXN0YWJpbGl0eS5wcm90b3R5cGUuX3J1bkNhbGxiYWNrc0lmUmVhZHkgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5pc1N0YWJsZSgpKSB7XG4gICAgICAgICAgICAvLyBTY2hlZHVsZXMgdGhlIGNhbGwgYmFja3MgaW4gYSBuZXcgZnJhbWUgc28gdGhhdCBpdCBpcyBhbHdheXMgYXN5bmMuXG4gICAgICAgICAgICBzY2hlZHVsZU1pY3JvVGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKF90aGlzLl9jYWxsYmFja3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovICgoX3RoaXMuX2NhbGxiYWNrcy5wb3AoKSkpKShfdGhpcy5fZGlkV29yayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLl9kaWRXb3JrID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vdCBSZWFkeVxuICAgICAgICAgICAgdGhpcy5fZGlkV29yayA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJ1biBjYWxsYmFjayB3aGVuIHRoZSBhcHBsaWNhdGlvbiBpcyBzdGFibGVcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGFmdGVyIHRoZSBhcHBsaWNhdGlvbiBpcyBzdGFibGVcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBSdW4gY2FsbGJhY2sgd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgc3RhYmxlXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGFwcGxpY2F0aW9uIGlzIHN0YWJsZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGVzdGFiaWxpdHkucHJvdG90eXBlLndoZW5TdGFibGUgPSAvKipcbiAgICAgKiBSdW4gY2FsbGJhY2sgd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgc3RhYmxlXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYWZ0ZXIgdGhlIGFwcGxpY2F0aW9uIGlzIHN0YWJsZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5fcnVuQ2FsbGJhY2tzSWZSZWFkeSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0c1xuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVxdWVzdHNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlc3RhYmlsaXR5LnByb3RvdHlwZS5nZXRQZW5kaW5nUmVxdWVzdENvdW50ID0gLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0c1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcGVuZGluZ0NvdW50OyB9O1xuICAgIC8qKlxuICAgICAqIEZpbmQgcHJvdmlkZXJzIGJ5IG5hbWVcbiAgICAgKiBAcGFyYW0gdXNpbmcgVGhlIHJvb3QgZWxlbWVudCB0byBzZWFyY2ggZnJvbVxuICAgICAqIEBwYXJhbSBwcm92aWRlciBUaGUgbmFtZSBvZiBiaW5kaW5nIHZhcmlhYmxlXG4gICAgICogQHBhcmFtIGV4YWN0TWF0Y2ggV2hldGhlciB1c2luZyBleGFjdE1hdGNoXG4gICAgICovXG4gICAgLyoqXG4gICAgICogRmluZCBwcm92aWRlcnMgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdXNpbmcgVGhlIHJvb3QgZWxlbWVudCB0byBzZWFyY2ggZnJvbVxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXIgVGhlIG5hbWUgb2YgYmluZGluZyB2YXJpYWJsZVxuICAgICAqIEBwYXJhbSB7P30gZXhhY3RNYXRjaCBXaGV0aGVyIHVzaW5nIGV4YWN0TWF0Y2hcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlc3RhYmlsaXR5LnByb3RvdHlwZS5maW5kUHJvdmlkZXJzID0gLyoqXG4gICAgICogRmluZCBwcm92aWRlcnMgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdXNpbmcgVGhlIHJvb3QgZWxlbWVudCB0byBzZWFyY2ggZnJvbVxuICAgICAqIEBwYXJhbSB7P30gcHJvdmlkZXIgVGhlIG5hbWUgb2YgYmluZGluZyB2YXJpYWJsZVxuICAgICAqIEBwYXJhbSB7P30gZXhhY3RNYXRjaCBXaGV0aGVyIHVzaW5nIGV4YWN0TWF0Y2hcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh1c2luZywgcHJvdmlkZXIsIGV4YWN0TWF0Y2gpIHtcbiAgICAgICAgLy8gVE9ETyhqdWxpZW1yKTogaW1wbGVtZW50LlxuICAgICAgICByZXR1cm4gW107XG4gICAgfTtcbiAgICBUZXN0YWJpbGl0eS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIFRlc3RhYmlsaXR5LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBUZXN0YWJpbGl0eTtcbn0oKSk7XG4vKipcbiAqIEEgZ2xvYmFsIHJlZ2lzdHJ5IG9mIHtcXEBsaW5rIFRlc3RhYmlsaXR5fSBpbnN0YW5jZXMgZm9yIHNwZWNpZmljIGVsZW1lbnRzLlxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBUZXN0YWJpbGl0eVJlZ2lzdHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRlc3RhYmlsaXR5UmVnaXN0cnkoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYXBwbGljYXRpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICBfdGVzdGFiaWxpdHlHZXR0ZXIuYWRkVG9XaW5kb3codGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhbiBhcHBsaWNhdGlvbiB3aXRoIGEgdGVzdGFiaWxpdHkgaG9vayBzbyB0aGF0IGl0IGNhbiBiZSB0cmFja2VkXG4gICAgICogQHBhcmFtIHRva2VuIHRva2VuIG9mIGFwcGxpY2F0aW9uLCByb290IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gdGVzdGFiaWxpdHkgVGVzdGFiaWxpdHkgaG9va1xuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhbiBhcHBsaWNhdGlvbiB3aXRoIGEgdGVzdGFiaWxpdHkgaG9vayBzbyB0aGF0IGl0IGNhbiBiZSB0cmFja2VkXG4gICAgICogQHBhcmFtIHs/fSB0b2tlbiB0b2tlbiBvZiBhcHBsaWNhdGlvbiwgcm9vdCBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSB0ZXN0YWJpbGl0eSBUZXN0YWJpbGl0eSBob29rXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUZXN0YWJpbGl0eVJlZ2lzdHJ5LnByb3RvdHlwZS5yZWdpc3RlckFwcGxpY2F0aW9uID0gLyoqXG4gICAgICogUmVnaXN0ZXJzIGFuIGFwcGxpY2F0aW9uIHdpdGggYSB0ZXN0YWJpbGl0eSBob29rIHNvIHRoYXQgaXQgY2FuIGJlIHRyYWNrZWRcbiAgICAgKiBAcGFyYW0gez99IHRva2VuIHRva2VuIG9mIGFwcGxpY2F0aW9uLCByb290IGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHRlc3RhYmlsaXR5IFRlc3RhYmlsaXR5IGhvb2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0b2tlbiwgdGVzdGFiaWxpdHkpIHtcbiAgICAgICAgdGhpcy5fYXBwbGljYXRpb25zLnNldCh0b2tlbiwgdGVzdGFiaWxpdHkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlcnMgYW4gYXBwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHRva2VuIHRva2VuIG9mIGFwcGxpY2F0aW9uLCByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBhbiBhcHBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0gez99IHRva2VuIHRva2VuIG9mIGFwcGxpY2F0aW9uLCByb290IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlc3RhYmlsaXR5UmVnaXN0cnkucHJvdG90eXBlLnVucmVnaXN0ZXJBcHBsaWNhdGlvbiA9IC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGFuIGFwcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW4gdG9rZW4gb2YgYXBwbGljYXRpb24sIHJvb3QgZWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRva2VuKSB7IHRoaXMuX2FwcGxpY2F0aW9ucy5kZWxldGUodG9rZW4pOyB9O1xuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGFsbCBhcHBsaWNhdGlvbnNcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBhbGwgYXBwbGljYXRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUZXN0YWJpbGl0eVJlZ2lzdHJ5LnByb3RvdHlwZS51bnJlZ2lzdGVyQWxsQXBwbGljYXRpb25zID0gLyoqXG4gICAgICogVW5yZWdpc3RlcnMgYWxsIGFwcGxpY2F0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl9hcHBsaWNhdGlvbnMuY2xlYXIoKTsgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgYSB0ZXN0YWJpbGl0eSBob29rIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBAcGFyYW0gZWxlbSByb290IGVsZW1lbnRcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBHZXQgYSB0ZXN0YWJpbGl0eSBob29rIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBAcGFyYW0gez99IGVsZW0gcm9vdCBlbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBUZXN0YWJpbGl0eVJlZ2lzdHJ5LnByb3RvdHlwZS5nZXRUZXN0YWJpbGl0eSA9IC8qKlxuICAgICAqIEdldCBhIHRlc3RhYmlsaXR5IGhvb2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIEBwYXJhbSB7P30gZWxlbSByb290IGVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0aGlzLl9hcHBsaWNhdGlvbnMuZ2V0KGVsZW0pIHx8IG51bGw7IH07XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCByZWdpc3RlcmVkIHRlc3RhYmlsaXRpZXNcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHJlZ2lzdGVyZWQgdGVzdGFiaWxpdGllc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGVzdGFiaWxpdHlSZWdpc3RyeS5wcm90b3R5cGUuZ2V0QWxsVGVzdGFiaWxpdGllcyA9IC8qKlxuICAgICAqIEdldCBhbGwgcmVnaXN0ZXJlZCB0ZXN0YWJpbGl0aWVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2FwcGxpY2F0aW9ucy52YWx1ZXMoKSk7IH07XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCByZWdpc3RlcmVkIGFwcGxpY2F0aW9ucyhyb290IGVsZW1lbnRzKVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgcmVnaXN0ZXJlZCBhcHBsaWNhdGlvbnMocm9vdCBlbGVtZW50cylcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlc3RhYmlsaXR5UmVnaXN0cnkucHJvdG90eXBlLmdldEFsbFJvb3RFbGVtZW50cyA9IC8qKlxuICAgICAqIEdldCBhbGwgcmVnaXN0ZXJlZCBhcHBsaWNhdGlvbnMocm9vdCBlbGVtZW50cylcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fYXBwbGljYXRpb25zLmtleXMoKSk7IH07XG4gICAgLyoqXG4gICAgICogRmluZCB0ZXN0YWJpbGl0eSBvZiBhIG5vZGUgaW4gdGhlIFRyZWVcbiAgICAgKiBAcGFyYW0gZWxlbSBub2RlXG4gICAgICogQHBhcmFtIGZpbmRJbkFuY2VzdG9ycyB3aGV0aGVyIGZpbmRpbmcgdGVzdGFiaWxpdHkgaW4gYW5jZXN0b3JzIGlmIHRlc3RhYmlsaXR5IHdhcyBub3QgZm91bmQgaW5cbiAgICAgKiBjdXJyZW50IG5vZGVcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBGaW5kIHRlc3RhYmlsaXR5IG9mIGEgbm9kZSBpbiB0aGUgVHJlZVxuICAgICAqIEBwYXJhbSB7P30gZWxlbSBub2RlXG4gICAgICogQHBhcmFtIHs/PX0gZmluZEluQW5jZXN0b3JzIHdoZXRoZXIgZmluZGluZyB0ZXN0YWJpbGl0eSBpbiBhbmNlc3RvcnMgaWYgdGVzdGFiaWxpdHkgd2FzIG5vdCBmb3VuZCBpblxuICAgICAqIGN1cnJlbnQgbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVGVzdGFiaWxpdHlSZWdpc3RyeS5wcm90b3R5cGUuZmluZFRlc3RhYmlsaXR5SW5UcmVlID0gLyoqXG4gICAgICogRmluZCB0ZXN0YWJpbGl0eSBvZiBhIG5vZGUgaW4gdGhlIFRyZWVcbiAgICAgKiBAcGFyYW0gez99IGVsZW0gbm9kZVxuICAgICAqIEBwYXJhbSB7Pz19IGZpbmRJbkFuY2VzdG9ycyB3aGV0aGVyIGZpbmRpbmcgdGVzdGFiaWxpdHkgaW4gYW5jZXN0b3JzIGlmIHRlc3RhYmlsaXR5IHdhcyBub3QgZm91bmQgaW5cbiAgICAgKiBjdXJyZW50IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbGVtLCBmaW5kSW5BbmNlc3RvcnMpIHtcbiAgICAgICAgaWYgKGZpbmRJbkFuY2VzdG9ycyA9PT0gdm9pZCAwKSB7IGZpbmRJbkFuY2VzdG9ycyA9IHRydWU7IH1cbiAgICAgICAgcmV0dXJuIF90ZXN0YWJpbGl0eUdldHRlci5maW5kVGVzdGFiaWxpdHlJblRyZWUodGhpcywgZWxlbSwgZmluZEluQW5jZXN0b3JzKTtcbiAgICB9O1xuICAgIFRlc3RhYmlsaXR5UmVnaXN0cnkuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBUZXN0YWJpbGl0eVJlZ2lzdHJ5LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIFRlc3RhYmlsaXR5UmVnaXN0cnk7XG59KCkpO1xuLyoqXG4gKiBBZGFwdGVyIGludGVyZmFjZSBmb3IgcmV0cmlldmluZyB0aGUgYFRlc3RhYmlsaXR5YCBzZXJ2aWNlIGFzc29jaWF0ZWQgZm9yIGFcbiAqIHBhcnRpY3VsYXIgY29udGV4dC5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgVGVzdGFiaWxpdHkgYXBpcyBhcmUgcHJpbWFyaWx5IGludGVuZGVkIHRvIGJlIHVzZWQgYnkgZTJlIHRlc3QgdG9vbCB2ZW5kb3JzIGxpa2VcbiAqIHRoZSBQcm90cmFjdG9yIHRlYW0uXG4gKiBAcmVjb3JkXG4gKi9cblxudmFyIF9Ob29wR2V0VGVzdGFiaWxpdHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX05vb3BHZXRUZXN0YWJpbGl0eSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZWdpc3RyeVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgX05vb3BHZXRUZXN0YWJpbGl0eS5wcm90b3R5cGUuYWRkVG9XaW5kb3cgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlZ2lzdHJ5XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVnaXN0cnkpIHsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlZ2lzdHJ5XG4gICAgICogQHBhcmFtIHs/fSBlbGVtXG4gICAgICogQHBhcmFtIHs/fSBmaW5kSW5BbmNlc3RvcnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIF9Ob29wR2V0VGVzdGFiaWxpdHkucHJvdG90eXBlLmZpbmRUZXN0YWJpbGl0eUluVHJlZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVnaXN0cnlcbiAgICAgKiBAcGFyYW0gez99IGVsZW1cbiAgICAgKiBAcGFyYW0gez99IGZpbmRJbkFuY2VzdG9yc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlZ2lzdHJ5LCBlbGVtLCBmaW5kSW5BbmNlc3RvcnMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gX05vb3BHZXRUZXN0YWJpbGl0eTtcbn0oKSk7XG4vKipcbiAqIFNldCB0aGUge1xcQGxpbmsgR2V0VGVzdGFiaWxpdHl9IGltcGxlbWVudGF0aW9uIHVzZWQgYnkgdGhlIEFuZ3VsYXIgdGVzdGluZyBmcmFtZXdvcmsuXG4gKiBcXEBleHBlcmltZW50YWxcbiAqIEBwYXJhbSB7P30gZ2V0dGVyXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzZXRUZXN0YWJpbGl0eUdldHRlcihnZXR0ZXIpIHtcbiAgICBfdGVzdGFiaWxpdHlHZXR0ZXIgPSBnZXR0ZXI7XG59XG52YXIgX3Rlc3RhYmlsaXR5R2V0dGVyID0gbmV3IF9Ob29wR2V0VGVzdGFiaWxpdHkoKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIF9kZXZNb2RlID0gdHJ1ZTtcbnZhciBfcnVuTW9kZUxvY2tlZCA9IGZhbHNlO1xudmFyIF9wbGF0Zm9ybTtcbnZhciBBTExPV19NVUxUSVBMRV9QTEFURk9STVMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FsbG93TXVsdGlwbGVUb2tlbicpO1xuLyoqXG4gKiBEaXNhYmxlIEFuZ3VsYXIncyBkZXZlbG9wbWVudCBtb2RlLCB3aGljaCB0dXJucyBvZmYgYXNzZXJ0aW9ucyBhbmQgb3RoZXJcbiAqIGNoZWNrcyB3aXRoaW4gdGhlIGZyYW1ld29yay5cbiAqXG4gKiBPbmUgaW1wb3J0YW50IGFzc2VydGlvbiB0aGlzIGRpc2FibGVzIHZlcmlmaWVzIHRoYXQgYSBjaGFuZ2UgZGV0ZWN0aW9uIHBhc3NcbiAqIGRvZXMgbm90IHJlc3VsdCBpbiBhZGRpdGlvbmFsIGNoYW5nZXMgdG8gYW55IGJpbmRpbmdzIChhbHNvIGtub3duIGFzXG4gKiB1bmlkaXJlY3Rpb25hbCBkYXRhIGZsb3cpLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZW5hYmxlUHJvZE1vZGUoKSB7XG4gICAgaWYgKF9ydW5Nb2RlTG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuYWJsZSBwcm9kIG1vZGUgYWZ0ZXIgcGxhdGZvcm0gc2V0dXAuJyk7XG4gICAgfVxuICAgIF9kZXZNb2RlID0gZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBBbmd1bGFyIGlzIGluIGRldmVsb3BtZW50IG1vZGUuIEFmdGVyIGNhbGxlZCBvbmNlLFxuICogdGhlIHZhbHVlIGlzIGxvY2tlZCBhbmQgd29uJ3QgY2hhbmdlIGFueSBtb3JlLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdHJ1ZSwgdW5sZXNzIGEgdXNlciBjYWxscyBgZW5hYmxlUHJvZE1vZGVgIGJlZm9yZSBjYWxsaW5nIHRoaXMuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFQSXMgcmVsYXRlZCB0byBhcHBsaWNhdGlvbiBib290c3RyYXAgYXJlIGN1cnJlbnRseSB1bmRlciByZXZpZXcuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpc0Rldk1vZGUoKSB7XG4gICAgX3J1bk1vZGVMb2NrZWQgPSB0cnVlO1xuICAgIHJldHVybiBfZGV2TW9kZTtcbn1cbi8qKlxuICogQSB0b2tlbiBmb3IgdGhpcmQtcGFydHkgY29tcG9uZW50cyB0aGF0IGNhbiByZWdpc3RlciB0aGVtc2VsdmVzIHdpdGggTmdQcm9iZS5cbiAqXG4gKiBcXEBleHBlcmltZW50YWxcbiAqL1xudmFyIE5nUHJvYmVUb2tlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOZ1Byb2JlVG9rZW4obmFtZSwgdG9rZW4pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIH1cbiAgICByZXR1cm4gTmdQcm9iZVRva2VuO1xufSgpKTtcbi8qKlxuICogQ3JlYXRlcyBhIHBsYXRmb3JtLlxuICogUGxhdGZvcm1zIGhhdmUgdG8gYmUgZWFnZXJseSBjcmVhdGVkIHZpYSB0aGlzIGZ1bmN0aW9uLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBUElzIHJlbGF0ZWQgdG8gYXBwbGljYXRpb24gYm9vdHN0cmFwIGFyZSBjdXJyZW50bHkgdW5kZXIgcmV2aWV3LlxuICogQHBhcmFtIHs/fSBpbmplY3RvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGxhdGZvcm0oaW5qZWN0b3IpIHtcbiAgICBpZiAoX3BsYXRmb3JtICYmICFfcGxhdGZvcm0uZGVzdHJveWVkICYmXG4gICAgICAgICFfcGxhdGZvcm0uaW5qZWN0b3IuZ2V0KEFMTE9XX01VTFRJUExFX1BMQVRGT1JNUywgZmFsc2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgY2FuIGJlIG9ubHkgb25lIHBsYXRmb3JtLiBEZXN0cm95IHRoZSBwcmV2aW91cyBvbmUgdG8gY3JlYXRlIGEgbmV3IG9uZS4nKTtcbiAgICB9XG4gICAgX3BsYXRmb3JtID0gaW5qZWN0b3IuZ2V0KFBsYXRmb3JtUmVmKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbml0cyA9IGluamVjdG9yLmdldChQTEFURk9STV9JTklUSUFMSVpFUiwgbnVsbCk7XG4gICAgaWYgKGluaXRzKVxuICAgICAgICBpbml0cy5mb3JFYWNoKGZ1bmN0aW9uIChpbml0KSB7IHJldHVybiBpbml0KCk7IH0pO1xuICAgIHJldHVybiBfcGxhdGZvcm07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBmYWN0b3J5IGZvciBhIHBsYXRmb3JtXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFQSXMgcmVsYXRlZCB0byBhcHBsaWNhdGlvbiBib290c3RyYXAgYXJlIGN1cnJlbnRseSB1bmRlciByZXZpZXcuXG4gKiBAcGFyYW0gez99IHBhcmVudFBsYXRmb3JtRmFjdG9yeVxuICogQHBhcmFtIHs/fSBuYW1lXG4gKiBAcGFyYW0gez89fSBwcm92aWRlcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBsYXRmb3JtRmFjdG9yeShwYXJlbnRQbGF0Zm9ybUZhY3RvcnksIG5hbWUsIHByb3ZpZGVycykge1xuICAgIGlmIChwcm92aWRlcnMgPT09IHZvaWQgMCkgeyBwcm92aWRlcnMgPSBbXTsgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIG1hcmtlciA9IG5ldyBJbmplY3Rpb25Ub2tlbihcIlBsYXRmb3JtOiBcIiArIG5hbWUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXh0cmFQcm92aWRlcnMpIHtcbiAgICAgICAgaWYgKGV4dHJhUHJvdmlkZXJzID09PSB2b2lkIDApIHsgZXh0cmFQcm92aWRlcnMgPSBbXTsgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwbGF0Zm9ybSA9IGdldFBsYXRmb3JtKCk7XG4gICAgICAgIGlmICghcGxhdGZvcm0gfHwgcGxhdGZvcm0uaW5qZWN0b3IuZ2V0KEFMTE9XX01VTFRJUExFX1BMQVRGT1JNUywgZmFsc2UpKSB7XG4gICAgICAgICAgICBpZiAocGFyZW50UGxhdGZvcm1GYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgcGFyZW50UGxhdGZvcm1GYWN0b3J5KHByb3ZpZGVycy5jb25jYXQoZXh0cmFQcm92aWRlcnMpLmNvbmNhdCh7IHByb3ZpZGU6IG1hcmtlciwgdXNlVmFsdWU6IHRydWUgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlUGxhdGZvcm0oSW5qZWN0b3IuY3JlYXRlKHByb3ZpZGVycy5jb25jYXQoZXh0cmFQcm92aWRlcnMpLmNvbmNhdCh7IHByb3ZpZGU6IG1hcmtlciwgdXNlVmFsdWU6IHRydWUgfSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXNzZXJ0UGxhdGZvcm0obWFya2VyKTtcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVja3MgdGhhdCB0aGVyZSBjdXJyZW50bHkgaXMgYSBwbGF0Zm9ybSB3aGljaCBjb250YWlucyB0aGUgZ2l2ZW4gdG9rZW4gYXMgYSBwcm92aWRlci5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQVBJcyByZWxhdGVkIHRvIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCBhcmUgY3VycmVudGx5IHVuZGVyIHJldmlldy5cbiAqIEBwYXJhbSB7P30gcmVxdWlyZWRUb2tlblxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGxhdGZvcm0ocmVxdWlyZWRUb2tlbikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBsYXRmb3JtID0gZ2V0UGxhdGZvcm0oKTtcbiAgICBpZiAoIXBsYXRmb3JtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcGxhdGZvcm0gZXhpc3RzIScpO1xuICAgIH1cbiAgICBpZiAoIXBsYXRmb3JtLmluamVjdG9yLmdldChyZXF1aXJlZFRva2VuLCBudWxsKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgcGxhdGZvcm0gd2l0aCBhIGRpZmZlcmVudCBjb25maWd1cmF0aW9uIGhhcyBiZWVuIGNyZWF0ZWQuIFBsZWFzZSBkZXN0cm95IGl0IGZpcnN0LicpO1xuICAgIH1cbiAgICByZXR1cm4gcGxhdGZvcm07XG59XG4vKipcbiAqIERlc3Ryb3kgdGhlIGV4aXN0aW5nIHBsYXRmb3JtLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBUElzIHJlbGF0ZWQgdG8gYXBwbGljYXRpb24gYm9vdHN0cmFwIGFyZSBjdXJyZW50bHkgdW5kZXIgcmV2aWV3LlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGVzdHJveVBsYXRmb3JtKCkge1xuICAgIGlmIChfcGxhdGZvcm0gJiYgIV9wbGF0Zm9ybS5kZXN0cm95ZWQpIHtcbiAgICAgICAgX3BsYXRmb3JtLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgcGxhdGZvcm0uXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFQSXMgcmVsYXRlZCB0byBhcHBsaWNhdGlvbiBib290c3RyYXAgYXJlIGN1cnJlbnRseSB1bmRlciByZXZpZXcuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBnZXRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gX3BsYXRmb3JtICYmICFfcGxhdGZvcm0uZGVzdHJveWVkID8gX3BsYXRmb3JtIDogbnVsbDtcbn1cbi8qKlxuICogUHJvdmlkZXMgYWRkaXRpb25hbCBvcHRpb25zIHRvIHRoZSBib290c3RyYXBpbmcgcHJvY2Vzcy5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIFRoZSBBbmd1bGFyIHBsYXRmb3JtIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgQW5ndWxhciBvbiBhIHdlYiBwYWdlLiBFYWNoIHBhZ2VcbiAqIGhhcyBleGFjdGx5IG9uZSBwbGF0Zm9ybSwgYW5kIHNlcnZpY2VzIChzdWNoIGFzIHJlZmxlY3Rpb24pIHdoaWNoIGFyZSBjb21tb25cbiAqIHRvIGV2ZXJ5IEFuZ3VsYXIgYXBwbGljYXRpb24gcnVubmluZyBvbiB0aGUgcGFnZSBhcmUgYm91bmQgaW4gaXRzIHNjb3BlLlxuICpcbiAqIEEgcGFnZSdzIHBsYXRmb3JtIGlzIGluaXRpYWxpemVkIGltcGxpY2l0bHkgd2hlbiBhIHBsYXRmb3JtIGlzIGNyZWF0ZWQgdmlhIGEgcGxhdGZvcm0gZmFjdG9yeVxuICogKGUuZy4ge1xcQGxpbmsgcGxhdGZvcm1Ccm93c2VyfSksIG9yIGV4cGxpY2l0bHkgYnkgY2FsbGluZyB0aGUge1xcQGxpbmsgY3JlYXRlUGxhdGZvcm19IGZ1bmN0aW9uLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgUGxhdGZvcm1SZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGZ1bmN0aW9uIFBsYXRmb3JtUmVmKF9pbmplY3Rvcikge1xuICAgICAgICB0aGlzLl9pbmplY3RvciA9IF9pbmplY3RvcjtcbiAgICAgICAgdGhpcy5fbW9kdWxlcyA9IFtdO1xuICAgICAgICB0aGlzLl9kZXN0cm95TGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGFuIGBATmdNb2R1bGVgIGZvciB0aGUgZ2l2ZW4gcGxhdGZvcm1cbiAgICAgKiBmb3Igb2ZmbGluZSBjb21waWxhdGlvbi5cbiAgICAgKlxuICAgICAqICMjIFNpbXBsZSBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbXlfbW9kdWxlLnRzOlxuICAgICAqXG4gICAgICogQE5nTW9kdWxlKHtcbiAgICAgKiAgIGltcG9ydHM6IFtCcm93c2VyTW9kdWxlXVxuICAgICAqIH0pXG4gICAgICogY2xhc3MgTXlNb2R1bGUge31cbiAgICAgKlxuICAgICAqIG1haW4udHM6XG4gICAgICogaW1wb3J0IHtNeU1vZHVsZU5nRmFjdG9yeX0gZnJvbSAnLi9teV9tb2R1bGUubmdmYWN0b3J5JztcbiAgICAgKiBpbXBvcnQge3BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG4gICAgICpcbiAgICAgKiBsZXQgbW9kdWxlUmVmID0gcGxhdGZvcm1Ccm93c2VyKCkuYm9vdHN0cmFwTW9kdWxlRmFjdG9yeShNeU1vZHVsZU5nRmFjdG9yeSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZXhwZXJpbWVudGFsIEFQSXMgcmVsYXRlZCB0byBhcHBsaWNhdGlvbiBib290c3RyYXAgYXJlIGN1cnJlbnRseSB1bmRlciByZXZpZXcuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBhbiBgXFxATmdNb2R1bGVgIGZvciB0aGUgZ2l2ZW4gcGxhdGZvcm1cbiAgICAgKiBmb3Igb2ZmbGluZSBjb21waWxhdGlvbi5cbiAgICAgKlxuICAgICAqICMjIFNpbXBsZSBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbXlfbW9kdWxlLnRzOlxuICAgICAqXG4gICAgICogXFxATmdNb2R1bGUoe1xuICAgICAqICAgaW1wb3J0czogW0Jyb3dzZXJNb2R1bGVdXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBNeU1vZHVsZSB7fVxuICAgICAqXG4gICAgICogbWFpbi50czpcbiAgICAgKiBpbXBvcnQge015TW9kdWxlTmdGYWN0b3J5fSBmcm9tICcuL215X21vZHVsZS5uZ2ZhY3RvcnknO1xuICAgICAqIGltcG9ydCB7cGxhdGZvcm1Ccm93c2VyfSBmcm9tICdcXEBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuICAgICAqXG4gICAgICogbGV0IG1vZHVsZVJlZiA9IHBsYXRmb3JtQnJvd3NlcigpLmJvb3RzdHJhcE1vZHVsZUZhY3RvcnkoTXlNb2R1bGVOZ0ZhY3RvcnkpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogXFxAZXhwZXJpbWVudGFsIEFQSXMgcmVsYXRlZCB0byBhcHBsaWNhdGlvbiBib290c3RyYXAgYXJlIGN1cnJlbnRseSB1bmRlciByZXZpZXcuXG4gICAgICogQHRlbXBsYXRlIE1cbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZUZhY3RvcnlcbiAgICAgKiBAcGFyYW0gez89fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBQbGF0Zm9ybVJlZi5wcm90b3R5cGUuYm9vdHN0cmFwTW9kdWxlRmFjdG9yeSA9IC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYW4gYFxcQE5nTW9kdWxlYCBmb3IgdGhlIGdpdmVuIHBsYXRmb3JtXG4gICAgICogZm9yIG9mZmxpbmUgY29tcGlsYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyBTaW1wbGUgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIG15X21vZHVsZS50czpcbiAgICAgKlxuICAgICAqIFxcQE5nTW9kdWxlKHtcbiAgICAgKiAgIGltcG9ydHM6IFtCcm93c2VyTW9kdWxlXVxuICAgICAqIH0pXG4gICAgICogY2xhc3MgTXlNb2R1bGUge31cbiAgICAgKlxuICAgICAqIG1haW4udHM6XG4gICAgICogaW1wb3J0IHtNeU1vZHVsZU5nRmFjdG9yeX0gZnJvbSAnLi9teV9tb2R1bGUubmdmYWN0b3J5JztcbiAgICAgKiBpbXBvcnQge3BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnXFxAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbiAgICAgKlxuICAgICAqIGxldCBtb2R1bGVSZWYgPSBwbGF0Zm9ybUJyb3dzZXIoKS5ib290c3RyYXBNb2R1bGVGYWN0b3J5KE15TW9kdWxlTmdGYWN0b3J5KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFxcQGV4cGVyaW1lbnRhbCBBUElzIHJlbGF0ZWQgdG8gYXBwbGljYXRpb24gYm9vdHN0cmFwIGFyZSBjdXJyZW50bHkgdW5kZXIgcmV2aWV3LlxuICAgICAqIEB0ZW1wbGF0ZSBNXG4gICAgICogQHBhcmFtIHs/fSBtb2R1bGVGYWN0b3J5XG4gICAgICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1vZHVsZUZhY3RvcnksIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gTm90ZTogV2UgbmVlZCB0byBjcmVhdGUgdGhlIE5nWm9uZSBfYmVmb3JlXyB3ZSBpbnN0YW50aWF0ZSB0aGUgbW9kdWxlLFxuICAgICAgICAvLyBhcyBpbnN0YW50aWF0aW5nIHRoZSBtb2R1bGUgY3JlYXRlcyBzb21lIHByb3ZpZGVycyBlYWdlcmx5LlxuICAgICAgICAvLyBTbyB3ZSBjcmVhdGUgYSBtaW5pIHBhcmVudCBpbmplY3RvciB0aGF0IGp1c3QgY29udGFpbnMgdGhlIG5ldyBOZ1pvbmUgYW5kXG4gICAgICAgIC8vIHBhc3MgdGhhdCBhcyBwYXJlbnQgdG8gdGhlIE5nTW9kdWxlRmFjdG9yeS5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmdab25lT3B0aW9uID0gb3B0aW9ucyA/IG9wdGlvbnMubmdab25lIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZ1pvbmUgPSBnZXROZ1pvbmUobmdab25lT3B0aW9uKTtcbiAgICAgICAgLy8gQXR0ZW50aW9uOiBEb24ndCB1c2UgQXBwbGljYXRpb25SZWYucnVuIGhlcmUsXG4gICAgICAgIC8vIGFzIHdlIHdhbnQgdG8gYmUgc3VyZSB0aGF0IGFsbCBwb3NzaWJsZSBjb25zdHJ1Y3RvciBjYWxscyBhcmUgaW5zaWRlIGBuZ1pvbmUucnVuYCFcbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmdab25lSW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoW3sgcHJvdmlkZTogTmdab25lLCB1c2VWYWx1ZTogbmdab25lIH1dLCBfdGhpcy5pbmplY3Rvcik7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtb2R1bGVSZWYgPSAvKiogQHR5cGUgez99ICovIChtb2R1bGVGYWN0b3J5LmNyZWF0ZShuZ1pvbmVJbmplY3RvcikpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXhjZXB0aW9uSGFuZGxlciA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoRXJyb3JIYW5kbGVyLCBudWxsKTtcbiAgICAgICAgICAgIGlmICghZXhjZXB0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gRXJyb3JIYW5kbGVyLiBJcyBwbGF0Zm9ybSBtb2R1bGUgKEJyb3dzZXJNb2R1bGUpIGluY2x1ZGVkPycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW9kdWxlUmVmLm9uRGVzdHJveShmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoX3RoaXMuX21vZHVsZXMsIG1vZHVsZVJlZik7IH0pOyAvKiogQHR5cGUgez99ICovXG4gICAgICAgICAgICAoKG5nWm9uZSkpLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHsgcmV0dXJuICgobmdab25lKSkub25FcnJvci5zdWJzY3JpYmUoeyBuZXh0OiBmdW5jdGlvbiAoZXJyb3IpIHsgZXhjZXB0aW9uSGFuZGxlci5oYW5kbGVFcnJvcihlcnJvcik7IH0gfSk7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIF9jYWxsQW5kUmVwb3J0VG9FcnJvckhhbmRsZXIoZXhjZXB0aW9uSGFuZGxlciwgLyoqIEB0eXBlIHs/fSAqLyAoKG5nWm9uZSkpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5pdFN0YXR1cyA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoQXBwbGljYXRpb25Jbml0U3RhdHVzKTtcbiAgICAgICAgICAgICAgICBpbml0U3RhdHVzLnJ1bkluaXRpYWxpemVycygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbml0U3RhdHVzLmRvbmVQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbW9kdWxlRG9Cb290c3RyYXAobW9kdWxlUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZVJlZjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYW4gYEBOZ01vZHVsZWAgZm9yIGEgZ2l2ZW4gcGxhdGZvcm0gdXNpbmcgdGhlIGdpdmVuIHJ1bnRpbWUgY29tcGlsZXIuXG4gICAgICpcbiAgICAgKiAjIyBTaW1wbGUgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBOZ01vZHVsZSh7XG4gICAgICogICBpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV1cbiAgICAgKiB9KVxuICAgICAqIGNsYXNzIE15TW9kdWxlIHt9XG4gICAgICpcbiAgICAgKiBsZXQgbW9kdWxlUmVmID0gcGxhdGZvcm1Ccm93c2VyKCkuYm9vdHN0cmFwTW9kdWxlKE15TW9kdWxlKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBhbiBgXFxATmdNb2R1bGVgIGZvciBhIGdpdmVuIHBsYXRmb3JtIHVzaW5nIHRoZSBnaXZlbiBydW50aW1lIGNvbXBpbGVyLlxuICAgICAqXG4gICAgICogIyMgU2ltcGxlIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBcXEBOZ01vZHVsZSh7XG4gICAgICogICBpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV1cbiAgICAgKiB9KVxuICAgICAqIGNsYXNzIE15TW9kdWxlIHt9XG4gICAgICpcbiAgICAgKiBsZXQgbW9kdWxlUmVmID0gcGxhdGZvcm1Ccm93c2VyKCkuYm9vdHN0cmFwTW9kdWxlKE15TW9kdWxlKTtcbiAgICAgKiBgYGBcbiAgICAgKiBcXEBzdGFibGVcbiAgICAgKiBAdGVtcGxhdGUgTVxuICAgICAqIEBwYXJhbSB7P30gbW9kdWxlVHlwZVxuICAgICAqIEBwYXJhbSB7Pz19IGNvbXBpbGVyT3B0aW9uc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUGxhdGZvcm1SZWYucHJvdG90eXBlLmJvb3RzdHJhcE1vZHVsZSA9IC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYW4gYFxcQE5nTW9kdWxlYCBmb3IgYSBnaXZlbiBwbGF0Zm9ybSB1c2luZyB0aGUgZ2l2ZW4gcnVudGltZSBjb21waWxlci5cbiAgICAgKlxuICAgICAqICMjIFNpbXBsZSBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogXFxATmdNb2R1bGUoe1xuICAgICAqICAgaW1wb3J0czogW0Jyb3dzZXJNb2R1bGVdXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBNeU1vZHVsZSB7fVxuICAgICAqXG4gICAgICogbGV0IG1vZHVsZVJlZiA9IHBsYXRmb3JtQnJvd3NlcigpLmJvb3RzdHJhcE1vZHVsZShNeU1vZHVsZSk7XG4gICAgICogYGBgXG4gICAgICogXFxAc3RhYmxlXG4gICAgICogQHRlbXBsYXRlIE1cbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZVR5cGVcbiAgICAgKiBAcGFyYW0gez89fSBjb21waWxlck9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtb2R1bGVUeXBlLCBjb21waWxlck9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNvbXBpbGVyT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGNvbXBpbGVyT3B0aW9ucyA9IFtdOyB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbXBpbGVyRmFjdG9yeSA9IHRoaXMuaW5qZWN0b3IuZ2V0KENvbXBpbGVyRmFjdG9yeSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG9wdGlvbnMgPSBvcHRpb25zUmVkdWNlcih7fSwgY29tcGlsZXJPcHRpb25zKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcGlsZXIgPSBjb21waWxlckZhY3RvcnkuY3JlYXRlQ29tcGlsZXIoW29wdGlvbnNdKTtcbiAgICAgICAgcmV0dXJuIGNvbXBpbGVyLmNvbXBpbGVNb2R1bGVBc3luYyhtb2R1bGVUeXBlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG1vZHVsZUZhY3RvcnkpIHsgcmV0dXJuIF90aGlzLmJvb3RzdHJhcE1vZHVsZUZhY3RvcnkobW9kdWxlRmFjdG9yeSwgb3B0aW9ucyk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBtb2R1bGVSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFBsYXRmb3JtUmVmLnByb3RvdHlwZS5fbW9kdWxlRG9Cb290c3RyYXAgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG1vZHVsZVJlZlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG1vZHVsZVJlZikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhcHBSZWYgPSAvKiogQHR5cGUgez99ICovIChtb2R1bGVSZWYuaW5qZWN0b3IuZ2V0KEFwcGxpY2F0aW9uUmVmKSk7XG4gICAgICAgIGlmIChtb2R1bGVSZWYuX2Jvb3RzdHJhcENvbXBvbmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbW9kdWxlUmVmLl9ib290c3RyYXBDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGFwcFJlZi5ib290c3RyYXAoZik7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1vZHVsZVJlZi5pbnN0YW5jZS5uZ0RvQm9vdHN0cmFwKSB7XG4gICAgICAgICAgICBtb2R1bGVSZWYuaW5zdGFuY2UubmdEb0Jvb3RzdHJhcChhcHBSZWYpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG1vZHVsZSBcIiArIHN0cmluZ2lmeShtb2R1bGVSZWYuaW5zdGFuY2UuY29uc3RydWN0b3IpICsgXCIgd2FzIGJvb3RzdHJhcHBlZCwgYnV0IGl0IGRvZXMgbm90IGRlY2xhcmUgXFxcIkBOZ01vZHVsZS5ib290c3RyYXBcXFwiIGNvbXBvbmVudHMgbm9yIGEgXFxcIm5nRG9Cb290c3RyYXBcXFwiIG1ldGhvZC4gXCIgK1xuICAgICAgICAgICAgICAgIFwiUGxlYXNlIGRlZmluZSBvbmUgb2YgdGhlc2UuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vZHVsZXMucHVzaChtb2R1bGVSZWYpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcGxhdGZvcm0gaXMgZGlzcG9zZWQuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcGxhdGZvcm0gaXMgZGlzcG9zZWQuXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUGxhdGZvcm1SZWYucHJvdG90eXBlLm9uRGVzdHJveSA9IC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBsYXRmb3JtIGlzIGRpc3Bvc2VkLlxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjYWxsYmFjaykgeyB0aGlzLl9kZXN0cm95TGlzdGVuZXJzLnB1c2goY2FsbGJhY2spOyB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQbGF0Zm9ybVJlZi5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0cmlldmUgdGhlIHBsYXRmb3JtIHtAbGluayBJbmplY3Rvcn0sIHdoaWNoIGlzIHRoZSBwYXJlbnQgaW5qZWN0b3IgZm9yXG4gICAgICAgICAqIGV2ZXJ5IEFuZ3VsYXIgYXBwbGljYXRpb24gb24gdGhlIHBhZ2UgYW5kIHByb3ZpZGVzIHNpbmdsZXRvbiBwcm92aWRlcnMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBSZXRyaWV2ZSB0aGUgcGxhdGZvcm0ge1xcQGxpbmsgSW5qZWN0b3J9LCB3aGljaCBpcyB0aGUgcGFyZW50IGluamVjdG9yIGZvclxuICAgICAgICAgKiBldmVyeSBBbmd1bGFyIGFwcGxpY2F0aW9uIG9uIHRoZSBwYWdlIGFuZCBwcm92aWRlcyBzaW5nbGV0b24gcHJvdmlkZXJzLlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faW5qZWN0b3I7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIEFuZ3VsYXIgcGxhdGZvcm0gYW5kIGFsbCBBbmd1bGFyIGFwcGxpY2F0aW9ucyBvbiB0aGUgcGFnZS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBBbmd1bGFyIHBsYXRmb3JtIGFuZCBhbGwgQW5ndWxhciBhcHBsaWNhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBQbGF0Zm9ybVJlZi5wcm90b3R5cGUuZGVzdHJveSA9IC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIEFuZ3VsYXIgcGxhdGZvcm0gYW5kIGFsbCBBbmd1bGFyIGFwcGxpY2F0aW9ucyBvbiB0aGUgcGFnZS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcGxhdGZvcm0gaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW9kdWxlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkgeyByZXR1cm4gbW9kdWxlLmRlc3Ryb3koKTsgfSk7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyKCk7IH0pO1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBsYXRmb3JtUmVmLnByb3RvdHlwZSwgXCJkZXN0cm95ZWRcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVzdHJveWVkOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBQbGF0Zm9ybVJlZi5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIFBsYXRmb3JtUmVmLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEluamVjdG9yLCB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIFBsYXRmb3JtUmVmO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/PX0gbmdab25lT3B0aW9uXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBnZXROZ1pvbmUobmdab25lT3B0aW9uKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmdab25lO1xuICAgIGlmIChuZ1pvbmVPcHRpb24gPT09ICdub29wJykge1xuICAgICAgICBuZ1pvbmUgPSBuZXcgTm9vcE5nWm9uZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmdab25lID0gKG5nWm9uZU9wdGlvbiA9PT0gJ3pvbmUuanMnID8gdW5kZWZpbmVkIDogbmdab25lT3B0aW9uKSB8fFxuICAgICAgICAgICAgbmV3IE5nWm9uZSh7IGVuYWJsZUxvbmdTdGFja1RyYWNlOiBpc0Rldk1vZGUoKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5nWm9uZTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlcnJvckhhbmRsZXJcbiAqIEBwYXJhbSB7P30gbmdab25lXG4gKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfY2FsbEFuZFJlcG9ydFRvRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlciwgbmdab25lLCBjYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoZSk7IH0pO1xuICAgICAgICAgICAgICAgIC8vIHJldGhyb3cgYXMgdGhlIGV4Y2VwdGlvbiBoYW5kbGVyIG1pZ2h0IG5vdCBkbyBpdFxuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXRjaCAoLyoqIEB0eXBlIHs/fSAqLyBlKSB7XG4gICAgICAgIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoZSk7IH0pO1xuICAgICAgICAvLyByZXRocm93IGFzIHRoZSBleGNlcHRpb24gaGFuZGxlciBtaWdodCBub3QgZG8gaXRcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0gez99IGRzdFxuICogQHBhcmFtIHs/fSBvYmpzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBvcHRpb25zUmVkdWNlcihkc3QsIG9ianMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmpzKSkge1xuICAgICAgICBkc3QgPSBvYmpzLnJlZHVjZShvcHRpb25zUmVkdWNlciwgZHN0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRzdCA9IF9fYXNzaWduKHt9LCBkc3QsICgvKiogQHR5cGUgez99ICovIChvYmpzKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZHN0O1xufVxuLyoqXG4gKiBBIHJlZmVyZW5jZSB0byBhbiBBbmd1bGFyIGFwcGxpY2F0aW9uIHJ1bm5pbmcgb24gYSBwYWdlLlxuICpcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgQXBwbGljYXRpb25SZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uUmVmKF96b25lLCBfY29uc29sZSwgX2luamVjdG9yLCBfZXhjZXB0aW9uSGFuZGxlciwgX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgX2luaXRTdGF0dXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fem9uZSA9IF96b25lO1xuICAgICAgICB0aGlzLl9jb25zb2xlID0gX2NvbnNvbGU7XG4gICAgICAgIHRoaXMuX2luamVjdG9yID0gX2luamVjdG9yO1xuICAgICAgICB0aGlzLl9leGNlcHRpb25IYW5kbGVyID0gX2V4Y2VwdGlvbkhhbmRsZXI7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlciA9IF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgICAgIHRoaXMuX2luaXRTdGF0dXMgPSBfaW5pdFN0YXR1cztcbiAgICAgICAgdGhpcy5fYm9vdHN0cmFwTGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuX3ZpZXdzID0gW107XG4gICAgICAgIHRoaXMuX3J1bm5pbmdUaWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VOb05ld0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIGxpc3Qgb2YgY29tcG9uZW50IHR5cGVzIHJlZ2lzdGVyZWQgdG8gdGhpcyBhcHBsaWNhdGlvbi5cbiAgICAgICAgICogVGhpcyBsaXN0IGlzIHBvcHVsYXRlZCBldmVuIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbXBvbmVudFR5cGVzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBsaXN0IG9mIGNvbXBvbmVudHMgcmVnaXN0ZXJlZCB0byB0aGlzIGFwcGxpY2F0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gW107XG4gICAgICAgIHRoaXMuX2VuZm9yY2VOb05ld0NoYW5nZXMgPSBpc0Rldk1vZGUoKTtcbiAgICAgICAgdGhpcy5fem9uZS5vbk1pY3JvdGFza0VtcHR5LnN1YnNjcmliZSh7IG5leHQ6IGZ1bmN0aW9uICgpIHsgX3RoaXMuX3pvbmUucnVuKGZ1bmN0aW9uICgpIHsgX3RoaXMudGljaygpOyB9KTsgfSB9KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNDdXJyZW50bHlTdGFibGUgPSBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIF90aGlzLl9zdGFibGUgPSBfdGhpcy5fem9uZS5pc1N0YWJsZSAmJiAhX3RoaXMuX3pvbmUuaGFzUGVuZGluZ01hY3JvdGFza3MgJiZcbiAgICAgICAgICAgICAgICAhX3RoaXMuX3pvbmUuaGFzUGVuZGluZ01pY3JvdGFza3M7XG4gICAgICAgICAgICBfdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChfdGhpcy5fc3RhYmxlKTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc1N0YWJsZSA9IG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBzdWJzY3JpcHRpb24gdG8gb25TdGFibGUgb3V0c2lkZSB0aGUgQW5ndWxhciBab25lIHNvIHRoYXRcbiAgICAgICAgICAgIC8vIHRoZSBjYWxsYmFjayBpcyBydW4gb3V0c2lkZSB0aGUgQW5ndWxhciBab25lLlxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhYmxlU3ViO1xuICAgICAgICAgICAgX3RoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN0YWJsZVN1YiA9IF90aGlzLl96b25lLm9uU3RhYmxlLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIE5nWm9uZS5hc3NlcnROb3RJbkFuZ3VsYXJab25lKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlcmUgYXJlIG5vIHBlbmRpbmcgbWFjcm8vbWljcm8gdGFza3MgaW4gdGhlIG5leHQgdGlja1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBhbGxvdyBmb3IgTmdab25lIHRvIHVwZGF0ZSB0aGUgc3RhdGUuXG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlTWljcm9UYXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX3N0YWJsZSAmJiAhX3RoaXMuX3pvbmUuaGFzUGVuZGluZ01hY3JvdGFza3MgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhX3RoaXMuX3pvbmUuaGFzUGVuZGluZ01pY3JvdGFza3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdW5zdGFibGVTdWIgPSBfdGhpcy5fem9uZS5vblVuc3RhYmxlLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgTmdab25lLmFzc2VydEluQW5ndWxhclpvbmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3N0YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHsgb2JzZXJ2ZXIubmV4dChmYWxzZSk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzdGFibGVTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB1bnN0YWJsZVN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgICgvKiogQHR5cGUgez99ICovICh0aGlzKSkuaXNTdGFibGUgPVxuICAgICAgICAgICAgbWVyZ2UoaXNDdXJyZW50bHlTdGFibGUsIHNoYXJlLmNhbGwoaXNTdGFibGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQm9vdHN0cmFwIGEgbmV3IGNvbXBvbmVudCBhdCB0aGUgcm9vdCBsZXZlbCBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMgQm9vdHN0cmFwIHByb2Nlc3NcbiAgICAgKlxuICAgICAqIFdoZW4gYm9vdHN0cmFwcGluZyBhIG5ldyByb290IGNvbXBvbmVudCBpbnRvIGFuIGFwcGxpY2F0aW9uLCBBbmd1bGFyIG1vdW50cyB0aGVcbiAgICAgKiBzcGVjaWZpZWQgYXBwbGljYXRpb24gY29tcG9uZW50IG9udG8gRE9NIGVsZW1lbnRzIGlkZW50aWZpZWQgYnkgdGhlIFtjb21wb25lbnRUeXBlXSdzXG4gICAgICogc2VsZWN0b3IgYW5kIGtpY2tzIG9mZiBhdXRvbWF0aWMgY2hhbmdlIGRldGVjdGlvbiB0byBmaW5pc2ggaW5pdGlhbGl6aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBPcHRpb25hbGx5LCBhIGNvbXBvbmVudCBjYW4gYmUgbW91bnRlZCBvbnRvIGEgRE9NIGVsZW1lbnQgdGhhdCBkb2VzIG5vdCBtYXRjaCB0aGVcbiAgICAgKiBbY29tcG9uZW50VHlwZV0ncyBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICoge0BleGFtcGxlIGNvcmUvdHMvcGxhdGZvcm0vcGxhdGZvcm0udHMgcmVnaW9uPSdsb25nZm9ybSd9XG4gICAgICovXG4gICAgLyoqXG4gICAgICogQm9vdHN0cmFwIGEgbmV3IGNvbXBvbmVudCBhdCB0aGUgcm9vdCBsZXZlbCBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMgQm9vdHN0cmFwIHByb2Nlc3NcbiAgICAgKlxuICAgICAqIFdoZW4gYm9vdHN0cmFwcGluZyBhIG5ldyByb290IGNvbXBvbmVudCBpbnRvIGFuIGFwcGxpY2F0aW9uLCBBbmd1bGFyIG1vdW50cyB0aGVcbiAgICAgKiBzcGVjaWZpZWQgYXBwbGljYXRpb24gY29tcG9uZW50IG9udG8gRE9NIGVsZW1lbnRzIGlkZW50aWZpZWQgYnkgdGhlIFtjb21wb25lbnRUeXBlXSdzXG4gICAgICogc2VsZWN0b3IgYW5kIGtpY2tzIG9mZiBhdXRvbWF0aWMgY2hhbmdlIGRldGVjdGlvbiB0byBmaW5pc2ggaW5pdGlhbGl6aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBPcHRpb25hbGx5LCBhIGNvbXBvbmVudCBjYW4gYmUgbW91bnRlZCBvbnRvIGEgRE9NIGVsZW1lbnQgdGhhdCBkb2VzIG5vdCBtYXRjaCB0aGVcbiAgICAgKiBbY29tcG9uZW50VHlwZV0ncyBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICoge1xcQGV4YW1wbGUgY29yZS90cy9wbGF0Zm9ybS9wbGF0Zm9ybS50cyByZWdpb249J2xvbmdmb3JtJ31cbiAgICAgKiBAdGVtcGxhdGUgQ1xuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50T3JGYWN0b3J5XG4gICAgICogQHBhcmFtIHs/PX0gcm9vdFNlbGVjdG9yT3JOb2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBcHBsaWNhdGlvblJlZi5wcm90b3R5cGUuYm9vdHN0cmFwID0gLyoqXG4gICAgICogQm9vdHN0cmFwIGEgbmV3IGNvbXBvbmVudCBhdCB0aGUgcm9vdCBsZXZlbCBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICpcbiAgICAgKiAjIyMgQm9vdHN0cmFwIHByb2Nlc3NcbiAgICAgKlxuICAgICAqIFdoZW4gYm9vdHN0cmFwcGluZyBhIG5ldyByb290IGNvbXBvbmVudCBpbnRvIGFuIGFwcGxpY2F0aW9uLCBBbmd1bGFyIG1vdW50cyB0aGVcbiAgICAgKiBzcGVjaWZpZWQgYXBwbGljYXRpb24gY29tcG9uZW50IG9udG8gRE9NIGVsZW1lbnRzIGlkZW50aWZpZWQgYnkgdGhlIFtjb21wb25lbnRUeXBlXSdzXG4gICAgICogc2VsZWN0b3IgYW5kIGtpY2tzIG9mZiBhdXRvbWF0aWMgY2hhbmdlIGRldGVjdGlvbiB0byBmaW5pc2ggaW5pdGlhbGl6aW5nIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBPcHRpb25hbGx5LCBhIGNvbXBvbmVudCBjYW4gYmUgbW91bnRlZCBvbnRvIGEgRE9NIGVsZW1lbnQgdGhhdCBkb2VzIG5vdCBtYXRjaCB0aGVcbiAgICAgKiBbY29tcG9uZW50VHlwZV0ncyBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICoge1xcQGV4YW1wbGUgY29yZS90cy9wbGF0Zm9ybS9wbGF0Zm9ybS50cyByZWdpb249J2xvbmdmb3JtJ31cbiAgICAgKiBAdGVtcGxhdGUgQ1xuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50T3JGYWN0b3J5XG4gICAgICogQHBhcmFtIHs/PX0gcm9vdFNlbGVjdG9yT3JOb2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY29tcG9uZW50T3JGYWN0b3J5LCByb290U2VsZWN0b3JPck5vZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9pbml0U3RhdHVzLmRvbmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGJvb3RzdHJhcCBhcyB0aGVyZSBhcmUgc3RpbGwgYXN5bmNocm9ub3VzIGluaXRpYWxpemVycyBydW5uaW5nLiBCb290c3RyYXAgY29tcG9uZW50cyBpbiB0aGUgYG5nRG9Cb290c3RyYXBgIG1ldGhvZCBvZiB0aGUgcm9vdCBtb2R1bGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcG9uZW50RmFjdG9yeTtcbiAgICAgICAgaWYgKGNvbXBvbmVudE9yRmFjdG9yeSBpbnN0YW5jZW9mIENvbXBvbmVudEZhY3RvcnkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudEZhY3RvcnkgPSBjb21wb25lbnRPckZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21wb25lbnRGYWN0b3J5ID1cbiAgICAgICAgICAgICAgICAvKiogQHR5cGUgez99ICovICgodGhpcy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudE9yRmFjdG9yeSkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudFR5cGVzLnB1c2goY29tcG9uZW50RmFjdG9yeS5jb21wb25lbnRUeXBlKTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZmFjdG9yeSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgbW9kdWxlIGlmIGl0J3Mgbm90IGJvdW5kIHRvIHNvbWUgb3RoZXJcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmdNb2R1bGUgPSBjb21wb25lbnRGYWN0b3J5IGluc3RhbmNlb2YgQ29tcG9uZW50RmFjdG9yeUJvdW5kVG9Nb2R1bGUgP1xuICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICB0aGlzLl9pbmplY3Rvci5nZXQoTmdNb2R1bGVSZWYpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzZWxlY3Rvck9yTm9kZSA9IHJvb3RTZWxlY3Rvck9yTm9kZSB8fCBjb21wb25lbnRGYWN0b3J5LnNlbGVjdG9yO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wUmVmID0gY29tcG9uZW50RmFjdG9yeS5jcmVhdGUoSW5qZWN0b3IuTlVMTCwgW10sIHNlbGVjdG9yT3JOb2RlLCBuZ01vZHVsZSk7XG4gICAgICAgIGNvbXBSZWYub25EZXN0cm95KGZ1bmN0aW9uICgpIHsgX3RoaXMuX3VubG9hZENvbXBvbmVudChjb21wUmVmKTsgfSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRlc3RhYmlsaXR5ID0gY29tcFJlZi5pbmplY3Rvci5nZXQoVGVzdGFiaWxpdHksIG51bGwpO1xuICAgICAgICBpZiAodGVzdGFiaWxpdHkpIHtcbiAgICAgICAgICAgIGNvbXBSZWYuaW5qZWN0b3IuZ2V0KFRlc3RhYmlsaXR5UmVnaXN0cnkpXG4gICAgICAgICAgICAgICAgLnJlZ2lzdGVyQXBwbGljYXRpb24oY29tcFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LCB0ZXN0YWJpbGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbG9hZENvbXBvbmVudChjb21wUmVmKTtcbiAgICAgICAgaWYgKGlzRGV2TW9kZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25zb2xlLmxvZyhcIkFuZ3VsYXIgaXMgcnVubmluZyBpbiB0aGUgZGV2ZWxvcG1lbnQgbW9kZS4gQ2FsbCBlbmFibGVQcm9kTW9kZSgpIHRvIGVuYWJsZSB0aGUgcHJvZHVjdGlvbiBtb2RlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcFJlZjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludm9rZSB0aGlzIG1ldGhvZCB0byBleHBsaWNpdGx5IHByb2Nlc3MgY2hhbmdlIGRldGVjdGlvbiBhbmQgaXRzIHNpZGUtZWZmZWN0cy5cbiAgICAgKlxuICAgICAqIEluIGRldmVsb3BtZW50IG1vZGUsIGB0aWNrKClgIGFsc28gcGVyZm9ybXMgYSBzZWNvbmQgY2hhbmdlIGRldGVjdGlvbiBjeWNsZSB0byBlbnN1cmUgdGhhdCBub1xuICAgICAqIGZ1cnRoZXIgY2hhbmdlcyBhcmUgZGV0ZWN0ZWQuIElmIGFkZGl0aW9uYWwgY2hhbmdlcyBhcmUgcGlja2VkIHVwIGR1cmluZyB0aGlzIHNlY29uZCBjeWNsZSxcbiAgICAgKiBiaW5kaW5ncyBpbiB0aGUgYXBwIGhhdmUgc2lkZS1lZmZlY3RzIHRoYXQgY2Fubm90IGJlIHJlc29sdmVkIGluIGEgc2luZ2xlIGNoYW5nZSBkZXRlY3Rpb25cbiAgICAgKiBwYXNzLlxuICAgICAqIEluIHRoaXMgY2FzZSwgQW5ndWxhciB0aHJvd3MgYW4gZXJyb3IsIHNpbmNlIGFuIEFuZ3VsYXIgYXBwbGljYXRpb24gY2FuIG9ubHkgaGF2ZSBvbmUgY2hhbmdlXG4gICAgICogZGV0ZWN0aW9uIHBhc3MgZHVyaW5nIHdoaWNoIGFsbCBjaGFuZ2UgZGV0ZWN0aW9uIG11c3QgY29tcGxldGUuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIHRvIGV4cGxpY2l0bHkgcHJvY2VzcyBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBpdHMgc2lkZS1lZmZlY3RzLlxuICAgICAqXG4gICAgICogSW4gZGV2ZWxvcG1lbnQgbW9kZSwgYHRpY2soKWAgYWxzbyBwZXJmb3JtcyBhIHNlY29uZCBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlIHRvIGVuc3VyZSB0aGF0IG5vXG4gICAgICogZnVydGhlciBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gSWYgYWRkaXRpb25hbCBjaGFuZ2VzIGFyZSBwaWNrZWQgdXAgZHVyaW5nIHRoaXMgc2Vjb25kIGN5Y2xlLFxuICAgICAqIGJpbmRpbmdzIGluIHRoZSBhcHAgaGF2ZSBzaWRlLWVmZmVjdHMgdGhhdCBjYW5ub3QgYmUgcmVzb2x2ZWQgaW4gYSBzaW5nbGUgY2hhbmdlIGRldGVjdGlvblxuICAgICAqIHBhc3MuXG4gICAgICogSW4gdGhpcyBjYXNlLCBBbmd1bGFyIHRocm93cyBhbiBlcnJvciwgc2luY2UgYW4gQW5ndWxhciBhcHBsaWNhdGlvbiBjYW4gb25seSBoYXZlIG9uZSBjaGFuZ2VcbiAgICAgKiBkZXRlY3Rpb24gcGFzcyBkdXJpbmcgd2hpY2ggYWxsIGNoYW5nZSBkZXRlY3Rpb24gbXVzdCBjb21wbGV0ZS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFwcGxpY2F0aW9uUmVmLnByb3RvdHlwZS50aWNrID0gLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIHRvIGV4cGxpY2l0bHkgcHJvY2VzcyBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBpdHMgc2lkZS1lZmZlY3RzLlxuICAgICAqXG4gICAgICogSW4gZGV2ZWxvcG1lbnQgbW9kZSwgYHRpY2soKWAgYWxzbyBwZXJmb3JtcyBhIHNlY29uZCBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlIHRvIGVuc3VyZSB0aGF0IG5vXG4gICAgICogZnVydGhlciBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gSWYgYWRkaXRpb25hbCBjaGFuZ2VzIGFyZSBwaWNrZWQgdXAgZHVyaW5nIHRoaXMgc2Vjb25kIGN5Y2xlLFxuICAgICAqIGJpbmRpbmdzIGluIHRoZSBhcHAgaGF2ZSBzaWRlLWVmZmVjdHMgdGhhdCBjYW5ub3QgYmUgcmVzb2x2ZWQgaW4gYSBzaW5nbGUgY2hhbmdlIGRldGVjdGlvblxuICAgICAqIHBhc3MuXG4gICAgICogSW4gdGhpcyBjYXNlLCBBbmd1bGFyIHRocm93cyBhbiBlcnJvciwgc2luY2UgYW4gQW5ndWxhciBhcHBsaWNhdGlvbiBjYW4gb25seSBoYXZlIG9uZSBjaGFuZ2VcbiAgICAgKiBkZXRlY3Rpb24gcGFzcyBkdXJpbmcgd2hpY2ggYWxsIGNoYW5nZSBkZXRlY3Rpb24gbXVzdCBjb21wbGV0ZS5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmdUaWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FwcGxpY2F0aW9uUmVmLnRpY2sgaXMgY2FsbGVkIHJlY3Vyc2l2ZWx5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2NvcGUgPSBBcHBsaWNhdGlvblJlZi5fdGlja1Njb3BlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nVGljayA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl92aWV3cy5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3KSB7IHJldHVybiB2aWV3LmRldGVjdENoYW5nZXMoKTsgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fZW5mb3JjZU5vTmV3Q2hhbmdlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdzLmZvckVhY2goZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuIHZpZXcuY2hlY2tOb0NoYW5nZXMoKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKC8qKiBAdHlwZSB7P30gKi8gZSkge1xuICAgICAgICAgICAgLy8gQXR0ZW50aW9uOiBEb24ndCByZXRocm93IGFzIGl0IGNvdWxkIGNhbmNlbCBzdWJzY3JpcHRpb25zIHRvIE9ic2VydmFibGVzIVxuICAgICAgICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fZXhjZXB0aW9uSGFuZGxlci5oYW5kbGVFcnJvcihlKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nVGljayA9IGZhbHNlO1xuICAgICAgICAgICAgd3RmTGVhdmUoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHZpZXcgc28gdGhhdCBpdCB3aWxsIGJlIGRpcnR5IGNoZWNrZWQuXG4gICAgICogVGhlIHZpZXcgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRldGFjaGVkIHdoZW4gaXQgaXMgZGVzdHJveWVkLlxuICAgICAqIFRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgdmlldyBpcyBhbHJlYWR5IGF0dGFjaGVkIHRvIGEgVmlld0NvbnRhaW5lci5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBBdHRhY2hlcyBhIHZpZXcgc28gdGhhdCBpdCB3aWxsIGJlIGRpcnR5IGNoZWNrZWQuXG4gICAgICogVGhlIHZpZXcgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGRldGFjaGVkIHdoZW4gaXQgaXMgZGVzdHJveWVkLlxuICAgICAqIFRoaXMgd2lsbCB0aHJvdyBpZiB0aGUgdmlldyBpcyBhbHJlYWR5IGF0dGFjaGVkIHRvIGEgVmlld0NvbnRhaW5lci5cbiAgICAgKiBAcGFyYW0gez99IHZpZXdSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEFwcGxpY2F0aW9uUmVmLnByb3RvdHlwZS5hdHRhY2hWaWV3ID0gLyoqXG4gICAgICogQXR0YWNoZXMgYSB2aWV3IHNvIHRoYXQgaXQgd2lsbCBiZSBkaXJ0eSBjaGVja2VkLlxuICAgICAqIFRoZSB2aWV3IHdpbGwgYmUgYXV0b21hdGljYWxseSBkZXRhY2hlZCB3aGVuIGl0IGlzIGRlc3Ryb3llZC5cbiAgICAgKiBUaGlzIHdpbGwgdGhyb3cgaWYgdGhlIHZpZXcgaXMgYWxyZWFkeSBhdHRhY2hlZCB0byBhIFZpZXdDb250YWluZXIuXG4gICAgICogQHBhcmFtIHs/fSB2aWV3UmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodmlld1JlZikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2aWV3ID0gKC8qKiBAdHlwZSB7P30gKi8gKHZpZXdSZWYpKTtcbiAgICAgICAgdGhpcy5fdmlld3MucHVzaCh2aWV3KTtcbiAgICAgICAgdmlldy5hdHRhY2hUb0FwcFJlZih0aGlzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERldGFjaGVzIGEgdmlldyBmcm9tIGRpcnR5IGNoZWNraW5nIGFnYWluLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIERldGFjaGVzIGEgdmlldyBmcm9tIGRpcnR5IGNoZWNraW5nIGFnYWluLlxuICAgICAqIEBwYXJhbSB7P30gdmlld1JlZlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQXBwbGljYXRpb25SZWYucHJvdG90eXBlLmRldGFjaFZpZXcgPSAvKipcbiAgICAgKiBEZXRhY2hlcyBhIHZpZXcgZnJvbSBkaXJ0eSBjaGVja2luZyBhZ2Fpbi5cbiAgICAgKiBAcGFyYW0gez99IHZpZXdSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2aWV3UmVmKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXcgPSAoLyoqIEB0eXBlIHs/fSAqLyAodmlld1JlZikpO1xuICAgICAgICByZW1vdmUodGhpcy5fdmlld3MsIHZpZXcpO1xuICAgICAgICB2aWV3LmRldGFjaEZyb21BcHBSZWYoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50UmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBcHBsaWNhdGlvblJlZi5wcm90b3R5cGUuX2xvYWRDb21wb25lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbXBvbmVudFJlZlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvbXBvbmVudFJlZikge1xuICAgICAgICB0aGlzLmF0dGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICAgICAgdGhpcy50aWNrKCk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudFJlZik7XG4gICAgICAgIC8vIEdldCB0aGUgbGlzdGVuZXJzIGxhemlseSB0byBwcmV2ZW50IERJIGN5Y2xlcy5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGlzdGVuZXJzID0gdGhpcy5faW5qZWN0b3IuZ2V0KEFQUF9CT09UU1RSQVBfTElTVEVORVIsIFtdKS5jb25jYXQodGhpcy5fYm9vdHN0cmFwTGlzdGVuZXJzKTtcbiAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lcihjb21wb25lbnRSZWYpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50UmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBcHBsaWNhdGlvblJlZi5wcm90b3R5cGUuX3VubG9hZENvbXBvbmVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50UmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY29tcG9uZW50UmVmKSB7XG4gICAgICAgIHRoaXMuZGV0YWNoVmlldyhjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICAgICAgICByZW1vdmUodGhpcy5jb21wb25lbnRzLCBjb21wb25lbnRSZWYpO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBBcHBsaWNhdGlvblJlZi5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUT0RPKGFseGh1Yik6IERpc3Bvc2Ugb2YgdGhlIE5nWm9uZS5cbiAgICAgICAgdGhpcy5fdmlld3Muc2xpY2UoKS5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3KSB7IHJldHVybiB2aWV3LmRlc3Ryb3koKTsgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwbGljYXRpb25SZWYucHJvdG90eXBlLCBcInZpZXdDb3VudFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYXR0YWNoZWQgdmlld3MuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYXR0YWNoZWQgdmlld3MuXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl92aWV3cy5sZW5ndGg7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICovXG4gICAgQXBwbGljYXRpb25SZWYuX3RpY2tTY29wZSA9IHd0ZkNyZWF0ZVNjb3BlKCdBcHBsaWNhdGlvblJlZiN0aWNrKCknKTtcbiAgICBBcHBsaWNhdGlvblJlZi5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbiAgICBdO1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIEFwcGxpY2F0aW9uUmVmLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICAgICAgeyB0eXBlOiBDb25zb2xlLCB9LFxuICAgICAgICB7IHR5cGU6IEluamVjdG9yLCB9LFxuICAgICAgICB7IHR5cGU6IEVycm9ySGFuZGxlciwgfSxcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIH0sXG4gICAgICAgIHsgdHlwZTogQXBwbGljYXRpb25Jbml0U3RhdHVzLCB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIEFwcGxpY2F0aW9uUmVmO1xufSgpKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7P30gbGlzdFxuICogQHBhcmFtIHs/fSBlbFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlKGxpc3QsIGVsKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5kZXggPSBsaXN0LmluZGV4T2YoZWwpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIFB1YmxpYyBBUEkgZm9yIFpvbmVcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYFJlbmRlcmVyVHlwZTJgIChhbmQgYFJlbmRlcmVyMmApIGluc3RlYWQuXG4gKi9cbnZhciBSZW5kZXJDb21wb25lbnRUeXBlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbmRlckNvbXBvbmVudFR5cGUoaWQsIHRlbXBsYXRlVXJsLCBzbG90Q291bnQsIGVuY2Fwc3VsYXRpb24sIHN0eWxlcywgYW5pbWF0aW9ucykge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMudGVtcGxhdGVVcmwgPSB0ZW1wbGF0ZVVybDtcbiAgICAgICAgdGhpcy5zbG90Q291bnQgPSBzbG90Q291bnQ7XG4gICAgICAgIHRoaXMuZW5jYXBzdWxhdGlvbiA9IGVuY2Fwc3VsYXRpb247XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xuICAgIH1cbiAgICByZXR1cm4gUmVuZGVyQ29tcG9uZW50VHlwZTtcbn0oKSk7XG4vKipcbiAqIEBkZXByZWNhdGVkIERlYnVnIGluZm8gaXMgaGFuZGVsZWQgaW50ZXJuYWxseSBpbiB0aGUgdmlldyBlbmdpbmUgbm93LlxuICogQGFic3RyYWN0XG4gKi9cbnZhciBSZW5kZXJEZWJ1Z0luZm8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVuZGVyRGVidWdJbmZvKCkge1xuICAgIH1cbiAgICByZXR1cm4gUmVuZGVyRGVidWdJbmZvO1xufSgpKTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgUmVuZGVyZXIyYCBpbnN0ZWFkLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgUmVuZGVyZXIyYCBpbnN0ZWFkLlxuICogQGFic3RyYWN0XG4gKi9cbnZhciBSZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJlcigpIHtcbiAgICB9XG4gICAgcmV0dXJuIFJlbmRlcmVyO1xufSgpKTtcbnZhciBSZW5kZXJlcjJJbnRlcmNlcHRvciA9IG5ldyBJbmplY3Rpb25Ub2tlbignUmVuZGVyZXIySW50ZXJjZXB0b3InKTtcbi8qKlxuICogSW5qZWN0YWJsZSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgYSBsb3ctbGV2ZWwgaW50ZXJmYWNlIGZvciBtb2RpZnlpbmcgdGhlIFVJLlxuICpcbiAqIFVzZSB0aGlzIHNlcnZpY2UgdG8gYnlwYXNzIEFuZ3VsYXIncyB0ZW1wbGF0aW5nIGFuZCBtYWtlIGN1c3RvbSBVSSBjaGFuZ2VzIHRoYXQgY2FuJ3QgYmVcbiAqIGV4cHJlc3NlZCBkZWNsYXJhdGl2ZWx5LiBGb3IgZXhhbXBsZSBpZiB5b3UgbmVlZCB0byBzZXQgYSBwcm9wZXJ0eSBvciBhbiBhdHRyaWJ1dGUgd2hvc2UgbmFtZSBpc1xuICogbm90IHN0YXRpY2FsbHkga25vd24sIHVzZSB7XFxAbGluayBSZW5kZXJlciNzZXRFbGVtZW50UHJvcGVydHkgc2V0RWxlbWVudFByb3BlcnR5fSBvclxuICoge1xcQGxpbmsgUmVuZGVyZXIjc2V0RWxlbWVudEF0dHJpYnV0ZSBzZXRFbGVtZW50QXR0cmlidXRlfSByZXNwZWN0aXZlbHkuXG4gKlxuICogSWYgeW91IGFyZSBpbXBsZW1lbnRpbmcgYSBjdXN0b20gcmVuZGVyZXIsIHlvdSBtdXN0IGltcGxlbWVudCB0aGlzIGludGVyZmFjZS5cbiAqXG4gKiBUaGUgZGVmYXVsdCBSZW5kZXJlciBpbXBsZW1lbnRhdGlvbiBpcyBgRG9tUmVuZGVyZXJgLiBBbHNvIGF2YWlsYWJsZSBpcyBgV2ViV29ya2VyUmVuZGVyZXJgLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgUmVuZGVyZXJGYWN0b3J5MmAgaW5zdGVhZC5cbiAqIEBhYnN0cmFjdFxuICovXG52YXIgUm9vdFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJvb3RSZW5kZXJlcigpIHtcbiAgICB9XG4gICAgcmV0dXJuIFJvb3RSZW5kZXJlcjtcbn0oKSk7XG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIFJlbmRlcmVyRmFjdG9yeTIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVuZGVyZXJGYWN0b3J5MigpIHtcbiAgICB9XG4gICAgcmV0dXJuIFJlbmRlcmVyRmFjdG9yeTI7XG59KCkpO1xuLyoqIEBlbnVtIHtudW1iZXJ9ICovXG52YXIgUmVuZGVyZXJTdHlsZUZsYWdzMiA9IHtcbiAgICBJbXBvcnRhbnQ6IDEsXG4gICAgRGFzaENhc2U6IDIsXG59O1xuUmVuZGVyZXJTdHlsZUZsYWdzMltSZW5kZXJlclN0eWxlRmxhZ3MyLkltcG9ydGFudF0gPSBcIkltcG9ydGFudFwiO1xuUmVuZGVyZXJTdHlsZUZsYWdzMltSZW5kZXJlclN0eWxlRmxhZ3MyLkRhc2hDYXNlXSA9IFwiRGFzaENhc2VcIjtcbi8qKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIFJlbmRlcmVyMiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJlcjIoKSB7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJlcjI7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBQdWJsaWMgQVBJIGZvciByZW5kZXJcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIGEgbmF0aXZlIGVsZW1lbnQgaW5zaWRlIG9mIGEgVmlldy5cbiAqXG4gKiBBbiBgRWxlbWVudFJlZmAgaXMgYmFja2VkIGJ5IGEgcmVuZGVyLXNwZWNpZmljIGVsZW1lbnQuIEluIHRoZSBicm93c2VyLCB0aGlzIGlzIHVzdWFsbHkgYSBET01cbiAqIGVsZW1lbnQuXG4gKlxuICogXFxAc2VjdXJpdHkgUGVybWl0dGluZyBkaXJlY3QgYWNjZXNzIHRvIHRoZSBET00gY2FuIG1ha2UgeW91ciBhcHBsaWNhdGlvbiBtb3JlIHZ1bG5lcmFibGUgdG9cbiAqIFhTUyBhdHRhY2tzLiBDYXJlZnVsbHkgcmV2aWV3IGFueSB1c2Ugb2YgYEVsZW1lbnRSZWZgIGluIHlvdXIgY29kZS4gRm9yIG1vcmUgZGV0YWlsLCBzZWUgdGhlXG4gKiBbU2VjdXJpdHkgR3VpZGVdKGh0dHA6Ly9nLmNvL25nL3NlY3VyaXR5KS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEVsZW1lbnRSZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRWxlbWVudFJlZihuYXRpdmVFbGVtZW50KSB7XG4gICAgICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IG5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBFbGVtZW50UmVmO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBVc2VkIHRvIGxvYWQgbmcgbW9kdWxlIGZhY3Rvcmllcy5cbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBOZ01vZHVsZUZhY3RvcnlMb2FkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmdNb2R1bGVGYWN0b3J5TG9hZGVyKCkge1xuICAgIH1cbiAgICByZXR1cm4gTmdNb2R1bGVGYWN0b3J5TG9hZGVyO1xufSgpKTtcbnZhciBtb2R1bGVGYWN0b3JpZXMgPSBuZXcgTWFwKCk7XG4vKipcbiAqIFJlZ2lzdGVycyBhIGxvYWRlZCBtb2R1bGUuIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tIGdlbmVyYXRlZCBOZ01vZHVsZUZhY3RvcnkgY29kZS5cbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHBhcmFtIHs/fSBpZFxuICogQHBhcmFtIHs/fSBmYWN0b3J5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZWdpc3Rlck1vZHVsZUZhY3RvcnkoaWQsIGZhY3RvcnkpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBleGlzdGluZyA9IG1vZHVsZUZhY3Rvcmllcy5nZXQoaWQpO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGUgbW9kdWxlIHJlZ2lzdGVyZWQgZm9yIFwiICsgaWQgKyBcIiAtIFwiICsgZXhpc3RpbmcubW9kdWxlVHlwZS5uYW1lICsgXCIgdnMgXCIgKyBmYWN0b3J5Lm1vZHVsZVR5cGUubmFtZSk7XG4gICAgfVxuICAgIG1vZHVsZUZhY3Rvcmllcy5zZXQoaWQsIGZhY3RvcnkpO1xufVxuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5cbi8qKlxuICogUmV0dXJucyB0aGUgTmdNb2R1bGVGYWN0b3J5IHdpdGggdGhlIGdpdmVuIGlkLCBpZiBpdCBleGlzdHMgYW5kIGhhcyBiZWVuIGxvYWRlZC5cbiAqIEZhY3RvcmllcyBmb3IgbW9kdWxlcyB0aGF0IGRvIG5vdCBzcGVjaWZ5IGFuIGBpZGAgY2Fubm90IGJlIHJldHJpZXZlZC4gVGhyb3dzIGlmIHRoZSBtb2R1bGVcbiAqIGNhbm5vdCBiZSBmb3VuZC5cbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHBhcmFtIHs/fSBpZFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlRmFjdG9yeShpZCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGZhY3RvcnkgPSBtb2R1bGVGYWN0b3JpZXMuZ2V0KGlkKTtcbiAgICBpZiAoIWZhY3RvcnkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1vZHVsZSB3aXRoIElEIFwiICsgaWQgKyBcIiBsb2FkZWRcIik7XG4gICAgcmV0dXJuIGZhY3Rvcnk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQW4gdW5tb2RpZmlhYmxlIGxpc3Qgb2YgaXRlbXMgdGhhdCBBbmd1bGFyIGtlZXBzIHVwIHRvIGRhdGUgd2hlbiB0aGUgc3RhdGVcbiAqIG9mIHRoZSBhcHBsaWNhdGlvbiBjaGFuZ2VzLlxuICpcbiAqIFRoZSB0eXBlIG9mIG9iamVjdCB0aGF0IHtcXEBsaW5rIFZpZXdDaGlsZHJlbn0sIHtcXEBsaW5rIENvbnRlbnRDaGlsZHJlbn0sIGFuZCB7XFxAbGluayBRdWVyeUxpc3R9XG4gKiBwcm92aWRlLlxuICpcbiAqIEltcGxlbWVudHMgYW4gaXRlcmFibGUgaW50ZXJmYWNlLCB0aGVyZWZvcmUgaXQgY2FuIGJlIHVzZWQgaW4gYm90aCBFUzZcbiAqIGphdmFzY3JpcHQgYGZvciAodmFyIGkgb2YgaXRlbXMpYCBsb29wcyBhcyB3ZWxsIGFzIGluIEFuZ3VsYXIgdGVtcGxhdGVzIHdpdGhcbiAqIGAqbmdGb3I9XCJsZXQgaSBvZiBteUxpc3RcImAuXG4gKlxuICogQ2hhbmdlcyBjYW4gYmUgb2JzZXJ2ZWQgYnkgc3Vic2NyaWJpbmcgdG8gdGhlIGNoYW5nZXMgYE9ic2VydmFibGVgLlxuICpcbiAqIE5PVEU6IEluIHRoZSBmdXR1cmUgdGhpcyBjbGFzcyB3aWxsIGltcGxlbWVudCBhbiBgT2JzZXJ2YWJsZWAgaW50ZXJmYWNlLlxuICpcbiAqICMjIyBFeGFtcGxlIChbbGl2ZSBkZW1vXShodHRwOi8vcGxua3IuY28vZWRpdC9SWDhzSm5RWWw5Rld1U0NXbWU1ej9wPXByZXZpZXcpKVxuICogYGBgdHlwZXNjcmlwdFxuICogXFxAQ29tcG9uZW50KHsuLi59KVxuICogY2xhc3MgQ29udGFpbmVyIHtcbiAqICAgXFxAVmlld0NoaWxkcmVuKEl0ZW0pIGl0ZW1zOlF1ZXJ5TGlzdDxJdGVtPjtcbiAqIH1cbiAqIGBgYFxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBRdWVyeUxpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVlcnlMaXN0KCkge1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVzdWx0cyA9IFtdO1xuICAgICAgICB0aGlzLmNoYW5nZXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWVyeUxpc3QucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXN1bHRzLmxlbmd0aDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5TGlzdC5wcm90b3R5cGUsIFwiZmlyc3RcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVzdWx0c1swXTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5TGlzdC5wcm90b3R5cGUsIFwibGFzdFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXN1bHRzW3RoaXMubGVuZ3RoIC0gMV07IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5tYXBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L21hcClcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkubWFwXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9tYXApXG4gICAgICogQHRlbXBsYXRlIFVcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBRdWVyeUxpc3QucHJvdG90eXBlLm1hcCA9IC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5tYXBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L21hcClcbiAgICAgKiBAdGVtcGxhdGUgVVxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gdGhpcy5fcmVzdWx0cy5tYXAoZm4pOyB9O1xuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5maWx0ZXJdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZpbHRlcilcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuZmlsdGVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maWx0ZXIpXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS5maWx0ZXIgPSAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuZmlsdGVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maWx0ZXIpXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRzLmZpbHRlcihmbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuZmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZClcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuZmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZClcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBRdWVyeUxpc3QucHJvdG90eXBlLmZpbmQgPSAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuZmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZClcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuZmluZChmbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkucmVkdWNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9yZWR1Y2UpXG4gICAgICovXG4gICAgLyoqXG4gICAgICogU2VlXG4gICAgICogW0FycmF5LnJlZHVjZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcmVkdWNlKVxuICAgICAqIEB0ZW1wbGF0ZSBVXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEBwYXJhbSB7P30gaW5pdFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS5yZWR1Y2UgPSAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkucmVkdWNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9yZWR1Y2UpXG4gICAgICogQHRlbXBsYXRlIFVcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHBhcmFtIHs/fSBpbml0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4sIGluaXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMucmVkdWNlKGZuLCBpbml0KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5mb3JFYWNoXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mb3JFYWNoKVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5mb3JFYWNoXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mb3JFYWNoKVxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFF1ZXJ5TGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5mb3JFYWNoXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9mb3JFYWNoKVxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikgeyB0aGlzLl9yZXN1bHRzLmZvckVhY2goZm4pOyB9O1xuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5zb21lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb21lKVxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5zb21lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb21lKVxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFF1ZXJ5TGlzdC5wcm90b3R5cGUuc29tZSA9IC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5zb21lXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9zb21lKVxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0cy5zb21lKGZuKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUXVlcnlMaXN0LnByb3RvdHlwZS50b0FycmF5ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXN1bHRzLnNsaWNlKCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBRdWVyeUxpc3QucHJvdG90eXBlW2dldFN5bWJvbEl0ZXJhdG9yKCldID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcy5fcmVzdWx0cykpW2dldFN5bWJvbEl0ZXJhdG9yKCldKCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBRdWVyeUxpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9yZXN1bHRzLnRvU3RyaW5nKCk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFF1ZXJ5TGlzdC5wcm90b3R5cGUucmVzZXQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICB0aGlzLl9yZXN1bHRzID0gZmxhdHRlbihyZXMpO1xuICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcykpLmRpcnR5ID0gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFF1ZXJ5TGlzdC5wcm90b3R5cGUubm90aWZ5T25DaGFuZ2VzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7ICgvKiogQHR5cGUgez99ICovICh0aGlzLmNoYW5nZXMpKS5lbWl0KHRoaXMpOyB9O1xuICAgIC8qKiBpbnRlcm5hbCAqL1xuICAgIC8qKlxuICAgICAqIGludGVybmFsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBRdWVyeUxpc3QucHJvdG90eXBlLnNldERpcnR5ID0gLyoqXG4gICAgICogaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKS5kaXJ0eSA9IHRydWU7IH07XG4gICAgLyoqIGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFF1ZXJ5TGlzdC5wcm90b3R5cGUuZGVzdHJveSA9IC8qKlxuICAgICAqIGludGVybmFsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICgvKiogQHR5cGUgez99ICovICh0aGlzLmNoYW5nZXMpKS5jb21wbGV0ZSgpO1xuICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAodGhpcy5jaGFuZ2VzKSkudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBRdWVyeUxpc3Q7XG59KCkpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHs/fSBsaXN0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBmbGF0dGVuKGxpc3QpIHtcbiAgICByZXR1cm4gbGlzdC5yZWR1Y2UoZnVuY3Rpb24gKGZsYXQsIGl0ZW0pIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmxhdEl0ZW0gPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gZmxhdHRlbihpdGVtKSA6IGl0ZW07XG4gICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHs/fSAqLyAoZmxhdCkpLmNvbmNhdChmbGF0SXRlbSk7XG4gICAgfSwgW10pO1xufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgX1NFUEFSQVRPUiA9ICcjJztcbnZhciBGQUNUT1JZX0NMQVNTX1NVRkZJWCA9ICdOZ0ZhY3RvcnknO1xuLyoqXG4gKiBDb25maWd1cmF0aW9uIGZvciBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyLlxuICogdG9rZW4uXG4gKlxuICogXFxAZXhwZXJpbWVudGFsXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXJDb25maWcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3lzdGVtSnNOZ01vZHVsZUxvYWRlckNvbmZpZygpIHtcbiAgICB9XG4gICAgcmV0dXJuIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXJDb25maWc7XG59KCkpO1xudmFyIERFRkFVTFRfQ09ORklHID0ge1xuICAgIGZhY3RvcnlQYXRoUHJlZml4OiAnJyxcbiAgICBmYWN0b3J5UGF0aFN1ZmZpeDogJy5uZ2ZhY3RvcnknLFxufTtcbi8qKlxuICogTmdNb2R1bGVGYWN0b3J5TG9hZGVyIHRoYXQgdXNlcyBTeXN0ZW1KUyB0byBsb2FkIE5nTW9kdWxlRmFjdG9yeVxuICogXFxAZXhwZXJpbWVudGFsXG4gKi9cbnZhciBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXIoX2NvbXBpbGVyLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5fY29tcGlsZXIgPSBfY29tcGlsZXI7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZyB8fCBERUZBVUxUX0NPTkZJRztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXRoXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyLnByb3RvdHlwZS5sb2FkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXRoXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvZmZsaW5lTW9kZSA9IHRoaXMuX2NvbXBpbGVyIGluc3RhbmNlb2YgQ29tcGlsZXI7XG4gICAgICAgIHJldHVybiBvZmZsaW5lTW9kZSA/IHRoaXMubG9hZEZhY3RvcnkocGF0aCkgOiB0aGlzLmxvYWRBbmRDb21waWxlKHBhdGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXRoXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyLnByb3RvdHlwZS5sb2FkQW5kQ29tcGlsZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGF0aFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gcGF0aC5zcGxpdChfU0VQQVJBVE9SKSwgbW9kdWxlID0gX2FbMF0sIGV4cG9ydE5hbWUgPSBfYVsxXTtcbiAgICAgICAgaWYgKGV4cG9ydE5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZXhwb3J0TmFtZSA9ICdkZWZhdWx0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3lzdGVtLmltcG9ydChtb2R1bGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobW9kdWxlKSB7IHJldHVybiBtb2R1bGVbZXhwb3J0TmFtZV07IH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gY2hlY2tOb3RFbXB0eSh0eXBlLCBtb2R1bGUsIGV4cG9ydE5hbWUpOyB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIF90aGlzLl9jb21waWxlci5jb21waWxlTW9kdWxlQXN5bmModHlwZSk7IH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXRoXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyLnByb3RvdHlwZS5sb2FkRmFjdG9yeSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGF0aFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIF9hID0gcGF0aC5zcGxpdChfU0VQQVJBVE9SKSwgbW9kdWxlID0gX2FbMF0sIGV4cG9ydE5hbWUgPSBfYVsxXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmFjdG9yeUNsYXNzU3VmZml4ID0gRkFDVE9SWV9DTEFTU19TVUZGSVg7XG4gICAgICAgIGlmIChleHBvcnROYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4cG9ydE5hbWUgPSAnZGVmYXVsdCc7XG4gICAgICAgICAgICBmYWN0b3J5Q2xhc3NTdWZmaXggPSAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3lzdGVtLmltcG9ydCh0aGlzLl9jb25maWcuZmFjdG9yeVBhdGhQcmVmaXggKyBtb2R1bGUgKyB0aGlzLl9jb25maWcuZmFjdG9yeVBhdGhTdWZmaXgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobW9kdWxlKSB7IHJldHVybiBtb2R1bGVbZXhwb3J0TmFtZSArIGZhY3RvcnlDbGFzc1N1ZmZpeF07IH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZmFjdG9yeSkgeyByZXR1cm4gY2hlY2tOb3RFbXB0eShmYWN0b3J5LCBtb2R1bGUsIGV4cG9ydE5hbWUpOyB9KTtcbiAgICB9O1xuICAgIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXIuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IENvbXBpbGVyLCB9LFxuICAgICAgICB7IHR5cGU6IFN5c3RlbUpzTmdNb2R1bGVMb2FkZXJDb25maWcsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXI7XG59KCkpO1xuLyoqXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcGFyYW0gez99IG1vZHVsZVBhdGhcbiAqIEBwYXJhbSB7P30gZXhwb3J0TmFtZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tOb3RFbXB0eSh2YWx1ZSwgbW9kdWxlUGF0aCwgZXhwb3J0TmFtZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgJ1wiICsgZXhwb3J0TmFtZSArIFwiJyBpbiAnXCIgKyBtb2R1bGVQYXRoICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhbiBFbWJlZGRlZCBUZW1wbGF0ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIEVtYmVkZGVkIFZpZXdzLlxuICpcbiAqIFlvdSBjYW4gYWNjZXNzIGEgYFRlbXBsYXRlUmVmYCwgaW4gdHdvIHdheXMuIFZpYSBhIGRpcmVjdGl2ZSBwbGFjZWQgb24gYSBgPG5nLXRlbXBsYXRlPmAgZWxlbWVudFxuICogKG9yIGRpcmVjdGl2ZSBwcmVmaXhlZCB3aXRoIGAqYCkgYW5kIGhhdmUgdGhlIGBUZW1wbGF0ZVJlZmAgZm9yIHRoaXMgRW1iZWRkZWQgVmlldyBpbmplY3RlZCBpbnRvXG4gKiB0aGUgY29uc3RydWN0b3Igb2YgdGhlIGRpcmVjdGl2ZSB1c2luZyB0aGUgYFRlbXBsYXRlUmVmYCBUb2tlbi4gQWx0ZXJuYXRpdmVseSB5b3UgY2FuIHF1ZXJ5IGZvclxuICogdGhlIGBUZW1wbGF0ZVJlZmAgZnJvbSBhIENvbXBvbmVudCBvciBhIERpcmVjdGl2ZSB2aWEge1xcQGxpbmsgUXVlcnl9LlxuICpcbiAqIFRvIGluc3RhbnRpYXRlIEVtYmVkZGVkIFZpZXdzIGJhc2VkIG9uIGEgVGVtcGxhdGUsIHVzZSB7XFxAbGluayBWaWV3Q29udGFpbmVyUmVmI1xuICogY3JlYXRlRW1iZWRkZWRWaWV3fSwgd2hpY2ggd2lsbCBjcmVhdGUgdGhlIFZpZXcgYW5kIGF0dGFjaCBpdCB0byB0aGUgVmlldyBDb250YWluZXIuXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgVGVtcGxhdGVSZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGVtcGxhdGVSZWYoKSB7XG4gICAgfVxuICAgIHJldHVybiBUZW1wbGF0ZVJlZjtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbnRhaW5lciB3aGVyZSBvbmUgb3IgbW9yZSBWaWV3cyBjYW4gYmUgYXR0YWNoZWQuXG4gKlxuICogVGhlIGNvbnRhaW5lciBjYW4gY29udGFpbiB0d28ga2luZHMgb2YgVmlld3MuIEhvc3QgVmlld3MsIGNyZWF0ZWQgYnkgaW5zdGFudGlhdGluZyBhXG4gKiB7XFxAbGluayBDb21wb25lbnR9IHZpYSB7XFxAbGluayAjY3JlYXRlQ29tcG9uZW50fSwgYW5kIEVtYmVkZGVkIFZpZXdzLCBjcmVhdGVkIGJ5IGluc3RhbnRpYXRpbmcgYW5cbiAqIHtcXEBsaW5rIFRlbXBsYXRlUmVmIEVtYmVkZGVkIFRlbXBsYXRlfSB2aWEge1xcQGxpbmsgI2NyZWF0ZUVtYmVkZGVkVmlld30uXG4gKlxuICogVGhlIGxvY2F0aW9uIG9mIHRoZSBWaWV3IENvbnRhaW5lciB3aXRoaW4gdGhlIGNvbnRhaW5pbmcgVmlldyBpcyBzcGVjaWZpZWQgYnkgdGhlIEFuY2hvclxuICogYGVsZW1lbnRgLiBFYWNoIFZpZXcgQ29udGFpbmVyIGNhbiBoYXZlIG9ubHkgb25lIEFuY2hvciBFbGVtZW50IGFuZCBlYWNoIEFuY2hvciBFbGVtZW50IGNhbiBvbmx5XG4gKiBoYXZlIGEgc2luZ2xlIFZpZXcgQ29udGFpbmVyLlxuICpcbiAqIFJvb3QgZWxlbWVudHMgb2YgVmlld3MgYXR0YWNoZWQgdG8gdGhpcyBjb250YWluZXIgYmVjb21lIHNpYmxpbmdzIG9mIHRoZSBBbmNob3IgRWxlbWVudCBpblxuICogdGhlIFJlbmRlcmVkIFZpZXcuXG4gKlxuICogVG8gYWNjZXNzIGEgYFZpZXdDb250YWluZXJSZWZgIG9mIGFuIEVsZW1lbnQsIHlvdSBjYW4gZWl0aGVyIHBsYWNlIGEge1xcQGxpbmsgRGlyZWN0aXZlfSBpbmplY3RlZFxuICogd2l0aCBgVmlld0NvbnRhaW5lclJlZmAgb24gdGhlIEVsZW1lbnQsIG9yIHlvdSBvYnRhaW4gaXQgdmlhIGEge1xcQGxpbmsgVmlld0NoaWxkfSBxdWVyeS5cbiAqIFxcQHN0YWJsZVxuICogQGFic3RyYWN0XG4gKi9cbnZhciBWaWV3Q29udGFpbmVyUmVmID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpZXdDb250YWluZXJSZWYoKSB7XG4gICAgfVxuICAgIHJldHVybiBWaWV3Q29udGFpbmVyUmVmO1xufSgpKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgQ2hhbmdlRGV0ZWN0b3JSZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2hhbmdlRGV0ZWN0b3JSZWYoKSB7XG4gICAgfVxuICAgIHJldHVybiBDaGFuZ2VEZXRlY3RvclJlZjtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogXFxAc3RhYmxlXG4gKiBAYWJzdHJhY3RcbiAqL1xudmFyIFZpZXdSZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFZpZXdSZWYsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlld1JlZigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVmlld1JlZjtcbn0oQ2hhbmdlRGV0ZWN0b3JSZWYpKTtcbi8qKlxuICogUmVwcmVzZW50cyBhbiBBbmd1bGFyIFZpZXcuXG4gKlxuICogPCEtLSBUT0RPOiBtb3ZlIHRoZSBuZXh0IHR3byBwYXJhZ3JhcGhzIHRvIHRoZSBkZXYgZ3VpZGUgLS0+XG4gKiBBIFZpZXcgaXMgYSBmdW5kYW1lbnRhbCBidWlsZGluZyBibG9jayBvZiB0aGUgYXBwbGljYXRpb24gVUkuIEl0IGlzIHRoZSBzbWFsbGVzdCBncm91cGluZyBvZlxuICogRWxlbWVudHMgd2hpY2ggYXJlIGNyZWF0ZWQgYW5kIGRlc3Ryb3llZCB0b2dldGhlci5cbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGVsZW1lbnRzIGluIGEgVmlldyBjYW4gY2hhbmdlLCBidXQgdGhlIHN0cnVjdHVyZSAobnVtYmVyIGFuZCBvcmRlcikgb2YgZWxlbWVudHMgaW5cbiAqIGEgVmlldyBjYW5ub3QuIENoYW5naW5nIHRoZSBzdHJ1Y3R1cmUgb2YgRWxlbWVudHMgY2FuIG9ubHkgYmUgZG9uZSBieSBpbnNlcnRpbmcsIG1vdmluZyBvclxuICogcmVtb3ZpbmcgbmVzdGVkIFZpZXdzIHZpYSBhIHtcXEBsaW5rIFZpZXdDb250YWluZXJSZWZ9LiBFYWNoIFZpZXcgY2FuIGNvbnRhaW4gbWFueSBWaWV3IENvbnRhaW5lcnMuXG4gKiA8IS0tIC9UT0RPIC0tPlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogR2l2ZW4gdGhpcyB0ZW1wbGF0ZS4uLlxuICpcbiAqIGBgYFxuICogQ291bnQ6IHt7aXRlbXMubGVuZ3RofX1cbiAqIDx1bD5cbiAqICAgPGxpICpuZ0Zvcj1cImxldCAgaXRlbSBvZiBpdGVtc1wiPnt7aXRlbX19PC9saT5cbiAqIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBXZSBoYXZlIHR3byB7XFxAbGluayBUZW1wbGF0ZVJlZn1zOlxuICpcbiAqIE91dGVyIHtcXEBsaW5rIFRlbXBsYXRlUmVmfTpcbiAqIGBgYFxuICogQ291bnQ6IHt7aXRlbXMubGVuZ3RofX1cbiAqIDx1bD5cbiAqICAgPG5nLXRlbXBsYXRlIG5nRm9yIGxldC1pdGVtIFtuZ0Zvck9mXT1cIml0ZW1zXCI+PC9uZy10ZW1wbGF0ZT5cbiAqIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBJbm5lciB7XFxAbGluayBUZW1wbGF0ZVJlZn06XG4gKiBgYGBcbiAqICAgPGxpPnt7aXRlbX19PC9saT5cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSBpcyBicm9rZW4gZG93biBpbnRvIHR3byBzZXBhcmF0ZSB7XFxAbGluayBUZW1wbGF0ZVJlZn1zLlxuICpcbiAqIFRoZSBvdXRlci9pbm5lciB7XFxAbGluayBUZW1wbGF0ZVJlZn1zIGFyZSB0aGVuIGFzc2VtYmxlZCBpbnRvIHZpZXdzIGxpa2Ugc286XG4gKlxuICogYGBgXG4gKiA8IS0tIFZpZXdSZWY6IG91dGVyLTAgLS0+XG4gKiBDb3VudDogMlxuICogPHVsPlxuICogICA8bmctdGVtcGxhdGUgdmlldy1jb250YWluZXItcmVmPjwvbmctdGVtcGxhdGU+XG4gKiAgIDwhLS0gVmlld1JlZjogaW5uZXItMSAtLT48bGk+Zmlyc3Q8L2xpPjwhLS0gL1ZpZXdSZWY6IGlubmVyLTEgLS0+XG4gKiAgIDwhLS0gVmlld1JlZjogaW5uZXItMiAtLT48bGk+c2Vjb25kPC9saT48IS0tIC9WaWV3UmVmOiBpbm5lci0yIC0tPlxuICogPC91bD5cbiAqIDwhLS0gL1ZpZXdSZWY6IG91dGVyLTAgLS0+XG4gKiBgYGBcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQGFic3RyYWN0XG4gKi9cbnZhciBFbWJlZGRlZFZpZXdSZWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVtYmVkZGVkVmlld1JlZiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbWJlZGRlZFZpZXdSZWYoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEVtYmVkZGVkVmlld1JlZjtcbn0oVmlld1JlZikpO1xuLyoqXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gUHVibGljIEFQSSBmb3IgY29tcGlsZXJcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIEV2ZW50TGlzdGVuZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRMaXN0ZW5lcihuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIHJldHVybiBFdmVudExpc3RlbmVyO1xufSgpKTtcbi8qKlxuICogXFxAZXhwZXJpbWVudGFsIEFsbCBkZWJ1Z2dpbmcgYXBpcyBhcmUgY3VycmVudGx5IGV4cGVyaW1lbnRhbC5cbiAqL1xudmFyIERlYnVnTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJ1Z05vZGUobmF0aXZlTm9kZSwgcGFyZW50LCBfZGVidWdDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX2RlYnVnQ29udGV4dCA9IF9kZWJ1Z0NvbnRleHQ7XG4gICAgICAgIHRoaXMubmF0aXZlTm9kZSA9IG5hdGl2ZU5vZGU7XG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50IGluc3RhbmNlb2YgRGVidWdFbGVtZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQuYWRkQ2hpbGQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnTm9kZS5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVidWdDb250ZXh0LmluamVjdG9yOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdOb2RlLnByb3RvdHlwZSwgXCJjb21wb25lbnRJbnN0YW5jZVwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWJ1Z0NvbnRleHQuY29tcG9uZW50OyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdOb2RlLnByb3RvdHlwZSwgXCJjb250ZXh0XCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlYnVnQ29udGV4dC5jb250ZXh0OyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdOb2RlLnByb3RvdHlwZSwgXCJyZWZlcmVuY2VzXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlYnVnQ29udGV4dC5yZWZlcmVuY2VzOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdOb2RlLnByb3RvdHlwZSwgXCJwcm92aWRlclRva2Vuc1wiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWJ1Z0NvbnRleHQucHJvdmlkZXJUb2tlbnM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBEZWJ1Z05vZGU7XG59KCkpO1xuLyoqXG4gKiBcXEBleHBlcmltZW50YWwgQWxsIGRlYnVnZ2luZyBhcGlzIGFyZSBjdXJyZW50bHkgZXhwZXJpbWVudGFsLlxuICovXG52YXIgRGVidWdFbGVtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEZWJ1Z0VsZW1lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGVidWdFbGVtZW50KG5hdGl2ZU5vZGUsIHBhcmVudCwgX2RlYnVnQ29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBuYXRpdmVOb2RlLCBwYXJlbnQsIF9kZWJ1Z0NvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgX3RoaXMuYXR0cmlidXRlcyA9IHt9O1xuICAgICAgICBfdGhpcy5jbGFzc2VzID0ge307XG4gICAgICAgIF90aGlzLnN0eWxlcyA9IHt9O1xuICAgICAgICBfdGhpcy5jaGlsZE5vZGVzID0gW107XG4gICAgICAgIF90aGlzLm5hdGl2ZUVsZW1lbnQgPSBuYXRpdmVOb2RlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2hpbGRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnRWxlbWVudC5wcm90b3R5cGUuYWRkQ2hpbGQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkTm9kZXMucHVzaChjaGlsZCk7XG4gICAgICAgICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoaWxkSW5kZXggPSB0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihjaGlsZCk7XG4gICAgICAgIGlmIChjaGlsZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY2hpbGROb2Rlcy5zcGxpY2UoY2hpbGRJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2hpbGRcbiAgICAgKiBAcGFyYW0gez99IG5ld0NoaWxkcmVuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLmluc2VydENoaWxkcmVuQWZ0ZXIgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNoaWxkXG4gICAgICogQHBhcmFtIHs/fSBuZXdDaGlsZHJlblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNoaWxkLCBuZXdDaGlsZHJlbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzaWJsaW5nSW5kZXggPSB0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihjaGlsZCk7XG4gICAgICAgIGlmIChzaWJsaW5nSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmNoaWxkTm9kZXMpLnNwbGljZS5hcHBseShfYSwgW3NpYmxpbmdJbmRleCArIDEsIDBdLmNvbmNhdChuZXdDaGlsZHJlbikpO1xuICAgICAgICAgICAgbmV3Q2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIGlmIChjLnBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjLnBhcmVudC5yZW1vdmVDaGlsZChjKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYy5wYXJlbnQgPSBfdGhpcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVmQ2hpbGRcbiAgICAgKiBAcGFyYW0gez99IG5ld0NoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVmQ2hpbGRcbiAgICAgKiBAcGFyYW0gez99IG5ld0NoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVmQ2hpbGQsIG5ld0NoaWxkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlZkluZGV4ID0gdGhpcy5jaGlsZE5vZGVzLmluZGV4T2YocmVmQ2hpbGQpO1xuICAgICAgICBpZiAocmVmSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZC5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBuZXdDaGlsZC5wYXJlbnQucmVtb3ZlQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuY2hpbGROb2Rlcy5zcGxpY2UocmVmSW5kZXgsIDAsIG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcmVkaWNhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnRWxlbWVudC5wcm90b3R5cGUucXVlcnkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByZWRpY2F0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXN1bHRzID0gdGhpcy5xdWVyeUFsbChwcmVkaWNhdGUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0c1swXSB8fCBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwcmVkaWNhdGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnRWxlbWVudC5wcm90b3R5cGUucXVlcnlBbGwgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByZWRpY2F0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYXRjaGVzID0gW107XG4gICAgICAgIF9xdWVyeUVsZW1lbnRDaGlsZHJlbih0aGlzLCBwcmVkaWNhdGUsIG1hdGNoZXMpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcHJlZGljYXRlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLnF1ZXJ5QWxsTm9kZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHByZWRpY2F0ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYXRjaGVzID0gW107XG4gICAgICAgIF9xdWVyeU5vZGVDaGlsZHJlbih0aGlzLCBwcmVkaWNhdGUsIG1hdGNoZXMpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWJ1Z0VsZW1lbnQucHJvdG90eXBlLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICh0aGlzLmNoaWxkTm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlIGluc3RhbmNlb2YgRGVidWdFbGVtZW50OyB9KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZXZlbnROYW1lXG4gICAgICogQHBhcmFtIHs/fSBldmVudE9ialxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVidWdFbGVtZW50LnByb3RvdHlwZS50cmlnZ2VyRXZlbnRIYW5kbGVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50T2JqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZXZlbnROYW1lLCBldmVudE9iaikge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyLm5hbWUgPT0gZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soZXZlbnRPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEZWJ1Z0VsZW1lbnQ7XG59KERlYnVnTm9kZSkpO1xuLyoqXG4gKiBcXEBleHBlcmltZW50YWxcbiAqIEBwYXJhbSB7P30gZGVidWdFbHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFzTmF0aXZlRWxlbWVudHMoZGVidWdFbHMpIHtcbiAgICByZXR1cm4gZGVidWdFbHMubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwubmF0aXZlRWxlbWVudDsgfSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZWxlbWVudFxuICogQHBhcmFtIHs/fSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7P30gbWF0Y2hlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX3F1ZXJ5RWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHByZWRpY2F0ZSwgbWF0Y2hlcykge1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRGVidWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3F1ZXJ5RWxlbWVudENoaWxkcmVuKG5vZGUsIHByZWRpY2F0ZSwgbWF0Y2hlcyk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBwYXJlbnROb2RlXG4gKiBAcGFyYW0gez99IHByZWRpY2F0ZVxuICogQHBhcmFtIHs/fSBtYXRjaGVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfcXVlcnlOb2RlQ2hpbGRyZW4ocGFyZW50Tm9kZSwgcHJlZGljYXRlLCBtYXRjaGVzKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgaW5zdGFuY2VvZiBEZWJ1Z0VsZW1lbnQpIHtcbiAgICAgICAgcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIERlYnVnRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIF9xdWVyeU5vZGVDaGlsZHJlbihub2RlLCBwcmVkaWNhdGUsIG1hdGNoZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyBOZWVkIHRvIGtlZXAgdGhlIG5vZGVzIGluIGEgZ2xvYmFsIE1hcCBzbyB0aGF0IG11bHRpcGxlIGFuZ3VsYXIgYXBwcyBhcmUgc3VwcG9ydGVkLlxudmFyIF9uYXRpdmVOb2RlVG9EZWJ1Z05vZGUgPSBuZXcgTWFwKCk7XG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICogQHBhcmFtIHs/fSBuYXRpdmVOb2RlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBnZXREZWJ1Z05vZGUobmF0aXZlTm9kZSkge1xuICAgIHJldHVybiBfbmF0aXZlTm9kZVRvRGVidWdOb2RlLmdldChuYXRpdmVOb2RlKSB8fCBudWxsO1xufVxuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5cbi8qKlxuICogQHBhcmFtIHs/fSBub2RlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbmRleERlYnVnTm9kZShub2RlKSB7XG4gICAgX25hdGl2ZU5vZGVUb0RlYnVnTm9kZS5zZXQobm9kZS5uYXRpdmVOb2RlLCBub2RlKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBub2RlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZW1vdmVEZWJ1Z05vZGVGcm9tSW5kZXgobm9kZSkge1xuICAgIF9uYXRpdmVOb2RlVG9EZWJ1Z05vZGUuZGVsZXRlKG5vZGUubmF0aXZlTm9kZSk7XG59XG4vKipcbiAqIEEgYm9vbGVhbi12YWx1ZWQgZnVuY3Rpb24gb3ZlciBhIHZhbHVlLCBwb3NzaWJseSBpbmNsdWRpbmcgY29udGV4dCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIHRoYXQgdmFsdWUncyBwb3NpdGlvbiBpbiBhbiBhcnJheS5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQWxsIGRlYnVnZ2luZyBhcGlzIGFyZSBjdXJyZW50bHkgZXhwZXJpbWVudGFsLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQHBhcmFtIHs/fSBhXG4gKiBAcGFyYW0gez99IGJcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRldk1vZGVFcXVhbChhLCBiKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXNMaXN0TGlrZUl0ZXJhYmxlQSA9IGlzTGlzdExpa2VJdGVyYWJsZShhKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc0xpc3RMaWtlSXRlcmFibGVCID0gaXNMaXN0TGlrZUl0ZXJhYmxlKGIpO1xuICAgIGlmIChpc0xpc3RMaWtlSXRlcmFibGVBICYmIGlzTGlzdExpa2VJdGVyYWJsZUIpIHtcbiAgICAgICAgcmV0dXJuIGFyZUl0ZXJhYmxlc0VxdWFsKGEsIGIsIGRldk1vZGVFcXVhbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc0FPYmplY3QgPSBhICYmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc0JPYmplY3QgPSBiICYmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdmdW5jdGlvbicpO1xuICAgICAgICBpZiAoIWlzTGlzdExpa2VJdGVyYWJsZUEgJiYgaXNBT2JqZWN0ICYmICFpc0xpc3RMaWtlSXRlcmFibGVCICYmIGlzQk9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9vc2VJZGVudGljYWwoYSwgYik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXN1bHQgb2YgYSB7XFxAbGluayBQaXBlfSB0cmFuc2Zvcm1hdGlvbiBoYXMgY2hhbmdlZCBldmVuIHRob3VnaCB0aGVcbiAqIHJlZmVyZW5jZVxuICogaGFzIG5vdCBjaGFuZ2VkLlxuICpcbiAqIFRoZSB3cmFwcGVkIHZhbHVlIHdpbGwgYmUgdW53cmFwcGVkIGJ5IGNoYW5nZSBkZXRlY3Rpb24sIGFuZCB0aGUgdW53cmFwcGVkIHZhbHVlIHdpbGwgYmUgc3RvcmVkLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBpZiAodGhpcy5fbGF0ZXN0VmFsdWUgPT09IHRoaXMuX2xhdGVzdFJldHVybmVkVmFsdWUpIHtcbiAqICAgIHJldHVybiB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlO1xuICogIH0gZWxzZSB7XG4gKiAgICB0aGlzLl9sYXRlc3RSZXR1cm5lZFZhbHVlID0gdGhpcy5fbGF0ZXN0VmFsdWU7XG4gKiAgICByZXR1cm4gV3JhcHBlZFZhbHVlLndyYXAodGhpcy5fbGF0ZXN0VmFsdWUpOyAvLyB0aGlzIHdpbGwgZm9yY2UgdXBkYXRlXG4gKiAgfVxuICogYGBgXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIFdyYXBwZWRWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXcmFwcGVkVmFsdWUod3JhcHBlZCkge1xuICAgICAgICB0aGlzLndyYXBwZWQgPSB3cmFwcGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBXcmFwcGVkVmFsdWUud3JhcCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IFdyYXBwZWRWYWx1ZSh2YWx1ZSk7IH07XG4gICAgcmV0dXJuIFdyYXBwZWRWYWx1ZTtcbn0oKSk7XG4vKipcbiAqIEhlbHBlciBjbGFzcyBmb3IgdW53cmFwcGluZyBXcmFwcGVkVmFsdWUgc1xuICovXG52YXIgVmFsdWVVbndyYXBwZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmFsdWVVbndyYXBwZXIoKSB7XG4gICAgICAgIHRoaXMuaGFzV3JhcHBlZFZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZhbHVlVW53cmFwcGVyLnByb3RvdHlwZS51bndyYXAgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgV3JhcHBlZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhhc1dyYXBwZWRWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUud3JhcHBlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZhbHVlVW53cmFwcGVyLnByb3RvdHlwZS5yZXNldCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLmhhc1dyYXBwZWRWYWx1ZSA9IGZhbHNlOyB9O1xuICAgIHJldHVybiBWYWx1ZVVud3JhcHBlcjtcbn0oKSk7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBiYXNpYyBjaGFuZ2UgZnJvbSBhIHByZXZpb3VzIHRvIGEgbmV3IHZhbHVlLlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBTaW1wbGVDaGFuZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2ltcGxlQ2hhbmdlKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSwgZmlyc3RDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5wcmV2aW91c1ZhbHVlID0gcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gICAgICAgIHRoaXMuZmlyc3RDaGFuZ2UgPSBmaXJzdENoYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGUgbmV3IHZhbHVlIGlzIHRoZSBmaXJzdCB2YWx1ZSBhc3NpZ25lZC5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBuZXcgdmFsdWUgaXMgdGhlIGZpcnN0IHZhbHVlIGFzc2lnbmVkLlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgU2ltcGxlQ2hhbmdlLnByb3RvdHlwZS5pc0ZpcnN0Q2hhbmdlID0gLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGUgbmV3IHZhbHVlIGlzIHRoZSBmaXJzdCB2YWx1ZSBhc3NpZ25lZC5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZmlyc3RDaGFuZ2U7IH07XG4gICAgcmV0dXJuIFNpbXBsZUNoYW5nZTtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gb2JqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpc0xpc3RMaWtlSXRlcmFibGUob2JqKSB7XG4gICAgaWYgKCFpc0pzT2JqZWN0KG9iaikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgICAgICghKG9iaiBpbnN0YW5jZW9mIE1hcCkgJiYgLy8gSlMgTWFwIGFyZSBpdGVyYWJsZXMgYnV0IHJldHVybiBlbnRyaWVzIGFzIFtrLCB2XVxuICAgICAgICAgICAgLy8gSlMgTWFwIGFyZSBpdGVyYWJsZXMgYnV0IHJldHVybiBlbnRyaWVzIGFzIFtrLCB2XVxuICAgICAgICAgICAgZ2V0U3ltYm9sSXRlcmF0b3IoKSBpbiBvYmopOyAvLyBKUyBJdGVyYWJsZSBoYXZlIGEgU3ltYm9sLml0ZXJhdG9yIHByb3Bcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBhXG4gKiBAcGFyYW0gez99IGJcbiAqIEBwYXJhbSB7P30gY29tcGFyYXRvclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYXJlSXRlcmFibGVzRXF1YWwoYSwgYiwgY29tcGFyYXRvcikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGl0ZXJhdG9yMSA9IGFbZ2V0U3ltYm9sSXRlcmF0b3IoKV0oKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpdGVyYXRvcjIgPSBiW2dldFN5bWJvbEl0ZXJhdG9yKCldKCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaXRlbTEgPSBpdGVyYXRvcjEubmV4dCgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpdGVtMiA9IGl0ZXJhdG9yMi5uZXh0KCk7XG4gICAgICAgIGlmIChpdGVtMS5kb25lICYmIGl0ZW0yLmRvbmUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGl0ZW0xLmRvbmUgfHwgaXRlbTIuZG9uZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKCFjb21wYXJhdG9yKGl0ZW0xLnZhbHVlLCBpdGVtMi52YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IG9ialxuICogQHBhcmFtIHs/fSBmblxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXRlcmF0ZUxpc3RMaWtlKG9iaiwgZm4pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZuKG9ialtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGl0ZXJhdG9yID0gb2JqW2dldFN5bWJvbEl0ZXJhdG9yKCldKCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGl0ZW0gPSB2b2lkIDA7XG4gICAgICAgIHdoaWxlICghKChpdGVtID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSkge1xuICAgICAgICAgICAgZm4oaXRlbS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gb1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNKc09iamVjdChvKSB7XG4gICAgcmV0dXJuIG8gIT09IG51bGwgJiYgKHR5cGVvZiBvID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvID09PSAnb2JqZWN0Jyk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gb2JqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5LnByb3RvdHlwZS5zdXBwb3J0cyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gb2JqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBpc0xpc3RMaWtlSXRlcmFibGUob2JqKTsgfTtcbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgVlxuICAgICAqIEBwYXJhbSB7Pz19IHRyYWNrQnlGblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlID0gLyoqXG4gICAgICogQHRlbXBsYXRlIFZcbiAgICAgKiBAcGFyYW0gez89fSB0cmFja0J5Rm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0cmFja0J5Rm4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0SXRlcmFibGVEaWZmZXIodHJhY2tCeUZuKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5O1xufSgpKTtcbnZhciB0cmFja0J5SWRlbnRpdHkgPSBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHsgcmV0dXJuIGl0ZW07IH07XG4vKipcbiAqIEBkZXByZWNhdGVkIHY0LjAuMCAtIFNob3VsZCBub3QgYmUgcGFydCBvZiBwdWJsaWMgQVBJLlxuICovXG52YXIgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmF1bHRJdGVyYWJsZURpZmZlcih0cmFja0J5Rm4pIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9saW5rZWRSZWNvcmRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdW5saW5rZWRSZWNvcmRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNJdEhlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pdEhlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pdFRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9hZGRpdGlvbnNIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX21vdmVzSGVhZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX21vdmVzVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbW92YWxzVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5Q2hhbmdlc0hlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pZGVudGl0eUNoYW5nZXNUYWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdHJhY2tCeUZuID0gdHJhY2tCeUZuIHx8IHRyYWNrQnlJZGVudGl0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5mb3JFYWNoSXRlbSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5faXRIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dCkge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5mb3JFYWNoT3BlcmF0aW9uID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHRJdCA9IHRoaXMuX2l0SGVhZDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV4dFJlbW92ZSA9IHRoaXMuX3JlbW92YWxzSGVhZDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYWRkUmVtb3ZlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbW92ZU9mZnNldHMgPSBudWxsO1xuICAgICAgICB3aGlsZSAobmV4dEl0IHx8IG5leHRSZW1vdmUpIHtcbiAgICAgICAgICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2ggaXMgdGhlIG5leHQgcmVjb3JkIHRvIHByb2Nlc3NcbiAgICAgICAgICAgIC8vIE9yZGVyOiByZW1vdmUsIGFkZCwgbW92ZVxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkID0gIW5leHRSZW1vdmUgfHxcbiAgICAgICAgICAgICAgICBuZXh0SXQgJiYgLyoqIEB0eXBlIHs/fSAqLyAoKG5leHRJdC5jdXJyZW50SW5kZXgpKSA8IGdldFByZXZpb3VzSW5kZXgobmV4dFJlbW92ZSwgYWRkUmVtb3ZlT2Zmc2V0LCBtb3ZlT2Zmc2V0cykgPyAvKiogQHR5cGUgez99ICovXG4gICAgICAgICAgICAgICAgKChuZXh0SXQpKSA6XG4gICAgICAgICAgICAgICAgbmV4dFJlbW92ZTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGFkalByZXZpb3VzSW5kZXggPSBnZXRQcmV2aW91c0luZGV4KHJlY29yZCwgYWRkUmVtb3ZlT2Zmc2V0LCBtb3ZlT2Zmc2V0cyk7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjdXJyZW50SW5kZXggPSByZWNvcmQuY3VycmVudEluZGV4O1xuICAgICAgICAgICAgLy8gY29uc3VtZSB0aGUgaXRlbSwgYW5kIGFkanVzdCB0aGUgYWRkUmVtb3ZlT2Zmc2V0IGFuZCB1cGRhdGUgbW92ZURpc3RhbmNlIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgaWYgKHJlY29yZCA9PT0gbmV4dFJlbW92ZSkge1xuICAgICAgICAgICAgICAgIGFkZFJlbW92ZU9mZnNldC0tO1xuICAgICAgICAgICAgICAgIG5leHRSZW1vdmUgPSBuZXh0UmVtb3ZlLl9uZXh0UmVtb3ZlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRJdCA9IC8qKiBAdHlwZSB7P30gKi8gKChuZXh0SXQpKS5fbmV4dDtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLnByZXZpb3VzSW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhZGRSZW1vdmVPZmZzZXQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElOVkFSSUFOVDogIGN1cnJlbnRJbmRleCA8IHByZXZpb3VzSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3ZlT2Zmc2V0cylcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVPZmZzZXRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGxvY2FsTW92ZVByZXZpb3VzSW5kZXggPSBhZGpQcmV2aW91c0luZGV4IC0gYWRkUmVtb3ZlT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsb2NhbEN1cnJlbnRJbmRleCA9IC8qKiBAdHlwZSB7P30gKi8gKChjdXJyZW50SW5kZXgpKSAtIGFkZFJlbW92ZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsTW92ZVByZXZpb3VzSW5kZXggIT0gbG9jYWxDdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBsb2NhbE1vdmVQcmV2aW91c0luZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvZmZzZXQgPSBpIDwgbW92ZU9mZnNldHMubGVuZ3RoID8gbW92ZU9mZnNldHNbaV0gOiAobW92ZU9mZnNldHNbaV0gPSAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbmRleCA9IG9mZnNldCArIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsQ3VycmVudEluZGV4IDw9IGluZGV4ICYmIGluZGV4IDwgbG9jYWxNb3ZlUHJldmlvdXNJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlT2Zmc2V0c1tpXSA9IG9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldmlvdXNJbmRleCA9IHJlY29yZC5wcmV2aW91c0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZU9mZnNldHNbcHJldmlvdXNJbmRleF0gPSBsb2NhbEN1cnJlbnRJbmRleCAtIGxvY2FsTW92ZVByZXZpb3VzSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRqUHJldmlvdXNJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgZm4ocmVjb3JkLCBhZGpQcmV2aW91c0luZGV4LCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hQcmV2aW91c0l0ZW0gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzSXRIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dFByZXZpb3VzKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hBZGRlZEl0ZW0gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2FkZGl0aW9uc0hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0QWRkZWQpIHtcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaE1vdmVkSXRlbSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fbW92ZXNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dE1vdmVkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hSZW1vdmVkSXRlbSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fcmVtb3ZhbHNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dFJlbW92ZWQpIHtcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaElkZW50aXR5Q2hhbmdlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9pZGVudGl0eUNoYW5nZXNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dElkZW50aXR5Q2hhbmdlKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbGxlY3Rpb25cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuZGlmZiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29sbGVjdGlvblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbClcbiAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBbXTtcbiAgICAgICAgaWYgKCFpc0xpc3RMaWtlSXRlcmFibGUoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIHRyeWluZyB0byBkaWZmICdcIiArIHN0cmluZ2lmeShjb2xsZWN0aW9uKSArIFwiJy4gT25seSBhcnJheXMgYW5kIGl0ZXJhYmxlcyBhcmUgYWxsb3dlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVjayhjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLm9uRGVzdHJveSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29sbGVjdGlvblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5jaGVjayA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY29sbGVjdGlvblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcmVzZXQoKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkID0gdGhpcy5faXRIZWFkO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYXlCZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluZGV4O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpdGVtO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpdGVtVHJhY2tCeTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovICh0aGlzKSkubGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGluZGV4XzEgPSAwOyBpbmRleF8xIDwgdGhpcy5sZW5ndGg7IGluZGV4XzErKykge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBjb2xsZWN0aW9uW2luZGV4XzFdO1xuICAgICAgICAgICAgICAgIGl0ZW1UcmFja0J5ID0gdGhpcy5fdHJhY2tCeUZuKGluZGV4XzEsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQgPT09IG51bGwgfHwgIWxvb3NlSWRlbnRpY2FsKHJlY29yZC50cmFja0J5SWQsIGl0ZW1UcmFja0J5KSkge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSB0aGlzLl9taXNtYXRjaChyZWNvcmQsIGl0ZW0sIGl0ZW1UcmFja0J5LCBpbmRleF8xKTtcbiAgICAgICAgICAgICAgICAgICAgbWF5QmVEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5QmVEaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhtaXNrbyk6IGNhbiB3ZSBsaW1pdCB0aGlzIHRvIGR1cGxpY2F0ZXMgb25seT9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IHRoaXMuX3ZlcmlmeVJlaW5zZXJ0aW9uKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4XzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghbG9vc2VJZGVudGljYWwocmVjb3JkLml0ZW0sIGl0ZW0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkSWRlbnRpdHlDaGFuZ2UocmVjb3JkLCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjb3JkID0gcmVjb3JkLl9uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgICAgaXRlcmF0ZUxpc3RMaWtlKGNvbGxlY3Rpb24sIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgaXRlbVRyYWNrQnkgPSBfdGhpcy5fdHJhY2tCeUZuKGluZGV4LCBpdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkID09PSBudWxsIHx8ICFsb29zZUlkZW50aWNhbChyZWNvcmQudHJhY2tCeUlkLCBpdGVtVHJhY2tCeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkID0gX3RoaXMuX21pc21hdGNoKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbWF5QmVEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5QmVEaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhtaXNrbyk6IGNhbiB3ZSBsaW1pdCB0aGlzIHRvIGR1cGxpY2F0ZXMgb25seT9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IF90aGlzLl92ZXJpZnlSZWluc2VydGlvbihyZWNvcmQsIGl0ZW0sIGl0ZW1UcmFja0J5LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb29zZUlkZW50aWNhbChyZWNvcmQuaXRlbSwgaXRlbSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYWRkSWRlbnRpdHlDaGFuZ2UocmVjb3JkLCBpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVjb3JkID0gcmVjb3JkLl9uZXh0O1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICgvKiogQHR5cGUgez99ICovICh0aGlzKSkubGVuZ3RoID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdHJ1bmNhdGUocmVjb3JkKTtcbiAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKHRoaXMpKS5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEaXJ0eTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLCBcImlzRGlydHlcIiwge1xuICAgICAgICAvKiBDb2xsZWN0aW9uQ2hhbmdlcyBpcyBjb25zaWRlcmVkIGRpcnR5IGlmIGl0IGhhcyBhbnkgYWRkaXRpb25zLCBtb3ZlcywgcmVtb3ZhbHMsIG9yIGlkZW50aXR5XG4gICAgICAgICAqIGNoYW5nZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uc0hlYWQgIT09IG51bGwgfHwgdGhpcy5fbW92ZXNIZWFkICE9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkICE9PSBudWxsIHx8IHRoaXMuX2lkZW50aXR5Q2hhbmdlc0hlYWQgIT09IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBzdGF0ZSBvZiB0aGUgY2hhbmdlIG9iamVjdHMgdG8gc2hvdyBubyBjaGFuZ2VzLiBUaGlzIG1lYW5zIHNldCBwcmV2aW91c0tleSB0b1xuICAgICAqIGN1cnJlbnRLZXksIGFuZCBjbGVhciBhbGwgb2YgdGhlIHF1ZXVlcyAoYWRkaXRpb25zLCBtb3ZlcywgcmVtb3ZhbHMpLlxuICAgICAqIFNldCB0aGUgcHJldmlvdXNJbmRleGVzIG9mIG1vdmVkIGFuZCBhZGRlZCBpdGVtcyB0byB0aGVpciBjdXJyZW50SW5kZXhlc1xuICAgICAqIFJlc2V0IHRoZSBsaXN0IG9mIGFkZGl0aW9ucywgbW92ZXMgYW5kIHJlbW92YWxzXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgc3RhdGUgb2YgdGhlIGNoYW5nZSBvYmplY3RzIHRvIHNob3cgbm8gY2hhbmdlcy4gVGhpcyBtZWFucyBzZXQgcHJldmlvdXNLZXkgdG9cbiAgICAgKiBjdXJyZW50S2V5LCBhbmQgY2xlYXIgYWxsIG9mIHRoZSBxdWV1ZXMgKGFkZGl0aW9ucywgbW92ZXMsIHJlbW92YWxzKS5cbiAgICAgKiBTZXQgdGhlIHByZXZpb3VzSW5kZXhlcyBvZiBtb3ZlZCBhbmQgYWRkZWQgaXRlbXMgdG8gdGhlaXIgY3VycmVudEluZGV4ZXNcbiAgICAgKiBSZXNldCB0aGUgbGlzdCBvZiBhZGRpdGlvbnMsIG1vdmVzIGFuZCByZW1vdmFsc1xuICAgICAqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX3Jlc2V0ID0gLyoqXG4gICAgICogUmVzZXQgdGhlIHN0YXRlIG9mIHRoZSBjaGFuZ2Ugb2JqZWN0cyB0byBzaG93IG5vIGNoYW5nZXMuIFRoaXMgbWVhbnMgc2V0IHByZXZpb3VzS2V5IHRvXG4gICAgICogY3VycmVudEtleSwgYW5kIGNsZWFyIGFsbCBvZiB0aGUgcXVldWVzIChhZGRpdGlvbnMsIG1vdmVzLCByZW1vdmFscykuXG4gICAgICogU2V0IHRoZSBwcmV2aW91c0luZGV4ZXMgb2YgbW92ZWQgYW5kIGFkZGVkIGl0ZW1zIHRvIHRoZWlyIGN1cnJlbnRJbmRleGVzXG4gICAgICogUmVzZXQgdGhlIGxpc3Qgb2YgYWRkaXRpb25zLCBtb3ZlcyBhbmQgcmVtb3ZhbHNcbiAgICAgKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRGlydHkpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHRSZWNvcmQgPSB2b2lkIDA7XG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzSXRIZWFkID0gdGhpcy5faXRIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dCkge1xuICAgICAgICAgICAgICAgIHJlY29yZC5fbmV4dFByZXZpb3VzID0gcmVjb3JkLl9uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9hZGRpdGlvbnNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dEFkZGVkKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLnByZXZpb3VzSW5kZXggPSByZWNvcmQuY3VycmVudEluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zSGVhZCA9IHRoaXMuX2FkZGl0aW9uc1RhaWwgPSBudWxsO1xuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9tb3Zlc0hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gbmV4dFJlY29yZCkge1xuICAgICAgICAgICAgICAgIHJlY29yZC5wcmV2aW91c0luZGV4ID0gcmVjb3JkLmN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICBuZXh0UmVjb3JkID0gcmVjb3JkLl9uZXh0TW92ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tb3Zlc0hlYWQgPSB0aGlzLl9tb3Zlc1RhaWwgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gdGhpcy5fcmVtb3ZhbHNUYWlsID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2lkZW50aXR5Q2hhbmdlc0hlYWQgPSB0aGlzLl9pZGVudGl0eUNoYW5nZXNUYWlsID0gbnVsbDtcbiAgICAgICAgICAgIC8vIHRvZG8odmljYikgd2hlbiBhc3NlcnQgZ2V0cyBzdXBwb3J0ZWRcbiAgICAgICAgICAgIC8vIGFzc2VydCghdGhpcy5pc0RpcnR5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgY29yZSBmdW5jdGlvbiB3aGljaCBoYW5kbGVzIGRpZmZlcmVuY2VzIGJldHdlZW4gY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiAtIGByZWNvcmRgIGlzIHRoZSByZWNvcmQgd2hpY2ggd2Ugc2F3IGF0IHRoaXMgcG9zaXRpb24gbGFzdCB0aW1lLiBJZiBudWxsIHRoZW4gaXQgaXMgYSBuZXdcbiAgICAgKiAgIGl0ZW0uXG4gICAgICogLSBgaXRlbWAgaXMgdGhlIGN1cnJlbnQgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgICAqIC0gYGluZGV4YCBpcyB0aGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIGNvcmUgZnVuY3Rpb24gd2hpY2ggaGFuZGxlcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogLSBgcmVjb3JkYCBpcyB0aGUgcmVjb3JkIHdoaWNoIHdlIHNhdyBhdCB0aGlzIHBvc2l0aW9uIGxhc3QgdGltZS4gSWYgbnVsbCB0aGVuIGl0IGlzIGEgbmV3XG4gICAgICogICBpdGVtLlxuICAgICAqIC0gYGl0ZW1gIGlzIHRoZSBjdXJyZW50IGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cbiAgICAgKiAtIGBpbmRleGAgaXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpdGVtXG4gICAgICogQHBhcmFtIHs/fSBpdGVtVHJhY2tCeVxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX21pc21hdGNoID0gLyoqXG4gICAgICogVGhpcyBpcyB0aGUgY29yZSBmdW5jdGlvbiB3aGljaCBoYW5kbGVzIGRpZmZlcmVuY2VzIGJldHdlZW4gY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiAtIGByZWNvcmRgIGlzIHRoZSByZWNvcmQgd2hpY2ggd2Ugc2F3IGF0IHRoaXMgcG9zaXRpb24gbGFzdCB0aW1lLiBJZiBudWxsIHRoZW4gaXQgaXMgYSBuZXdcbiAgICAgKiAgIGl0ZW0uXG4gICAgICogLSBgaXRlbWAgaXMgdGhlIGN1cnJlbnQgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgICAqIC0gYGluZGV4YCBpcyB0aGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcGFyYW0gez99IGl0ZW1cbiAgICAgKiBAcGFyYW0gez99IGl0ZW1UcmFja0J5XG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4KSB7XG4gICAgICAgIC8vIFRoZSBwcmV2aW91cyByZWNvcmQgYWZ0ZXIgd2hpY2ggd2Ugd2lsbCBhcHBlbmQgdGhlIGN1cnJlbnQgb25lLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmV2aW91c1JlY29yZDtcbiAgICAgICAgaWYgKHJlY29yZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldmlvdXNSZWNvcmQgPSB0aGlzLl9pdFRhaWw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcmV2aW91c1JlY29yZCA9IHJlY29yZC5fcHJldjtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcmVjb3JkIGZyb20gdGhlIGNvbGxlY3Rpb24gc2luY2Ugd2Uga25vdyBpdCBkb2VzIG5vdCBtYXRjaCB0aGUgaXRlbS5cbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZShyZWNvcmQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc2VlIGlmIHdlIGhhdmUgc2VlbiB0aGUgaXRlbSBiZWZvcmUuXG4gICAgICAgIHJlY29yZCA9IHRoaXMuX2xpbmtlZFJlY29yZHMgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbGlua2VkUmVjb3Jkcy5nZXQoaXRlbVRyYWNrQnksIGluZGV4KTtcbiAgICAgICAgaWYgKHJlY29yZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBzZWVuIHRoaXMgYmVmb3JlLCB3ZSBuZWVkIHRvIG1vdmUgaXQgZm9yd2FyZCBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICAgICAgICAgIC8vIEJ1dCBmaXJzdCB3ZSBuZWVkIHRvIGNoZWNrIGlmIGlkZW50aXR5IGNoYW5nZWQsIHNvIHdlIGNhbiB1cGRhdGUgaW4gdmlldyBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIGlmICghbG9vc2VJZGVudGljYWwocmVjb3JkLml0ZW0sIGl0ZW0pKVxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZElkZW50aXR5Q2hhbmdlKHJlY29yZCwgaXRlbSk7XG4gICAgICAgICAgICB0aGlzLl9tb3ZlQWZ0ZXIocmVjb3JkLCBwcmV2aW91c1JlY29yZCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTmV2ZXIgc2VlbiBpdCwgY2hlY2sgZXZpY3RlZCBsaXN0LlxuICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fdW5saW5rZWRSZWNvcmRzID09PSBudWxsID8gbnVsbCA6IHRoaXMuX3VubGlua2VkUmVjb3Jkcy5nZXQoaXRlbVRyYWNrQnksIG51bGwpO1xuICAgICAgICAgICAgaWYgKHJlY29yZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEl0IGlzIGFuIGl0ZW0gd2hpY2ggd2UgaGF2ZSBldmljdGVkIGVhcmxpZXI6IHJlaW5zZXJ0IGl0IGJhY2sgaW50byB0aGUgbGlzdC5cbiAgICAgICAgICAgICAgICAvLyBCdXQgZmlyc3Qgd2UgbmVlZCB0byBjaGVjayBpZiBpZGVudGl0eSBjaGFuZ2VkLCBzbyB3ZSBjYW4gdXBkYXRlIGluIHZpZXcgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgaWYgKCFsb29zZUlkZW50aWNhbChyZWNvcmQuaXRlbSwgaXRlbSkpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZElkZW50aXR5Q2hhbmdlKHJlY29yZCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVpbnNlcnRBZnRlcihyZWNvcmQsIHByZXZpb3VzUmVjb3JkLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJdCBpcyBhIG5ldyBpdGVtOiBhZGQgaXQuXG4gICAgICAgICAgICAgICAgcmVjb3JkID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkQWZ0ZXIobmV3IEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXyhpdGVtLCBpdGVtVHJhY2tCeSksIHByZXZpb3VzUmVjb3JkLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgY2hlY2sgaXMgb25seSBuZWVkZWQgaWYgYW4gYXJyYXkgY29udGFpbnMgZHVwbGljYXRlcy4gKFNob3J0IGNpcmN1aXQgb2Ygbm90aGluZyBkaXJ0eSlcbiAgICAgKlxuICAgICAqIFVzZSBjYXNlOiBgW2EsIGFdYCA9PiBgW2IsIGEsIGFdYFxuICAgICAqXG4gICAgICogSWYgd2UgZGlkIG5vdCBoYXZlIHRoaXMgY2hlY2sgdGhlbiB0aGUgaW5zZXJ0aW9uIG9mIGBiYCB3b3VsZDpcbiAgICAgKiAgIDEpIGV2aWN0IGZpcnN0IGBhYFxuICAgICAqICAgMikgaW5zZXJ0IGBiYCBhdCBgMGAgaW5kZXguXG4gICAgICogICAzKSBsZWF2ZSBgYWAgYXQgaW5kZXggYDFgIGFzIGlzLiA8LS0gdGhpcyBpcyB3cm9uZyFcbiAgICAgKiAgIDMpIHJlaW5zZXJ0IGBhYCBhdCBpbmRleCAyLiA8LS0gdGhpcyBpcyB3cm9uZyFcbiAgICAgKlxuICAgICAqIFRoZSBjb3JyZWN0IGJlaGF2aW9yIGlzOlxuICAgICAqICAgMSkgZXZpY3QgZmlyc3QgYGFgXG4gICAgICogICAyKSBpbnNlcnQgYGJgIGF0IGAwYCBpbmRleC5cbiAgICAgKiAgIDMpIHJlaW5zZXJ0IGBhYCBhdCBpbmRleCAxLlxuICAgICAqICAgMykgbW92ZSBgYWAgYXQgZnJvbSBgMWAgdG8gYDJgLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBEb3VibGUgY2hlY2sgdGhhdCB3ZSBoYXZlIG5vdCBldmljdGVkIGEgZHVwbGljYXRlIGl0ZW0uIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGl0ZW0gdHlwZSBtYXlcbiAgICAgKiBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkOlxuICAgICAqIFRoZSBpbnNlcnRpb24gb2YgYiB3aWxsIGV2aWN0IHRoZSBmaXJzdCAnYScuIElmIHdlIGRvbid0IHJlaW5zZXJ0IGl0IG5vdyBpdCB3aWxsIGJlIHJlaW5zZXJ0ZWRcbiAgICAgKiBhdCB0aGUgZW5kLiBXaGljaCB3aWxsIHNob3cgdXAgYXMgdGhlIHR3byAnYSdzIHN3aXRjaGluZyBwb3NpdGlvbi4gVGhpcyBpcyBpbmNvcnJlY3QsIHNpbmNlIGFcbiAgICAgKiBiZXR0ZXIgd2F5IHRvIHRoaW5rIG9mIGl0IGlzIGFzIGluc2VydCBvZiAnYicgcmF0aGVyIHRoZW4gc3dpdGNoICdhJyB3aXRoICdiJyBhbmQgdGhlbiBhZGQgJ2EnXG4gICAgICogYXQgdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFRoaXMgY2hlY2sgaXMgb25seSBuZWVkZWQgaWYgYW4gYXJyYXkgY29udGFpbnMgZHVwbGljYXRlcy4gKFNob3J0IGNpcmN1aXQgb2Ygbm90aGluZyBkaXJ0eSlcbiAgICAgKlxuICAgICAqIFVzZSBjYXNlOiBgW2EsIGFdYCA9PiBgW2IsIGEsIGFdYFxuICAgICAqXG4gICAgICogSWYgd2UgZGlkIG5vdCBoYXZlIHRoaXMgY2hlY2sgdGhlbiB0aGUgaW5zZXJ0aW9uIG9mIGBiYCB3b3VsZDpcbiAgICAgKiAgIDEpIGV2aWN0IGZpcnN0IGBhYFxuICAgICAqICAgMikgaW5zZXJ0IGBiYCBhdCBgMGAgaW5kZXguXG4gICAgICogICAzKSBsZWF2ZSBgYWAgYXQgaW5kZXggYDFgIGFzIGlzLiA8LS0gdGhpcyBpcyB3cm9uZyFcbiAgICAgKiAgIDMpIHJlaW5zZXJ0IGBhYCBhdCBpbmRleCAyLiA8LS0gdGhpcyBpcyB3cm9uZyFcbiAgICAgKlxuICAgICAqIFRoZSBjb3JyZWN0IGJlaGF2aW9yIGlzOlxuICAgICAqICAgMSkgZXZpY3QgZmlyc3QgYGFgXG4gICAgICogICAyKSBpbnNlcnQgYGJgIGF0IGAwYCBpbmRleC5cbiAgICAgKiAgIDMpIHJlaW5zZXJ0IGBhYCBhdCBpbmRleCAxLlxuICAgICAqICAgMykgbW92ZSBgYWAgYXQgZnJvbSBgMWAgdG8gYDJgLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBEb3VibGUgY2hlY2sgdGhhdCB3ZSBoYXZlIG5vdCBldmljdGVkIGEgZHVwbGljYXRlIGl0ZW0uIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGl0ZW0gdHlwZSBtYXlcbiAgICAgKiBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkOlxuICAgICAqIFRoZSBpbnNlcnRpb24gb2YgYiB3aWxsIGV2aWN0IHRoZSBmaXJzdCAnYScuIElmIHdlIGRvbid0IHJlaW5zZXJ0IGl0IG5vdyBpdCB3aWxsIGJlIHJlaW5zZXJ0ZWRcbiAgICAgKiBhdCB0aGUgZW5kLiBXaGljaCB3aWxsIHNob3cgdXAgYXMgdGhlIHR3byAnYSdzIHN3aXRjaGluZyBwb3NpdGlvbi4gVGhpcyBpcyBpbmNvcnJlY3QsIHNpbmNlIGFcbiAgICAgKiBiZXR0ZXIgd2F5IHRvIHRoaW5rIG9mIGl0IGlzIGFzIGluc2VydCBvZiAnYicgcmF0aGVyIHRoZW4gc3dpdGNoICdhJyB3aXRoICdiJyBhbmQgdGhlbiBhZGQgJ2EnXG4gICAgICogYXQgdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcGFyYW0gez99IGl0ZW1cbiAgICAgKiBAcGFyYW0gez99IGl0ZW1UcmFja0J5XG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fdmVyaWZ5UmVpbnNlcnRpb24gPSAvKipcbiAgICAgKiBUaGlzIGNoZWNrIGlzIG9ubHkgbmVlZGVkIGlmIGFuIGFycmF5IGNvbnRhaW5zIGR1cGxpY2F0ZXMuIChTaG9ydCBjaXJjdWl0IG9mIG5vdGhpbmcgZGlydHkpXG4gICAgICpcbiAgICAgKiBVc2UgY2FzZTogYFthLCBhXWAgPT4gYFtiLCBhLCBhXWBcbiAgICAgKlxuICAgICAqIElmIHdlIGRpZCBub3QgaGF2ZSB0aGlzIGNoZWNrIHRoZW4gdGhlIGluc2VydGlvbiBvZiBgYmAgd291bGQ6XG4gICAgICogICAxKSBldmljdCBmaXJzdCBgYWBcbiAgICAgKiAgIDIpIGluc2VydCBgYmAgYXQgYDBgIGluZGV4LlxuICAgICAqICAgMykgbGVhdmUgYGFgIGF0IGluZGV4IGAxYCBhcyBpcy4gPC0tIHRoaXMgaXMgd3JvbmchXG4gICAgICogICAzKSByZWluc2VydCBgYWAgYXQgaW5kZXggMi4gPC0tIHRoaXMgaXMgd3JvbmchXG4gICAgICpcbiAgICAgKiBUaGUgY29ycmVjdCBiZWhhdmlvciBpczpcbiAgICAgKiAgIDEpIGV2aWN0IGZpcnN0IGBhYFxuICAgICAqICAgMikgaW5zZXJ0IGBiYCBhdCBgMGAgaW5kZXguXG4gICAgICogICAzKSByZWluc2VydCBgYWAgYXQgaW5kZXggMS5cbiAgICAgKiAgIDMpIG1vdmUgYGFgIGF0IGZyb20gYDFgIHRvIGAyYC5cbiAgICAgKlxuICAgICAqXG4gICAgICogRG91YmxlIGNoZWNrIHRoYXQgd2UgaGF2ZSBub3QgZXZpY3RlZCBhIGR1cGxpY2F0ZSBpdGVtLiBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBpdGVtIHR5cGUgbWF5XG4gICAgICogaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZDpcbiAgICAgKiBUaGUgaW5zZXJ0aW9uIG9mIGIgd2lsbCBldmljdCB0aGUgZmlyc3QgJ2EnLiBJZiB3ZSBkb24ndCByZWluc2VydCBpdCBub3cgaXQgd2lsbCBiZSByZWluc2VydGVkXG4gICAgICogYXQgdGhlIGVuZC4gV2hpY2ggd2lsbCBzaG93IHVwIGFzIHRoZSB0d28gJ2EncyBzd2l0Y2hpbmcgcG9zaXRpb24uIFRoaXMgaXMgaW5jb3JyZWN0LCBzaW5jZSBhXG4gICAgICogYmV0dGVyIHdheSB0byB0aGluayBvZiBpdCBpcyBhcyBpbnNlcnQgb2YgJ2InIHJhdGhlciB0aGVuIHN3aXRjaCAnYScgd2l0aCAnYicgYW5kIHRoZW4gYWRkICdhJ1xuICAgICAqIGF0IHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpdGVtXG4gICAgICogQHBhcmFtIHs/fSBpdGVtVHJhY2tCeVxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZWNvcmQsIGl0ZW0sIGl0ZW1UcmFja0J5LCBpbmRleCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWluc2VydFJlY29yZCA9IHRoaXMuX3VubGlua2VkUmVjb3JkcyA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl91bmxpbmtlZFJlY29yZHMuZ2V0KGl0ZW1UcmFja0J5LCBudWxsKTtcbiAgICAgICAgaWYgKHJlaW5zZXJ0UmVjb3JkICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZWNvcmQgPSB0aGlzLl9yZWluc2VydEFmdGVyKHJlaW5zZXJ0UmVjb3JkLCAvKiogQHR5cGUgez99ICovICgocmVjb3JkLl9wcmV2KSksIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWNvcmQuY3VycmVudEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZWNvcmQuY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9hZGRUb01vdmVzKHJlY29yZCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgcmlkIG9mIGFueSBleGNlc3Mge0BsaW5rIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkX31zIGZyb20gdGhlIHByZXZpb3VzIGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIC0gYHJlY29yZGAgVGhlIGZpcnN0IGV4Y2VzcyB7QGxpbmsgSXRlcmFibGVDaGFuZ2VSZWNvcmRffS5cbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEdldCByaWQgb2YgYW55IGV4Y2VzcyB7XFxAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99cyBmcm9tIHRoZSBwcmV2aW91cyBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiAtIGByZWNvcmRgIFRoZSBmaXJzdCBleGNlc3Mge1xcQGxpbmsgSXRlcmFibGVDaGFuZ2VSZWNvcmRffS5cbiAgICAgKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX3RydW5jYXRlID0gLyoqXG4gICAgICogR2V0IHJpZCBvZiBhbnkgZXhjZXNzIHtcXEBsaW5rIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkX31zIGZyb20gdGhlIHByZXZpb3VzIGNvbGxlY3Rpb25cbiAgICAgKlxuICAgICAqIC0gYHJlY29yZGAgVGhlIGZpcnN0IGV4Y2VzcyB7XFxAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99LlxuICAgICAqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAvLyBBbnl0aGluZyBhZnRlciB0aGF0IG5lZWRzIHRvIGJlIHJlbW92ZWQ7XG4gICAgICAgIHdoaWxlIChyZWNvcmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHRSZWNvcmQgPSByZWNvcmQuX25leHQ7XG4gICAgICAgICAgICB0aGlzLl9hZGRUb1JlbW92YWxzKHRoaXMuX3VubGluayhyZWNvcmQpKTtcbiAgICAgICAgICAgIHJlY29yZCA9IG5leHRSZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VubGlua2VkUmVjb3JkcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdW5saW5rZWRSZWNvcmRzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uc1RhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc1RhaWwuX25leHRBZGRlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21vdmVzVGFpbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbW92ZXNUYWlsLl9uZXh0TW92ZWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pdFRhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0VGFpbC5fbmV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92YWxzVGFpbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsLl9uZXh0UmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwuX25leHRJZGVudGl0eUNoYW5nZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBwcmV2UmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fcmVpbnNlcnRBZnRlciA9IC8qKlxuICAgICAqIFxcQGludGVybmFsXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcGFyYW0gez99IHByZXZSZWNvcmRcbiAgICAgKiBAcGFyYW0gez99IGluZGV4XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkLCBwcmV2UmVjb3JkLCBpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5fdW5saW5rZWRSZWNvcmRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl91bmxpbmtlZFJlY29yZHMucmVtb3ZlKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldiA9IHJlY29yZC5fcHJldlJlbW92ZWQ7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHQgPSByZWNvcmQuX25leHRSZW1vdmVkO1xuICAgICAgICBpZiAocHJldiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXYuX25leHRSZW1vdmVkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5leHQuX3ByZXZSZW1vdmVkID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbnNlcnRBZnRlcihyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KTtcbiAgICAgICAgdGhpcy5fYWRkVG9Nb3ZlcyhyZWNvcmQsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBwcmV2UmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fbW92ZUFmdGVyID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gcHJldlJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuX3VubGluayhyZWNvcmQpO1xuICAgICAgICB0aGlzLl9pbnNlcnRBZnRlcihyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KTtcbiAgICAgICAgdGhpcy5fYWRkVG9Nb3ZlcyhyZWNvcmQsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBwcmV2UmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fYWRkQWZ0ZXIgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBwcmV2UmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlY29yZCwgcHJldlJlY29yZCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5faW5zZXJ0QWZ0ZXIocmVjb3JkLCBwcmV2UmVjb3JkLCBpbmRleCk7XG4gICAgICAgIGlmICh0aGlzLl9hZGRpdGlvbnNUYWlsID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpXG4gICAgICAgICAgICAvLyBhc3NlcnQodGhpcy5fYWRkaXRpb25zSGVhZCA9PT0gbnVsbCk7XG4gICAgICAgICAgICB0aGlzLl9hZGRpdGlvbnNUYWlsID0gdGhpcy5fYWRkaXRpb25zSGVhZCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRvZG8odmljYilcbiAgICAgICAgICAgIC8vIGFzc2VydChfYWRkaXRpb25zVGFpbC5fbmV4dEFkZGVkID09PSBudWxsKTtcbiAgICAgICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRBZGRlZCA9PT0gbnVsbCk7XG4gICAgICAgICAgICB0aGlzLl9hZGRpdGlvbnNUYWlsID0gdGhpcy5fYWRkaXRpb25zVGFpbC5fbmV4dEFkZGVkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gcHJldlJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRJdGVyYWJsZURpZmZlci5wcm90b3R5cGUuX2luc2VydEFmdGVyID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gcHJldlJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KSB7XG4gICAgICAgIC8vIHRvZG8odmljYilcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZCAhPSBwcmV2UmVjb3JkKTtcbiAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dCA9PT0gbnVsbCk7XG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX3ByZXYgPT09IG51bGwpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXh0ID0gcHJldlJlY29yZCA9PT0gbnVsbCA/IHRoaXMuX2l0SGVhZCA6IHByZXZSZWNvcmQuX25leHQ7XG4gICAgICAgIC8vIHRvZG8odmljYilcbiAgICAgICAgLy8gYXNzZXJ0KG5leHQgIT0gcmVjb3JkKTtcbiAgICAgICAgLy8gYXNzZXJ0KHByZXZSZWNvcmQgIT0gcmVjb3JkKTtcbiAgICAgICAgcmVjb3JkLl9uZXh0ID0gbmV4dDtcbiAgICAgICAgcmVjb3JkLl9wcmV2ID0gcHJldlJlY29yZDtcbiAgICAgICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0VGFpbCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5leHQuX3ByZXYgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZSZWNvcmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0SGVhZCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXZSZWNvcmQuX25leHQgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xpbmtlZFJlY29yZHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmtlZFJlY29yZHMgPSBuZXcgX0R1cGxpY2F0ZU1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpbmtlZFJlY29yZHMucHV0KHJlY29yZCk7XG4gICAgICAgIHJlY29yZC5jdXJyZW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLl9yZW1vdmUgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRUb1JlbW92YWxzKHRoaXMuX3VubGluayhyZWNvcmQpKTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLl91bmxpbmsgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIGlmICh0aGlzLl9saW5rZWRSZWNvcmRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9saW5rZWRSZWNvcmRzLnJlbW92ZShyZWNvcmQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZXYgPSByZWNvcmQuX3ByZXY7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHQgPSByZWNvcmQuX25leHQ7XG4gICAgICAgIC8vIHRvZG8odmljYilcbiAgICAgICAgLy8gYXNzZXJ0KChyZWNvcmQuX3ByZXYgPSBudWxsKSA9PT0gbnVsbCk7XG4gICAgICAgIC8vIGFzc2VydCgocmVjb3JkLl9uZXh0ID0gbnVsbCkgPT09IG51bGwpO1xuICAgICAgICBpZiAocHJldiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faXRIZWFkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXYuX25leHQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9pdFRhaWwgPSBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV4dC5fcHJldiA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSB0b0luZGV4XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0SXRlcmFibGVEaWZmZXIucHJvdG90eXBlLl9hZGRUb01vdmVzID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gdG9JbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlY29yZCwgdG9JbmRleCkge1xuICAgICAgICAvLyB0b2RvKHZpY2IpXG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRNb3ZlZCA9PT0gbnVsbCk7XG4gICAgICAgIGlmIChyZWNvcmQucHJldmlvdXNJbmRleCA9PT0gdG9JbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbW92ZXNUYWlsID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpXG4gICAgICAgICAgICAvLyBhc3NlcnQoX21vdmVzSGVhZCA9PT0gbnVsbCk7XG4gICAgICAgICAgICB0aGlzLl9tb3Zlc1RhaWwgPSB0aGlzLl9tb3Zlc0hlYWQgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyB0b2RvKHZpY2IpXG4gICAgICAgICAgICAvLyBhc3NlcnQoX21vdmVzVGFpbC5fbmV4dE1vdmVkID09PSBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX21vdmVzVGFpbCA9IHRoaXMuX21vdmVzVGFpbC5fbmV4dE1vdmVkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fYWRkVG9SZW1vdmFscyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIGlmICh0aGlzLl91bmxpbmtlZFJlY29yZHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubGlua2VkUmVjb3JkcyA9IG5ldyBfRHVwbGljYXRlTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdW5saW5rZWRSZWNvcmRzLnB1dChyZWNvcmQpO1xuICAgICAgICByZWNvcmQuY3VycmVudEluZGV4ID0gbnVsbDtcbiAgICAgICAgcmVjb3JkLl9uZXh0UmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl9yZW1vdmFsc1RhaWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHRvZG8odmljYilcbiAgICAgICAgICAgIC8vIGFzc2VydChfcmVtb3ZhbHNIZWFkID09PSBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzVGFpbCA9IHRoaXMuX3JlbW92YWxzSGVhZCA9IHJlY29yZDtcbiAgICAgICAgICAgIHJlY29yZC5fcHJldlJlbW92ZWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdG9kbyh2aWNiKVxuICAgICAgICAgICAgLy8gYXNzZXJ0KF9yZW1vdmFsc1RhaWwuX25leHRSZW1vdmVkID09PSBudWxsKTtcbiAgICAgICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRSZW1vdmVkID09PSBudWxsKTtcbiAgICAgICAgICAgIHJlY29yZC5fcHJldlJlbW92ZWQgPSB0aGlzLl9yZW1vdmFsc1RhaWw7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwgPSB0aGlzLl9yZW1vdmFsc1RhaWwuX25leHRSZW1vdmVkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gaXRlbVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLnByb3RvdHlwZS5fYWRkSWRlbnRpdHlDaGFuZ2UgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBpdGVtXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkLCBpdGVtKSB7XG4gICAgICAgIHJlY29yZC5pdGVtID0gaXRlbTtcbiAgICAgICAgaWYgKHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgPSB0aGlzLl9pZGVudGl0eUNoYW5nZXNIZWFkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faWRlbnRpdHlDaGFuZ2VzVGFpbCA9IHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwuX25leHRJZGVudGl0eUNoYW5nZSA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH07XG4gICAgcmV0dXJuIERlZmF1bHRJdGVyYWJsZURpZmZlcjtcbn0oKSk7XG4vKipcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgSXRlcmFibGVDaGFuZ2VSZWNvcmRfID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXyhpdGVtLCB0cmFja0J5SWQpIHtcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICAgICAgdGhpcy50cmFja0J5SWQgPSB0cmFja0J5SWQ7XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wcmV2aW91c0luZGV4ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9uZXh0UHJldmlvdXMgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3ByZXYgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX25leHQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3ByZXZEdXAgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX25leHREdXAgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3ByZXZSZW1vdmVkID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9uZXh0UmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbmV4dEFkZGVkID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9uZXh0TW92ZWQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX25leHRJZGVudGl0eUNoYW5nZSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBJdGVyYWJsZUNoYW5nZVJlY29yZF87XG59KCkpO1xudmFyIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfRHVwbGljYXRlSXRlbVJlY29yZExpc3QoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZCB0aGUgcmVjb3JkIHRvIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMuXG4gICAgICpcbiAgICAgKiBOb3RlOiBieSBkZXNpZ24gYWxsIHJlY29yZHMgaW4gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBob2xkIHRoZSBzYW1lIHZhbHVlIGluIHJlY29yZC5pdGVtLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEFwcGVuZCB0aGUgcmVjb3JkIHRvIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMuXG4gICAgICpcbiAgICAgKiBOb3RlOiBieSBkZXNpZ24gYWxsIHJlY29yZHMgaW4gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBob2xkIHRoZSBzYW1lIHZhbHVlIGluIHJlY29yZC5pdGVtLlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfRHVwbGljYXRlSXRlbVJlY29yZExpc3QucHJvdG90eXBlLmFkZCA9IC8qKlxuICAgICAqIEFwcGVuZCB0aGUgcmVjb3JkIHRvIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMuXG4gICAgICpcbiAgICAgKiBOb3RlOiBieSBkZXNpZ24gYWxsIHJlY29yZHMgaW4gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBob2xkIHRoZSBzYW1lIHZhbHVlIGluIHJlY29yZC5pdGVtLlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIGlmICh0aGlzLl9oZWFkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IHJlY29yZDtcbiAgICAgICAgICAgIHJlY29yZC5fbmV4dER1cCA9IG51bGw7XG4gICAgICAgICAgICByZWNvcmQuX3ByZXZEdXAgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoKFxuICAgICAgICAgICAgLy8gdG9kbyh2aWNiKVxuICAgICAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5pdGVtID09ICBfaGVhZC5pdGVtIHx8XG4gICAgICAgICAgICAvLyAgICAgICByZWNvcmQuaXRlbSBpcyBudW0gJiYgcmVjb3JkLml0ZW0uaXNOYU4gJiYgX2hlYWQuaXRlbSBpcyBudW0gJiYgX2hlYWQuaXRlbS5pc05hTik7XG4gICAgICAgICAgICB0aGlzLl90YWlsKSkuX25leHREdXAgPSByZWNvcmQ7XG4gICAgICAgICAgICByZWNvcmQuX3ByZXZEdXAgPSB0aGlzLl90YWlsO1xuICAgICAgICAgICAgcmVjb3JkLl9uZXh0RHVwID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJldHVybnMgYSBJdGVyYWJsZUNoYW5nZVJlY29yZF8gaGF2aW5nIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXy50cmFja0J5SWQgPT0gdHJhY2tCeUlkIGFuZFxuICAgIC8vIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXy5jdXJyZW50SW5kZXggPj0gYXRPckFmdGVySW5kZXhcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRyYWNrQnlJZFxuICAgICAqIEBwYXJhbSB7P30gYXRPckFmdGVySW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdC5wcm90b3R5cGUuZ2V0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0cmFja0J5SWRcbiAgICAgKiBAcGFyYW0gez99IGF0T3JBZnRlckluZGV4XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHJhY2tCeUlkLCBhdE9yQWZ0ZXJJbmRleCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5faGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHREdXApIHtcbiAgICAgICAgICAgIGlmICgoYXRPckFmdGVySW5kZXggPT09IG51bGwgfHwgYXRPckFmdGVySW5kZXggPD0gLyoqIEB0eXBlIHs/fSAqLyAoKHJlY29yZC5jdXJyZW50SW5kZXgpKSkgJiZcbiAgICAgICAgICAgICAgICBsb29zZUlkZW50aWNhbChyZWNvcmQudHJhY2tCeUlkLCB0cmFja0J5SWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBvbmUge0BsaW5rIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkX30gZnJvbSB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzLlxuICAgICAqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMgaXMgZW1wdHkuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIG9uZSB7XFxAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99IGZyb20gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcy5cbiAgICAgKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzIGlzIGVtcHR5LlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfRHVwbGljYXRlSXRlbVJlY29yZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IC8qKlxuICAgICAqIFJlbW92ZSBvbmUge1xcQGxpbmsgSXRlcmFibGVDaGFuZ2VSZWNvcmRffSBmcm9tIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMuXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBpcyBlbXB0eS5cbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAvLyB0b2RvKHZpY2IpXG4gICAgICAgIC8vIGFzc2VydCgoKSB7XG4gICAgICAgIC8vICAvLyB2ZXJpZnkgdGhhdCB0aGUgcmVjb3JkIGJlaW5nIHJlbW92ZWQgaXMgaW4gdGhlIGxpc3QuXG4gICAgICAgIC8vICBmb3IgKEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXyBjdXJzb3IgPSBfaGVhZDsgY3Vyc29yICE9IG51bGw7IGN1cnNvciA9IGN1cnNvci5fbmV4dER1cCkge1xuICAgICAgICAvLyAgICBpZiAoaWRlbnRpY2FsKGN1cnNvciwgcmVjb3JkKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIC8vICB9XG4gICAgICAgIC8vICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vfSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZXYgPSByZWNvcmQuX3ByZXZEdXA7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5leHQgPSByZWNvcmQuX25leHREdXA7XG4gICAgICAgIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXYuX25leHREdXAgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5leHQuX3ByZXZEdXAgPSBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkID09PSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdDtcbn0oKSk7XG52YXIgX0R1cGxpY2F0ZU1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfRHVwbGljYXRlTWFwKCkge1xuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIF9EdXBsaWNhdGVNYXAucHJvdG90eXBlLnB1dCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleSA9IHJlY29yZC50cmFja0J5SWQ7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGR1cGxpY2F0ZXMgPSB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFkdXBsaWNhdGVzKSB7XG4gICAgICAgICAgICBkdXBsaWNhdGVzID0gbmV3IF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdCgpO1xuICAgICAgICAgICAgdGhpcy5tYXAuc2V0KGtleSwgZHVwbGljYXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZHVwbGljYXRlcy5hZGQocmVjb3JkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBgdmFsdWVgIHVzaW5nIGtleS4gQmVjYXVzZSB0aGUgSXRlcmFibGVDaGFuZ2VSZWNvcmRfIHZhbHVlIG1heSBiZSBvbmUgd2hpY2ggd2VcbiAgICAgKiBoYXZlIGFscmVhZHkgaXRlcmF0ZWQgb3Zlciwgd2UgdXNlIHRoZSBgYXRPckFmdGVySW5kZXhgIHRvIHByZXRlbmQgaXQgaXMgbm90IHRoZXJlLlxuICAgICAqXG4gICAgICogVXNlIGNhc2U6IGBbYSwgYiwgYywgYSwgYV1gIGlmIHdlIGFyZSBhdCBpbmRleCBgM2Agd2hpY2ggaXMgdGhlIHNlY29uZCBgYWAgdGhlbiBhc2tpbmcgaWYgd2VcbiAgICAgKiBoYXZlIGFueSBtb3JlIGBhYHMgbmVlZHMgdG8gcmV0dXJuIHRoZSBzZWNvbmQgYGFgLlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBgdmFsdWVgIHVzaW5nIGtleS4gQmVjYXVzZSB0aGUgSXRlcmFibGVDaGFuZ2VSZWNvcmRfIHZhbHVlIG1heSBiZSBvbmUgd2hpY2ggd2VcbiAgICAgKiBoYXZlIGFscmVhZHkgaXRlcmF0ZWQgb3Zlciwgd2UgdXNlIHRoZSBgYXRPckFmdGVySW5kZXhgIHRvIHByZXRlbmQgaXQgaXMgbm90IHRoZXJlLlxuICAgICAqXG4gICAgICogVXNlIGNhc2U6IGBbYSwgYiwgYywgYSwgYV1gIGlmIHdlIGFyZSBhdCBpbmRleCBgM2Agd2hpY2ggaXMgdGhlIHNlY29uZCBgYWAgdGhlbiBhc2tpbmcgaWYgd2VcbiAgICAgKiBoYXZlIGFueSBtb3JlIGBhYHMgbmVlZHMgdG8gcmV0dXJuIHRoZSBzZWNvbmQgYGFgLlxuICAgICAqIEBwYXJhbSB7P30gdHJhY2tCeUlkXG4gICAgICogQHBhcmFtIHs/fSBhdE9yQWZ0ZXJJbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgX0R1cGxpY2F0ZU1hcC5wcm90b3R5cGUuZ2V0ID0gLyoqXG4gICAgICogUmV0cmlldmUgdGhlIGB2YWx1ZWAgdXNpbmcga2V5LiBCZWNhdXNlIHRoZSBJdGVyYWJsZUNoYW5nZVJlY29yZF8gdmFsdWUgbWF5IGJlIG9uZSB3aGljaCB3ZVxuICAgICAqIGhhdmUgYWxyZWFkeSBpdGVyYXRlZCBvdmVyLCB3ZSB1c2UgdGhlIGBhdE9yQWZ0ZXJJbmRleGAgdG8gcHJldGVuZCBpdCBpcyBub3QgdGhlcmUuXG4gICAgICpcbiAgICAgKiBVc2UgY2FzZTogYFthLCBiLCBjLCBhLCBhXWAgaWYgd2UgYXJlIGF0IGluZGV4IGAzYCB3aGljaCBpcyB0aGUgc2Vjb25kIGBhYCB0aGVuIGFza2luZyBpZiB3ZVxuICAgICAqIGhhdmUgYW55IG1vcmUgYGFgcyBuZWVkcyB0byByZXR1cm4gdGhlIHNlY29uZCBgYWAuXG4gICAgICogQHBhcmFtIHs/fSB0cmFja0J5SWRcbiAgICAgKiBAcGFyYW0gez99IGF0T3JBZnRlckluZGV4XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodHJhY2tCeUlkLCBhdE9yQWZ0ZXJJbmRleCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBrZXkgPSB0cmFja0J5SWQ7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZExpc3QgPSB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIHJlY29yZExpc3QgPyByZWNvcmRMaXN0LmdldCh0cmFja0J5SWQsIGF0T3JBZnRlckluZGV4KSA6IG51bGw7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEge0BsaW5rIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkX30gZnJvbSB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzLlxuICAgICAqXG4gICAgICogVGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBhbHNvIGlzIHJlbW92ZWQgZnJvbSB0aGUgbWFwIGlmIGl0IGdldHMgZW1wdHkuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHtcXEBsaW5rIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkX30gZnJvbSB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzLlxuICAgICAqXG4gICAgICogVGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBhbHNvIGlzIHJlbW92ZWQgZnJvbSB0aGUgbWFwIGlmIGl0IGdldHMgZW1wdHkuXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIF9EdXBsaWNhdGVNYXAucHJvdG90eXBlLnJlbW92ZSA9IC8qKlxuICAgICAqIFJlbW92ZXMgYSB7XFxAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99IGZyb20gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcy5cbiAgICAgKlxuICAgICAqIFRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMgYWxzbyBpcyByZW1vdmVkIGZyb20gdGhlIG1hcCBpZiBpdCBnZXRzIGVtcHR5LlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleSA9IHJlY29yZC50cmFja0J5SWQ7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZExpc3QgPSAvKiogQHR5cGUgez99ICovICgodGhpcy5tYXAuZ2V0KGtleSkpKTtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMgd2hlbiBpdCBnZXRzIGVtcHR5XG4gICAgICAgIGlmIChyZWNvcmRMaXN0LnJlbW92ZShyZWNvcmQpKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9EdXBsaWNhdGVNYXAucHJvdG90eXBlLCBcImlzRW1wdHlcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tYXAuc2l6ZSA9PT0gMDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBfRHVwbGljYXRlTWFwLnByb3RvdHlwZS5jbGVhciA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLm1hcC5jbGVhcigpOyB9O1xuICAgIHJldHVybiBfRHVwbGljYXRlTWFwO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSBpdGVtXG4gKiBAcGFyYW0gez99IGFkZFJlbW92ZU9mZnNldFxuICogQHBhcmFtIHs/fSBtb3ZlT2Zmc2V0c1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0UHJldmlvdXNJbmRleChpdGVtLCBhZGRSZW1vdmVPZmZzZXQsIG1vdmVPZmZzZXRzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldmlvdXNJbmRleCA9IGl0ZW0ucHJldmlvdXNJbmRleDtcbiAgICBpZiAocHJldmlvdXNJbmRleCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzSW5kZXg7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbW92ZU9mZnNldCA9IDA7XG4gICAgaWYgKG1vdmVPZmZzZXRzICYmIHByZXZpb3VzSW5kZXggPCBtb3ZlT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgbW92ZU9mZnNldCA9IG1vdmVPZmZzZXRzW3ByZXZpb3VzSW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gcHJldmlvdXNJbmRleCArIGFkZFJlbW92ZU9mZnNldCArIG1vdmVPZmZzZXQ7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gb2JqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5LnByb3RvdHlwZS5zdXBwb3J0cyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gb2JqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogaW5zdGFuY2VvZiBNYXAgfHwgaXNKc09iamVjdChvYmopOyB9O1xuICAgIC8qKlxuICAgICAqIEB0ZW1wbGF0ZSBLLCBWXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSAvKipcbiAgICAgKiBAdGVtcGxhdGUgSywgVlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERlZmF1bHRLZXlWYWx1ZURpZmZlcigpOyB9O1xuICAgIHJldHVybiBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5O1xufSgpKTtcbnZhciBEZWZhdWx0S2V5VmFsdWVEaWZmZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdEtleVZhbHVlRGlmZmVyKCkge1xuICAgICAgICB0aGlzLl9yZWNvcmRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9tYXBIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYXBwZW5kQWZ0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcmV2aW91c01hcEhlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9jaGFuZ2VzSGVhZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NoYW5nZXNUYWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWRkaXRpb25zSGVhZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uc1RhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwgPSBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZSwgXCJpc0RpcnR5XCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbnNIZWFkICE9PSBudWxsIHx8IHRoaXMuX2NoYW5nZXNIZWFkICE9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkICE9PSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hJdGVtID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9tYXBIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dCkge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5mb3JFYWNoUHJldmlvdXNJdGVtID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9wcmV2aW91c01hcEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0UHJldmlvdXMpIHtcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaENoYW5nZWRJdGVtID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9jaGFuZ2VzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRDaGFuZ2VkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLmZvckVhY2hBZGRlZEl0ZW0gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2FkZGl0aW9uc0hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0QWRkZWQpIHtcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZm5cbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuZm9yRWFjaFJlbW92ZWRJdGVtID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9yZW1vdmFsc0hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0UmVtb3ZlZCkge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/PX0gbWFwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLmRpZmYgPSAvKipcbiAgICAgKiBAcGFyYW0gez89fSBtYXBcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgaWYgKCFtYXApIHtcbiAgICAgICAgICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKG1hcCBpbnN0YW5jZW9mIE1hcCB8fCBpc0pzT2JqZWN0KG1hcCkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciB0cnlpbmcgdG8gZGlmZiAnXCIgKyBzdHJpbmdpZnkobWFwKSArIFwiJy4gT25seSBtYXBzIGFuZCBvYmplY3RzIGFyZSBhbGxvd2VkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrKG1hcCkgPyB0aGlzIDogbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgbWFwIHZzIHRoZSBwcmV2aW91cy5cbiAgICAgKiBUaGUgYWxnb3JpdGhtIGlzIG9wdGltaXNlZCBmb3Igd2hlbiB0aGUga2V5cyBkbyBubyBjaGFuZ2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIG1hcCB2cyB0aGUgcHJldmlvdXMuXG4gICAgICogVGhlIGFsZ29yaXRobSBpcyBvcHRpbWlzZWQgZm9yIHdoZW4gdGhlIGtleXMgZG8gbm8gY2hhbmdlLlxuICAgICAqIEBwYXJhbSB7P30gbWFwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLmNoZWNrID0gLyoqXG4gICAgICogQ2hlY2sgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIG1hcCB2cyB0aGUgcHJldmlvdXMuXG4gICAgICogVGhlIGFsZ29yaXRobSBpcyBvcHRpbWlzZWQgZm9yIHdoZW4gdGhlIGtleXMgZG8gbm8gY2hhbmdlLlxuICAgICAqIEBwYXJhbSB7P30gbWFwXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobWFwKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluc2VydEJlZm9yZSA9IHRoaXMuX21hcEhlYWQ7XG4gICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZm9yRWFjaChtYXAsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBpZiAoaW5zZXJ0QmVmb3JlICYmIGluc2VydEJlZm9yZS5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9tYXliZUFkZFRvQ2hhbmdlcyhpbnNlcnRCZWZvcmUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYXBwZW5kQWZ0ZXIgPSBpbnNlcnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlID0gaW5zZXJ0QmVmb3JlLl9uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkID0gX3RoaXMuX2dldE9yQ3JlYXRlUmVjb3JkRm9yS2V5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZSA9IF90aGlzLl9pbnNlcnRCZWZvcmVPckFwcGVuZChpbnNlcnRCZWZvcmUsIHJlY29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBJdGVtcyByZW1haW5pbmcgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCBoYXZlIGJlZW4gZGVsZXRlZFxuICAgICAgICBpZiAoaW5zZXJ0QmVmb3JlKSB7XG4gICAgICAgICAgICBpZiAoaW5zZXJ0QmVmb3JlLl9wcmV2KSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlLl9wcmV2Ll9uZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCA9IGluc2VydEJlZm9yZTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkID0gaW5zZXJ0QmVmb3JlOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dFJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkID09PSB0aGlzLl9tYXBIZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcEhlYWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRzLmRlbGV0ZShyZWNvcmQua2V5KTtcbiAgICAgICAgICAgICAgICByZWNvcmQuX25leHRSZW1vdmVkID0gcmVjb3JkLl9uZXh0O1xuICAgICAgICAgICAgICAgIHJlY29yZC5wcmV2aW91c1ZhbHVlID0gcmVjb3JkLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICByZWNvcmQuY3VycmVudFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZWNvcmQuX3ByZXYgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJlY29yZC5fbmV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRhaWxzIGhhdmUgbm8gbmV4dCByZWNvcmRzIGZyb20gcHJldmlvdXMgcnVuc1xuICAgICAgICBpZiAodGhpcy5fY2hhbmdlc1RhaWwpXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VzVGFpbC5fbmV4dENoYW5nZWQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fYWRkaXRpb25zVGFpbClcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc1RhaWwuX25leHRBZGRlZCA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRGlydHk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIGEgcmVjb3JkIGJlZm9yZSBgYmVmb3JlYCBvciBhcHBlbmQgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdCB3aGVuIGBiZWZvcmVgIGlzIG51bGwuXG4gICAgICpcbiAgICAgKiBOb3RlczpcbiAgICAgKiAtIFRoaXMgbWV0aG9kIGFwcGVuZHMgYXQgYHRoaXMuX2FwcGVuZEFmdGVyYCxcbiAgICAgKiAtIFRoaXMgbWV0aG9kIHVwZGF0ZXMgYHRoaXMuX2FwcGVuZEFmdGVyYCxcbiAgICAgKiAtIFRoZSByZXR1cm4gdmFsdWUgaXMgdGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGluc2VydGlvbiBwb2ludGVyLlxuICAgICAqIEBwYXJhbSB7P30gYmVmb3JlXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuX2luc2VydEJlZm9yZU9yQXBwZW5kID0gLyoqXG4gICAgICogSW5zZXJ0cyBhIHJlY29yZCBiZWZvcmUgYGJlZm9yZWAgb3IgYXBwZW5kIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3Qgd2hlbiBgYmVmb3JlYCBpcyBudWxsLlxuICAgICAqXG4gICAgICogTm90ZXM6XG4gICAgICogLSBUaGlzIG1ldGhvZCBhcHBlbmRzIGF0IGB0aGlzLl9hcHBlbmRBZnRlcmAsXG4gICAgICogLSBUaGlzIG1ldGhvZCB1cGRhdGVzIGB0aGlzLl9hcHBlbmRBZnRlcmAsXG4gICAgICogLSBUaGUgcmV0dXJuIHZhbHVlIGlzIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnRlci5cbiAgICAgKiBAcGFyYW0gez99IGJlZm9yZVxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYmVmb3JlLCByZWNvcmQpIHtcbiAgICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldiA9IGJlZm9yZS5fcHJldjtcbiAgICAgICAgICAgIHJlY29yZC5fbmV4dCA9IGJlZm9yZTtcbiAgICAgICAgICAgIHJlY29yZC5fcHJldiA9IHByZXY7XG4gICAgICAgICAgICBiZWZvcmUuX3ByZXYgPSByZWNvcmQ7XG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgIHByZXYuX25leHQgPSByZWNvcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmVmb3JlID09PSB0aGlzLl9tYXBIZWFkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwSGVhZCA9IHJlY29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyID0gYmVmb3JlO1xuICAgICAgICAgICAgcmV0dXJuIGJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYXBwZW5kQWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyLl9uZXh0ID0gcmVjb3JkO1xuICAgICAgICAgICAgcmVjb3JkLl9wcmV2ID0gdGhpcy5fYXBwZW5kQWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXBIZWFkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyID0gcmVjb3JkO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30ga2V5XG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5fZ2V0T3JDcmVhdGVSZWNvcmRGb3JLZXkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGtleVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZWNvcmRzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmRfMSA9IC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLl9yZWNvcmRzLmdldChrZXkpKSk7XG4gICAgICAgICAgICB0aGlzLl9tYXliZUFkZFRvQ2hhbmdlcyhyZWNvcmRfMSwgdmFsdWUpO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldiA9IHJlY29yZF8xLl9wcmV2O1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV4dCA9IHJlY29yZF8xLl9uZXh0O1xuICAgICAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgICAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgbmV4dC5fcHJldiA9IHByZXY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmRfMS5fbmV4dCA9IG51bGw7XG4gICAgICAgICAgICByZWNvcmRfMS5fcHJldiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkXzE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVjb3JkID0gbmV3IEtleVZhbHVlQ2hhbmdlUmVjb3JkXyhrZXkpO1xuICAgICAgICB0aGlzLl9yZWNvcmRzLnNldChrZXksIHJlY29yZCk7XG4gICAgICAgIHJlY29yZC5jdXJyZW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fYWRkVG9BZGRpdGlvbnMocmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5fcmVzZXQgPSAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0RpcnR5KSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWNvcmQgPSB2b2lkIDA7XG4gICAgICAgICAgICAvLyBsZXQgYF9wcmV2aW91c01hcEhlYWRgIGNvbnRhaW4gdGhlIHN0YXRlIG9mIHRoZSBtYXAgYmVmb3JlIHRoZSBjaGFuZ2VzXG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c01hcEhlYWQgPSB0aGlzLl9tYXBIZWFkO1xuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9wcmV2aW91c01hcEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0KSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLl9uZXh0UHJldmlvdXMgPSByZWNvcmQuX25leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVcGRhdGUgYHJlY29yZC5wcmV2aW91c1ZhbHVlYCB3aXRoIHRoZSB2YWx1ZSBvZiB0aGUgaXRlbSBiZWZvcmUgdGhlIGNoYW5nZXNcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIGFsbCBjaGFuZ2VkIGl0ZW1zICh0aGF0J3MgdGhvc2Ugd2hpY2ggaGF2ZSBiZWVuIGFkZGVkIGFuZCBjaGFuZ2VkKVxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9jaGFuZ2VzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLnByZXZpb3VzVmFsdWUgPSByZWNvcmQuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9hZGRpdGlvbnNIZWFkOyByZWNvcmQgIT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0QWRkZWQpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQucHJldmlvdXNWYWx1ZSA9IHJlY29yZC5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VzSGVhZCA9IHRoaXMuX2NoYW5nZXNUYWlsID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc0hlYWQgPSB0aGlzLl9hZGRpdGlvbnNUYWlsID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHBhcmFtIHs/fSBuZXdWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVmYXVsdEtleVZhbHVlRGlmZmVyLnByb3RvdHlwZS5fbWF5YmVBZGRUb0NoYW5nZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlY29yZFxuICAgICAqIEBwYXJhbSB7P30gbmV3VmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZWNvcmQsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICghbG9vc2VJZGVudGljYWwobmV3VmFsdWUsIHJlY29yZC5jdXJyZW50VmFsdWUpKSB7XG4gICAgICAgICAgICByZWNvcmQucHJldmlvdXNWYWx1ZSA9IHJlY29yZC5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICByZWNvcmQuY3VycmVudFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9hZGRUb0NoYW5nZXMocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuX2FkZFRvQWRkaXRpb25zID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uc0hlYWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc0hlYWQgPSB0aGlzLl9hZGRpdGlvbnNUYWlsID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoKHRoaXMuX2FkZGl0aW9uc1RhaWwpKS5fbmV4dEFkZGVkID0gcmVjb3JkO1xuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZWNvcmRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlZmF1bHRLZXlWYWx1ZURpZmZlci5wcm90b3R5cGUuX2FkZFRvQ2hhbmdlcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVjb3JkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgIGlmICh0aGlzLl9jaGFuZ2VzSGVhZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fY2hhbmdlc0hlYWQgPSB0aGlzLl9jaGFuZ2VzVGFpbCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKCh0aGlzLl9jaGFuZ2VzVGFpbCkpLl9uZXh0Q2hhbmdlZCA9IHJlY29yZDtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNUYWlsID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAqIEB0ZW1wbGF0ZSBLLCBWXG4gICAgICogQHBhcmFtIHs/fSBvYmpcbiAgICAgKiBAcGFyYW0gez99IGZuXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWZhdWx0S2V5VmFsdWVEaWZmZXIucHJvdG90eXBlLl9mb3JFYWNoID0gLyoqXG4gICAgICogXFxAaW50ZXJuYWxcbiAgICAgKiBAdGVtcGxhdGUgSywgVlxuICAgICAqIEBwYXJhbSB7P30gb2JqXG4gICAgICogQHBhcmFtIHs/fSBmblxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG9iaiwgZm4pIHtcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgb2JqLmZvckVhY2goZm4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IHJldHVybiBmbihvYmpba10sIGspOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlZmF1bHRLZXlWYWx1ZURpZmZlcjtcbn0oKSk7XG4vKipcbiAqIFxcQHN0YWJsZVxuICovXG52YXIgS2V5VmFsdWVDaGFuZ2VSZWNvcmRfID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtleVZhbHVlQ2hhbmdlUmVjb3JkXyhrZXkpIHtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFxcQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9uZXh0UHJldmlvdXMgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX25leHQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX3ByZXYgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX25leHRBZGRlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBcXEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fbmV4dFJlbW92ZWQgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX25leHRDaGFuZ2VkID0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEtleVZhbHVlQ2hhbmdlUmVjb3JkXztcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQSBzdHJhdGVneSBmb3IgdHJhY2tpbmcgY2hhbmdlcyBvdmVyIHRpbWUgdG8gYW4gaXRlcmFibGUuIFVzZWQgYnkge1xcQGxpbmsgTmdGb3JPZn0gdG9cbiAqIHJlc3BvbmQgdG8gY2hhbmdlcyBpbiBhbiBpdGVyYWJsZSBieSBlZmZlY3RpbmcgZXF1aXZhbGVudCBjaGFuZ2VzIGluIHRoZSBET00uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgY2hhbmdlcyBpbiB0aGUgYEl0ZXJhYmxlYCBjb2xsZWN0aW9uIHNpbmNlIGxhc3QgdGltZVxuICogYEl0ZXJhYmxlRGlmZmVyI2RpZmYoKWAgd2FzIGludm9rZWQuXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBSZWNvcmQgcmVwcmVzZW50aW5nIHRoZSBpdGVtIGNoYW5nZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHY0LjAuMCAtIFVzZSBJdGVyYWJsZUNoYW5nZVJlY29yZCBpbnN0ZWFkLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQW4gb3B0aW9uYWwgZnVuY3Rpb24gcGFzc2VkIGludG8ge1xcQGxpbmsgTmdGb3JPZn0gdGhhdCBkZWZpbmVzIGhvdyB0byB0cmFja1xuICogaXRlbXMgaW4gYW4gaXRlcmFibGUgKGUuZy4gZmJ5IGluZGV4IG9yIGlkKVxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogUHJvdmlkZXMgYSBmYWN0b3J5IGZvciB7XFxAbGluayBJdGVyYWJsZURpZmZlcn0uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBBIHJlcG9zaXRvcnkgb2YgZGlmZmVyZW50IGl0ZXJhYmxlIGRpZmZpbmcgc3RyYXRlZ2llcyB1c2VkIGJ5IE5nRm9yLCBOZ0NsYXNzLCBhbmQgb3RoZXJzLlxuICogXFxAc3RhYmxlXG4gKi9cbnZhciBJdGVyYWJsZURpZmZlcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSXRlcmFibGVEaWZmZXJzKGZhY3Rvcmllcykge1xuICAgICAgICB0aGlzLmZhY3RvcmllcyA9IGZhY3RvcmllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBmYWN0b3JpZXNcbiAgICAgKiBAcGFyYW0gez89fSBwYXJlbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEl0ZXJhYmxlRGlmZmVycy5jcmVhdGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGZhY3Rvcmllc1xuICAgICAqIEBwYXJhbSB7Pz19IHBhcmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZhY3RvcmllcywgcGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29waWVkID0gcGFyZW50LmZhY3Rvcmllcy5zbGljZSgpO1xuICAgICAgICAgICAgZmFjdG9yaWVzID0gZmFjdG9yaWVzLmNvbmNhdChjb3BpZWQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVyYWJsZURpZmZlcnMoZmFjdG9yaWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSXRlcmFibGVEaWZmZXJzKGZhY3Rvcmllcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRha2VzIGFuIGFycmF5IG9mIHtAbGluayBJdGVyYWJsZURpZmZlckZhY3Rvcnl9IGFuZCByZXR1cm5zIGEgcHJvdmlkZXIgdXNlZCB0byBleHRlbmQgdGhlXG4gICAgICogaW5oZXJpdGVkIHtAbGluayBJdGVyYWJsZURpZmZlcnN9IGluc3RhbmNlIHdpdGggdGhlIHByb3ZpZGVkIGZhY3RvcmllcyBhbmQgcmV0dXJuIGEgbmV3XG4gICAgICoge0BsaW5rIEl0ZXJhYmxlRGlmZmVyc30gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGV4dGVuZCBhbiBleGlzdGluZyBsaXN0IG9mIGZhY3RvcmllcyxcbiAgICAgKiB3aGljaCB3aWxsIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgaW5qZWN0b3IgZm9yIHRoaXMgY29tcG9uZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICogVGhpcyBzdGVwIGlzIGFsbCB0aGF0J3MgcmVxdWlyZWQgdG8gbWFrZSBhIG5ldyB7QGxpbmsgSXRlcmFibGVEaWZmZXJ9IGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAQ29tcG9uZW50KHtcbiAgICAgKiAgIHZpZXdQcm92aWRlcnM6IFtcbiAgICAgKiAgICAgSXRlcmFibGVEaWZmZXJzLmV4dGVuZChbbmV3IEltbXV0YWJsZUxpc3REaWZmZXIoKV0pXG4gICAgICogICBdXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB7XFxAbGluayBJdGVyYWJsZURpZmZlckZhY3Rvcnl9IGFuZCByZXR1cm5zIGEgcHJvdmlkZXIgdXNlZCB0byBleHRlbmQgdGhlXG4gICAgICogaW5oZXJpdGVkIHtcXEBsaW5rIEl0ZXJhYmxlRGlmZmVyc30gaW5zdGFuY2Ugd2l0aCB0aGUgcHJvdmlkZWQgZmFjdG9yaWVzIGFuZCByZXR1cm4gYSBuZXdcbiAgICAgKiB7XFxAbGluayBJdGVyYWJsZURpZmZlcnN9IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBleHRlbmQgYW4gZXhpc3RpbmcgbGlzdCBvZiBmYWN0b3JpZXMsXG4gICAgICogd2hpY2ggd2lsbCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGluamVjdG9yIGZvciB0aGlzIGNvbXBvbmVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIFRoaXMgc3RlcCBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkIHRvIG1ha2UgYSBuZXcge1xcQGxpbmsgSXRlcmFibGVEaWZmZXJ9IGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBcXEBDb21wb25lbnQoe1xuICAgICAqICAgdmlld1Byb3ZpZGVyczogW1xuICAgICAqICAgICBJdGVyYWJsZURpZmZlcnMuZXh0ZW5kKFtuZXcgSW1tdXRhYmxlTGlzdERpZmZlcigpXSlcbiAgICAgKiAgIF1cbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB7P30gZmFjdG9yaWVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBJdGVyYWJsZURpZmZlcnMuZXh0ZW5kID0gLyoqXG4gICAgICogVGFrZXMgYW4gYXJyYXkgb2Yge1xcQGxpbmsgSXRlcmFibGVEaWZmZXJGYWN0b3J5fSBhbmQgcmV0dXJucyBhIHByb3ZpZGVyIHVzZWQgdG8gZXh0ZW5kIHRoZVxuICAgICAqIGluaGVyaXRlZCB7XFxAbGluayBJdGVyYWJsZURpZmZlcnN9IGluc3RhbmNlIHdpdGggdGhlIHByb3ZpZGVkIGZhY3RvcmllcyBhbmQgcmV0dXJuIGEgbmV3XG4gICAgICoge1xcQGxpbmsgSXRlcmFibGVEaWZmZXJzfSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gZXh0ZW5kIGFuIGV4aXN0aW5nIGxpc3Qgb2YgZmFjdG9yaWVzLFxuICAgICAqIHdoaWNoIHdpbGwgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBpbmplY3RvciBmb3IgdGhpcyBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBUaGlzIHN0ZXAgaXMgYWxsIHRoYXQncyByZXF1aXJlZCB0byBtYWtlIGEgbmV3IHtcXEBsaW5rIEl0ZXJhYmxlRGlmZmVyfSBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogXFxAQ29tcG9uZW50KHtcbiAgICAgKiAgIHZpZXdQcm92aWRlcnM6IFtcbiAgICAgKiAgICAgSXRlcmFibGVEaWZmZXJzLmV4dGVuZChbbmV3IEltbXV0YWJsZUxpc3REaWZmZXIoKV0pXG4gICAgICogICBdXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gez99IGZhY3Rvcmllc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZhY3Rvcmllcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdmlkZTogSXRlcmFibGVEaWZmZXJzLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFR5cGljYWxseSB3b3VsZCBvY2N1ciB3aGVuIGNhbGxpbmcgSXRlcmFibGVEaWZmZXJzLmV4dGVuZCBpbnNpZGUgb2YgZGVwZW5kZW5jaWVzIHBhc3NlZFxuICAgICAgICAgICAgICAgICAgICAvLyB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBib290c3RyYXAoKSwgd2hpY2ggd291bGQgb3ZlcnJpZGUgZGVmYXVsdCBwaXBlcyBpbnN0ZWFkIG9mIGV4dGVuZGluZyB0aGVtLlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBleHRlbmQgSXRlcmFibGVEaWZmZXJzIHdpdGhvdXQgYSBwYXJlbnQgaW5qZWN0b3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEl0ZXJhYmxlRGlmZmVycy5jcmVhdGUoZmFjdG9yaWVzLCBwYXJlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIERlcGVuZGVuY3kgdGVjaG5pY2FsbHkgaXNuJ3Qgb3B0aW9uYWwsIGJ1dCB3ZSBjYW4gcHJvdmlkZSBhIGJldHRlciBlcnJvciBtZXNzYWdlIHRoaXMgd2F5LlxuICAgICAgICAgICAgZGVwczogW1tJdGVyYWJsZURpZmZlcnMsIG5ldyBTa2lwU2VsZigpLCBuZXcgT3B0aW9uYWwoKV1dXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGl0ZXJhYmxlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBJdGVyYWJsZURpZmZlcnMucHJvdG90eXBlLmZpbmQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGl0ZXJhYmxlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmFjdG9yeSA9IHRoaXMuZmFjdG9yaWVzLmZpbmQoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYuc3VwcG9ydHMoaXRlcmFibGUpOyB9KTtcbiAgICAgICAgaWYgKGZhY3RvcnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBhIGRpZmZlciBzdXBwb3J0aW5nIG9iamVjdCAnXCIgKyBpdGVyYWJsZSArIFwiJyBvZiB0eXBlICdcIiArIGdldFR5cGVOYW1lRm9yRGVidWdnaW5nKGl0ZXJhYmxlKSArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEl0ZXJhYmxlRGlmZmVycztcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gdHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZU5hbWVGb3JEZWJ1Z2dpbmcodHlwZSkge1xuICAgIHJldHVybiB0eXBlWyduYW1lJ10gfHwgdHlwZW9mIHR5cGU7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQSBkaWZmZXIgdGhhdCB0cmFja3MgY2hhbmdlcyBtYWRlIHRvIGFuIG9iamVjdCBvdmVyIHRpbWUuXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBBbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgY2hhbmdlcyBpbiB0aGUgYE1hcGAgb3IgYHtbazpzdHJpbmddOiBzdHJpbmd9YCBzaW5jZSBsYXN0IHRpbWVcbiAqIGBLZXlWYWx1ZURpZmZlciNkaWZmKClgIHdhcyBpbnZva2VkLlxuICpcbiAqIFxcQHN0YWJsZVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogUmVjb3JkIHJlcHJlc2VudGluZyB0aGUgaXRlbSBjaGFuZ2UgaW5mb3JtYXRpb24uXG4gKlxuICogXFxAc3RhYmxlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBQcm92aWRlcyBhIGZhY3RvcnkgZm9yIHtcXEBsaW5rIEtleVZhbHVlRGlmZmVyfS5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEEgcmVwb3NpdG9yeSBvZiBkaWZmZXJlbnQgTWFwIGRpZmZpbmcgc3RyYXRlZ2llcyB1c2VkIGJ5IE5nQ2xhc3MsIE5nU3R5bGUsIGFuZCBvdGhlcnMuXG4gKiBcXEBzdGFibGVcbiAqL1xudmFyIEtleVZhbHVlRGlmZmVycyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZXlWYWx1ZURpZmZlcnMoZmFjdG9yaWVzKSB7XG4gICAgICAgIHRoaXMuZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgU1xuICAgICAqIEBwYXJhbSB7P30gZmFjdG9yaWVzXG4gICAgICogQHBhcmFtIHs/PX0gcGFyZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBLZXlWYWx1ZURpZmZlcnMuY3JlYXRlID0gLyoqXG4gICAgICogQHRlbXBsYXRlIFNcbiAgICAgKiBAcGFyYW0gez99IGZhY3Rvcmllc1xuICAgICAqIEBwYXJhbSB7Pz19IHBhcmVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZhY3RvcmllcywgcGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvcGllZCA9IHBhcmVudC5mYWN0b3JpZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZhY3RvcmllcyA9IGZhY3Rvcmllcy5jb25jYXQoY29waWVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEtleVZhbHVlRGlmZmVycyhmYWN0b3JpZXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGFrZXMgYW4gYXJyYXkgb2Yge0BsaW5rIEtleVZhbHVlRGlmZmVyRmFjdG9yeX0gYW5kIHJldHVybnMgYSBwcm92aWRlciB1c2VkIHRvIGV4dGVuZCB0aGVcbiAgICAgKiBpbmhlcml0ZWQge0BsaW5rIEtleVZhbHVlRGlmZmVyc30gaW5zdGFuY2Ugd2l0aCB0aGUgcHJvdmlkZWQgZmFjdG9yaWVzIGFuZCByZXR1cm4gYSBuZXdcbiAgICAgKiB7QGxpbmsgS2V5VmFsdWVEaWZmZXJzfSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gZXh0ZW5kIGFuIGV4aXN0aW5nIGxpc3Qgb2YgZmFjdG9yaWVzLFxuICAgICAqIHdoaWNoIHdpbGwgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBpbmplY3RvciBmb3IgdGhpcyBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBUaGlzIHN0ZXAgaXMgYWxsIHRoYXQncyByZXF1aXJlZCB0byBtYWtlIGEgbmV3IHtAbGluayBLZXlWYWx1ZURpZmZlcn0gYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEBDb21wb25lbnQoe1xuICAgICAqICAgdmlld1Byb3ZpZGVyczogW1xuICAgICAqICAgICBLZXlWYWx1ZURpZmZlcnMuZXh0ZW5kKFtuZXcgSW1tdXRhYmxlTWFwRGlmZmVyKCldKVxuICAgICAqICAgXVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICovXG4gICAgLyoqXG4gICAgICogVGFrZXMgYW4gYXJyYXkgb2Yge1xcQGxpbmsgS2V5VmFsdWVEaWZmZXJGYWN0b3J5fSBhbmQgcmV0dXJucyBhIHByb3ZpZGVyIHVzZWQgdG8gZXh0ZW5kIHRoZVxuICAgICAqIGluaGVyaXRlZCB7XFxAbGluayBLZXlWYWx1ZURpZmZlcnN9IGluc3RhbmNlIHdpdGggdGhlIHByb3ZpZGVkIGZhY3RvcmllcyBhbmQgcmV0dXJuIGEgbmV3XG4gICAgICoge1xcQGxpbmsgS2V5VmFsdWVEaWZmZXJzfSBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gZXh0ZW5kIGFuIGV4aXN0aW5nIGxpc3Qgb2YgZmFjdG9yaWVzLFxuICAgICAqIHdoaWNoIHdpbGwgb25seSBiZSBhcHBsaWVkIHRvIHRoZSBpbmplY3RvciBmb3IgdGhpcyBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKiBUaGlzIHN0ZXAgaXMgYWxsIHRoYXQncyByZXF1aXJlZCB0byBtYWtlIGEgbmV3IHtcXEBsaW5rIEtleVZhbHVlRGlmZmVyfSBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogXFxAQ29tcG9uZW50KHtcbiAgICAgKiAgIHZpZXdQcm92aWRlcnM6IFtcbiAgICAgKiAgICAgS2V5VmFsdWVEaWZmZXJzLmV4dGVuZChbbmV3IEltbXV0YWJsZU1hcERpZmZlcigpXSlcbiAgICAgKiAgIF1cbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqIEB0ZW1wbGF0ZSBTXG4gICAgICogQHBhcmFtIHs/fSBmYWN0b3JpZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIEtleVZhbHVlRGlmZmVycy5leHRlbmQgPSAvKipcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB7XFxAbGluayBLZXlWYWx1ZURpZmZlckZhY3Rvcnl9IGFuZCByZXR1cm5zIGEgcHJvdmlkZXIgdXNlZCB0byBleHRlbmQgdGhlXG4gICAgICogaW5oZXJpdGVkIHtcXEBsaW5rIEtleVZhbHVlRGlmZmVyc30gaW5zdGFuY2Ugd2l0aCB0aGUgcHJvdmlkZWQgZmFjdG9yaWVzIGFuZCByZXR1cm4gYSBuZXdcbiAgICAgKiB7XFxAbGluayBLZXlWYWx1ZURpZmZlcnN9IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBleHRlbmQgYW4gZXhpc3RpbmcgbGlzdCBvZiBmYWN0b3JpZXMsXG4gICAgICogd2hpY2ggd2lsbCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGluamVjdG9yIGZvciB0aGlzIGNvbXBvbmVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIFRoaXMgc3RlcCBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkIHRvIG1ha2UgYSBuZXcge1xcQGxpbmsgS2V5VmFsdWVEaWZmZXJ9IGF2YWlsYWJsZS5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBcXEBDb21wb25lbnQoe1xuICAgICAqICAgdmlld1Byb3ZpZGVyczogW1xuICAgICAqICAgICBLZXlWYWx1ZURpZmZlcnMuZXh0ZW5kKFtuZXcgSW1tdXRhYmxlTWFwRGlmZmVyKCldKVxuICAgICAqICAgXVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICogQHRlbXBsYXRlIFNcbiAgICAgKiBAcGFyYW0gez99IGZhY3Rvcmllc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGZhY3Rvcmllcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdmlkZTogS2V5VmFsdWVEaWZmZXJzLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFR5cGljYWxseSB3b3VsZCBvY2N1ciB3aGVuIGNhbGxpbmcgS2V5VmFsdWVEaWZmZXJzLmV4dGVuZCBpbnNpZGUgb2YgZGVwZW5kZW5jaWVzIHBhc3NlZFxuICAgICAgICAgICAgICAgICAgICAvLyB0byBib290c3RyYXAoKSwgd2hpY2ggd291bGQgb3ZlcnJpZGUgZGVmYXVsdCBwaXBlcyBpbnN0ZWFkIG9mIGV4dGVuZGluZyB0aGVtLlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBleHRlbmQgS2V5VmFsdWVEaWZmZXJzIHdpdGhvdXQgYSBwYXJlbnQgaW5qZWN0b3InKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEtleVZhbHVlRGlmZmVycy5jcmVhdGUoZmFjdG9yaWVzLCBwYXJlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIERlcGVuZGVuY3kgdGVjaG5pY2FsbHkgaXNuJ3Qgb3B0aW9uYWwsIGJ1dCB3ZSBjYW4gcHJvdmlkZSBhIGJldHRlciBlcnJvciBtZXNzYWdlIHRoaXMgd2F5LlxuICAgICAgICAgICAgZGVwczogW1tLZXlWYWx1ZURpZmZlcnMsIG5ldyBTa2lwU2VsZigpLCBuZXcgT3B0aW9uYWwoKV1dXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGt2XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBLZXlWYWx1ZURpZmZlcnMucHJvdG90eXBlLmZpbmQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGt2XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoa3YpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmFjdG9yeSA9IHRoaXMuZmFjdG9yaWVzLmZpbmQoZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYuc3VwcG9ydHMoa3YpOyB9KTtcbiAgICAgICAgaWYgKGZhY3RvcnkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIGEgZGlmZmVyIHN1cHBvcnRpbmcgb2JqZWN0ICdcIiArIGt2ICsgXCInXCIpO1xuICAgIH07XG4gICAgcmV0dXJuIEtleVZhbHVlRGlmZmVycztcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgT2JqZWN0YHMgYW5kIGBNYXBgcy5cbiAqL1xudmFyIGtleVZhbERpZmYgPSBbbmV3IERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkoKV07XG4vKipcbiAqIFN0cnVjdHVyYWwgZGlmZmluZyBmb3IgYEl0ZXJhYmxlYCB0eXBlcyBzdWNoIGFzIGBBcnJheWBzLlxuICovXG52YXIgaXRlcmFibGVEaWZmID0gW25ldyBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5KCldO1xudmFyIGRlZmF1bHRJdGVyYWJsZURpZmZlcnMgPSBuZXcgSXRlcmFibGVEaWZmZXJzKGl0ZXJhYmxlRGlmZik7XG52YXIgZGVmYXVsdEtleVZhbHVlRGlmZmVycyA9IG5ldyBLZXlWYWx1ZURpZmZlcnMoa2V5VmFsRGlmZik7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGFuZ2UgZGV0ZWN0aW9uIGVuYWJsZXMgZGF0YSBiaW5kaW5nIGluIEFuZ3VsYXIuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIF9DT1JFX1BMQVRGT1JNX1BST1ZJREVSUyA9IFtcbiAgICAvLyBTZXQgYSBkZWZhdWx0IHBsYXRmb3JtIG5hbWUgZm9yIHBsYXRmb3JtcyB0aGF0IGRvbid0IHNldCBpdCBleHBsaWNpdGx5LlxuICAgIHsgcHJvdmlkZTogUExBVEZPUk1fSUQsIHVzZVZhbHVlOiAndW5rbm93bicgfSxcbiAgICB7IHByb3ZpZGU6IFBsYXRmb3JtUmVmLCBkZXBzOiBbSW5qZWN0b3JdIH0sXG4gICAgeyBwcm92aWRlOiBUZXN0YWJpbGl0eVJlZ2lzdHJ5LCBkZXBzOiBbXSB9LFxuICAgIHsgcHJvdmlkZTogQ29uc29sZSwgZGVwczogW10gfSxcbl07XG4vKipcbiAqIFRoaXMgcGxhdGZvcm0gaGFzIHRvIGJlIGluY2x1ZGVkIGluIGFueSBvdGhlciBwbGF0Zm9ybVxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgcGxhdGZvcm1Db3JlID0gY3JlYXRlUGxhdGZvcm1GYWN0b3J5KG51bGwsICdjb3JlJywgX0NPUkVfUExBVEZPUk1fUFJPVklERVJTKTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBQcm92aWRlIHRoaXMgdG9rZW4gdG8gc2V0IHRoZSBsb2NhbGUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAqIEl0IGlzIHVzZWQgZm9yIGkxOG4gZXh0cmFjdGlvbiwgYnkgaTE4biBwaXBlcyAoRGF0ZVBpcGUsIEkxOG5QbHVyYWxQaXBlLCBDdXJyZW5jeVBpcGUsXG4gKiBEZWNpbWFsUGlwZSBhbmQgUGVyY2VudFBpcGUpIGFuZCBieSBJQ1UgZXhwcmVzc2lvbnMuXG4gKlxuICogU2VlIHRoZSB7XFxAbGlua0RvY3MgZ3VpZGUvaTE4biNzZXR0aW5nLXVwLWxvY2FsZSBpMThuIGd1aWRlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IExPQ0FMRV9JRCB9IGZyb20gJ1xcQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnXFxAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6ICdlbi1VUycgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIGkxOG4gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKi9cbnZhciBMT0NBTEVfSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0xvY2FsZUlkJyk7XG4vKipcbiAqIFVzZSB0aGlzIHRva2VuIGF0IGJvb3RzdHJhcCB0byBwcm92aWRlIHRoZSBjb250ZW50IG9mIHlvdXIgdHJhbnNsYXRpb24gZmlsZSAoYHh0YmAsXG4gKiBgeGxmYCBvciBgeGxmMmApIHdoZW4geW91IHdhbnQgdG8gdHJhbnNsYXRlIHlvdXIgYXBwbGljYXRpb24gaW4gYW5vdGhlciBsYW5ndWFnZS5cbiAqXG4gKiBTZWUgdGhlIHtcXEBsaW5rRG9jcyBndWlkZS9pMThuI21lcmdlIGkxOG4gZ3VpZGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVFJBTlNMQVRJT05TIH0gZnJvbSAnXFxAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdcXEBhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG4gKiBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcbiAqXG4gKiAvLyBjb250ZW50IG9mIHlvdXIgdHJhbnNsYXRpb24gZmlsZVxuICogY29uc3QgdHJhbnNsYXRpb25zID0gJy4uLi4nO1xuICpcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlLCB7XG4gKiAgIHByb3ZpZGVyczogW3twcm92aWRlOiBUUkFOU0xBVElPTlMsIHVzZVZhbHVlOiB0cmFuc2xhdGlvbnMgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIGkxOG4gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKi9cbnZhciBUUkFOU0xBVElPTlMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1RyYW5zbGF0aW9ucycpO1xuLyoqXG4gKiBQcm92aWRlIHRoaXMgdG9rZW4gYXQgYm9vdHN0cmFwIHRvIHNldCB0aGUgZm9ybWF0IG9mIHlvdXIge1xcQGxpbmsgVFJBTlNMQVRJT05TfTogYHh0YmAsXG4gKiBgeGxmYCBvciBgeGxmMmAuXG4gKlxuICogU2VlIHRoZSB7XFxAbGlua0RvY3MgZ3VpZGUvaTE4biNtZXJnZSBpMThuIGd1aWRlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRSQU5TTEFUSU9OU19GT1JNQVQgfSBmcm9tICdcXEBhbmd1bGFyL2NvcmUnO1xuICogaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ1xcQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbiAqIGltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gJy4vYXBwL2FwcC5tb2R1bGUnO1xuICpcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlLCB7XG4gKiAgIHByb3ZpZGVyczogW3twcm92aWRlOiBUUkFOU0xBVElPTlNfRk9STUFULCB1c2VWYWx1ZTogJ3hsZicgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIGkxOG4gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKi9cbnZhciBUUkFOU0xBVElPTlNfRk9STUFUID0gbmV3IEluamVjdGlvblRva2VuKCdUcmFuc2xhdGlvbnNGb3JtYXQnKTtcbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xudmFyIE1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5ID0ge1xuICAgIEVycm9yOiAwLFxuICAgIFdhcm5pbmc6IDEsXG4gICAgSWdub3JlOiAyLFxufTtcbk1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5W01pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5LkVycm9yXSA9IFwiRXJyb3JcIjtcbk1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5W01pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5Lldhcm5pbmddID0gXCJXYXJuaW5nXCI7XG5NaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneVtNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneS5JZ25vcmVdID0gXCJJZ25vcmVcIjtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfaXRlcmFibGVEaWZmZXJzRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdEl0ZXJhYmxlRGlmZmVycztcbn1cbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX2tleVZhbHVlRGlmZmVyc0ZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRLZXlWYWx1ZURpZmZlcnM7XG59XG4vKipcbiAqIEBwYXJhbSB7Pz19IGxvY2FsZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX2xvY2FsZUZhY3RvcnkobG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZSB8fCAnZW4tVVMnO1xufVxuLyoqXG4gKiBUaGlzIG1vZHVsZSBpbmNsdWRlcyB0aGUgcHJvdmlkZXJzIG9mIFxcQGFuZ3VsYXIvY29yZSB0aGF0IGFyZSBuZWVkZWRcbiAqIHRvIGJvb3RzdHJhcCBjb21wb25lbnRzIHZpYSBgQXBwbGljYXRpb25SZWZgLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbFxuICovXG52YXIgQXBwbGljYXRpb25Nb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLy8gSW5qZWN0IEFwcGxpY2F0aW9uUmVmIHRvIG1ha2UgaXQgZWFnZXIuLi5cbiAgICBmdW5jdGlvbiBBcHBsaWNhdGlvbk1vZHVsZShhcHBSZWYpIHtcbiAgICB9XG4gICAgQXBwbGljYXRpb25Nb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBBcHBsaWNhdGlvblJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uSW5pdFN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbXBpbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBQX0lEX1JBTkRPTV9QUk9WSURFUixcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogSXRlcmFibGVEaWZmZXJzLCB1c2VGYWN0b3J5OiBfaXRlcmFibGVEaWZmZXJzRmFjdG9yeSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBwcm92aWRlOiBLZXlWYWx1ZURpZmZlcnMsIHVzZUZhY3Rvcnk6IF9rZXlWYWx1ZURpZmZlcnNGYWN0b3J5IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTE9DQUxFX0lELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZUZhY3Rvcnk6IF9sb2NhbGVGYWN0b3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcHM6IFtbbmV3IEluamVjdChMT0NBTEVfSUQpLCBuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCldXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgQXBwbGljYXRpb25Nb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogQXBwbGljYXRpb25SZWYsIH0sXG4gICAgXTsgfTtcbiAgICByZXR1cm4gQXBwbGljYXRpb25Nb2R1bGU7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKiogQGVudW0ge251bWJlcn0gKi9cbnZhciBTZWN1cml0eUNvbnRleHQgPSB7XG4gICAgTk9ORTogMCxcbiAgICBIVE1MOiAxLFxuICAgIFNUWUxFOiAyLFxuICAgIFNDUklQVDogMyxcbiAgICBVUkw6IDQsXG4gICAgUkVTT1VSQ0VfVVJMOiA1LFxufTtcblNlY3VyaXR5Q29udGV4dFtTZWN1cml0eUNvbnRleHQuTk9ORV0gPSBcIk5PTkVcIjtcblNlY3VyaXR5Q29udGV4dFtTZWN1cml0eUNvbnRleHQuSFRNTF0gPSBcIkhUTUxcIjtcblNlY3VyaXR5Q29udGV4dFtTZWN1cml0eUNvbnRleHQuU1RZTEVdID0gXCJTVFlMRVwiO1xuU2VjdXJpdHlDb250ZXh0W1NlY3VyaXR5Q29udGV4dC5TQ1JJUFRdID0gXCJTQ1JJUFRcIjtcblNlY3VyaXR5Q29udGV4dFtTZWN1cml0eUNvbnRleHQuVVJMXSA9IFwiVVJMXCI7XG5TZWN1cml0eUNvbnRleHRbU2VjdXJpdHlDb250ZXh0LlJFU09VUkNFX1VSTF0gPSBcIlJFU09VUkNFX1VSTFwiO1xuLyoqXG4gKiBTYW5pdGl6ZXIgaXMgdXNlZCBieSB0aGUgdmlld3MgdG8gc2FuaXRpemUgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIHZhbHVlcy5cbiAqXG4gKiBcXEBzdGFibGVcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgU2FuaXRpemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNhbml0aXplcigpIHtcbiAgICB9XG4gICAgcmV0dXJuIFNhbml0aXplcjtcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogRmFjdG9yeSBmb3IgVmlld0RlZmluaXRpb25zL05nTW9kdWxlRGVmaW5pdGlvbnMuXG4gKiBXZSB1c2UgYSBmdW5jdGlvbiBzbyB3ZSBjYW4gcmVleGV1dGUgaXQgaW4gY2FzZSBhbiBlcnJvciBoYXBwZW5zIGFuZCB1c2UgdGhlIGdpdmVuIGxvZ2dlclxuICogZnVuY3Rpb24gdG8gbG9nIHRoZSBlcnJvciBmcm9tIHRoZSBkZWZpbml0aW9uIG9mIHRoZSBub2RlLCB3aGljaCBpcyBzaG93biBpbiBhbGwgYnJvd3NlclxuICogbG9ncy5cbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGNhbGwgY29uc29sZS5lcnJvciBhdCB0aGUgcmlnaHQgc291cmNlIGxvY2F0aW9uLiBUaGlzIGlzIGFuIGluZGlyZWN0aW9uXG4gKiB2aWEgYW5vdGhlciBmdW5jdGlvbiBhcyBicm93c2VyIHdpbGwgbG9nIHRoZSBsb2NhdGlvbiB0aGF0IGFjdHVhbGx5IGNhbGxlZFxuICogYGNvbnNvbGUuZXJyb3JgLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQSBub2RlIGRlZmluaXRpb24gaW4gdGhlIHZpZXcuXG4gKlxuICogTm90ZTogV2UgdXNlIG9uZSB0eXBlIGZvciBhbGwgbm9kZXMgc28gdGhhdCBsb29wcyB0aGF0IGxvb3Agb3ZlciBhbGwgbm9kZXNcbiAqIG9mIGEgVmlld0RlZmluaXRpb24gc3RheSBtb25vbW9ycGhpYyFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIFZpZXcgaW5zdGFuY2UgZGF0YS5cbiAqIEF0dGVudGlvbjogQWRkaW5nIGZpZWxkcyB0byB0aGlzIGlzIHBlcmZvcm1hbmNlIHNlbnNpdGl2ZSFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBwcmlvckluaXRTdGF0ZVxuICogQHBhcmFtIHs/fSBuZXdJbml0U3RhdGVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNoaWZ0SW5pdFN0YXRlKHZpZXcsIHByaW9ySW5pdFN0YXRlLCBuZXdJbml0U3RhdGUpIHtcbiAgICAvLyBPbmx5IHVwZGF0ZSB0aGUgSW5pdFN0YXRlIGlmIHdlIGFyZSBjdXJyZW50bHkgaW4gdGhlIHByaW9yIHN0YXRlLlxuICAgIC8vIEZvciBleGFtcGxlLCBvbmx5IG1vdmUgaW50byBDYWxsaW5nSW5pdCBpZiB3ZSBhcmUgaW4gQmVmb3JlSW5pdC4gT25seVxuICAgIC8vIG1vdmUgaW50byBDYWxsaW5nQ29udGVudEluaXQgaWYgd2UgYXJlIGluIENhbGxpbmdJbml0LiBOb3JtYWxseSB0aGlzIHdpbGxcbiAgICAvLyBhbHdheXMgYmUgdHJ1ZSBiZWNhdXNlIG9mIGhvdyBjaGVja0N5Y2xlIGlzIGNhbGxlZCBpbiBjaGVja0FuZFVwZGF0ZVZpZXcuXG4gICAgLy8gSG93ZXZlciwgaWYgY2hlY2tBbmRVcGRhdGVWaWV3IGlzIGNhbGxlZCByZWN1cnNpdmVseSBvciBpZiBhbiBleGNlcHRpb24gaXNcbiAgICAvLyB0aHJvd24gd2hpbGUgY2hlY2tBbmRVcGRhdGVWaWV3IGlzIHJ1bm5pbmcsIGNoZWNrQW5kVXBkYXRlVmlldyBzdGFydHMgb3ZlclxuICAgIC8vIGZyb20gdGhlIGJlZ2lubmluZy4gVGhpcyBlbnN1cmVzIHRoZSBzdGF0ZSBpcyBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcsXG4gICAgLy8gdGVybWluYXRpbmcgaW4gdGhlIEFmdGVySW5pdCBzdGF0ZSwgd2hpY2ggZW5zdXJlcyB0aGUgSW5pdCBtZXRob2RzIGFyZSBjYWxsZWRcbiAgICAvLyBhdCBsZWFzdCBvbmNlIGFuZCBvbmx5IG9uY2UuXG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhdGUgPSB2aWV3LnN0YXRlO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGluaXRTdGF0ZSA9IHN0YXRlICYgMTc5MjtcbiAgICBpZiAoaW5pdFN0YXRlID09PSBwcmlvckluaXRTdGF0ZSkge1xuICAgICAgICB2aWV3LnN0YXRlID0gKHN0YXRlICYgfjE3OTIgLyogSW5pdFN0YXRlX01hc2sgKi8pIHwgbmV3SW5pdFN0YXRlO1xuICAgICAgICB2aWV3LmluaXRJbmRleCA9IC0xO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRTdGF0ZSA9PT0gbmV3SW5pdFN0YXRlO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gaW5pdFN0YXRlXG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzaG91bGRDYWxsTGlmZWN5Y2xlSW5pdEhvb2sodmlldywgaW5pdFN0YXRlLCBpbmRleCkge1xuICAgIGlmICgodmlldy5zdGF0ZSAmIDE3OTIgLyogSW5pdFN0YXRlX01hc2sgKi8pID09PSBpbml0U3RhdGUgJiYgdmlldy5pbml0SW5kZXggPD0gaW5kZXgpIHtcbiAgICAgICAgdmlldy5pbml0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIERhdGEgZm9yIGFuIGluc3RhbnRpYXRlZCBOb2RlVHlwZS5UZXh0LlxuICpcbiAqIEF0dGVudGlvbjogQWRkaW5nIGZpZWxkcyB0byB0aGlzIGlzIHBlcmZvcm1hbmNlIHNlbnNpdGl2ZSFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEFjY2Vzc29yIGZvciB2aWV3Lm5vZGVzLCBlbmZvcmNpbmcgdGhhdCBldmVyeSB1c2FnZSBzaXRlIHN0YXlzIG1vbm9tb3JwaGljLlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhc1RleHREYXRhKHZpZXcsIGluZGV4KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKHZpZXcubm9kZXNbaW5kZXhdKTtcbn1cbi8qKlxuICogRGF0YSBmb3IgYW4gaW5zdGFudGlhdGVkIE5vZGVUeXBlLkVsZW1lbnQuXG4gKlxuICogQXR0ZW50aW9uOiBBZGRpbmcgZmllbGRzIHRvIHRoaXMgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQWNjZXNzb3IgZm9yIHZpZXcubm9kZXMsIGVuZm9yY2luZyB0aGF0IGV2ZXJ5IHVzYWdlIHNpdGUgc3RheXMgbW9ub21vcnBoaWMuXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gaW5kZXhcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFzRWxlbWVudERhdGEodmlldywgaW5kZXgpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAodmlldy5ub2Rlc1tpbmRleF0pO1xufVxuLyoqXG4gKiBEYXRhIGZvciBhbiBpbnN0YW50aWF0ZWQgTm9kZVR5cGUuUHJvdmlkZXIuXG4gKlxuICogQXR0ZW50aW9uOiBBZGRpbmcgZmllbGRzIHRvIHRoaXMgaXMgcGVyZm9ybWFuY2Ugc2Vuc2l0aXZlIVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQWNjZXNzb3IgZm9yIHZpZXcubm9kZXMsIGVuZm9yY2luZyB0aGF0IGV2ZXJ5IHVzYWdlIHNpdGUgc3RheXMgbW9ub21vcnBoaWMuXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gaW5kZXhcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFzUHJvdmlkZXJEYXRhKHZpZXcsIGluZGV4KSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKHZpZXcubm9kZXNbaW5kZXhdKTtcbn1cbi8qKlxuICogRGF0YSBmb3IgYW4gaW5zdGFudGlhdGVkIE5vZGVUeXBlLlB1cmVFeHByZXNzaW9uLlxuICpcbiAqIEF0dGVudGlvbjogQWRkaW5nIGZpZWxkcyB0byB0aGlzIGlzIHBlcmZvcm1hbmNlIHNlbnNpdGl2ZSFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEFjY2Vzc29yIGZvciB2aWV3Lm5vZGVzLCBlbmZvcmNpbmcgdGhhdCBldmVyeSB1c2FnZSBzaXRlIHN0YXlzIG1vbm9tb3JwaGljLlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhc1B1cmVFeHByZXNzaW9uRGF0YSh2aWV3LCBpbmRleCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICh2aWV3Lm5vZGVzW2luZGV4XSk7XG59XG4vKipcbiAqIEFjY2Vzc29yIGZvciB2aWV3Lm5vZGVzLCBlbmZvcmNpbmcgdGhhdCBldmVyeSB1c2FnZSBzaXRlIHN0YXlzIG1vbm9tb3JwaGljLlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhc1F1ZXJ5TGlzdCh2aWV3LCBpbmRleCkge1xuICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICh2aWV3Lm5vZGVzW2luZGV4XSk7XG59XG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEBhYnN0cmFjdFxuICovXG52YXIgRGVidWdDb250ZXh0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYnVnQ29udGV4dCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIERlYnVnQ29udGV4dDtcbn0oKSk7XG4vKipcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIFRoaXMgb2JqZWN0IGlzIHVzZWQgdG8gcHJldmVudCBjeWNsZXMgaW4gdGhlIHNvdXJjZSBmaWxlcyBhbmQgdG8gaGF2ZSBhIHBsYWNlIHdoZXJlXG4gKiBkZWJ1ZyBtb2RlIGNhbiBob29rIGl0LiBJdCBpcyBsYXppbHkgZmlsbGVkIHdoZW4gYGlzRGV2TW9kZWAgaXMga25vd24uXG4gKi9cbnZhciBTZXJ2aWNlcyA9IHtcbiAgICBzZXRDdXJyZW50Tm9kZTogLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpLFxuICAgIGNyZWF0ZVJvb3RWaWV3OiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgY3JlYXRlRW1iZWRkZWRWaWV3OiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgY3JlYXRlQ29tcG9uZW50VmlldzogLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpLFxuICAgIGNyZWF0ZU5nTW9kdWxlUmVmOiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgb3ZlcnJpZGVQcm92aWRlcjogLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpLFxuICAgIG92ZXJyaWRlQ29tcG9uZW50VmlldzogLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpLFxuICAgIGNsZWFyT3ZlcnJpZGVzOiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgY2hlY2tBbmRVcGRhdGVWaWV3OiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgY2hlY2tOb0NoYW5nZXNWaWV3OiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgZGVzdHJveVZpZXc6IC8qKiBAdHlwZSB7P30gKi8gKCh1bmRlZmluZWQpKSxcbiAgICByZXNvbHZlRGVwOiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgY3JlYXRlRGVidWdDb250ZXh0OiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgaGFuZGxlRXZlbnQ6IC8qKiBAdHlwZSB7P30gKi8gKCh1bmRlZmluZWQpKSxcbiAgICB1cGRhdGVEaXJlY3RpdmVzOiAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSksXG4gICAgdXBkYXRlUmVuZGVyZXI6IC8qKiBAdHlwZSB7P30gKi8gKCh1bmRlZmluZWQpKSxcbiAgICBkaXJ0eVBhcmVudFF1ZXJpZXM6IC8qKiBAdHlwZSB7P30gKi8gKCh1bmRlZmluZWQpKSxcbn07XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQHBhcmFtIHs/fSBjb250ZXh0XG4gKiBAcGFyYW0gez99IG9sZFZhbHVlXG4gKiBAcGFyYW0gez99IGN1cnJWYWx1ZVxuICogQHBhcmFtIHs/fSBpc0ZpcnN0Q2hlY2tcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3IoY29udGV4dCwgb2xkVmFsdWUsIGN1cnJWYWx1ZSwgaXNGaXJzdENoZWNrKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbXNnID0gXCJFeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEVycm9yOiBFeHByZXNzaW9uIGhhcyBjaGFuZ2VkIGFmdGVyIGl0IHdhcyBjaGVja2VkLiBQcmV2aW91cyB2YWx1ZTogJ1wiICsgb2xkVmFsdWUgKyBcIicuIEN1cnJlbnQgdmFsdWU6ICdcIiArIGN1cnJWYWx1ZSArIFwiJy5cIjtcbiAgICBpZiAoaXNGaXJzdENoZWNrKSB7XG4gICAgICAgIG1zZyArPVxuICAgICAgICAgICAgXCIgSXQgc2VlbXMgbGlrZSB0aGUgdmlldyBoYXMgYmVlbiBjcmVhdGVkIGFmdGVyIGl0cyBwYXJlbnQgYW5kIGl0cyBjaGlsZHJlbiBoYXZlIGJlZW4gZGlydHkgY2hlY2tlZC5cIiArXG4gICAgICAgICAgICAgICAgXCIgSGFzIGl0IGJlZW4gY3JlYXRlZCBpbiBhIGNoYW5nZSBkZXRlY3Rpb24gaG9vayA/XCI7XG4gICAgfVxuICAgIHJldHVybiB2aWV3RGVidWdFcnJvcihtc2csIGNvbnRleHQpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGVyclxuICogQHBhcmFtIHs/fSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB2aWV3V3JhcHBlZERlYnVnRXJyb3IoZXJyLCBjb250ZXh0KSB7XG4gICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgIC8vIGVycm9ycyB0aGF0IGFyZSBub3QgRXJyb3IgaW5zdGFuY2VzIGRvbid0IGhhdmUgYSBzdGFjayxcbiAgICAgICAgLy8gc28gaXQgaXMgb2sgdG8gd3JhcCB0aGVtIGludG8gYSBuZXcgRXJyb3Igb2JqZWN0Li4uXG4gICAgICAgIGVyciA9IG5ldyBFcnJvcihlcnIudG9TdHJpbmcoKSk7XG4gICAgfVxuICAgIF9hZGREZWJ1Z0NvbnRleHQoZXJyLCBjb250ZXh0KTtcbiAgICByZXR1cm4gZXJyO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG1zZ1xuICogQHBhcmFtIHs/fSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB2aWV3RGVidWdFcnJvcihtc2csIGNvbnRleHQpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgICBfYWRkRGVidWdDb250ZXh0KGVyciwgY29udGV4dCk7XG4gICAgcmV0dXJuIGVycjtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlcnJcbiAqIEBwYXJhbSB7P30gY29udGV4dFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX2FkZERlYnVnQ29udGV4dChlcnIsIGNvbnRleHQpIHtcbiAgICAoLyoqIEB0eXBlIHs/fSAqLyAoZXJyKSlbRVJST1JfREVCVUdfQ09OVEVYVF0gPSBjb250ZXh0O1xuICAgICgvKiogQHR5cGUgez99ICovIChlcnIpKVtFUlJPUl9MT0dHRVJdID0gY29udGV4dC5sb2dFcnJvci5iaW5kKGNvbnRleHQpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGVyclxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNWaWV3RGVidWdFcnJvcihlcnIpIHtcbiAgICByZXR1cm4gISFnZXREZWJ1Z0NvbnRleHQoZXJyKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBhY3Rpb25cbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHZpZXdEZXN0cm95ZWRFcnJvcihhY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiVmlld0Rlc3Ryb3llZEVycm9yOiBBdHRlbXB0IHRvIHVzZSBhIGRlc3Ryb3llZCB2aWV3OiBcIiArIGFjdGlvbik7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBOT09QID0gZnVuY3Rpb24gKCkgeyB9O1xudmFyIF90b2tlbktleUNhY2hlID0gbmV3IE1hcCgpO1xuLyoqXG4gKiBAcGFyYW0gez99IHRva2VuXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB0b2tlbktleSh0b2tlbikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleSA9IF90b2tlbktleUNhY2hlLmdldCh0b2tlbik7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgICAga2V5ID0gc3RyaW5naWZ5KHRva2VuKSArICdfJyArIF90b2tlbktleUNhY2hlLnNpemU7XG4gICAgICAgIF90b2tlbktleUNhY2hlLnNldCh0b2tlbiwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVJZHhcbiAqIEBwYXJhbSB7P30gYmluZGluZ0lkeFxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdW53cmFwVmFsdWUodmlldywgbm9kZUlkeCwgYmluZGluZ0lkeCwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBXcmFwcGVkVmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS53cmFwcGVkO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBnbG9iYWxCaW5kaW5nSWR4ID0gdmlldy5kZWYubm9kZXNbbm9kZUlkeF0uYmluZGluZ0luZGV4ICsgYmluZGluZ0lkeDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2xkVmFsdWUgPSB2aWV3Lm9sZFZhbHVlc1tnbG9iYWxCaW5kaW5nSWR4XTtcbiAgICAgICAgaWYgKG9sZFZhbHVlIGluc3RhbmNlb2YgV3JhcHBlZFZhbHVlKSB7XG4gICAgICAgICAgICBvbGRWYWx1ZSA9IG9sZFZhbHVlLndyYXBwZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5vbGRWYWx1ZXNbZ2xvYmFsQmluZGluZ0lkeF0gPSBuZXcgV3JhcHBlZFZhbHVlKG9sZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxudmFyIFVOREVGSU5FRF9SRU5ERVJFUl9UWVBFX0lEID0gJyQkdW5kZWZpbmVkJztcbnZhciBFTVBUWV9SRU5ERVJFUl9UWVBFX0lEID0gJyQkZW1wdHknO1xuLyoqXG4gKiBAcGFyYW0gez99IHZhbHVlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVuZGVyZXJUeXBlMih2YWx1ZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogVU5ERUZJTkVEX1JFTkRFUkVSX1RZUEVfSUQsXG4gICAgICAgIHN0eWxlczogdmFsdWVzLnN0eWxlcyxcbiAgICAgICAgZW5jYXBzdWxhdGlvbjogdmFsdWVzLmVuY2Fwc3VsYXRpb24sXG4gICAgICAgIGRhdGE6IHZhbHVlcy5kYXRhXG4gICAgfTtcbn1cbnZhciBfcmVuZGVyQ29tcENvdW50ID0gMDtcbi8qKlxuICogQHBhcmFtIHs/PX0gdHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVJlbmRlcmVyVHlwZTIodHlwZSkge1xuICAgIGlmICh0eXBlICYmIHR5cGUuaWQgPT09IFVOREVGSU5FRF9SRU5ERVJFUl9UWVBFX0lEKSB7XG4gICAgICAgIC8vIGZpcnN0IHRpbWUgd2Ugc2VlIHRoaXMgUmVuZGVyZXJUeXBlMi4gSW5pdGlhbGl6ZSBpdC4uLlxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpc0ZpbGxlZCA9ICgodHlwZS5lbmNhcHN1bGF0aW9uICE9IG51bGwgJiYgdHlwZS5lbmNhcHN1bGF0aW9uICE9PSBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lKSB8fFxuICAgICAgICAgICAgdHlwZS5zdHlsZXMubGVuZ3RoIHx8IE9iamVjdC5rZXlzKHR5cGUuZGF0YSkubGVuZ3RoKTtcbiAgICAgICAgaWYgKGlzRmlsbGVkKSB7XG4gICAgICAgICAgICB0eXBlLmlkID0gXCJjXCIgKyBfcmVuZGVyQ29tcENvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0eXBlLmlkID0gRU1QVFlfUkVOREVSRVJfVFlQRV9JRDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZSAmJiB0eXBlLmlkID09PSBFTVBUWV9SRU5ERVJFUl9UWVBFX0lEKSB7XG4gICAgICAgIHR5cGUgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZSB8fCBudWxsO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IGJpbmRpbmdJZHhcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQmluZGluZyh2aWV3LCBkZWYsIGJpbmRpbmdJZHgsIHZhbHVlKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2xkVmFsdWVzID0gdmlldy5vbGRWYWx1ZXM7XG4gICAgaWYgKCh2aWV3LnN0YXRlICYgMiAvKiBGaXJzdENoZWNrICovKSB8fFxuICAgICAgICAhbG9vc2VJZGVudGljYWwob2xkVmFsdWVzW2RlZi5iaW5kaW5nSW5kZXggKyBiaW5kaW5nSWR4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEBwYXJhbSB7P30gYmluZGluZ0lkeFxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgYmluZGluZ0lkeCwgdmFsdWUpIHtcbiAgICBpZiAoY2hlY2tCaW5kaW5nKHZpZXcsIGRlZiwgYmluZGluZ0lkeCwgdmFsdWUpKSB7XG4gICAgICAgIHZpZXcub2xkVmFsdWVzW2RlZi5iaW5kaW5nSW5kZXggKyBiaW5kaW5nSWR4XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IGJpbmRpbmdJZHhcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQmluZGluZ05vQ2hhbmdlcyh2aWV3LCBkZWYsIGJpbmRpbmdJZHgsIHZhbHVlKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2xkVmFsdWUgPSB2aWV3Lm9sZFZhbHVlc1tkZWYuYmluZGluZ0luZGV4ICsgYmluZGluZ0lkeF07XG4gICAgaWYgKCh2aWV3LnN0YXRlICYgMSAvKiBCZWZvcmVGaXJzdENoZWNrICovKSB8fCAhZGV2TW9kZUVxdWFsKG9sZFZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgZXhwcmVzc2lvbkNoYW5nZWRBZnRlckl0SGFzQmVlbkNoZWNrZWRFcnJvcihTZXJ2aWNlcy5jcmVhdGVEZWJ1Z0NvbnRleHQodmlldywgZGVmLm5vZGVJbmRleCksIG9sZFZhbHVlLCB2YWx1ZSwgKHZpZXcuc3RhdGUgJiAxIC8qIEJlZm9yZUZpcnN0Q2hlY2sgKi8pICE9PSAwKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbWFya1BhcmVudFZpZXdzRm9yQ2hlY2sodmlldykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJWaWV3ID0gdmlldztcbiAgICB3aGlsZSAoY3VyclZpZXcpIHtcbiAgICAgICAgaWYgKGN1cnJWaWV3LmRlZi5mbGFncyAmIDIgLyogT25QdXNoICovKSB7XG4gICAgICAgICAgICBjdXJyVmlldy5zdGF0ZSB8PSA4IC8qIENoZWNrc0VuYWJsZWQgKi87XG4gICAgICAgIH1cbiAgICAgICAgY3VyclZpZXcgPSBjdXJyVmlldy52aWV3Q29udGFpbmVyUGFyZW50IHx8IGN1cnJWaWV3LnBhcmVudDtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBlbmRWaWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYXJrUGFyZW50Vmlld3NGb3JDaGVja1Byb2plY3RlZFZpZXdzKHZpZXcsIGVuZFZpZXcpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjdXJyVmlldyA9IHZpZXc7XG4gICAgd2hpbGUgKGN1cnJWaWV3ICYmIGN1cnJWaWV3ICE9PSBlbmRWaWV3KSB7XG4gICAgICAgIGN1cnJWaWV3LnN0YXRlIHw9IDY0IC8qIENoZWNrUHJvamVjdGVkVmlld3MgKi87XG4gICAgICAgIGN1cnJWaWV3ID0gY3VyclZpZXcudmlld0NvbnRhaW5lclBhcmVudCB8fCBjdXJyVmlldy5wYXJlbnQ7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gbm9kZUluZGV4XG4gKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICogQHBhcmFtIHs/fSBldmVudFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudCh2aWV3LCBub2RlSW5kZXgsIGV2ZW50TmFtZSwgZXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gdmlldy5kZWYubm9kZXNbbm9kZUluZGV4XTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc3RhcnRWaWV3ID0gbm9kZURlZi5mbGFncyAmIDMzNTU0NDMyIC8qIENvbXBvbmVudFZpZXcgKi8gP1xuICAgICAgICAgICAgYXNFbGVtZW50RGF0YSh2aWV3LCBub2RlSW5kZXgpLmNvbXBvbmVudFZpZXcgOlxuICAgICAgICAgICAgdmlldztcbiAgICAgICAgbWFya1BhcmVudFZpZXdzRm9yQ2hlY2soc3RhcnRWaWV3KTtcbiAgICAgICAgcmV0dXJuIFNlcnZpY2VzLmhhbmRsZUV2ZW50KHZpZXcsIG5vZGVJbmRleCwgZXZlbnROYW1lLCBldmVudCk7XG4gICAgfVxuICAgIGNhdGNoICgvKiogQHR5cGUgez99ICovIGUpIHtcbiAgICAgICAgLy8gQXR0ZW50aW9uOiBEb24ndCByZXRocm93LCBhcyBpdCB3b3VsZCBjYW5jZWwgT2JzZXJ2YWJsZSBzdWJzY3JpcHRpb25zIVxuICAgICAgICB2aWV3LnJvb3QuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGUpO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZWNsYXJlZFZpZXdDb250YWluZXIodmlldykge1xuICAgIGlmICh2aWV3LnBhcmVudCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnRWaWV3ID0gdmlldy5wYXJlbnQ7XG4gICAgICAgIHJldHVybiBhc0VsZW1lbnREYXRhKHBhcmVudFZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3LnBhcmVudE5vZGVEZWYpKS5ub2RlSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogZm9yIGNvbXBvbmVudCB2aWV3cywgdGhpcyBpcyB0aGUgaG9zdCBlbGVtZW50LlxuICogZm9yIGVtYmVkZGVkIHZpZXdzLCB0aGlzIGlzIHRoZSBpbmRleCBvZiB0aGUgcGFyZW50IG5vZGVcbiAqIHRoYXQgY29udGFpbnMgdGhlIHZpZXcgY29udGFpbmVyLlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB2aWV3UGFyZW50RWwodmlldykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudFZpZXcgPSB2aWV3LnBhcmVudDtcbiAgICBpZiAocGFyZW50Vmlldykge1xuICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAoKHZpZXcucGFyZW50Tm9kZURlZikpLnBhcmVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTm9kZSh2aWV3LCBkZWYpIHtcbiAgICBzd2l0Y2ggKGRlZi5mbGFncyAmIDIwMTM0NzA2NyAvKiBUeXBlcyAqLykge1xuICAgICAgICBjYXNlIDEgLyogVHlwZUVsZW1lbnQgKi86XG4gICAgICAgICAgICByZXR1cm4gYXNFbGVtZW50RGF0YSh2aWV3LCBkZWYubm9kZUluZGV4KS5yZW5kZXJFbGVtZW50O1xuICAgICAgICBjYXNlIDIgLyogVHlwZVRleHQgKi86XG4gICAgICAgICAgICByZXR1cm4gYXNUZXh0RGF0YSh2aWV3LCBkZWYubm9kZUluZGV4KS5yZW5kZXJUZXh0O1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB0YXJnZXRcbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZWxlbWVudEV2ZW50RnVsbE5hbWUodGFyZ2V0LCBuYW1lKSB7XG4gICAgcmV0dXJuIHRhcmdldCA/IHRhcmdldCArIFwiOlwiICsgbmFtZSA6IG5hbWU7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNDb21wb25lbnRWaWV3KHZpZXcpIHtcbiAgICByZXR1cm4gISF2aWV3LnBhcmVudCAmJiAhISgvKiogQHR5cGUgez99ICovICgodmlldy5wYXJlbnROb2RlRGVmKSkuZmxhZ3MgJiAzMjc2OCAvKiBDb21wb25lbnQgKi8pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGlzRW1iZWRkZWRWaWV3KHZpZXcpIHtcbiAgICByZXR1cm4gISF2aWV3LnBhcmVudCAmJiAhKC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3LnBhcmVudE5vZGVEZWYpKS5mbGFncyAmIDMyNzY4IC8qIENvbXBvbmVudCAqLyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcXVlcnlJZFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZmlsdGVyUXVlcnlJZChxdWVyeUlkKSB7XG4gICAgcmV0dXJuIDEgPDwgKHF1ZXJ5SWQgJSAzMik7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbWF0Y2hlZFF1ZXJpZXNEc2xcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNwbGl0TWF0Y2hlZFF1ZXJpZXNEc2wobWF0Y2hlZFF1ZXJpZXNEc2wpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBtYXRjaGVkUXVlcmllcyA9IHt9O1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG1hdGNoZWRRdWVyeUlkcyA9IDA7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVmZXJlbmNlcyA9IHt9O1xuICAgIGlmIChtYXRjaGVkUXVlcmllc0RzbCkge1xuICAgICAgICBtYXRjaGVkUXVlcmllc0RzbC5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5SWQgPSBfYVswXSwgdmFsdWVUeXBlID0gX2FbMV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5SWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFF1ZXJpZXNbcXVlcnlJZF0gPSB2YWx1ZVR5cGU7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZFF1ZXJ5SWRzIHw9IGZpbHRlclF1ZXJ5SWQocXVlcnlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VzW3F1ZXJ5SWRdID0gdmFsdWVUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWF0Y2hlZFF1ZXJpZXM6IG1hdGNoZWRRdWVyaWVzLCByZWZlcmVuY2VzOiByZWZlcmVuY2VzLCBtYXRjaGVkUXVlcnlJZHM6IG1hdGNoZWRRdWVyeUlkcyB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGRlcHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNwbGl0RGVwc0RzbChkZXBzKSB7XG4gICAgcmV0dXJuIGRlcHMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlbjtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZmxhZ3M7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZmxhZ3MgPSB2YWx1ZVswXSwgdG9rZW4gPSB2YWx1ZVsxXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZsYWdzID0gMCAvKiBOb25lICovO1xuICAgICAgICAgICAgdG9rZW4gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBmbGFnczogZmxhZ3MsIHRva2VuOiB0b2tlbiwgdG9rZW5LZXk6IHRva2VuS2V5KHRva2VuKSB9O1xuICAgIH0pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gcmVuZGVySG9zdFxuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudFJlbmRlckVsZW1lbnQodmlldywgcmVuZGVySG9zdCwgZGVmKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyUGFyZW50ID0gZGVmLnJlbmRlclBhcmVudDtcbiAgICBpZiAocmVuZGVyUGFyZW50KSB7XG4gICAgICAgIGlmICgocmVuZGVyUGFyZW50LmZsYWdzICYgMSAvKiBUeXBlRWxlbWVudCAqLykgPT09IDAgfHxcbiAgICAgICAgICAgIChyZW5kZXJQYXJlbnQuZmxhZ3MgJiAzMzU1NDQzMiAvKiBDb21wb25lbnRWaWV3ICovKSA9PT0gMCB8fFxuICAgICAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKChyZW5kZXJQYXJlbnQuZWxlbWVudCkpLmNvbXBvbmVudFJlbmRlcmVyVHlwZSAmJiAvKiogQHR5cGUgez99ICovICgoLyoqIEB0eXBlIHs/fSAqLyAoKHJlbmRlclBhcmVudC5lbGVtZW50KSkuY29tcG9uZW50UmVuZGVyZXJUeXBlKSkuZW5jYXBzdWxhdGlvbiA9PT0gVmlld0VuY2Fwc3VsYXRpb24uTmF0aXZlKSkge1xuICAgICAgICAgICAgLy8gb25seSBjaGlsZHJlbiBvZiBub24gY29tcG9uZW50cywgb3IgY2hpbGRyZW4gb2YgY29tcG9uZW50cyB3aXRoIG5hdGl2ZSBlbmNhcHN1bGF0aW9uIHNob3VsZFxuICAgICAgICAgICAgLy8gYmUgYXR0YWNoZWQuXG4gICAgICAgICAgICByZXR1cm4gYXNFbGVtZW50RGF0YSh2aWV3LCAvKiogQHR5cGUgez99ICovICgoZGVmLnJlbmRlclBhcmVudCkpLm5vZGVJbmRleCkucmVuZGVyRWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckhvc3Q7XG4gICAgfVxufVxudmFyIERFRklOSVRJT05fQ0FDSEUgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBAdGVtcGxhdGUgRFxuICogQHBhcmFtIHs/fSBmYWN0b3J5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZXNvbHZlRGVmaW5pdGlvbihmYWN0b3J5KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWUgPSAvKiogQHR5cGUgez99ICovICgoKERFRklOSVRJT05fQ0FDSEUuZ2V0KGZhY3RvcnkpKSkpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBmYWN0b3J5KGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5PT1A7IH0pO1xuICAgICAgICB2YWx1ZS5mYWN0b3J5ID0gZmFjdG9yeTtcbiAgICAgICAgREVGSU5JVElPTl9DQUNIRS5zZXQoZmFjdG9yeSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcm9vdFJlbmRlck5vZGVzKHZpZXcpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZW5kZXJOb2RlcyA9IFtdO1xuICAgIHZpc2l0Um9vdFJlbmRlck5vZGVzKHZpZXcsIDAgLyogQ29sbGVjdCAqLywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlbmRlck5vZGVzKTtcbiAgICByZXR1cm4gcmVuZGVyTm9kZXM7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBhY3Rpb25cbiAqIEBwYXJhbSB7P30gcGFyZW50Tm9kZVxuICogQHBhcmFtIHs/fSBuZXh0U2libGluZ1xuICogQHBhcmFtIHs/PX0gdGFyZ2V0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB2aXNpdFJvb3RSZW5kZXJOb2Rlcyh2aWV3LCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIHJlLWNvbXB1dGUgdGhlIHBhcmVudCBub2RlIGluIGNhc2UgdGhlIG5vZGVzIGhhdmUgYmVlbiBtb3ZlZCBhcm91bmQgbWFudWFsbHlcbiAgICBpZiAoYWN0aW9uID09PSAzIC8qIFJlbW92ZUNoaWxkICovKSB7XG4gICAgICAgIHBhcmVudE5vZGUgPSB2aWV3LnJlbmRlcmVyLnBhcmVudE5vZGUocmVuZGVyTm9kZSh2aWV3LCAvKiogQHR5cGUgez99ICovICgodmlldy5kZWYubGFzdFJlbmRlclJvb3ROb2RlKSkpKTtcbiAgICB9XG4gICAgdmlzaXRTaWJsaW5nUmVuZGVyTm9kZXModmlldywgYWN0aW9uLCAwLCB2aWV3LmRlZi5ub2Rlcy5sZW5ndGggLSAxLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGFjdGlvblxuICogQHBhcmFtIHs/fSBzdGFydEluZGV4XG4gKiBAcGFyYW0gez99IGVuZEluZGV4XG4gKiBAcGFyYW0gez99IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7P30gbmV4dFNpYmxpbmdcbiAqIEBwYXJhbSB7Pz19IHRhcmdldFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdmlzaXRTaWJsaW5nUmVuZGVyTm9kZXModmlldywgYWN0aW9uLCBzdGFydEluZGV4LCBlbmRJbmRleCwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCkge1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IHN0YXJ0SW5kZXg7IGkgPD0gZW5kSW5kZXg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gdmlldy5kZWYubm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgKDEgLyogVHlwZUVsZW1lbnQgKi8gfCAyIC8qIFR5cGVUZXh0ICovIHwgOCAvKiBUeXBlTmdDb250ZW50ICovKSkge1xuICAgICAgICAgICAgdmlzaXRSZW5kZXJOb2RlKHZpZXcsIG5vZGVEZWYsIGFjdGlvbiwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8ganVtcCB0byBuZXh0IHNpYmxpbmdcbiAgICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gbmdDb250ZW50SW5kZXhcbiAqIEBwYXJhbSB7P30gYWN0aW9uXG4gKiBAcGFyYW0gez99IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7P30gbmV4dFNpYmxpbmdcbiAqIEBwYXJhbSB7Pz19IHRhcmdldFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdmlzaXRQcm9qZWN0ZWRSZW5kZXJOb2Rlcyh2aWV3LCBuZ0NvbnRlbnRJbmRleCwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcFZpZXcgPSB2aWV3O1xuICAgIHdoaWxlIChjb21wVmlldyAmJiAhaXNDb21wb25lbnRWaWV3KGNvbXBWaWV3KSkge1xuICAgICAgICBjb21wVmlldyA9IGNvbXBWaWV3LnBhcmVudDtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaG9zdFZpZXcgPSAvKiogQHR5cGUgez99ICovICgoY29tcFZpZXcpKS5wYXJlbnQ7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaG9zdEVsRGVmID0gdmlld1BhcmVudEVsKC8qKiBAdHlwZSB7P30gKi8gKChjb21wVmlldykpKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdGFydEluZGV4ID0gLyoqIEB0eXBlIHs/fSAqLyAoKGhvc3RFbERlZikpLm5vZGVJbmRleCArIDE7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZW5kSW5kZXggPSAvKiogQHR5cGUgez99ICovICgoaG9zdEVsRGVmKSkubm9kZUluZGV4ICsgLyoqIEB0eXBlIHs/fSAqLyAoKGhvc3RFbERlZikpLmNoaWxkQ291bnQ7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSAvKiogQHR5cGUgez99ICovICgoaG9zdFZpZXcpKS5kZWYubm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlRGVmLm5nQ29udGVudEluZGV4ID09PSBuZ0NvbnRlbnRJbmRleCkge1xuICAgICAgICAgICAgdmlzaXRSZW5kZXJOb2RlKC8qKiBAdHlwZSB7P30gKi8gKChob3N0VmlldykpLCBub2RlRGVmLCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGp1bXAgdG8gbmV4dCBzaWJsaW5nXG4gICAgICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICAgIH1cbiAgICBpZiAoIS8qKiBAdHlwZSB7P30gKi8gKChob3N0VmlldykpLnBhcmVudCkge1xuICAgICAgICAvLyBhIHJvb3Qgdmlld1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9qZWN0ZWROb2RlcyA9IHZpZXcucm9vdC5wcm9qZWN0YWJsZU5vZGVzW25nQ29udGVudEluZGV4XTtcbiAgICAgICAgaWYgKHByb2plY3RlZE5vZGVzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgcHJvamVjdGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBleGVjUmVuZGVyTm9kZUFjdGlvbih2aWV3LCBwcm9qZWN0ZWROb2Rlc1tpXSwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gYWN0aW9uXG4gKiBAcGFyYW0gez99IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7P30gbmV4dFNpYmxpbmdcbiAqIEBwYXJhbSB7Pz19IHRhcmdldFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdmlzaXRSZW5kZXJOb2RlKHZpZXcsIG5vZGVEZWYsIGFjdGlvbiwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCkge1xuICAgIGlmIChub2RlRGVmLmZsYWdzICYgOCAvKiBUeXBlTmdDb250ZW50ICovKSB7XG4gICAgICAgIHZpc2l0UHJvamVjdGVkUmVuZGVyTm9kZXModmlldywgLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYubmdDb250ZW50KSkuaW5kZXgsIGFjdGlvbiwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBybiA9IHJlbmRlck5vZGUodmlldywgbm9kZURlZik7XG4gICAgICAgIGlmIChhY3Rpb24gPT09IDMgLyogUmVtb3ZlQ2hpbGQgKi8gJiYgKG5vZGVEZWYuZmxhZ3MgJiAzMzU1NDQzMiAvKiBDb21wb25lbnRWaWV3ICovKSAmJlxuICAgICAgICAgICAgKG5vZGVEZWYuYmluZGluZ0ZsYWdzICYgNDggLyogQ2F0U3ludGhldGljUHJvcGVydHkgKi8pKSB7XG4gICAgICAgICAgICAvLyBOb3RlOiB3ZSBtaWdodCBuZWVkIHRvIGRvIGJvdGggYWN0aW9ucy5cbiAgICAgICAgICAgIGlmIChub2RlRGVmLmJpbmRpbmdGbGFncyAmICgxNiAvKiBTeW50aGV0aWNQcm9wZXJ0eSAqLykpIHtcbiAgICAgICAgICAgICAgICBleGVjUmVuZGVyTm9kZUFjdGlvbih2aWV3LCBybiwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlRGVmLmJpbmRpbmdGbGFncyAmICgzMiAvKiBTeW50aGV0aWNIb3N0UHJvcGVydHkgKi8pKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcFZpZXcgPSBhc0VsZW1lbnREYXRhKHZpZXcsIG5vZGVEZWYubm9kZUluZGV4KS5jb21wb25lbnRWaWV3O1xuICAgICAgICAgICAgICAgIGV4ZWNSZW5kZXJOb2RlQWN0aW9uKGNvbXBWaWV3LCBybiwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4ZWNSZW5kZXJOb2RlQWN0aW9uKHZpZXcsIHJuLCBhY3Rpb24sIHBhcmVudE5vZGUsIG5leHRTaWJsaW5nLCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgMTY3NzcyMTYgLyogRW1iZWRkZWRWaWV3cyAqLykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZW1iZWRkZWRWaWV3cyA9IC8qKiBAdHlwZSB7P30gKi8gKChhc0VsZW1lbnREYXRhKHZpZXcsIG5vZGVEZWYubm9kZUluZGV4KS52aWV3Q29udGFpbmVyKSkuX2VtYmVkZGVkVmlld3M7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGsgPSAwOyBrIDwgZW1iZWRkZWRWaWV3cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHZpc2l0Um9vdFJlbmRlck5vZGVzKGVtYmVkZGVkVmlld3Nba10sIGFjdGlvbiwgcGFyZW50Tm9kZSwgbmV4dFNpYmxpbmcsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAxIC8qIFR5cGVFbGVtZW50ICovICYmICEvKiogQHR5cGUgez99ICovICgobm9kZURlZi5lbGVtZW50KSkubmFtZSkge1xuICAgICAgICAgICAgdmlzaXRTaWJsaW5nUmVuZGVyTm9kZXModmlldywgYWN0aW9uLCBub2RlRGVmLm5vZGVJbmRleCArIDEsIG5vZGVEZWYubm9kZUluZGV4ICsgbm9kZURlZi5jaGlsZENvdW50LCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IHJlbmRlck5vZGVcbiAqIEBwYXJhbSB7P30gYWN0aW9uXG4gKiBAcGFyYW0gez99IHBhcmVudE5vZGVcbiAqIEBwYXJhbSB7P30gbmV4dFNpYmxpbmdcbiAqIEBwYXJhbSB7Pz19IHRhcmdldFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZXhlY1JlbmRlck5vZGVBY3Rpb24odmlldywgcmVuZGVyTm9kZSwgYWN0aW9uLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdGFyZ2V0KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyZXIgPSB2aWV3LnJlbmRlcmVyO1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgMSAvKiBBcHBlbmRDaGlsZCAqLzpcbiAgICAgICAgICAgIHJlbmRlcmVyLmFwcGVuZENoaWxkKHBhcmVudE5vZGUsIHJlbmRlck5vZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMiAvKiBJbnNlcnRCZWZvcmUgKi86XG4gICAgICAgICAgICByZW5kZXJlci5pbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgcmVuZGVyTm9kZSwgbmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMyAvKiBSZW1vdmVDaGlsZCAqLzpcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIHJlbmRlck5vZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMCAvKiBDb2xsZWN0ICovOlxuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoKHRhcmdldCkpLnB1c2gocmVuZGVyTm9kZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG52YXIgTlNfUFJFRklYX1JFID0gL146KFteOl0rKTooLispJC87XG4vKipcbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gc3BsaXROYW1lc3BhY2UobmFtZSkge1xuICAgIGlmIChuYW1lWzBdID09PSAnOicpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbWF0Y2ggPSAvKiogQHR5cGUgez99ICovICgobmFtZS5tYXRjaChOU19QUkVGSVhfUkUpKSk7XG4gICAgICAgIHJldHVybiBbbWF0Y2hbMV0sIG1hdGNoWzJdXTtcbiAgICB9XG4gICAgcmV0dXJuIFsnJywgbmFtZV07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gYmluZGluZ3NcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNhbGNCaW5kaW5nRmxhZ3MoYmluZGluZ3MpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBmbGFncyA9IDA7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZsYWdzIHw9IGJpbmRpbmdzW2ldLmZsYWdzO1xuICAgIH1cbiAgICByZXR1cm4gZmxhZ3M7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVDb3VudFxuICogQHBhcmFtIHs/fSBjb25zdEFuZEludGVycFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUodmFsdWVDb3VudCwgY29uc3RBbmRJbnRlcnApIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZXN1bHQgPSAnJztcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmFsdWVDb3VudCAqIDI7IGkgPSBpICsgMikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgKyBjb25zdEFuZEludGVycFtpXSArIF90b1N0cmluZ1dpdGhOdWxsKGNvbnN0QW5kSW50ZXJwW2kgKyAxXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgKyBjb25zdEFuZEludGVycFt2YWx1ZUNvdW50ICogMl07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmFsdWVDb3VudFxuICogQHBhcmFtIHs/fSBjMFxuICogQHBhcmFtIHs/fSBhMVxuICogQHBhcmFtIHs/fSBjMVxuICogQHBhcmFtIHs/PX0gYTJcbiAqIEBwYXJhbSB7Pz19IGMyXG4gKiBAcGFyYW0gez89fSBhM1xuICogQHBhcmFtIHs/PX0gYzNcbiAqIEBwYXJhbSB7Pz19IGE0XG4gKiBAcGFyYW0gez89fSBjNFxuICogQHBhcmFtIHs/PX0gYTVcbiAqIEBwYXJhbSB7Pz19IGM1XG4gKiBAcGFyYW0gez89fSBhNlxuICogQHBhcmFtIHs/PX0gYzZcbiAqIEBwYXJhbSB7Pz19IGE3XG4gKiBAcGFyYW0gez89fSBjN1xuICogQHBhcmFtIHs/PX0gYThcbiAqIEBwYXJhbSB7Pz19IGM4XG4gKiBAcGFyYW0gez89fSBhOVxuICogQHBhcmFtIHs/PX0gYzlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGlubGluZUludGVycG9sYXRlKHZhbHVlQ291bnQsIGMwLCBhMSwgYzEsIGEyLCBjMiwgYTMsIGMzLCBhNCwgYzQsIGE1LCBjNSwgYTYsIGM2LCBhNywgYzcsIGE4LCBjOCwgYTksIGM5KSB7XG4gICAgc3dpdGNoICh2YWx1ZUNvdW50KSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBjMCArIF90b1N0cmluZ1dpdGhOdWxsKGExKSArIGMxO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gYzAgKyBfdG9TdHJpbmdXaXRoTnVsbChhMSkgKyBjMSArIF90b1N0cmluZ1dpdGhOdWxsKGEyKSArIGMyO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gYzAgKyBfdG9TdHJpbmdXaXRoTnVsbChhMSkgKyBjMSArIF90b1N0cmluZ1dpdGhOdWxsKGEyKSArIGMyICsgX3RvU3RyaW5nV2l0aE51bGwoYTMpICtcbiAgICAgICAgICAgICAgICBjMztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNDtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNCArIF90b1N0cmluZ1dpdGhOdWxsKGE1KSArIGM1O1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gYzAgKyBfdG9TdHJpbmdXaXRoTnVsbChhMSkgKyBjMSArIF90b1N0cmluZ1dpdGhOdWxsKGEyKSArIGMyICsgX3RvU3RyaW5nV2l0aE51bGwoYTMpICtcbiAgICAgICAgICAgICAgICBjMyArIF90b1N0cmluZ1dpdGhOdWxsKGE0KSArIGM0ICsgX3RvU3RyaW5nV2l0aE51bGwoYTUpICsgYzUgKyBfdG9TdHJpbmdXaXRoTnVsbChhNikgKyBjNjtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNCArIF90b1N0cmluZ1dpdGhOdWxsKGE1KSArIGM1ICsgX3RvU3RyaW5nV2l0aE51bGwoYTYpICtcbiAgICAgICAgICAgICAgICBjNiArIF90b1N0cmluZ1dpdGhOdWxsKGE3KSArIGM3O1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXR1cm4gYzAgKyBfdG9TdHJpbmdXaXRoTnVsbChhMSkgKyBjMSArIF90b1N0cmluZ1dpdGhOdWxsKGEyKSArIGMyICsgX3RvU3RyaW5nV2l0aE51bGwoYTMpICtcbiAgICAgICAgICAgICAgICBjMyArIF90b1N0cmluZ1dpdGhOdWxsKGE0KSArIGM0ICsgX3RvU3RyaW5nV2l0aE51bGwoYTUpICsgYzUgKyBfdG9TdHJpbmdXaXRoTnVsbChhNikgK1xuICAgICAgICAgICAgICAgIGM2ICsgX3RvU3RyaW5nV2l0aE51bGwoYTcpICsgYzcgKyBfdG9TdHJpbmdXaXRoTnVsbChhOCkgKyBjODtcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgcmV0dXJuIGMwICsgX3RvU3RyaW5nV2l0aE51bGwoYTEpICsgYzEgKyBfdG9TdHJpbmdXaXRoTnVsbChhMikgKyBjMiArIF90b1N0cmluZ1dpdGhOdWxsKGEzKSArXG4gICAgICAgICAgICAgICAgYzMgKyBfdG9TdHJpbmdXaXRoTnVsbChhNCkgKyBjNCArIF90b1N0cmluZ1dpdGhOdWxsKGE1KSArIGM1ICsgX3RvU3RyaW5nV2l0aE51bGwoYTYpICtcbiAgICAgICAgICAgICAgICBjNiArIF90b1N0cmluZ1dpdGhOdWxsKGE3KSArIGM3ICsgX3RvU3RyaW5nV2l0aE51bGwoYTgpICsgYzggKyBfdG9TdHJpbmdXaXRoTnVsbChhOSkgKyBjOTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRvZXMgbm90IHN1cHBvcnQgbW9yZSB0aGFuIDkgZXhwcmVzc2lvbnNcIik7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF90b1N0cmluZ1dpdGhOdWxsKHYpIHtcbiAgICByZXR1cm4gdiAhPSBudWxsID8gdi50b1N0cmluZygpIDogJyc7XG59XG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBFTVBUWV9NQVAgPSB7fTtcblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcGFyYW0gez99IGZsYWdzXG4gKiBAcGFyYW0gez99IG1hdGNoZWRRdWVyaWVzRHNsXG4gKiBAcGFyYW0gez99IG5nQ29udGVudEluZGV4XG4gKiBAcGFyYW0gez99IGNoaWxkQ291bnRcbiAqIEBwYXJhbSB7Pz19IGhhbmRsZUV2ZW50XG4gKiBAcGFyYW0gez89fSB0ZW1wbGF0ZUZhY3RvcnlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFuY2hvckRlZihmbGFncywgbWF0Y2hlZFF1ZXJpZXNEc2wsIG5nQ29udGVudEluZGV4LCBjaGlsZENvdW50LCBoYW5kbGVFdmVudCwgdGVtcGxhdGVGYWN0b3J5KSB7XG4gICAgZmxhZ3MgfD0gMSAvKiBUeXBlRWxlbWVudCAqLztcbiAgICB2YXIgX2EgPSBzcGxpdE1hdGNoZWRRdWVyaWVzRHNsKG1hdGNoZWRRdWVyaWVzRHNsKSwgbWF0Y2hlZFF1ZXJpZXMgPSBfYS5tYXRjaGVkUXVlcmllcywgcmVmZXJlbmNlcyA9IF9hLnJlZmVyZW5jZXMsIG1hdGNoZWRRdWVyeUlkcyA9IF9hLm1hdGNoZWRRdWVyeUlkcztcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0ZW1wbGF0ZSA9IHRlbXBsYXRlRmFjdG9yeSA/IHJlc29sdmVEZWZpbml0aW9uKHRlbXBsYXRlRmFjdG9yeSkgOiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIHdpbGwgYmV0IHNldCBieSB0aGUgdmlldyBkZWZpbml0aW9uXG4gICAgICAgIG5vZGVJbmRleDogLTEsXG4gICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgcmVuZGVyUGFyZW50OiBudWxsLFxuICAgICAgICBiaW5kaW5nSW5kZXg6IC0xLFxuICAgICAgICBvdXRwdXRJbmRleDogLTEsXG4gICAgICAgIC8vIHJlZ3VsYXIgdmFsdWVzXG4gICAgICAgIGZsYWdzOiBmbGFncyxcbiAgICAgICAgY2hlY2tJbmRleDogLTEsXG4gICAgICAgIGNoaWxkRmxhZ3M6IDAsXG4gICAgICAgIGRpcmVjdENoaWxkRmxhZ3M6IDAsXG4gICAgICAgIGNoaWxkTWF0Y2hlZFF1ZXJpZXM6IDAsIG1hdGNoZWRRdWVyaWVzOiBtYXRjaGVkUXVlcmllcywgbWF0Y2hlZFF1ZXJ5SWRzOiBtYXRjaGVkUXVlcnlJZHMsIHJlZmVyZW5jZXM6IHJlZmVyZW5jZXMsIG5nQ29udGVudEluZGV4OiBuZ0NvbnRlbnRJbmRleCwgY2hpbGRDb3VudDogY2hpbGRDb3VudCxcbiAgICAgICAgYmluZGluZ3M6IFtdLFxuICAgICAgICBiaW5kaW5nRmxhZ3M6IDAsXG4gICAgICAgIG91dHB1dHM6IFtdLFxuICAgICAgICBlbGVtZW50OiB7XG4gICAgICAgICAgICBuczogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBhdHRyczogbnVsbCwgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgICAgICAgICAgY29tcG9uZW50UHJvdmlkZXI6IG51bGwsXG4gICAgICAgICAgICBjb21wb25lbnRWaWV3OiBudWxsLFxuICAgICAgICAgICAgY29tcG9uZW50UmVuZGVyZXJUeXBlOiBudWxsLFxuICAgICAgICAgICAgcHVibGljUHJvdmlkZXJzOiBudWxsLFxuICAgICAgICAgICAgYWxsUHJvdmlkZXJzOiBudWxsLFxuICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IGhhbmRsZUV2ZW50IHx8IE5PT1BcbiAgICAgICAgfSxcbiAgICAgICAgcHJvdmlkZXI6IG51bGwsXG4gICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgIHF1ZXJ5OiBudWxsLFxuICAgICAgICBuZ0NvbnRlbnQ6IG51bGxcbiAgICB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGNoZWNrSW5kZXhcbiAqIEBwYXJhbSB7P30gZmxhZ3NcbiAqIEBwYXJhbSB7P30gbWF0Y2hlZFF1ZXJpZXNEc2xcbiAqIEBwYXJhbSB7P30gbmdDb250ZW50SW5kZXhcbiAqIEBwYXJhbSB7P30gY2hpbGRDb3VudFxuICogQHBhcmFtIHs/fSBuYW1lc3BhY2VBbmROYW1lXG4gKiBAcGFyYW0gez89fSBmaXhlZEF0dHJzXG4gKiBAcGFyYW0gez89fSBiaW5kaW5nc1xuICogQHBhcmFtIHs/PX0gb3V0cHV0c1xuICogQHBhcmFtIHs/PX0gaGFuZGxlRXZlbnRcbiAqIEBwYXJhbSB7Pz19IGNvbXBvbmVudFZpZXdcbiAqIEBwYXJhbSB7Pz19IGNvbXBvbmVudFJlbmRlcmVyVHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZWxlbWVudERlZihjaGVja0luZGV4LCBmbGFncywgbWF0Y2hlZFF1ZXJpZXNEc2wsIG5nQ29udGVudEluZGV4LCBjaGlsZENvdW50LCBuYW1lc3BhY2VBbmROYW1lLCBmaXhlZEF0dHJzLCBiaW5kaW5ncywgb3V0cHV0cywgaGFuZGxlRXZlbnQsIGNvbXBvbmVudFZpZXcsIGNvbXBvbmVudFJlbmRlcmVyVHlwZSkge1xuICAgIGlmIChmaXhlZEF0dHJzID09PSB2b2lkIDApIHsgZml4ZWRBdHRycyA9IFtdOyB9XG4gICAgaWYgKCFoYW5kbGVFdmVudCkge1xuICAgICAgICBoYW5kbGVFdmVudCA9IE5PT1A7XG4gICAgfVxuICAgIHZhciBfYSA9IHNwbGl0TWF0Y2hlZFF1ZXJpZXNEc2wobWF0Y2hlZFF1ZXJpZXNEc2wpLCBtYXRjaGVkUXVlcmllcyA9IF9hLm1hdGNoZWRRdWVyaWVzLCByZWZlcmVuY2VzID0gX2EucmVmZXJlbmNlcywgbWF0Y2hlZFF1ZXJ5SWRzID0gX2EubWF0Y2hlZFF1ZXJ5SWRzO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG5zID0gLyoqIEB0eXBlIHs/fSAqLyAoKG51bGwpKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuYW1lID0gLyoqIEB0eXBlIHs/fSAqLyAoKG51bGwpKTtcbiAgICBpZiAobmFtZXNwYWNlQW5kTmFtZSkge1xuICAgICAgICBfYiA9IHNwbGl0TmFtZXNwYWNlKG5hbWVzcGFjZUFuZE5hbWUpLCBucyA9IF9iWzBdLCBuYW1lID0gX2JbMV07XG4gICAgfVxuICAgIGJpbmRpbmdzID0gYmluZGluZ3MgfHwgW107XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ0RlZnMgPSBuZXcgQXJyYXkoYmluZGluZ3MubGVuZ3RoKTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIF9jID0gYmluZGluZ3NbaV0sIGJpbmRpbmdGbGFncyA9IF9jWzBdLCBuYW1lc3BhY2VBbmROYW1lXzEgPSBfY1sxXSwgc3VmZml4T3JTZWN1cml0eUNvbnRleHQgPSBfY1syXTtcbiAgICAgICAgdmFyIF9kID0gc3BsaXROYW1lc3BhY2UobmFtZXNwYWNlQW5kTmFtZV8xKSwgbnNfMSA9IF9kWzBdLCBuYW1lXzEgPSBfZFsxXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VjdXJpdHlDb250ZXh0ID0gLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdWZmaXggPSAvKiogQHR5cGUgez99ICovICgodW5kZWZpbmVkKSk7XG4gICAgICAgIHN3aXRjaCAoYmluZGluZ0ZsYWdzICYgMTUgLyogVHlwZXMgKi8pIHtcbiAgICAgICAgICAgIGNhc2UgNCAvKiBUeXBlRWxlbWVudFN0eWxlICovOlxuICAgICAgICAgICAgICAgIHN1ZmZpeCA9IC8qKiBAdHlwZSB7P30gKi8gKHN1ZmZpeE9yU2VjdXJpdHlDb250ZXh0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMSAvKiBUeXBlRWxlbWVudEF0dHJpYnV0ZSAqLzpcbiAgICAgICAgICAgIGNhc2UgOCAvKiBUeXBlUHJvcGVydHkgKi86XG4gICAgICAgICAgICAgICAgc2VjdXJpdHlDb250ZXh0ID0gLyoqIEB0eXBlIHs/fSAqLyAoc3VmZml4T3JTZWN1cml0eUNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJpbmRpbmdEZWZzW2ldID1cbiAgICAgICAgICAgIHsgZmxhZ3M6IGJpbmRpbmdGbGFncywgbnM6IG5zXzEsIG5hbWU6IG5hbWVfMSwgbm9uTWluaWZpZWROYW1lOiBuYW1lXzEsIHNlY3VyaXR5Q29udGV4dDogc2VjdXJpdHlDb250ZXh0LCBzdWZmaXg6IHN1ZmZpeCB9O1xuICAgIH1cbiAgICBvdXRwdXRzID0gb3V0cHV0cyB8fCBbXTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvdXRwdXREZWZzID0gbmV3IEFycmF5KG91dHB1dHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgb3V0cHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgX2UgPSBvdXRwdXRzW2ldLCB0YXJnZXQgPSBfZVswXSwgZXZlbnROYW1lID0gX2VbMV07XG4gICAgICAgIG91dHB1dERlZnNbaV0gPSB7XG4gICAgICAgICAgICB0eXBlOiAwIC8qIEVsZW1lbnRPdXRwdXQgKi8sXG4gICAgICAgICAgICB0YXJnZXQ6IC8qKiBAdHlwZSB7P30gKi8gKHRhcmdldCksIGV2ZW50TmFtZTogZXZlbnROYW1lLFxuICAgICAgICAgICAgcHJvcE5hbWU6IG51bGxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZml4ZWRBdHRycyA9IGZpeGVkQXR0cnMgfHwgW107XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYXR0cnMgPSAvKiogQHR5cGUgez99ICovIChmaXhlZEF0dHJzLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIG5hbWVzcGFjZUFuZE5hbWUgPSBfYVswXSwgdmFsdWUgPSBfYVsxXTtcbiAgICAgICAgdmFyIF9iID0gc3BsaXROYW1lc3BhY2UobmFtZXNwYWNlQW5kTmFtZSksIG5zID0gX2JbMF0sIG5hbWUgPSBfYlsxXTtcbiAgICAgICAgcmV0dXJuIFtucywgbmFtZSwgdmFsdWVdO1xuICAgIH0pKTtcbiAgICBjb21wb25lbnRSZW5kZXJlclR5cGUgPSByZXNvbHZlUmVuZGVyZXJUeXBlMihjb21wb25lbnRSZW5kZXJlclR5cGUpO1xuICAgIGlmIChjb21wb25lbnRWaWV3KSB7XG4gICAgICAgIGZsYWdzIHw9IDMzNTU0NDMyIC8qIENvbXBvbmVudFZpZXcgKi87XG4gICAgfVxuICAgIGZsYWdzIHw9IDEgLyogVHlwZUVsZW1lbnQgKi87XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gd2lsbCBiZXQgc2V0IGJ5IHRoZSB2aWV3IGRlZmluaXRpb25cbiAgICAgICAgbm9kZUluZGV4OiAtMSxcbiAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICByZW5kZXJQYXJlbnQ6IG51bGwsXG4gICAgICAgIGJpbmRpbmdJbmRleDogLTEsXG4gICAgICAgIG91dHB1dEluZGV4OiAtMSxcbiAgICAgICAgLy8gcmVndWxhciB2YWx1ZXNcbiAgICAgICAgY2hlY2tJbmRleDogY2hlY2tJbmRleCxcbiAgICAgICAgZmxhZ3M6IGZsYWdzLFxuICAgICAgICBjaGlsZEZsYWdzOiAwLFxuICAgICAgICBkaXJlY3RDaGlsZEZsYWdzOiAwLFxuICAgICAgICBjaGlsZE1hdGNoZWRRdWVyaWVzOiAwLCBtYXRjaGVkUXVlcmllczogbWF0Y2hlZFF1ZXJpZXMsIG1hdGNoZWRRdWVyeUlkczogbWF0Y2hlZFF1ZXJ5SWRzLCByZWZlcmVuY2VzOiByZWZlcmVuY2VzLCBuZ0NvbnRlbnRJbmRleDogbmdDb250ZW50SW5kZXgsIGNoaWxkQ291bnQ6IGNoaWxkQ291bnQsXG4gICAgICAgIGJpbmRpbmdzOiBiaW5kaW5nRGVmcyxcbiAgICAgICAgYmluZGluZ0ZsYWdzOiBjYWxjQmluZGluZ0ZsYWdzKGJpbmRpbmdEZWZzKSxcbiAgICAgICAgb3V0cHV0czogb3V0cHV0RGVmcyxcbiAgICAgICAgZWxlbWVudDoge1xuICAgICAgICAgICAgbnM6IG5zLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGF0dHJzOiBhdHRycyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBudWxsLFxuICAgICAgICAgICAgLy8gd2lsbCBiZXQgc2V0IGJ5IHRoZSB2aWV3IGRlZmluaXRpb25cbiAgICAgICAgICAgIGNvbXBvbmVudFByb3ZpZGVyOiBudWxsLFxuICAgICAgICAgICAgY29tcG9uZW50VmlldzogY29tcG9uZW50VmlldyB8fCBudWxsLFxuICAgICAgICAgICAgY29tcG9uZW50UmVuZGVyZXJUeXBlOiBjb21wb25lbnRSZW5kZXJlclR5cGUsXG4gICAgICAgICAgICBwdWJsaWNQcm92aWRlcnM6IG51bGwsXG4gICAgICAgICAgICBhbGxQcm92aWRlcnM6IG51bGwsXG4gICAgICAgICAgICBoYW5kbGVFdmVudDogaGFuZGxlRXZlbnQgfHwgTk9PUCxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvdmlkZXI6IG51bGwsXG4gICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgIHF1ZXJ5OiBudWxsLFxuICAgICAgICBuZ0NvbnRlbnQ6IG51bGxcbiAgICB9O1xuICAgIHZhciBfYjtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IHJlbmRlckhvc3RcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHZpZXcsIHJlbmRlckhvc3QsIGRlZikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsRGVmID0gLyoqIEB0eXBlIHs/fSAqLyAoKGRlZi5lbGVtZW50KSk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcm9vdFNlbGVjdG9yT3JOb2RlID0gdmlldy5yb290LnNlbGVjdG9yT3JOb2RlO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlcmVyID0gdmlldy5yZW5kZXJlcjtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbDtcbiAgICBpZiAodmlldy5wYXJlbnQgfHwgIXJvb3RTZWxlY3Rvck9yTm9kZSkge1xuICAgICAgICBpZiAoZWxEZWYubmFtZSkge1xuICAgICAgICAgICAgZWwgPSByZW5kZXJlci5jcmVhdGVFbGVtZW50KGVsRGVmLm5hbWUsIGVsRGVmLm5zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsID0gcmVuZGVyZXIuY3JlYXRlQ29tbWVudCgnJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50RWwgPSBnZXRQYXJlbnRSZW5kZXJFbGVtZW50KHZpZXcsIHJlbmRlckhvc3QsIGRlZik7XG4gICAgICAgIGlmIChwYXJlbnRFbCkge1xuICAgICAgICAgICAgcmVuZGVyZXIuYXBwZW5kQ2hpbGQocGFyZW50RWwsIGVsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWwgPSByZW5kZXJlci5zZWxlY3RSb290RWxlbWVudChyb290U2VsZWN0b3JPck5vZGUpO1xuICAgIH1cbiAgICBpZiAoZWxEZWYuYXR0cnMpIHtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGVsRGVmLmF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBlbERlZi5hdHRyc1tpXSwgbnMgPSBfYVswXSwgbmFtZV8yID0gX2FbMV0sIHZhbHVlID0gX2FbMl07XG4gICAgICAgICAgICByZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIG5hbWVfMiwgdmFsdWUsIG5zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWw7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBjb21wVmlld1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEBwYXJhbSB7P30gZWxcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGxpc3RlblRvRWxlbWVudE91dHB1dHModmlldywgY29tcFZpZXcsIGRlZiwgZWwpIHtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgZGVmLm91dHB1dHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3V0cHV0ID0gZGVmLm91dHB1dHNbaV07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGhhbmRsZUV2ZW50Q2xvc3VyZSA9IHJlbmRlckV2ZW50SGFuZGxlckNsb3N1cmUodmlldywgZGVmLm5vZGVJbmRleCwgZWxlbWVudEV2ZW50RnVsbE5hbWUob3V0cHV0LnRhcmdldCwgb3V0cHV0LmV2ZW50TmFtZSkpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsaXN0ZW5UYXJnZXQgPSBvdXRwdXQudGFyZ2V0O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsaXN0ZW5lclZpZXcgPSB2aWV3O1xuICAgICAgICBpZiAob3V0cHV0LnRhcmdldCA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICAgIGxpc3RlblRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICBsaXN0ZW5lclZpZXcgPSBjb21wVmlldztcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkaXNwb3NhYmxlID0gLyoqIEB0eXBlIHs/fSAqLyAobGlzdGVuZXJWaWV3LnJlbmRlcmVyLmxpc3RlbihsaXN0ZW5UYXJnZXQgfHwgZWwsIG91dHB1dC5ldmVudE5hbWUsIGhhbmRsZUV2ZW50Q2xvc3VyZSkpOyAvKiogQHR5cGUgez99ICovXG4gICAgICAgICgodmlldy5kaXNwb3NhYmxlcykpW2RlZi5vdXRwdXRJbmRleCArIGldID0gZGlzcG9zYWJsZTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBpbmRleFxuICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlbmRlckV2ZW50SGFuZGxlckNsb3N1cmUodmlldywgaW5kZXgsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGRpc3BhdGNoRXZlbnQodmlldywgaW5kZXgsIGV2ZW50TmFtZSwgZXZlbnQpOyB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IHYwXG4gKiBAcGFyYW0gez99IHYxXG4gKiBAcGFyYW0gez99IHYyXG4gKiBAcGFyYW0gez99IHYzXG4gKiBAcGFyYW0gez99IHY0XG4gKiBAcGFyYW0gez99IHY1XG4gKiBAcGFyYW0gez99IHY2XG4gKiBAcGFyYW0gez99IHY3XG4gKiBAcGFyYW0gez99IHY4XG4gKiBAcGFyYW0gez99IHY5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja0FuZFVwZGF0ZUVsZW1lbnRJbmxpbmUodmlldywgZGVmLCB2MCwgdjEsIHYyLCB2MywgdjQsIHY1LCB2NiwgdjcsIHY4LCB2OSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRMZW4gPSBkZWYuYmluZGluZ3MubGVuZ3RoO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoYW5nZWQgPSBmYWxzZTtcbiAgICBpZiAoYmluZExlbiA+IDAgJiYgY2hlY2tBbmRVcGRhdGVFbGVtZW50VmFsdWUodmlldywgZGVmLCAwLCB2MCkpXG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIGlmIChiaW5kTGVuID4gMSAmJiBjaGVja0FuZFVwZGF0ZUVsZW1lbnRWYWx1ZSh2aWV3LCBkZWYsIDEsIHYxKSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiAyICYmIGNoZWNrQW5kVXBkYXRlRWxlbWVudFZhbHVlKHZpZXcsIGRlZiwgMiwgdjIpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDMgJiYgY2hlY2tBbmRVcGRhdGVFbGVtZW50VmFsdWUodmlldywgZGVmLCAzLCB2MykpXG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIGlmIChiaW5kTGVuID4gNCAmJiBjaGVja0FuZFVwZGF0ZUVsZW1lbnRWYWx1ZSh2aWV3LCBkZWYsIDQsIHY0KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA1ICYmIGNoZWNrQW5kVXBkYXRlRWxlbWVudFZhbHVlKHZpZXcsIGRlZiwgNSwgdjUpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDYgJiYgY2hlY2tBbmRVcGRhdGVFbGVtZW50VmFsdWUodmlldywgZGVmLCA2LCB2NikpXG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIGlmIChiaW5kTGVuID4gNyAmJiBjaGVja0FuZFVwZGF0ZUVsZW1lbnRWYWx1ZSh2aWV3LCBkZWYsIDcsIHY3KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA4ICYmIGNoZWNrQW5kVXBkYXRlRWxlbWVudFZhbHVlKHZpZXcsIGRlZiwgOCwgdjgpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDkgJiYgY2hlY2tBbmRVcGRhdGVFbGVtZW50VmFsdWUodmlldywgZGVmLCA5LCB2OSkpXG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgIHJldHVybiBjaGFuZ2VkO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IHZhbHVlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVFbGVtZW50RHluYW1pYyh2aWV3LCBkZWYsIHZhbHVlcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoYW5nZWQgPSBmYWxzZTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGVja0FuZFVwZGF0ZUVsZW1lbnRWYWx1ZSh2aWV3LCBkZWYsIGksIHZhbHVlc1tpXSkpXG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEBwYXJhbSB7P30gYmluZGluZ0lkeFxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVFbGVtZW50VmFsdWUodmlldywgZGVmLCBiaW5kaW5nSWR4LCB2YWx1ZSkge1xuICAgIGlmICghY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgYmluZGluZ0lkeCwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZyA9IGRlZi5iaW5kaW5nc1tiaW5kaW5nSWR4XTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbERhdGEgPSBhc0VsZW1lbnREYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlck5vZGUkJDEgPSBlbERhdGEucmVuZGVyRWxlbWVudDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuYW1lID0gLyoqIEB0eXBlIHs/fSAqLyAoKGJpbmRpbmcubmFtZSkpO1xuICAgIHN3aXRjaCAoYmluZGluZy5mbGFncyAmIDE1IC8qIFR5cGVzICovKSB7XG4gICAgICAgIGNhc2UgMSAvKiBUeXBlRWxlbWVudEF0dHJpYnV0ZSAqLzpcbiAgICAgICAgICAgIHNldEVsZW1lbnRBdHRyaWJ1dGUodmlldywgYmluZGluZywgcmVuZGVyTm9kZSQkMSwgYmluZGluZy5ucywgbmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMiAvKiBUeXBlRWxlbWVudENsYXNzICovOlxuICAgICAgICAgICAgc2V0RWxlbWVudENsYXNzKHZpZXcsIHJlbmRlck5vZGUkJDEsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQgLyogVHlwZUVsZW1lbnRTdHlsZSAqLzpcbiAgICAgICAgICAgIHNldEVsZW1lbnRTdHlsZSh2aWV3LCBiaW5kaW5nLCByZW5kZXJOb2RlJCQxLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4IC8qIFR5cGVQcm9wZXJ0eSAqLzpcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRWaWV3ID0gKGRlZi5mbGFncyAmIDMzNTU0NDMyIC8qIENvbXBvbmVudFZpZXcgKi8gJiZcbiAgICAgICAgICAgICAgICBiaW5kaW5nLmZsYWdzICYgMzIgLyogU3ludGhldGljSG9zdFByb3BlcnR5ICovKSA/XG4gICAgICAgICAgICAgICAgZWxEYXRhLmNvbXBvbmVudFZpZXcgOlxuICAgICAgICAgICAgICAgIHZpZXc7XG4gICAgICAgICAgICBzZXRFbGVtZW50UHJvcGVydHkoYmluZFZpZXcsIGJpbmRpbmcsIHJlbmRlck5vZGUkJDEsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGJpbmRpbmdcbiAqIEBwYXJhbSB7P30gcmVuZGVyTm9kZVxuICogQHBhcmFtIHs/fSBuc1xuICogQHBhcmFtIHs/fSBuYW1lXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzZXRFbGVtZW50QXR0cmlidXRlKHZpZXcsIGJpbmRpbmcsIHJlbmRlck5vZGUkJDEsIG5zLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHNlY3VyaXR5Q29udGV4dCA9IGJpbmRpbmcuc2VjdXJpdHlDb250ZXh0O1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlclZhbHVlID0gc2VjdXJpdHlDb250ZXh0ID8gdmlldy5yb290LnNhbml0aXplci5zYW5pdGl6ZShzZWN1cml0eUNvbnRleHQsIHZhbHVlKSA6IHZhbHVlO1xuICAgIHJlbmRlclZhbHVlID0gcmVuZGVyVmFsdWUgIT0gbnVsbCA/IHJlbmRlclZhbHVlLnRvU3RyaW5nKCkgOiBudWxsO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlcmVyID0gdmlldy5yZW5kZXJlcjtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZW5kZXJlci5zZXRBdHRyaWJ1dGUocmVuZGVyTm9kZSQkMSwgbmFtZSwgcmVuZGVyVmFsdWUsIG5zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShyZW5kZXJOb2RlJCQxLCBuYW1lLCBucyk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gcmVuZGVyTm9kZVxuICogQHBhcmFtIHs/fSBuYW1lXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzZXRFbGVtZW50Q2xhc3ModmlldywgcmVuZGVyTm9kZSQkMSwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZW5kZXJlciA9IHZpZXcucmVuZGVyZXI7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlbmRlcmVyLmFkZENsYXNzKHJlbmRlck5vZGUkJDEsIG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVuZGVyZXIucmVtb3ZlQ2xhc3MocmVuZGVyTm9kZSQkMSwgbmFtZSk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gYmluZGluZ1xuICogQHBhcmFtIHs/fSByZW5kZXJOb2RlXG4gKiBAcGFyYW0gez99IG5hbWVcbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNldEVsZW1lbnRTdHlsZSh2aWV3LCBiaW5kaW5nLCByZW5kZXJOb2RlJCQxLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlclZhbHVlID0gdmlldy5yb290LnNhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuU1RZTEUsIC8qKiBAdHlwZSB7P30gKi8gKHZhbHVlKSk7XG4gICAgaWYgKHJlbmRlclZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmVuZGVyVmFsdWUgPSByZW5kZXJWYWx1ZS50b1N0cmluZygpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB1bml0ID0gYmluZGluZy5zdWZmaXg7XG4gICAgICAgIGlmICh1bml0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlbmRlclZhbHVlID0gcmVuZGVyVmFsdWUgKyB1bml0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZW5kZXJWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlcmVyID0gdmlldy5yZW5kZXJlcjtcbiAgICBpZiAocmVuZGVyVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZW5kZXJlci5zZXRTdHlsZShyZW5kZXJOb2RlJCQxLCBuYW1lLCByZW5kZXJWYWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZW5kZXJlci5yZW1vdmVTdHlsZShyZW5kZXJOb2RlJCQxLCBuYW1lKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBiaW5kaW5nXG4gKiBAcGFyYW0gez99IHJlbmRlck5vZGVcbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gc2V0RWxlbWVudFByb3BlcnR5KHZpZXcsIGJpbmRpbmcsIHJlbmRlck5vZGUkJDEsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VjdXJpdHlDb250ZXh0ID0gYmluZGluZy5zZWN1cml0eUNvbnRleHQ7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyVmFsdWUgPSBzZWN1cml0eUNvbnRleHQgPyB2aWV3LnJvb3Quc2FuaXRpemVyLnNhbml0aXplKHNlY3VyaXR5Q29udGV4dCwgdmFsdWUpIDogdmFsdWU7XG4gICAgdmlldy5yZW5kZXJlci5zZXRQcm9wZXJ0eShyZW5kZXJOb2RlJCQxLCBuYW1lLCByZW5kZXJWYWx1ZSk7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBVTkRFRklORURfVkFMVUUgPSBuZXcgT2JqZWN0KCk7XG52YXIgSW5qZWN0b3JSZWZUb2tlbktleSQxID0gdG9rZW5LZXkoSW5qZWN0b3IpO1xudmFyIE5nTW9kdWxlUmVmVG9rZW5LZXkgPSB0b2tlbktleShOZ01vZHVsZVJlZik7XG4vKipcbiAqIEBwYXJhbSB7P30gZmxhZ3NcbiAqIEBwYXJhbSB7P30gdG9rZW5cbiAqIEBwYXJhbSB7P30gdmFsdWVcbiAqIEBwYXJhbSB7P30gZGVwc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbW9kdWxlUHJvdmlkZURlZihmbGFncywgdG9rZW4sIHZhbHVlLCBkZXBzKSB7XG4gICAgLy8gTmVlZCB0byByZXNvbHZlIGZvcndhcmRSZWZzIGFzIGUuZy4gZm9yIGB1c2VWYWx1ZWAgd2VcbiAgICAvLyBsb3dlcmVkIHRoZSBleHByZXNzaW9uIGFuZCB0aGVuIHN0b3BwZWQgZXZhbHVhdGluZyBpdCxcbiAgICAvLyBpLmUuIGFsc28gZGlkbid0IHVud3JhcCBpdC5cbiAgICB2YWx1ZSA9IHJlc29sdmVGb3J3YXJkUmVmKHZhbHVlKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBEZWZzID0gc3BsaXREZXBzRHNsKGRlcHMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIHdpbGwgYmV0IHNldCBieSB0aGUgbW9kdWxlIGRlZmluaXRpb25cbiAgICAgICAgaW5kZXg6IC0xLFxuICAgICAgICBkZXBzOiBkZXBEZWZzLCBmbGFnczogZmxhZ3MsIHRva2VuOiB0b2tlbiwgdmFsdWU6IHZhbHVlXG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBwcm92aWRlcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG1vZHVsZURlZihwcm92aWRlcnMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm92aWRlcnNCeUtleSA9IHt9O1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBwcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZXIgPSBwcm92aWRlcnNbaV07XG4gICAgICAgIHByb3ZpZGVyLmluZGV4ID0gaTtcbiAgICAgICAgcHJvdmlkZXJzQnlLZXlbdG9rZW5LZXkocHJvdmlkZXIudG9rZW4pXSA9IHByb3ZpZGVyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBXaWxsIGJlIGZpbGxlZCBsYXRlci4uLlxuICAgICAgICBmYWN0b3J5OiBudWxsLFxuICAgICAgICBwcm92aWRlcnNCeUtleTogcHJvdmlkZXJzQnlLZXksXG4gICAgICAgIHByb3ZpZGVyczogcHJvdmlkZXJzXG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBkYXRhXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbml0TmdNb2R1bGUoZGF0YSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlZiA9IGRhdGEuX2RlZjtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm92aWRlcnMgPSBkYXRhLl9wcm92aWRlcnMgPSBuZXcgQXJyYXkoZGVmLnByb3ZpZGVycy5sZW5ndGgpO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBkZWYucHJvdmlkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZEZWYgPSBkZWYucHJvdmlkZXJzW2ldO1xuICAgICAgICBpZiAoIShwcm92RGVmLmZsYWdzICYgNDA5NiAvKiBMYXp5UHJvdmlkZXIgKi8pKSB7XG4gICAgICAgICAgICBwcm92aWRlcnNbaV0gPSBfY3JlYXRlUHJvdmlkZXJJbnN0YW5jZSQxKGRhdGEsIHByb3ZEZWYpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IGRhdGFcbiAqIEBwYXJhbSB7P30gZGVwRGVmXG4gKiBAcGFyYW0gez89fSBub3RGb3VuZFZhbHVlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZXNvbHZlTmdNb2R1bGVEZXAoZGF0YSwgZGVwRGVmLCBub3RGb3VuZFZhbHVlKSB7XG4gICAgaWYgKG5vdEZvdW5kVmFsdWUgPT09IHZvaWQgMCkgeyBub3RGb3VuZFZhbHVlID0gSW5qZWN0b3IuVEhST1dfSUZfTk9UX0ZPVU5EOyB9XG4gICAgaWYgKGRlcERlZi5mbGFncyAmIDggLyogVmFsdWUgKi8pIHtcbiAgICAgICAgcmV0dXJuIGRlcERlZi50b2tlbjtcbiAgICB9XG4gICAgaWYgKGRlcERlZi5mbGFncyAmIDIgLyogT3B0aW9uYWwgKi8pIHtcbiAgICAgICAgbm90Rm91bmRWYWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChkZXBEZWYuZmxhZ3MgJiAxIC8qIFNraXBTZWxmICovKSB7XG4gICAgICAgIHJldHVybiBkYXRhLl9wYXJlbnQuZ2V0KGRlcERlZi50b2tlbiwgbm90Rm91bmRWYWx1ZSk7XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIHRva2VuS2V5JCQxID0gZGVwRGVmLnRva2VuS2V5O1xuICAgIHN3aXRjaCAodG9rZW5LZXkkJDEpIHtcbiAgICAgICAgY2FzZSBJbmplY3RvclJlZlRva2VuS2V5JDE6XG4gICAgICAgIGNhc2UgTmdNb2R1bGVSZWZUb2tlbktleTpcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm92aWRlckRlZiA9IGRhdGEuX2RlZi5wcm92aWRlcnNCeUtleVt0b2tlbktleSQkMV07XG4gICAgaWYgKHByb3ZpZGVyRGVmKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZpZGVySW5zdGFuY2UgPSBkYXRhLl9wcm92aWRlcnNbcHJvdmlkZXJEZWYuaW5kZXhdO1xuICAgICAgICBpZiAocHJvdmlkZXJJbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm92aWRlckluc3RhbmNlID0gZGF0YS5fcHJvdmlkZXJzW3Byb3ZpZGVyRGVmLmluZGV4XSA9XG4gICAgICAgICAgICAgICAgX2NyZWF0ZVByb3ZpZGVySW5zdGFuY2UkMShkYXRhLCBwcm92aWRlckRlZik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVySW5zdGFuY2UgPT09IFVOREVGSU5FRF9WQUxVRSA/IHVuZGVmaW5lZCA6IHByb3ZpZGVySW5zdGFuY2U7XG4gICAgfVxuICAgIHJldHVybiBkYXRhLl9wYXJlbnQuZ2V0KGRlcERlZi50b2tlbiwgbm90Rm91bmRWYWx1ZSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbmdNb2R1bGVcbiAqIEBwYXJhbSB7P30gcHJvdmlkZXJEZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9jcmVhdGVQcm92aWRlckluc3RhbmNlJDEobmdNb2R1bGUsIHByb3ZpZGVyRGVmKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5qZWN0YWJsZTtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyRGVmLmZsYWdzICYgMjAxMzQ3MDY3IC8qIFR5cGVzICovKSB7XG4gICAgICAgIGNhc2UgNTEyIC8qIFR5cGVDbGFzc1Byb3ZpZGVyICovOlxuICAgICAgICAgICAgaW5qZWN0YWJsZSA9IF9jcmVhdGVDbGFzcyhuZ01vZHVsZSwgcHJvdmlkZXJEZWYudmFsdWUsIHByb3ZpZGVyRGVmLmRlcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTAyNCAvKiBUeXBlRmFjdG9yeVByb3ZpZGVyICovOlxuICAgICAgICAgICAgaW5qZWN0YWJsZSA9IF9jYWxsRmFjdG9yeShuZ01vZHVsZSwgcHJvdmlkZXJEZWYudmFsdWUsIHByb3ZpZGVyRGVmLmRlcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjA0OCAvKiBUeXBlVXNlRXhpc3RpbmdQcm92aWRlciAqLzpcbiAgICAgICAgICAgIGluamVjdGFibGUgPSByZXNvbHZlTmdNb2R1bGVEZXAobmdNb2R1bGUsIHByb3ZpZGVyRGVmLmRlcHNbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjU2IC8qIFR5cGVWYWx1ZVByb3ZpZGVyICovOlxuICAgICAgICAgICAgaW5qZWN0YWJsZSA9IHByb3ZpZGVyRGVmLnZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBpbmplY3RhYmxlID09PSB1bmRlZmluZWQgPyBVTkRFRklORURfVkFMVUUgOiBpbmplY3RhYmxlO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG5nTW9kdWxlXG4gKiBAcGFyYW0gez99IGN0b3JcbiAqIEBwYXJhbSB7P30gZGVwc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKG5nTW9kdWxlLCBjdG9yLCBkZXBzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGVuID0gZGVwcy5sZW5ndGg7XG4gICAgc3dpdGNoIChsZW4pIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKCk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcihyZXNvbHZlTmdNb2R1bGVEZXAobmdNb2R1bGUsIGRlcHNbMF0pKTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1swXSksIHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1sxXSkpO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGN0b3IocmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzBdKSwgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzFdKSwgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzJdKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBWYWx1ZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGRlcFZhbHVlc1tpXSA9IHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IChjdG9yLmJpbmQuYXBwbHkoY3RvciwgW3ZvaWQgMF0uY29uY2F0KGRlcFZhbHVlcykpKSgpO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBuZ01vZHVsZVxuICogQHBhcmFtIHs/fSBmYWN0b3J5XG4gKiBAcGFyYW0gez99IGRlcHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIF9jYWxsRmFjdG9yeShuZ01vZHVsZSwgZmFjdG9yeSwgZGVwcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGxlbiA9IGRlcHMubGVuZ3RoO1xuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KCk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHJlc29sdmVOZ01vZHVsZURlcChuZ01vZHVsZSwgZGVwc1swXSkpO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeShyZXNvbHZlTmdNb2R1bGVEZXAobmdNb2R1bGUsIGRlcHNbMF0pLCByZXNvbHZlTmdNb2R1bGVEZXAobmdNb2R1bGUsIGRlcHNbMV0pKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkocmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzBdKSwgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzFdKSwgcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzWzJdKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBWYWx1ZXMgPSBBcnJheShsZW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGVwVmFsdWVzW2ldID0gcmVzb2x2ZU5nTW9kdWxlRGVwKG5nTW9kdWxlLCBkZXBzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5LmFwcGx5KHZvaWQgMCwgZGVwVmFsdWVzKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbmdNb2R1bGVcbiAqIEBwYXJhbSB7P30gbGlmZWN5Y2xlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2FsbE5nTW9kdWxlTGlmZWN5Y2xlKG5nTW9kdWxlLCBsaWZlY3ljbGVzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVmID0gbmdNb2R1bGUuX2RlZjtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgZGVmLnByb3ZpZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm92RGVmID0gZGVmLnByb3ZpZGVyc1tpXTtcbiAgICAgICAgaWYgKHByb3ZEZWYuZmxhZ3MgJiAxMzEwNzIgLyogT25EZXN0cm95ICovKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbnN0YW5jZSA9IG5nTW9kdWxlLl9wcm92aWRlcnNbaV07XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UgIT09IFVOREVGSU5FRF9WQUxVRSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLm5nT25EZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQHBhcmFtIHs/fSBwYXJlbnRWaWV3XG4gKiBAcGFyYW0gez99IGVsZW1lbnREYXRhXG4gKiBAcGFyYW0gez99IHZpZXdJbmRleFxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhdHRhY2hFbWJlZGRlZFZpZXcocGFyZW50VmlldywgZWxlbWVudERhdGEsIHZpZXdJbmRleCwgdmlldykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGVtYmVkZGVkVmlld3MgPSAvKiogQHR5cGUgez99ICovICgoZWxlbWVudERhdGEudmlld0NvbnRhaW5lcikpLl9lbWJlZGRlZFZpZXdzO1xuICAgIGlmICh2aWV3SW5kZXggPT09IG51bGwgfHwgdmlld0luZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmlld0luZGV4ID0gZW1iZWRkZWRWaWV3cy5sZW5ndGg7XG4gICAgfVxuICAgIHZpZXcudmlld0NvbnRhaW5lclBhcmVudCA9IHBhcmVudFZpZXc7XG4gICAgYWRkVG9BcnJheShlbWJlZGRlZFZpZXdzLCAvKiogQHR5cGUgez99ICovICgodmlld0luZGV4KSksIHZpZXcpO1xuICAgIGF0dGFjaFByb2plY3RlZFZpZXcoZWxlbWVudERhdGEsIHZpZXcpO1xuICAgIFNlcnZpY2VzLmRpcnR5UGFyZW50UXVlcmllcyh2aWV3KTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmV2VmlldyA9IC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3SW5kZXgpKSA+IDAgPyBlbWJlZGRlZFZpZXdzWy8qKiBAdHlwZSB7P30gKi8gKCh2aWV3SW5kZXgpKSAtIDFdIDogbnVsbDtcbiAgICByZW5kZXJBdHRhY2hFbWJlZGRlZFZpZXcoZWxlbWVudERhdGEsIHByZXZWaWV3LCB2aWV3KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2Y0VsZW1lbnREYXRhXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaFByb2plY3RlZFZpZXcodmNFbGVtZW50RGF0YSwgdmlldykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGR2Y0VsZW1lbnREYXRhID0gZGVjbGFyZWRWaWV3Q29udGFpbmVyKHZpZXcpO1xuICAgIGlmICghZHZjRWxlbWVudERhdGEgfHwgZHZjRWxlbWVudERhdGEgPT09IHZjRWxlbWVudERhdGEgfHxcbiAgICAgICAgdmlldy5zdGF0ZSAmIDE2IC8qIElzUHJvamVjdGVkVmlldyAqLykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE5vdGU6IEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZVxuICAgIC8vIC0gYWRkIGEgdmlldyB0byB0ZW1wbGF0ZS5fcHJvamVjdGVkVmlld3Mgb25seSAxeCB0aHJvdWdob3V0IGl0cyBsaWZldGltZSxcbiAgICAvLyAgIGFuZCByZW1vdmUgaXQgbm90IHVudGlsIHRoZSB2aWV3IGlzIGRlc3Ryb3llZC5cbiAgICAvLyAgIChoYXJkLCBhcyB3aGVuIGEgcGFyZW50IHZpZXcgaXMgYXR0YWNoZWQvZGV0YWNoZWQgd2Ugd291bGQgbmVlZCB0byBhdHRhY2gvZGV0YWNoIGFsbFxuICAgIC8vICAgIG5lc3RlZCBwcm9qZWN0ZWQgdmlld3MgYXMgd2VsbCwgZXZlbiBhY2Nyb3NzIGNvbXBvbmVudCBib3VuZGFyaWVzKS5cbiAgICAvLyAtIGRvbid0IHRyYWNrIHRoZSBpbnNlcnRpb24gb3JkZXIgb2Ygdmlld3MgaW4gdGhlIHByb2plY3RlZCB2aWV3cyBhcnJheVxuICAgIC8vICAgKGhhcmQsIGFzIHdoZW4gdGhlIHZpZXdzIG9mIHRoZSBzYW1lIHRlbXBsYXRlIGFyZSBpbnNlcnRlZCBkaWZmZXJlbnQgdmlldyBjb250YWluZXJzKVxuICAgIHZpZXcuc3RhdGUgfD0gMTYgLyogSXNQcm9qZWN0ZWRWaWV3ICovO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb2plY3RlZFZpZXdzID0gZHZjRWxlbWVudERhdGEudGVtcGxhdGUuX3Byb2plY3RlZFZpZXdzO1xuICAgIGlmICghcHJvamVjdGVkVmlld3MpIHtcbiAgICAgICAgcHJvamVjdGVkVmlld3MgPSBkdmNFbGVtZW50RGF0YS50ZW1wbGF0ZS5fcHJvamVjdGVkVmlld3MgPSBbXTtcbiAgICB9XG4gICAgcHJvamVjdGVkVmlld3MucHVzaCh2aWV3KTtcbiAgICAvLyBOb3RlOiB3ZSBhcmUgY2hhbmdpbmcgdGhlIE5vZGVEZWYgaGVyZSBhcyB3ZSBjYW5ub3QgY2FsY3VsYXRlXG4gICAgLy8gdGhlIGZhY3Qgd2hldGhlciBhIHRlbXBsYXRlIGlzIHVzZWQgZm9yIHByb2plY3Rpb24gZHVyaW5nIGNvbXBpbGF0aW9uLlxuICAgIG1hcmtOb2RlQXNQcm9qZWN0ZWRUZW1wbGF0ZSgvKiogQHR5cGUgez99ICovICgodmlldy5wYXJlbnQpKS5kZWYsIC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3LnBhcmVudE5vZGVEZWYpKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld0RlZlxuICogQHBhcmFtIHs/fSBub2RlRGVmXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYXJrTm9kZUFzUHJvamVjdGVkVGVtcGxhdGUodmlld0RlZiwgbm9kZURlZikge1xuICAgIGlmIChub2RlRGVmLmZsYWdzICYgNCAvKiBQcm9qZWN0ZWRUZW1wbGF0ZSAqLykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZpZXdEZWYubm9kZUZsYWdzIHw9IDQgLyogUHJvamVjdGVkVGVtcGxhdGUgKi87XG4gICAgbm9kZURlZi5mbGFncyB8PSA0IC8qIFByb2plY3RlZFRlbXBsYXRlICovO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudE5vZGVEZWYgPSBub2RlRGVmLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50Tm9kZURlZikge1xuICAgICAgICBwYXJlbnROb2RlRGVmLmNoaWxkRmxhZ3MgfD0gNCAvKiBQcm9qZWN0ZWRUZW1wbGF0ZSAqLztcbiAgICAgICAgcGFyZW50Tm9kZURlZiA9IHBhcmVudE5vZGVEZWYucGFyZW50O1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlbGVtZW50RGF0YVxuICogQHBhcmFtIHs/PX0gdmlld0luZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZXRhY2hFbWJlZGRlZFZpZXcoZWxlbWVudERhdGEsIHZpZXdJbmRleCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGVtYmVkZGVkVmlld3MgPSAvKiogQHR5cGUgez99ICovICgoZWxlbWVudERhdGEudmlld0NvbnRhaW5lcikpLl9lbWJlZGRlZFZpZXdzO1xuICAgIGlmICh2aWV3SW5kZXggPT0gbnVsbCB8fCB2aWV3SW5kZXggPj0gZW1iZWRkZWRWaWV3cy5sZW5ndGgpIHtcbiAgICAgICAgdmlld0luZGV4ID0gZW1iZWRkZWRWaWV3cy5sZW5ndGggLSAxO1xuICAgIH1cbiAgICBpZiAodmlld0luZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmlldyA9IGVtYmVkZGVkVmlld3Nbdmlld0luZGV4XTtcbiAgICB2aWV3LnZpZXdDb250YWluZXJQYXJlbnQgPSBudWxsO1xuICAgIHJlbW92ZUZyb21BcnJheShlbWJlZGRlZFZpZXdzLCB2aWV3SW5kZXgpO1xuICAgIC8vIFNlZSBhdHRhY2hQcm9qZWN0ZWRWaWV3IGZvciB3aHkgd2UgZG9uJ3QgdXBkYXRlIHByb2plY3RlZFZpZXdzIGhlcmUuXG4gICAgU2VydmljZXMuZGlydHlQYXJlbnRRdWVyaWVzKHZpZXcpO1xuICAgIHJlbmRlckRldGFjaFZpZXcodmlldyk7XG4gICAgcmV0dXJuIHZpZXc7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGV0YWNoUHJvamVjdGVkVmlldyh2aWV3KSB7XG4gICAgaWYgKCEodmlldy5zdGF0ZSAmIDE2IC8qIElzUHJvamVjdGVkVmlldyAqLykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkdmNFbGVtZW50RGF0YSA9IGRlY2xhcmVkVmlld0NvbnRhaW5lcih2aWV3KTtcbiAgICBpZiAoZHZjRWxlbWVudERhdGEpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvamVjdGVkVmlld3MgPSBkdmNFbGVtZW50RGF0YS50ZW1wbGF0ZS5fcHJvamVjdGVkVmlld3M7XG4gICAgICAgIGlmIChwcm9qZWN0ZWRWaWV3cykge1xuICAgICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KHByb2plY3RlZFZpZXdzLCBwcm9qZWN0ZWRWaWV3cy5pbmRleE9mKHZpZXcpKTtcbiAgICAgICAgICAgIFNlcnZpY2VzLmRpcnR5UGFyZW50UXVlcmllcyh2aWV3KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlbGVtZW50RGF0YVxuICogQHBhcmFtIHs/fSBvbGRWaWV3SW5kZXhcbiAqIEBwYXJhbSB7P30gbmV3Vmlld0luZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtb3ZlRW1iZWRkZWRWaWV3KGVsZW1lbnREYXRhLCBvbGRWaWV3SW5kZXgsIG5ld1ZpZXdJbmRleCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGVtYmVkZGVkVmlld3MgPSAvKiogQHR5cGUgez99ICovICgoZWxlbWVudERhdGEudmlld0NvbnRhaW5lcikpLl9lbWJlZGRlZFZpZXdzO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXcgPSBlbWJlZGRlZFZpZXdzW29sZFZpZXdJbmRleF07XG4gICAgcmVtb3ZlRnJvbUFycmF5KGVtYmVkZGVkVmlld3MsIG9sZFZpZXdJbmRleCk7XG4gICAgaWYgKG5ld1ZpZXdJbmRleCA9PSBudWxsKSB7XG4gICAgICAgIG5ld1ZpZXdJbmRleCA9IGVtYmVkZGVkVmlld3MubGVuZ3RoO1xuICAgIH1cbiAgICBhZGRUb0FycmF5KGVtYmVkZGVkVmlld3MsIG5ld1ZpZXdJbmRleCwgdmlldyk7XG4gICAgLy8gTm90ZTogRG9uJ3QgbmVlZCB0byBjaGFuZ2UgcHJvamVjdGVkVmlld3MgYXMgdGhlIG9yZGVyIGluIHRoZXJlXG4gICAgLy8gYXMgYWx3YXlzIGludmFsaWQuLi5cbiAgICBTZXJ2aWNlcy5kaXJ0eVBhcmVudFF1ZXJpZXModmlldyk7XG4gICAgcmVuZGVyRGV0YWNoVmlldyh2aWV3KTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcmV2VmlldyA9IG5ld1ZpZXdJbmRleCA+IDAgPyBlbWJlZGRlZFZpZXdzW25ld1ZpZXdJbmRleCAtIDFdIDogbnVsbDtcbiAgICByZW5kZXJBdHRhY2hFbWJlZGRlZFZpZXcoZWxlbWVudERhdGEsIHByZXZWaWV3LCB2aWV3KTtcbiAgICByZXR1cm4gdmlldztcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlbGVtZW50RGF0YVxuICogQHBhcmFtIHs/fSBwcmV2Vmlld1xuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZW5kZXJBdHRhY2hFbWJlZGRlZFZpZXcoZWxlbWVudERhdGEsIHByZXZWaWV3LCB2aWV3KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJldlJlbmRlck5vZGUgPSBwcmV2VmlldyA/IHJlbmRlck5vZGUocHJldlZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChwcmV2Vmlldy5kZWYubGFzdFJlbmRlclJvb3ROb2RlKSkpIDpcbiAgICAgICAgZWxlbWVudERhdGEucmVuZGVyRWxlbWVudDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnROb2RlID0gdmlldy5yZW5kZXJlci5wYXJlbnROb2RlKHByZXZSZW5kZXJOb2RlKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuZXh0U2libGluZyA9IHZpZXcucmVuZGVyZXIubmV4dFNpYmxpbmcocHJldlJlbmRlck5vZGUpO1xuICAgIC8vIE5vdGU6IFdlIGNhbid0IGNoZWNrIGlmIGBuZXh0U2libGluZ2AgaXMgcHJlc2VudCwgYXMgb24gV2ViV29ya2VycyBpdCB3aWxsIGFsd2F5cyBiZSFcbiAgICAvLyBIb3dldmVyLCBicm93c2VycyBhdXRvbWF0aWNhbGx5IGRvIGBhcHBlbmRDaGlsZGAgd2hlbiB0aGVyZSBpcyBubyBgbmV4dFNpYmxpbmdgLlxuICAgIHZpc2l0Um9vdFJlbmRlck5vZGVzKHZpZXcsIDIgLyogSW5zZXJ0QmVmb3JlICovLCBwYXJlbnROb2RlLCBuZXh0U2libGluZywgdW5kZWZpbmVkKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZW5kZXJEZXRhY2hWaWV3KHZpZXcpIHtcbiAgICB2aXNpdFJvb3RSZW5kZXJOb2Rlcyh2aWV3LCAzIC8qIFJlbW92ZUNoaWxkICovLCBudWxsLCBudWxsLCB1bmRlZmluZWQpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGFyclxuICogQHBhcmFtIHs/fSBpbmRleFxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYWRkVG9BcnJheShhcnIsIGluZGV4LCB2YWx1ZSkge1xuICAgIC8vIHBlcmY6IGFycmF5LnB1c2ggaXMgZmFzdGVyIHRoYW4gYXJyYXkuc3BsaWNlIVxuICAgIGlmIChpbmRleCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGFyci5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gYXJyXG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiByZW1vdmVGcm9tQXJyYXkoYXJyLCBpbmRleCkge1xuICAgIC8vIHBlcmY6IGFycmF5LnBvcCBpcyBmYXN0ZXIgdGhhbiBhcnJheS5zcGxpY2UhXG4gICAgaWYgKGluZGV4ID49IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgIGFyci5wb3AoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xudmFyIEVNUFRZX0NPTlRFWFQgPSBuZXcgT2JqZWN0KCk7XG4vKipcbiAqIEBwYXJhbSB7P30gc2VsZWN0b3JcbiAqIEBwYXJhbSB7P30gY29tcG9uZW50VHlwZVxuICogQHBhcmFtIHs/fSB2aWV3RGVmRmFjdG9yeVxuICogQHBhcmFtIHs/fSBpbnB1dHNcbiAqIEBwYXJhbSB7P30gb3V0cHV0c1xuICogQHBhcmFtIHs/fSBuZ0NvbnRlbnRTZWxlY3RvcnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEZhY3Rvcnkoc2VsZWN0b3IsIGNvbXBvbmVudFR5cGUsIHZpZXdEZWZGYWN0b3J5LCBpbnB1dHMsIG91dHB1dHMsIG5nQ29udGVudFNlbGVjdG9ycykge1xuICAgIHJldHVybiBuZXcgQ29tcG9uZW50RmFjdG9yeV8oc2VsZWN0b3IsIGNvbXBvbmVudFR5cGUsIHZpZXdEZWZGYWN0b3J5LCBpbnB1dHMsIG91dHB1dHMsIG5nQ29udGVudFNlbGVjdG9ycyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gY29tcG9uZW50RmFjdG9yeVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50Vmlld0RlZmluaXRpb25GYWN0b3J5KGNvbXBvbmVudEZhY3RvcnkpIHtcbiAgICByZXR1cm4gKC8qKiBAdHlwZSB7P30gKi8gKGNvbXBvbmVudEZhY3RvcnkpKS52aWV3RGVmRmFjdG9yeTtcbn1cbnZhciBDb21wb25lbnRGYWN0b3J5XyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tcG9uZW50RmFjdG9yeV8sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tcG9uZW50RmFjdG9yeV8oc2VsZWN0b3IsIGNvbXBvbmVudFR5cGUsIHZpZXdEZWZGYWN0b3J5LCBfaW5wdXRzLCBfb3V0cHV0cywgbmdDb250ZW50U2VsZWN0b3JzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IFxuICAgICAgICAvLyBBdHRlbnRpb246IHRoaXMgY3RvciBpcyBjYWxsZWQgYXMgdG9wIGxldmVsIGZ1bmN0aW9uLlxuICAgICAgICAvLyBQdXR0aW5nIGFueSBsb2dpYyBpbiBoZXJlIHdpbGwgZGVzdHJveSBjbG9zdXJlIHRyZWUgc2hha2luZyFcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgX3RoaXMuY29tcG9uZW50VHlwZSA9IGNvbXBvbmVudFR5cGU7XG4gICAgICAgIF90aGlzLl9pbnB1dHMgPSBfaW5wdXRzO1xuICAgICAgICBfdGhpcy5fb3V0cHV0cyA9IF9vdXRwdXRzO1xuICAgICAgICBfdGhpcy5uZ0NvbnRlbnRTZWxlY3RvcnMgPSBuZ0NvbnRlbnRTZWxlY3RvcnM7XG4gICAgICAgIF90aGlzLnZpZXdEZWZGYWN0b3J5ID0gdmlld0RlZkZhY3Rvcnk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudEZhY3RvcnlfLnByb3RvdHlwZSwgXCJpbnB1dHNcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5wdXRzQXJyID0gW107XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbnB1dHMgPSAvKiogQHR5cGUgez99ICovICgodGhpcy5faW5wdXRzKSk7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIHByb3BOYW1lIGluIGlucHV0cykge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRlbXBsYXRlTmFtZSA9IGlucHV0c1twcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgaW5wdXRzQXJyLnB1c2goeyBwcm9wTmFtZTogcHJvcE5hbWUsIHRlbXBsYXRlTmFtZTogdGVtcGxhdGVOYW1lIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlucHV0c0FycjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbXBvbmVudEZhY3RvcnlfLnByb3RvdHlwZSwgXCJvdXRwdXRzXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG91dHB1dHNBcnIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcE5hbWUgaW4gdGhpcy5fb3V0cHV0cykge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRlbXBsYXRlTmFtZSA9IHRoaXMuX291dHB1dHNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgICAgIG91dHB1dHNBcnIucHVzaCh7IHByb3BOYW1lOiBwcm9wTmFtZSwgdGVtcGxhdGVOYW1lOiB0ZW1wbGF0ZU5hbWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0c0FycjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb21wb25lbnQuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHs/fSBpbmplY3RvclxuICAgICAqIEBwYXJhbSB7Pz19IHByb2plY3RhYmxlTm9kZXNcbiAgICAgKiBAcGFyYW0gez89fSByb290U2VsZWN0b3JPck5vZGVcbiAgICAgKiBAcGFyYW0gez89fSBuZ01vZHVsZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQ29tcG9uZW50RmFjdG9yeV8ucHJvdG90eXBlLmNyZWF0ZSA9IC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7P30gaW5qZWN0b3JcbiAgICAgKiBAcGFyYW0gez89fSBwcm9qZWN0YWJsZU5vZGVzXG4gICAgICogQHBhcmFtIHs/PX0gcm9vdFNlbGVjdG9yT3JOb2RlXG4gICAgICogQHBhcmFtIHs/PX0gbmdNb2R1bGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpbmplY3RvciwgcHJvamVjdGFibGVOb2Rlcywgcm9vdFNlbGVjdG9yT3JOb2RlLCBuZ01vZHVsZSkge1xuICAgICAgICBpZiAoIW5nTW9kdWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25nTW9kdWxlIHNob3VsZCBiZSBwcm92aWRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdEZWYgPSByZXNvbHZlRGVmaW5pdGlvbih0aGlzLnZpZXdEZWZGYWN0b3J5KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcG9uZW50Tm9kZUluZGV4ID0gLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3RGVmLm5vZGVzWzBdLmVsZW1lbnQpKS5jb21wb25lbnRQcm92aWRlcikpLm5vZGVJbmRleDtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmlldyA9IFNlcnZpY2VzLmNyZWF0ZVJvb3RWaWV3KGluamVjdG9yLCBwcm9qZWN0YWJsZU5vZGVzIHx8IFtdLCByb290U2VsZWN0b3JPck5vZGUsIHZpZXdEZWYsIG5nTW9kdWxlLCBFTVBUWV9DT05URVhUKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcG9uZW50ID0gYXNQcm92aWRlckRhdGEodmlldywgY29tcG9uZW50Tm9kZUluZGV4KS5pbnN0YW5jZTtcbiAgICAgICAgaWYgKHJvb3RTZWxlY3Rvck9yTm9kZSkge1xuICAgICAgICAgICAgdmlldy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoYXNFbGVtZW50RGF0YSh2aWV3LCAwKS5yZW5kZXJFbGVtZW50LCAnbmctdmVyc2lvbicsIFZFUlNJT04uZnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRSZWZfKHZpZXcsIG5ldyBWaWV3UmVmXyh2aWV3KSwgY29tcG9uZW50KTtcbiAgICB9O1xuICAgIHJldHVybiBDb21wb25lbnRGYWN0b3J5Xztcbn0oQ29tcG9uZW50RmFjdG9yeSkpO1xudmFyIENvbXBvbmVudFJlZl8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbXBvbmVudFJlZl8sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29tcG9uZW50UmVmXyhfdmlldywgX3ZpZXdSZWYsIF9jb21wb25lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZpZXcgPSBfdmlldztcbiAgICAgICAgX3RoaXMuX3ZpZXdSZWYgPSBfdmlld1JlZjtcbiAgICAgICAgX3RoaXMuX2NvbXBvbmVudCA9IF9jb21wb25lbnQ7XG4gICAgICAgIF90aGlzLl9lbERlZiA9IF90aGlzLl92aWV3LmRlZi5ub2Rlc1swXTtcbiAgICAgICAgX3RoaXMuaG9zdFZpZXcgPSBfdmlld1JlZjtcbiAgICAgICAgX3RoaXMuY2hhbmdlRGV0ZWN0b3JSZWYgPSBfdmlld1JlZjtcbiAgICAgICAgX3RoaXMuaW5zdGFuY2UgPSBfY29tcG9uZW50O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnRSZWZfLnByb3RvdHlwZSwgXCJsb2NhdGlvblwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRSZWYoYXNFbGVtZW50RGF0YSh0aGlzLl92aWV3LCB0aGlzLl9lbERlZi5ub2RlSW5kZXgpLnJlbmRlckVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50UmVmXy5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEluamVjdG9yXyh0aGlzLl92aWV3LCB0aGlzLl9lbERlZik7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnRSZWZfLnByb3RvdHlwZSwgXCJjb21wb25lbnRUeXBlXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIC8qKiBAdHlwZSB7P30gKi8gKHRoaXMuX2NvbXBvbmVudC5jb25zdHJ1Y3Rvcik7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgQ29tcG9uZW50UmVmXy5wcm90b3R5cGUuZGVzdHJveSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl92aWV3UmVmLmRlc3Ryb3koKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBDb21wb25lbnRSZWZfLnByb3RvdHlwZS5vbkRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHsgdGhpcy5fdmlld1JlZi5vbkRlc3Ryb3koY2FsbGJhY2spOyB9O1xuICAgIHJldHVybiBDb21wb25lbnRSZWZfO1xufShDb21wb25lbnRSZWYpKTtcbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGVsRGVmXG4gKiBAcGFyYW0gez99IGVsRGF0YVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmlld0NvbnRhaW5lckRhdGEodmlldywgZWxEZWYsIGVsRGF0YSkge1xuICAgIHJldHVybiBuZXcgVmlld0NvbnRhaW5lclJlZl8odmlldywgZWxEZWYsIGVsRGF0YSk7XG59XG52YXIgVmlld0NvbnRhaW5lclJlZl8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmlld0NvbnRhaW5lclJlZl8oX3ZpZXcsIF9lbERlZiwgX2RhdGEpIHtcbiAgICAgICAgdGhpcy5fdmlldyA9IF92aWV3O1xuICAgICAgICB0aGlzLl9lbERlZiA9IF9lbERlZjtcbiAgICAgICAgdGhpcy5fZGF0YSA9IF9kYXRhO1xuICAgICAgICAvKipcbiAgICAgICAgICogXFxAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2VtYmVkZGVkVmlld3MgPSBbXTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZSwgXCJlbGVtZW50XCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBFbGVtZW50UmVmKHRoaXMuX2RhdGEucmVuZGVyRWxlbWVudCk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3Q29udGFpbmVyUmVmXy5wcm90b3R5cGUsIFwiaW5qZWN0b3JcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEluamVjdG9yXyh0aGlzLl92aWV3LCB0aGlzLl9lbERlZik7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3Q29udGFpbmVyUmVmXy5wcm90b3R5cGUsIFwicGFyZW50SW5qZWN0b3JcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmlldyA9IHRoaXMuX3ZpZXc7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbERlZiA9IHRoaXMuX2VsRGVmLnBhcmVudDtcbiAgICAgICAgICAgIHdoaWxlICghZWxEZWYgJiYgdmlldykge1xuICAgICAgICAgICAgICAgIGVsRGVmID0gdmlld1BhcmVudEVsKHZpZXcpO1xuICAgICAgICAgICAgICAgIHZpZXcgPSAvKiogQHR5cGUgez99ICovICgodmlldy5wYXJlbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2aWV3ID8gbmV3IEluamVjdG9yXyh2aWV3LCBlbERlZikgOiBuZXcgSW5qZWN0b3JfKHRoaXMuX3ZpZXcsIG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5jbGVhciA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZW4gPSB0aGlzLl9lbWJlZGRlZFZpZXdzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXcgPSAvKiogQHR5cGUgez99ICovICgoZGV0YWNoRW1iZWRkZWRWaWV3KHRoaXMuX2RhdGEsIGkpKSk7XG4gICAgICAgICAgICBTZXJ2aWNlcy5kZXN0cm95Vmlldyh2aWV3KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVmlld0NvbnRhaW5lclJlZl8ucHJvdG90eXBlLmdldCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2aWV3ID0gdGhpcy5fZW1iZWRkZWRWaWV3c1tpbmRleF07XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWYgPSBuZXcgVmlld1JlZl8odmlldyk7XG4gICAgICAgICAgICByZWYuYXR0YWNoVG9WaWV3Q29udGFpbmVyUmVmKHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlZjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3Q29udGFpbmVyUmVmXy5wcm90b3R5cGUsIFwibGVuZ3RoXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2VtYmVkZGVkVmlld3MubGVuZ3RoOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgQ1xuICAgICAqIEBwYXJhbSB7P30gdGVtcGxhdGVSZWZcbiAgICAgKiBAcGFyYW0gez89fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHs/PX0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5jcmVhdGVFbWJlZGRlZFZpZXcgPSAvKipcbiAgICAgKiBAdGVtcGxhdGUgQ1xuICAgICAqIEBwYXJhbSB7P30gdGVtcGxhdGVSZWZcbiAgICAgKiBAcGFyYW0gez89fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHs/PX0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0ZW1wbGF0ZVJlZiwgY29udGV4dCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmlld1JlZiA9IHRlbXBsYXRlUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhjb250ZXh0IHx8IC8qKiBAdHlwZSB7P30gKi8gKHt9KSk7XG4gICAgICAgIHRoaXMuaW5zZXJ0KHZpZXdSZWYsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHZpZXdSZWY7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUgQ1xuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50RmFjdG9yeVxuICAgICAqIEBwYXJhbSB7Pz19IGluZGV4XG4gICAgICogQHBhcmFtIHs/PX0gaW5qZWN0b3JcbiAgICAgKiBAcGFyYW0gez89fSBwcm9qZWN0YWJsZU5vZGVzXG4gICAgICogQHBhcmFtIHs/PX0gbmdNb2R1bGVSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5jcmVhdGVDb21wb25lbnQgPSAvKipcbiAgICAgKiBAdGVtcGxhdGUgQ1xuICAgICAqIEBwYXJhbSB7P30gY29tcG9uZW50RmFjdG9yeVxuICAgICAqIEBwYXJhbSB7Pz19IGluZGV4XG4gICAgICogQHBhcmFtIHs/PX0gaW5qZWN0b3JcbiAgICAgKiBAcGFyYW0gez89fSBwcm9qZWN0YWJsZU5vZGVzXG4gICAgICogQHBhcmFtIHs/PX0gbmdNb2R1bGVSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjb21wb25lbnRGYWN0b3J5LCBpbmRleCwgaW5qZWN0b3IsIHByb2plY3RhYmxlTm9kZXMsIG5nTW9kdWxlUmVmKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbnRleHRJbmplY3RvciA9IGluamVjdG9yIHx8IHRoaXMucGFyZW50SW5qZWN0b3I7XG4gICAgICAgIGlmICghbmdNb2R1bGVSZWYgJiYgIShjb21wb25lbnRGYWN0b3J5IGluc3RhbmNlb2YgQ29tcG9uZW50RmFjdG9yeUJvdW5kVG9Nb2R1bGUpKSB7XG4gICAgICAgICAgICBuZ01vZHVsZVJlZiA9IGNvbnRleHRJbmplY3Rvci5nZXQoTmdNb2R1bGVSZWYpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbXBvbmVudFJlZiA9IGNvbXBvbmVudEZhY3RvcnkuY3JlYXRlKGNvbnRleHRJbmplY3RvciwgcHJvamVjdGFibGVOb2RlcywgdW5kZWZpbmVkLCBuZ01vZHVsZVJlZik7XG4gICAgICAgIHRoaXMuaW5zZXJ0KGNvbXBvbmVudFJlZi5ob3N0VmlldywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gY29tcG9uZW50UmVmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB2aWV3UmVmXG4gICAgICogQHBhcmFtIHs/PX0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5pbnNlcnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHZpZXdSZWZcbiAgICAgKiBAcGFyYW0gez89fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZpZXdSZWYsIGluZGV4KSB7XG4gICAgICAgIGlmICh2aWV3UmVmLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaW5zZXJ0IGEgZGVzdHJveWVkIFZpZXcgaW4gYSBWaWV3Q29udGFpbmVyIScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdSZWZfID0gLyoqIEB0eXBlIHs/fSAqLyAodmlld1JlZik7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdEYXRhID0gdmlld1JlZl8uX3ZpZXc7XG4gICAgICAgIGF0dGFjaEVtYmVkZGVkVmlldyh0aGlzLl92aWV3LCB0aGlzLl9kYXRhLCBpbmRleCwgdmlld0RhdGEpO1xuICAgICAgICB2aWV3UmVmXy5hdHRhY2hUb1ZpZXdDb250YWluZXJSZWYodGhpcyk7XG4gICAgICAgIHJldHVybiB2aWV3UmVmO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB2aWV3UmVmXG4gICAgICogQHBhcmFtIHs/fSBjdXJyZW50SW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5tb3ZlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2aWV3UmVmXG4gICAgICogQHBhcmFtIHs/fSBjdXJyZW50SW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh2aWV3UmVmLCBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgaWYgKHZpZXdSZWYuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBtb3ZlIGEgZGVzdHJveWVkIFZpZXcgaW4gYSBWaWV3Q29udGFpbmVyIScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByZXZpb3VzSW5kZXggPSB0aGlzLl9lbWJlZGRlZFZpZXdzLmluZGV4T2Yodmlld1JlZi5fdmlldyk7XG4gICAgICAgIG1vdmVFbWJlZGRlZFZpZXcodGhpcy5fZGF0YSwgcHJldmlvdXNJbmRleCwgY3VycmVudEluZGV4KTtcbiAgICAgICAgcmV0dXJuIHZpZXdSZWY7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZpZXdSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5pbmRleE9mID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2aWV3UmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodmlld1JlZikge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW1iZWRkZWRWaWV3cy5pbmRleE9mKCgvKiogQHR5cGUgez99ICovICh2aWV3UmVmKSkuX3ZpZXcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/PX0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdDb250YWluZXJSZWZfLnByb3RvdHlwZS5yZW1vdmUgPSAvKipcbiAgICAgKiBAcGFyYW0gez89fSBpbmRleFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdEYXRhID0gZGV0YWNoRW1iZWRkZWRWaWV3KHRoaXMuX2RhdGEsIGluZGV4KTtcbiAgICAgICAgaWYgKHZpZXdEYXRhKSB7XG4gICAgICAgICAgICBTZXJ2aWNlcy5kZXN0cm95Vmlldyh2aWV3RGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Pz19IGluZGV4XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBWaWV3Q29udGFpbmVyUmVmXy5wcm90b3R5cGUuZGV0YWNoID0gLyoqXG4gICAgICogQHBhcmFtIHs/PX0gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2aWV3ID0gZGV0YWNoRW1iZWRkZWRWaWV3KHRoaXMuX2RhdGEsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHZpZXcgPyBuZXcgVmlld1JlZl8odmlldykgOiBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFZpZXdDb250YWluZXJSZWZfO1xufSgpKTtcbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFuZ2VEZXRlY3RvclJlZih2aWV3KSB7XG4gICAgcmV0dXJuIG5ldyBWaWV3UmVmXyh2aWV3KTtcbn1cbnZhciBWaWV3UmVmXyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWV3UmVmXyhfdmlldykge1xuICAgICAgICB0aGlzLl92aWV3ID0gX3ZpZXc7XG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYgPSBudWxsO1xuICAgICAgICB0aGlzLl9hcHBSZWYgPSBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlld1JlZl8ucHJvdG90eXBlLCBcInJvb3ROb2Rlc1wiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiByb290UmVuZGVyTm9kZXModGhpcy5fdmlldyk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3UmVmXy5wcm90b3R5cGUsIFwiY29udGV4dFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl92aWV3LmNvbnRleHQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3UmVmXy5wcm90b3R5cGUsIFwiZGVzdHJveWVkXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl92aWV3LnN0YXRlICYgMTI4IC8qIERlc3Ryb3llZCAqLykgIT09IDA7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVmlld1JlZl8ucHJvdG90eXBlLm1hcmtGb3JDaGVjayA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyBtYXJrUGFyZW50Vmlld3NGb3JDaGVjayh0aGlzLl92aWV3KTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdSZWZfLnByb3RvdHlwZS5kZXRhY2ggPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgdGhpcy5fdmlldy5zdGF0ZSAmPSB+NCAvKiBBdHRhY2hlZCAqLzsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdSZWZfLnByb3RvdHlwZS5kZXRlY3RDaGFuZ2VzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZzID0gdGhpcy5fdmlldy5yb290LnJlbmRlcmVyRmFjdG9yeTtcbiAgICAgICAgaWYgKGZzLmJlZ2luKSB7XG4gICAgICAgICAgICBmcy5iZWdpbigpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBTZXJ2aWNlcy5jaGVja0FuZFVwZGF0ZVZpZXcodGhpcy5fdmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoZnMuZW5kKSB7XG4gICAgICAgICAgICAgICAgZnMuZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVmlld1JlZl8ucHJvdG90eXBlLmNoZWNrTm9DaGFuZ2VzID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7IFNlcnZpY2VzLmNoZWNrTm9DaGFuZ2VzVmlldyh0aGlzLl92aWV3KTsgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdSZWZfLnByb3RvdHlwZS5yZWF0dGFjaCA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLl92aWV3LnN0YXRlIHw9IDQgLyogQXR0YWNoZWQgKi87IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVmlld1JlZl8ucHJvdG90eXBlLm9uRGVzdHJveSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuX3ZpZXcuZGlzcG9zYWJsZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZXcuZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aWV3LmRpc3Bvc2FibGVzLnB1c2goLyoqIEB0eXBlIHs/fSAqLyAoY2FsbGJhY2spKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVmlld1JlZl8ucHJvdG90eXBlLmRlc3Ryb3kgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FwcFJlZikge1xuICAgICAgICAgICAgdGhpcy5fYXBwUmVmLmRldGFjaFZpZXcodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdmlld0NvbnRhaW5lclJlZikge1xuICAgICAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lclJlZi5kZXRhY2godGhpcy5fdmlld0NvbnRhaW5lclJlZi5pbmRleE9mKHRoaXMpKTtcbiAgICAgICAgfVxuICAgICAgICBTZXJ2aWNlcy5kZXN0cm95Vmlldyh0aGlzLl92aWV3KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgVmlld1JlZl8ucHJvdG90eXBlLmRldGFjaEZyb21BcHBSZWYgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYXBwUmVmID0gbnVsbDtcbiAgICAgICAgcmVuZGVyRGV0YWNoVmlldyh0aGlzLl92aWV3KTtcbiAgICAgICAgU2VydmljZXMuZGlydHlQYXJlbnRRdWVyaWVzKHRoaXMuX3ZpZXcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBhcHBSZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFZpZXdSZWZfLnByb3RvdHlwZS5hdHRhY2hUb0FwcFJlZiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gYXBwUmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoYXBwUmVmKSB7XG4gICAgICAgIGlmICh0aGlzLl92aWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgdmlldyBpcyBhbHJlYWR5IGF0dGFjaGVkIHRvIGEgVmlld0NvbnRhaW5lciEnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBSZWYgPSBhcHBSZWY7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZjUmVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBWaWV3UmVmXy5wcm90b3R5cGUuYXR0YWNoVG9WaWV3Q29udGFpbmVyUmVmID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2Y1JlZlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZjUmVmKSB7XG4gICAgICAgIGlmICh0aGlzLl9hcHBSZWYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB2aWV3IGlzIGFscmVhZHkgYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIEFwcGxpY2F0aW9uUmVmIScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXJSZWYgPSB2Y1JlZjtcbiAgICB9O1xuICAgIHJldHVybiBWaWV3UmVmXztcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRlRGF0YSh2aWV3LCBkZWYpIHtcbiAgICByZXR1cm4gbmV3IFRlbXBsYXRlUmVmXyh2aWV3LCBkZWYpO1xufVxudmFyIFRlbXBsYXRlUmVmXyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGVtcGxhdGVSZWZfLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRlbXBsYXRlUmVmXyhfcGFyZW50VmlldywgX2RlZikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcGFyZW50VmlldyA9IF9wYXJlbnRWaWV3O1xuICAgICAgICBfdGhpcy5fZGVmID0gX2RlZjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGNvbnRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFRlbXBsYXRlUmVmXy5wcm90b3R5cGUuY3JlYXRlRW1iZWRkZWRWaWV3ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb250ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbmV3IFZpZXdSZWZfKFNlcnZpY2VzLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl9wYXJlbnRWaWV3LCB0aGlzLl9kZWYsIC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgodGhpcy5fZGVmLmVsZW1lbnQpKS50ZW1wbGF0ZSkpLCBjb250ZXh0KSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVtcGxhdGVSZWZfLnByb3RvdHlwZSwgXCJlbGVtZW50UmVmXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRWxlbWVudFJlZihhc0VsZW1lbnREYXRhKHRoaXMuX3BhcmVudFZpZXcsIHRoaXMuX2RlZi5ub2RlSW5kZXgpLnJlbmRlckVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gVGVtcGxhdGVSZWZfO1xufShUZW1wbGF0ZVJlZikpO1xuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZWxEZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKHZpZXcsIGVsRGVmKSB7XG4gICAgcmV0dXJuIG5ldyBJbmplY3Rvcl8odmlldywgZWxEZWYpO1xufVxudmFyIEluamVjdG9yXyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbmplY3Rvcl8odmlldywgZWxEZWYpIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5lbERlZiA9IGVsRGVmO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHRva2VuXG4gICAgICogQHBhcmFtIHs/PX0gbm90Rm91bmRWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgSW5qZWN0b3JfLnByb3RvdHlwZS5nZXQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHRva2VuXG4gICAgICogQHBhcmFtIHs/PX0gbm90Rm91bmRWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHRva2VuLCBub3RGb3VuZFZhbHVlKSB7XG4gICAgICAgIGlmIChub3RGb3VuZFZhbHVlID09PSB2b2lkIDApIHsgbm90Rm91bmRWYWx1ZSA9IEluamVjdG9yLlRIUk9XX0lGX05PVF9GT1VORDsgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxvd1ByaXZhdGVTZXJ2aWNlcyA9IHRoaXMuZWxEZWYgPyAodGhpcy5lbERlZi5mbGFncyAmIDMzNTU0NDMyIC8qIENvbXBvbmVudFZpZXcgKi8pICE9PSAwIDogZmFsc2U7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlcy5yZXNvbHZlRGVwKHRoaXMudmlldywgdGhpcy5lbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIHsgZmxhZ3M6IDAgLyogTm9uZSAqLywgdG9rZW46IHRva2VuLCB0b2tlbktleTogdG9rZW5LZXkodG9rZW4pIH0sIG5vdEZvdW5kVmFsdWUpO1xuICAgIH07XG4gICAgcmV0dXJuIEluamVjdG9yXztcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBpbmRleFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbm9kZVZhbHVlKHZpZXcsIGluZGV4KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVmID0gdmlldy5kZWYubm9kZXNbaW5kZXhdO1xuICAgIGlmIChkZWYuZmxhZ3MgJiAxIC8qIFR5cGVFbGVtZW50ICovKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsRGF0YSA9IGFzRWxlbWVudERhdGEodmlldywgZGVmLm5vZGVJbmRleCk7XG4gICAgICAgIHJldHVybiAvKiogQHR5cGUgez99ICovICgoZGVmLmVsZW1lbnQpKS50ZW1wbGF0ZSA/IGVsRGF0YS50ZW1wbGF0ZSA6IGVsRGF0YS5yZW5kZXJFbGVtZW50O1xuICAgIH1cbiAgICBlbHNlIGlmIChkZWYuZmxhZ3MgJiAyIC8qIFR5cGVUZXh0ICovKSB7XG4gICAgICAgIHJldHVybiBhc1RleHREYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpLnJlbmRlclRleHQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRlZi5mbGFncyAmICgyMDIyNCAvKiBDYXRQcm92aWRlciAqLyB8IDE2IC8qIFR5cGVQaXBlICovKSkge1xuICAgICAgICByZXR1cm4gYXNQcm92aWRlckRhdGEodmlldywgZGVmLm5vZGVJbmRleCkuaW5zdGFuY2U7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgc3RhdGU6IHJlYWQgbm9kZVZhbHVlIGZvciBub2RlIGluZGV4IFwiICsgaW5kZXgpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyVjEodmlldykge1xuICAgIHJldHVybiBuZXcgUmVuZGVyZXJBZGFwdGVyKHZpZXcucmVuZGVyZXIpO1xufVxudmFyIFJlbmRlcmVyQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZW5kZXJlckFkYXB0ZXIoZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHNlbGVjdG9yT3JOb2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLnNlbGVjdFJvb3RFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBzZWxlY3Rvck9yTm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHNlbGVjdG9yT3JOb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLnNlbGVjdFJvb3RFbGVtZW50KHNlbGVjdG9yT3JOb2RlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBuYW1lc3BhY2VBbmROYW1lXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmFtZXNwYWNlQW5kTmFtZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudCwgbmFtZXNwYWNlQW5kTmFtZSkge1xuICAgICAgICB2YXIgX2EgPSBzcGxpdE5hbWVzcGFjZShuYW1lc3BhY2VBbmROYW1lKSwgbnMgPSBfYVswXSwgbmFtZSA9IF9hWzFdO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbCA9IHRoaXMuZGVsZWdhdGUuY3JlYXRlRWxlbWVudChuYW1lLCBucyk7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuYXBwZW5kQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBob3N0RWxlbWVudFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5jcmVhdGVWaWV3Um9vdCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChob3N0RWxlbWVudCkgeyByZXR1cm4gaG9zdEVsZW1lbnQ7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRFbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLmNyZWF0ZVRlbXBsYXRlQW5jaG9yID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRFbGVtZW50XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50RWxlbWVudCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21tZW50ID0gdGhpcy5kZWxlZ2F0ZS5jcmVhdGVDb21tZW50KCcnKTtcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuYXBwZW5kQ2hpbGQocGFyZW50RWxlbWVudCwgY29tbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbW1lbnQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLmNyZWF0ZVRleHQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50RWxlbWVudCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZSA9IHRoaXMuZGVsZWdhdGUuY3JlYXRlVGV4dCh2YWx1ZSk7XG4gICAgICAgIGlmIChwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmFwcGVuZENoaWxkKHBhcmVudEVsZW1lbnQsIG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBub2Rlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5wcm9qZWN0Tm9kZXMgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5vZGVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50RWxlbWVudCwgbm9kZXMpIHtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmFwcGVuZENoaWxkKHBhcmVudEVsZW1lbnQsIG5vZGVzW2ldKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHBhcmFtIHs/fSB2aWV3Um9vdE5vZGVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLmF0dGFjaFZpZXdBZnRlciA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEBwYXJhbSB7P30gdmlld1Jvb3ROb2Rlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUsIHZpZXdSb290Tm9kZXMpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50RWxlbWVudCA9IHRoaXMuZGVsZWdhdGUucGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV4dFNpYmxpbmcgPSB0aGlzLmRlbGVnYXRlLm5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmlld1Jvb3ROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5pbnNlcnRCZWZvcmUocGFyZW50RWxlbWVudCwgdmlld1Jvb3ROb2Rlc1tpXSwgbmV4dFNpYmxpbmcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZpZXdSb290Tm9kZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIFJlbmRlcmVyQWRhcHRlci5wcm90b3R5cGUuZGV0YWNoVmlldyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmlld1Jvb3ROb2Rlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZpZXdSb290Tm9kZXMpIHtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHZpZXdSb290Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGUgPSB2aWV3Um9vdE5vZGVzW2ldO1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50RWxlbWVudCA9IHRoaXMuZGVsZWdhdGUucGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUucmVtb3ZlQ2hpbGQocGFyZW50RWxlbWVudCwgbm9kZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHZpZXdBbGxOb2Rlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5kZXN0cm95VmlldyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHZpZXdBbGxOb2Rlc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGhvc3RFbGVtZW50LCB2aWV3QWxsTm9kZXMpIHtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHZpZXdBbGxOb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoKHRoaXMuZGVsZWdhdGUuZGVzdHJveU5vZGUpKSh2aWV3QWxsTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLmxpc3RlbiA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVuZGVyRWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZW5kZXJFbGVtZW50LCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWxlZ2F0ZS5saXN0ZW4ocmVuZGVyRWxlbWVudCwgbmFtZSwgLyoqIEB0eXBlIHs/fSAqLyAoY2FsbGJhY2spKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5saXN0ZW5HbG9iYWwgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHRhcmdldFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLmxpc3Rlbih0YXJnZXQsIG5hbWUsIC8qKiBAdHlwZSB7P30gKi8gKGNhbGxiYWNrKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5zZXRFbGVtZW50UHJvcGVydHkgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlLnNldFByb3BlcnR5KHJlbmRlckVsZW1lbnQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUFuZE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGF0dHJpYnV0ZVZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLnNldEVsZW1lbnRBdHRyaWJ1dGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IG5hbWVzcGFjZUFuZE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGF0dHJpYnV0ZVZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVuZGVyRWxlbWVudCwgbmFtZXNwYWNlQW5kTmFtZSwgYXR0cmlidXRlVmFsdWUpIHtcbiAgICAgICAgdmFyIF9hID0gc3BsaXROYW1lc3BhY2UobmFtZXNwYWNlQW5kTmFtZSksIG5zID0gX2FbMF0sIG5hbWUgPSBfYVsxXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuc2V0QXR0cmlidXRlKHJlbmRlckVsZW1lbnQsIG5hbWUsIGF0dHJpYnV0ZVZhbHVlLCBucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLnJlbW92ZUF0dHJpYnV0ZShyZW5kZXJFbGVtZW50LCBuYW1lLCBucyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVuZGVyRWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlOYW1lXG4gICAgICogQHBhcmFtIHs/fSBwcm9wZXJ0eVZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLnNldEJpbmRpbmdEZWJ1Z0luZm8gPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHByb3BlcnR5TmFtZVxuICAgICAqIEBwYXJhbSB7P30gcHJvcGVydHlWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVuZGVyRWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gY2xhc3NOYW1lXG4gICAgICogQHBhcmFtIHs/fSBpc0FkZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5zZXRFbGVtZW50Q2xhc3MgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IGNsYXNzTmFtZVxuICAgICAqIEBwYXJhbSB7P30gaXNBZGRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZW5kZXJFbGVtZW50LCBjbGFzc05hbWUsIGlzQWRkKSB7XG4gICAgICAgIGlmIChpc0FkZCkge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5hZGRDbGFzcyhyZW5kZXJFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5yZW1vdmVDbGFzcyhyZW5kZXJFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlTmFtZVxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5zZXRFbGVtZW50U3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlckVsZW1lbnRcbiAgICAgKiBAcGFyYW0gez99IHN0eWxlTmFtZVxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVWYWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHJlbmRlckVsZW1lbnQsIHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSkge1xuICAgICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLnNldFN0eWxlKHJlbmRlckVsZW1lbnQsIHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLnJlbW92ZVN0eWxlKHJlbmRlckVsZW1lbnQsIHN0eWxlTmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcmVuZGVyRWxlbWVudFxuICAgICAqIEBwYXJhbSB7P30gbWV0aG9kTmFtZVxuICAgICAqIEBwYXJhbSB7P30gYXJnc1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgUmVuZGVyZXJBZGFwdGVyLnByb3RvdHlwZS5pbnZva2VFbGVtZW50TWV0aG9kID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJFbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSBtZXRob2ROYW1lXG4gICAgICogQHBhcmFtIHs/fSBhcmdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocmVuZGVyRWxlbWVudCwgbWV0aG9kTmFtZSwgYXJncykge1xuICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAocmVuZGVyRWxlbWVudCkpW21ldGhvZE5hbWVdLmFwcGx5KHJlbmRlckVsZW1lbnQsIGFyZ3MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJOb2RlXG4gICAgICogQHBhcmFtIHs/fSB0ZXh0XG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLnNldFRleHQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHJlbmRlck5vZGVcbiAgICAgKiBAcGFyYW0gez99IHRleHRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChyZW5kZXJOb2RlJCQxLCB0ZXh0KSB7IHRoaXMuZGVsZWdhdGUuc2V0VmFsdWUocmVuZGVyTm9kZSQkMSwgdGV4dCk7IH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBSZW5kZXJlckFkYXB0ZXIucHJvdG90eXBlLmFuaW1hdGUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXJlci5hbmltYXRlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQhJyk7IH07XG4gICAgcmV0dXJuIFJlbmRlcmVyQWRhcHRlcjtcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gbW9kdWxlVHlwZVxuICogQHBhcmFtIHs/fSBwYXJlbnRcbiAqIEBwYXJhbSB7P30gYm9vdHN0cmFwQ29tcG9uZW50c1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5nTW9kdWxlUmVmKG1vZHVsZVR5cGUsIHBhcmVudCwgYm9vdHN0cmFwQ29tcG9uZW50cywgZGVmKSB7XG4gICAgcmV0dXJuIG5ldyBOZ01vZHVsZVJlZl8obW9kdWxlVHlwZSwgcGFyZW50LCBib290c3RyYXBDb21wb25lbnRzLCBkZWYpO1xufVxudmFyIE5nTW9kdWxlUmVmXyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOZ01vZHVsZVJlZl8oX21vZHVsZVR5cGUsIF9wYXJlbnQsIF9ib290c3RyYXBDb21wb25lbnRzLCBfZGVmKSB7XG4gICAgICAgIHRoaXMuX21vZHVsZVR5cGUgPSBfbW9kdWxlVHlwZTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgdGhpcy5fYm9vdHN0cmFwQ29tcG9uZW50cyA9IF9ib290c3RyYXBDb21wb25lbnRzO1xuICAgICAgICB0aGlzLl9kZWYgPSBfZGVmO1xuICAgICAgICB0aGlzLl9kZXN0cm95TGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICBpbml0TmdNb2R1bGUodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW5cbiAgICAgKiBAcGFyYW0gez89fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBOZ01vZHVsZVJlZl8ucHJvdG90eXBlLmdldCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gdG9rZW5cbiAgICAgKiBAcGFyYW0gez89fSBub3RGb3VuZFZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodG9rZW4sIG5vdEZvdW5kVmFsdWUpIHtcbiAgICAgICAgaWYgKG5vdEZvdW5kVmFsdWUgPT09IHZvaWQgMCkgeyBub3RGb3VuZFZhbHVlID0gSW5qZWN0b3IuVEhST1dfSUZfTk9UX0ZPVU5EOyB9XG4gICAgICAgIHJldHVybiByZXNvbHZlTmdNb2R1bGVEZXAodGhpcywgeyB0b2tlbjogdG9rZW4sIHRva2VuS2V5OiB0b2tlbktleSh0b2tlbiksIGZsYWdzOiAwIC8qIE5vbmUgKi8gfSwgbm90Rm91bmRWYWx1ZSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdNb2R1bGVSZWZfLnByb3RvdHlwZSwgXCJpbnN0YW5jZVwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmdldCh0aGlzLl9tb2R1bGVUeXBlKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nTW9kdWxlUmVmXy5wcm90b3R5cGUsIFwiY29tcG9uZW50RmFjdG9yeVJlc29sdmVyXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZ2V0KENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcik7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZHVsZVJlZl8ucHJvdG90eXBlLCBcImluamVjdG9yXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTmdNb2R1bGVSZWZfLnByb3RvdHlwZS5kZXN0cm95ID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBuZyBtb2R1bGUgXCIgKyBzdHJpbmdpZnkodGhpcy5pbnN0YW5jZS5jb25zdHJ1Y3RvcikgKyBcIiBoYXMgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgY2FsbE5nTW9kdWxlTGlmZWN5Y2xlKHRoaXMsIDEzMTA3MiAvKiBPbkRlc3Ryb3kgKi8pO1xuICAgICAgICB0aGlzLl9kZXN0cm95TGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7IHJldHVybiBsaXN0ZW5lcigpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIE5nTW9kdWxlUmVmXy5wcm90b3R5cGUub25EZXN0cm95ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGNhbGxiYWNrKSB7IHRoaXMuX2Rlc3Ryb3lMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7IH07XG4gICAgcmV0dXJuIE5nTW9kdWxlUmVmXztcbn0oKSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBSZW5kZXJlclYxVG9rZW5LZXkgPSB0b2tlbktleShSZW5kZXJlcik7XG52YXIgUmVuZGVyZXIyVG9rZW5LZXkgPSB0b2tlbktleShSZW5kZXJlcjIpO1xudmFyIEVsZW1lbnRSZWZUb2tlbktleSA9IHRva2VuS2V5KEVsZW1lbnRSZWYpO1xudmFyIFZpZXdDb250YWluZXJSZWZUb2tlbktleSA9IHRva2VuS2V5KFZpZXdDb250YWluZXJSZWYpO1xudmFyIFRlbXBsYXRlUmVmVG9rZW5LZXkgPSB0b2tlbktleShUZW1wbGF0ZVJlZik7XG52YXIgQ2hhbmdlRGV0ZWN0b3JSZWZUb2tlbktleSA9IHRva2VuS2V5KENoYW5nZURldGVjdG9yUmVmKTtcbnZhciBJbmplY3RvclJlZlRva2VuS2V5ID0gdG9rZW5LZXkoSW5qZWN0b3IpO1xuLyoqXG4gKiBAcGFyYW0gez99IGNoZWNrSW5kZXhcbiAqIEBwYXJhbSB7P30gZmxhZ3NcbiAqIEBwYXJhbSB7P30gbWF0Y2hlZFF1ZXJpZXNcbiAqIEBwYXJhbSB7P30gY2hpbGRDb3VudFxuICogQHBhcmFtIHs/fSBjdG9yXG4gKiBAcGFyYW0gez99IGRlcHNcbiAqIEBwYXJhbSB7Pz19IHByb3BzXG4gKiBAcGFyYW0gez89fSBvdXRwdXRzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkaXJlY3RpdmVEZWYoY2hlY2tJbmRleCwgZmxhZ3MsIG1hdGNoZWRRdWVyaWVzLCBjaGlsZENvdW50LCBjdG9yLCBkZXBzLCBwcm9wcywgb3V0cHV0cykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRpbmdzID0gW107XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgICAgdmFyIF9hID0gcHJvcHNbcHJvcF0sIGJpbmRpbmdJbmRleCA9IF9hWzBdLCBub25NaW5pZmllZE5hbWUgPSBfYVsxXTtcbiAgICAgICAgICAgIGJpbmRpbmdzW2JpbmRpbmdJbmRleF0gPSB7XG4gICAgICAgICAgICAgICAgZmxhZ3M6IDggLyogVHlwZVByb3BlcnR5ICovLFxuICAgICAgICAgICAgICAgIG5hbWU6IHByb3AsIG5vbk1pbmlmaWVkTmFtZTogbm9uTWluaWZpZWROYW1lLFxuICAgICAgICAgICAgICAgIG5zOiBudWxsLFxuICAgICAgICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICBzdWZmaXg6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3V0cHV0RGVmcyA9IFtdO1xuICAgIGlmIChvdXRwdXRzKSB7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcE5hbWUgaW4gb3V0cHV0cykge1xuICAgICAgICAgICAgb3V0cHV0RGVmcy5wdXNoKHsgdHlwZTogMSAvKiBEaXJlY3RpdmVPdXRwdXQgKi8sIHByb3BOYW1lOiBwcm9wTmFtZSwgdGFyZ2V0OiBudWxsLCBldmVudE5hbWU6IG91dHB1dHNbcHJvcE5hbWVdIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZsYWdzIHw9IDE2Mzg0IC8qIFR5cGVEaXJlY3RpdmUgKi87XG4gICAgcmV0dXJuIF9kZWYoY2hlY2tJbmRleCwgZmxhZ3MsIG1hdGNoZWRRdWVyaWVzLCBjaGlsZENvdW50LCBjdG9yLCBjdG9yLCBkZXBzLCBiaW5kaW5ncywgb3V0cHV0RGVmcyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gZmxhZ3NcbiAqIEBwYXJhbSB7P30gY3RvclxuICogQHBhcmFtIHs/fSBkZXBzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwaXBlRGVmKGZsYWdzLCBjdG9yLCBkZXBzKSB7XG4gICAgZmxhZ3MgfD0gMTYgLyogVHlwZVBpcGUgKi87XG4gICAgcmV0dXJuIF9kZWYoLTEsIGZsYWdzLCBudWxsLCAwLCBjdG9yLCBjdG9yLCBkZXBzKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBmbGFnc1xuICogQHBhcmFtIHs/fSBtYXRjaGVkUXVlcmllc1xuICogQHBhcmFtIHs/fSB0b2tlblxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHBhcmFtIHs/fSBkZXBzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwcm92aWRlckRlZihmbGFncywgbWF0Y2hlZFF1ZXJpZXMsIHRva2VuLCB2YWx1ZSwgZGVwcykge1xuICAgIHJldHVybiBfZGVmKC0xLCBmbGFncywgbWF0Y2hlZFF1ZXJpZXMsIDAsIHRva2VuLCB2YWx1ZSwgZGVwcyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gY2hlY2tJbmRleFxuICogQHBhcmFtIHs/fSBmbGFnc1xuICogQHBhcmFtIHs/fSBtYXRjaGVkUXVlcmllc0RzbFxuICogQHBhcmFtIHs/fSBjaGlsZENvdW50XG4gKiBAcGFyYW0gez99IHRva2VuXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcGFyYW0gez99IGRlcHNcbiAqIEBwYXJhbSB7Pz19IGJpbmRpbmdzXG4gKiBAcGFyYW0gez89fSBvdXRwdXRzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfZGVmKGNoZWNrSW5kZXgsIGZsYWdzLCBtYXRjaGVkUXVlcmllc0RzbCwgY2hpbGRDb3VudCwgdG9rZW4sIHZhbHVlLCBkZXBzLCBiaW5kaW5ncywgb3V0cHV0cykge1xuICAgIHZhciBfYSA9IHNwbGl0TWF0Y2hlZFF1ZXJpZXNEc2wobWF0Y2hlZFF1ZXJpZXNEc2wpLCBtYXRjaGVkUXVlcmllcyA9IF9hLm1hdGNoZWRRdWVyaWVzLCByZWZlcmVuY2VzID0gX2EucmVmZXJlbmNlcywgbWF0Y2hlZFF1ZXJ5SWRzID0gX2EubWF0Y2hlZFF1ZXJ5SWRzO1xuICAgIGlmICghb3V0cHV0cykge1xuICAgICAgICBvdXRwdXRzID0gW107XG4gICAgfVxuICAgIGlmICghYmluZGluZ3MpIHtcbiAgICAgICAgYmluZGluZ3MgPSBbXTtcbiAgICB9XG4gICAgLy8gTmVlZCB0byByZXNvbHZlIGZvcndhcmRSZWZzIGFzIGUuZy4gZm9yIGB1c2VWYWx1ZWAgd2VcbiAgICAvLyBsb3dlcmVkIHRoZSBleHByZXNzaW9uIGFuZCB0aGVuIHN0b3BwZWQgZXZhbHVhdGluZyBpdCxcbiAgICAvLyBpLmUuIGFsc28gZGlkbid0IHVud3JhcCBpdC5cbiAgICB2YWx1ZSA9IHJlc29sdmVGb3J3YXJkUmVmKHZhbHVlKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBEZWZzID0gc3BsaXREZXBzRHNsKGRlcHMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIHdpbGwgYmV0IHNldCBieSB0aGUgdmlldyBkZWZpbml0aW9uXG4gICAgICAgIG5vZGVJbmRleDogLTEsXG4gICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgcmVuZGVyUGFyZW50OiBudWxsLFxuICAgICAgICBiaW5kaW5nSW5kZXg6IC0xLFxuICAgICAgICBvdXRwdXRJbmRleDogLTEsXG4gICAgICAgIC8vIHJlZ3VsYXIgdmFsdWVzXG4gICAgICAgIGNoZWNrSW5kZXg6IGNoZWNrSW5kZXgsXG4gICAgICAgIGZsYWdzOiBmbGFncyxcbiAgICAgICAgY2hpbGRGbGFnczogMCxcbiAgICAgICAgZGlyZWN0Q2hpbGRGbGFnczogMCxcbiAgICAgICAgY2hpbGRNYXRjaGVkUXVlcmllczogMCwgbWF0Y2hlZFF1ZXJpZXM6IG1hdGNoZWRRdWVyaWVzLCBtYXRjaGVkUXVlcnlJZHM6IG1hdGNoZWRRdWVyeUlkcywgcmVmZXJlbmNlczogcmVmZXJlbmNlcyxcbiAgICAgICAgbmdDb250ZW50SW5kZXg6IC0xLCBjaGlsZENvdW50OiBjaGlsZENvdW50LCBiaW5kaW5nczogYmluZGluZ3MsXG4gICAgICAgIGJpbmRpbmdGbGFnczogY2FsY0JpbmRpbmdGbGFncyhiaW5kaW5ncyksIG91dHB1dHM6IG91dHB1dHMsXG4gICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgIHByb3ZpZGVyOiB7IHRva2VuOiB0b2tlbiwgdmFsdWU6IHZhbHVlLCBkZXBzOiBkZXBEZWZzIH0sXG4gICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgIHF1ZXJ5OiBudWxsLFxuICAgICAgICBuZ0NvbnRlbnQ6IG51bGxcbiAgICB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVQcm92aWRlckluc3RhbmNlKHZpZXcsIGRlZikge1xuICAgIHJldHVybiBfY3JlYXRlUHJvdmlkZXJJbnN0YW5jZSh2aWV3LCBkZWYpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVQaXBlSW5zdGFuY2UodmlldywgZGVmKSB7XG4gICAgLy8gZGVwcyBhcmUgbG9va2VkIHVwIGZyb20gY29tcG9uZW50LlxuICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbXBWaWV3ID0gdmlldztcbiAgICB3aGlsZSAoY29tcFZpZXcucGFyZW50ICYmICFpc0NvbXBvbmVudFZpZXcoY29tcFZpZXcpKSB7XG4gICAgICAgIGNvbXBWaWV3ID0gY29tcFZpZXcucGFyZW50O1xuICAgIH1cbiAgICAvLyBwaXBlcyBjYW4gc2VlIHRoZSBwcml2YXRlIHNlcnZpY2VzIG9mIHRoZSBjb21wb25lbnRcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxvd1ByaXZhdGVTZXJ2aWNlcyA9IHRydWU7XG4gICAgLy8gcGlwZXMgYXJlIGFsd2F5cyBlYWdlciBhbmQgY2xhc3NlcyFcbiAgICByZXR1cm4gY3JlYXRlQ2xhc3MoLyoqIEB0eXBlIHs/fSAqLyAoKGNvbXBWaWV3LnBhcmVudCkpLCAvKiogQHR5cGUgez99ICovICgodmlld1BhcmVudEVsKGNvbXBWaWV3KSkpLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcywgLyoqIEB0eXBlIHs/fSAqLyAoKGRlZi5wcm92aWRlcikpLnZhbHVlLCAvKiogQHR5cGUgez99ICovICgoZGVmLnByb3ZpZGVyKSkuZGVwcyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpcmVjdGl2ZUluc3RhbmNlKHZpZXcsIGRlZikge1xuICAgIC8vIGNvbXBvbmVudHMgY2FuIHNlZSBvdGhlciBwcml2YXRlIHNlcnZpY2VzLCBvdGhlciBkaXJlY3RpdmVzIGNhbid0LlxuICAgIHZhciAvKiogQHR5cGUgez99ICovIGFsbG93UHJpdmF0ZVNlcnZpY2VzID0gKGRlZi5mbGFncyAmIDMyNzY4IC8qIENvbXBvbmVudCAqLykgPiAwO1xuICAgIC8vIGRpcmVjdGl2ZXMgYXJlIGFsd2F5cyBlYWdlciBhbmQgY2xhc3NlcyFcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbnN0YW5jZSA9IGNyZWF0ZUNsYXNzKHZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChkZWYucGFyZW50KSksIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCAvKiogQHR5cGUgez99ICovICgoZGVmLnByb3ZpZGVyKSkudmFsdWUsIC8qKiBAdHlwZSB7P30gKi8gKChkZWYucHJvdmlkZXIpKS5kZXBzKTtcbiAgICBpZiAoZGVmLm91dHB1dHMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBkZWYub3V0cHV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3V0cHV0ID0gZGVmLm91dHB1dHNbaV07XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdWJzY3JpcHRpb24gPSBpbnN0YW5jZVsvKiogQHR5cGUgez99ICovICgob3V0cHV0LnByb3BOYW1lKSldLnN1YnNjcmliZShldmVudEhhbmRsZXJDbG9zdXJlKHZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChkZWYucGFyZW50KSkubm9kZUluZGV4LCBvdXRwdXQuZXZlbnROYW1lKSk7IC8qKiBAdHlwZSB7P30gKi9cbiAgICAgICAgICAgICgodmlldy5kaXNwb3NhYmxlcykpW2RlZi5vdXRwdXRJbmRleCArIGldID0gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBpbmRleFxuICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGV2ZW50SGFuZGxlckNsb3N1cmUodmlldywgaW5kZXgsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIGRpc3BhdGNoRXZlbnQodmlldywgaW5kZXgsIGV2ZW50TmFtZSwgZXZlbnQpOyB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IHYwXG4gKiBAcGFyYW0gez99IHYxXG4gKiBAcGFyYW0gez99IHYyXG4gKiBAcGFyYW0gez99IHYzXG4gKiBAcGFyYW0gez99IHY0XG4gKiBAcGFyYW0gez99IHY1XG4gKiBAcGFyYW0gez99IHY2XG4gKiBAcGFyYW0gez99IHY3XG4gKiBAcGFyYW0gez99IHY4XG4gKiBAcGFyYW0gez99IHY5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja0FuZFVwZGF0ZURpcmVjdGl2ZUlubGluZSh2aWV3LCBkZWYsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZXJEYXRhID0gYXNQcm92aWRlckRhdGEodmlldywgZGVmLm5vZGVJbmRleCk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGlyZWN0aXZlID0gcHJvdmlkZXJEYXRhLmluc3RhbmNlO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjaGFuZ2VzID0gLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRMZW4gPSBkZWYuYmluZGluZ3MubGVuZ3RoO1xuICAgIGlmIChiaW5kTGVuID4gMCAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCAwLCB2MCkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCAwLCB2MCwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gMSAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCAxLCB2MSkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCAxLCB2MSwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gMiAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCAyLCB2MikpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCAyLCB2MiwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gMyAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCAzLCB2MykpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCAzLCB2MywgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gNCAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCA0LCB2NCkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCA0LCB2NCwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gNSAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCA1LCB2NSkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCA1LCB2NSwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gNiAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCA2LCB2NikpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCA2LCB2NiwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gNyAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCA3LCB2NykpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCA3LCB2NywgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gOCAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCA4LCB2OCkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCA4LCB2OCwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChiaW5kTGVuID4gOSAmJiBjaGVja0JpbmRpbmcodmlldywgZGVmLCA5LCB2OSkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCA5LCB2OSwgY2hhbmdlcyk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICB9XG4gICAgaWYgKChkZWYuZmxhZ3MgJiA2NTUzNiAvKiBPbkluaXQgKi8pICYmXG4gICAgICAgIHNob3VsZENhbGxMaWZlY3ljbGVJbml0SG9vayh2aWV3LCAyNTYgLyogSW5pdFN0YXRlX0NhbGxpbmdPbkluaXQgKi8sIGRlZi5ub2RlSW5kZXgpKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5uZ09uSW5pdCgpO1xuICAgIH1cbiAgICBpZiAoZGVmLmZsYWdzICYgMjYyMTQ0IC8qIERvQ2hlY2sgKi8pIHtcbiAgICAgICAgZGlyZWN0aXZlLm5nRG9DaGVjaygpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHBhcmFtIHs/fSB2YWx1ZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlRGlyZWN0aXZlRHluYW1pYyh2aWV3LCBkZWYsIHZhbHVlcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZpZGVyRGF0YSA9IGFzUHJvdmlkZXJEYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGRpcmVjdGl2ZSA9IHByb3ZpZGVyRGF0YS5pbnN0YW5jZTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2hhbmdlcyA9IC8qKiBAdHlwZSB7P30gKi8gKCh1bmRlZmluZWQpKTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjaGVja0JpbmRpbmcodmlldywgZGVmLCBpLCB2YWx1ZXNbaV0pKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoYW5nZXMgPSB1cGRhdGVQcm9wKHZpZXcsIHByb3ZpZGVyRGF0YSwgZGVmLCBpLCB2YWx1ZXNbaV0sIGNoYW5nZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5uZ09uQ2hhbmdlcyhjaGFuZ2VzKTtcbiAgICB9XG4gICAgaWYgKChkZWYuZmxhZ3MgJiA2NTUzNiAvKiBPbkluaXQgKi8pICYmXG4gICAgICAgIHNob3VsZENhbGxMaWZlY3ljbGVJbml0SG9vayh2aWV3LCAyNTYgLyogSW5pdFN0YXRlX0NhbGxpbmdPbkluaXQgKi8sIGRlZi5ub2RlSW5kZXgpKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5uZ09uSW5pdCgpO1xuICAgIH1cbiAgICBpZiAoZGVmLmZsYWdzICYgMjYyMTQ0IC8qIERvQ2hlY2sgKi8pIHtcbiAgICAgICAgZGlyZWN0aXZlLm5nRG9DaGVjaygpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX2NyZWF0ZVByb3ZpZGVySW5zdGFuY2UodmlldywgZGVmKSB7XG4gICAgLy8gcHJpdmF0ZSBzZXJ2aWNlcyBjYW4gc2VlIG90aGVyIHByaXZhdGUgc2VydmljZXNcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBhbGxvd1ByaXZhdGVTZXJ2aWNlcyA9IChkZWYuZmxhZ3MgJiA4MTkyIC8qIFByaXZhdGVQcm92aWRlciAqLykgPiAwO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZpZGVyRGVmID0gZGVmLnByb3ZpZGVyO1xuICAgIHN3aXRjaCAoZGVmLmZsYWdzICYgMjAxMzQ3MDY3IC8qIFR5cGVzICovKSB7XG4gICAgICAgIGNhc2UgNTEyIC8qIFR5cGVDbGFzc1Byb3ZpZGVyICovOlxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNsYXNzKHZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChkZWYucGFyZW50KSksIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCAvKiogQHR5cGUgez99ICovICgocHJvdmlkZXJEZWYpKS52YWx1ZSwgLyoqIEB0eXBlIHs/fSAqLyAoKHByb3ZpZGVyRGVmKSkuZGVwcyk7XG4gICAgICAgIGNhc2UgMTAyNCAvKiBUeXBlRmFjdG9yeVByb3ZpZGVyICovOlxuICAgICAgICAgICAgcmV0dXJuIGNhbGxGYWN0b3J5KHZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChkZWYucGFyZW50KSksIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCAvKiogQHR5cGUgez99ICovICgocHJvdmlkZXJEZWYpKS52YWx1ZSwgLyoqIEB0eXBlIHs/fSAqLyAoKHByb3ZpZGVyRGVmKSkuZGVwcyk7XG4gICAgICAgIGNhc2UgMjA0OCAvKiBUeXBlVXNlRXhpc3RpbmdQcm92aWRlciAqLzpcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlRGVwKHZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChkZWYucGFyZW50KSksIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCAvKiogQHR5cGUgez99ICovICgocHJvdmlkZXJEZWYpKS5kZXBzWzBdKTtcbiAgICAgICAgY2FzZSAyNTYgLyogVHlwZVZhbHVlUHJvdmlkZXIgKi86XG4gICAgICAgICAgICByZXR1cm4gLyoqIEB0eXBlIHs/fSAqLyAoKHByb3ZpZGVyRGVmKSkudmFsdWU7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZWxEZWZcbiAqIEBwYXJhbSB7P30gYWxsb3dQcml2YXRlU2VydmljZXNcbiAqIEBwYXJhbSB7P30gY3RvclxuICogQHBhcmFtIHs/fSBkZXBzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVDbGFzcyh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIGN0b3IsIGRlcHMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZW4gPSBkZXBzLmxlbmd0aDtcbiAgICBzd2l0Y2ggKGxlbikge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICByZXR1cm4gbmV3IGN0b3IoKTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBjdG9yKHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBzWzBdKSk7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcihyZXNvbHZlRGVwKHZpZXcsIGVsRGVmLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcywgZGVwc1swXSksIHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBzWzFdKSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgY3RvcihyZXNvbHZlRGVwKHZpZXcsIGVsRGVmLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcywgZGVwc1swXSksIHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBzWzFdKSwgcmVzb2x2ZURlcCh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIGRlcHNbMl0pKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlcFZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGVwVmFsdWVzW2ldID0gcmVzb2x2ZURlcCh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIGRlcHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoY3Rvci5iaW5kLmFwcGx5KGN0b3IsIFt2b2lkIDBdLmNvbmNhdChkZXBWYWx1ZXMpKSkoKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBlbERlZlxuICogQHBhcmFtIHs/fSBhbGxvd1ByaXZhdGVTZXJ2aWNlc1xuICogQHBhcmFtIHs/fSBmYWN0b3J5XG4gKiBAcGFyYW0gez99IGRlcHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNhbGxGYWN0b3J5KHZpZXcsIGVsRGVmLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcywgZmFjdG9yeSwgZGVwcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGxlbiA9IGRlcHMubGVuZ3RoO1xuICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KCk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBzWzBdKSk7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBzWzBdKSwgcmVzb2x2ZURlcCh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIGRlcHNbMV0pKTtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkocmVzb2x2ZURlcCh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIGRlcHNbMF0pLCByZXNvbHZlRGVwKHZpZXcsIGVsRGVmLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcywgZGVwc1sxXSksIHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBzWzJdKSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZXBWYWx1ZXMgPSBBcnJheShsZW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGVwVmFsdWVzW2ldID0gcmVzb2x2ZURlcCh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMsIGRlcHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkuYXBwbHkodm9pZCAwLCBkZXBWYWx1ZXMpO1xuICAgIH1cbn1cbi8vIFRoaXMgZGVmYXVsdCB2YWx1ZSBpcyB3aGVuIGNoZWNraW5nIHRoZSBoaWVyYXJjaHkgZm9yIGEgdG9rZW4uXG4vL1xuLy8gSXQgbWVhbnMgYm90aDpcbi8vIC0gdGhlIHRva2VuIGlzIG5vdCBwcm92aWRlZCBieSB0aGUgY3VycmVudCBpbmplY3Rvcixcbi8vIC0gb25seSB0aGUgZWxlbWVudCBpbmplY3RvcnMgc2hvdWxkIGJlIGNoZWNrZWQgKGllIGRvIG5vdCBjaGVjayBtb2R1bGUgaW5qZWN0b3JzXG4vL1xuLy8gICAgICAgICAgbW9kMVxuLy8gICAgICAgICAvXG4vLyAgICAgICBlbDEgICBtb2QyXG4vLyAgICAgICAgIFxcICAvXG4vLyAgICAgICAgIGVsMlxuLy9cbi8vIFdoZW4gcmVxdWVzdGluZyBlbDIuaW5qZWN0b3IuZ2V0KHRva2VuKSwgd2Ugc2hvdWxkIGNoZWNrIGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgYW5kIHJldHVybiB0aGVcbi8vIGZpcnN0IGZvdW5kIHZhbHVlOlxuLy8gLSBlbDIuaW5qZWN0b3IuZ2V0KHRva2VuLCBkZWZhdWx0KVxuLy8gLSBlbDEuaW5qZWN0b3IuZ2V0KHRva2VuLCBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SKSAtPiBkbyBub3QgY2hlY2sgdGhlIG1vZHVsZVxuLy8gLSBtb2QyLmluamVjdG9yLmdldCh0b2tlbiwgZGVmYXVsdClcbnZhciBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SID0ge307XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBlbERlZlxuICogQHBhcmFtIHs/fSBhbGxvd1ByaXZhdGVTZXJ2aWNlc1xuICogQHBhcmFtIHs/fSBkZXBEZWZcbiAqIEBwYXJhbSB7Pz19IG5vdEZvdW5kVmFsdWVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVEZXAodmlldywgZWxEZWYsIGFsbG93UHJpdmF0ZVNlcnZpY2VzLCBkZXBEZWYsIG5vdEZvdW5kVmFsdWUpIHtcbiAgICBpZiAobm90Rm91bmRWYWx1ZSA9PT0gdm9pZCAwKSB7IG5vdEZvdW5kVmFsdWUgPSBJbmplY3Rvci5USFJPV19JRl9OT1RfRk9VTkQ7IH1cbiAgICBpZiAoZGVwRGVmLmZsYWdzICYgOCAvKiBWYWx1ZSAqLykge1xuICAgICAgICByZXR1cm4gZGVwRGVmLnRva2VuO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBzdGFydFZpZXcgPSB2aWV3O1xuICAgIGlmIChkZXBEZWYuZmxhZ3MgJiAyIC8qIE9wdGlvbmFsICovKSB7XG4gICAgICAgIG5vdEZvdW5kVmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0b2tlbktleSQkMSA9IGRlcERlZi50b2tlbktleTtcbiAgICBpZiAodG9rZW5LZXkkJDEgPT09IENoYW5nZURldGVjdG9yUmVmVG9rZW5LZXkpIHtcbiAgICAgICAgLy8gZGlyZWN0aXZlcyBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIGEgY29tcG9uZW50IHNob3VsZCBiZSBhYmxlIHRvIGNvbnRyb2wgdGhlIGNoYW5nZSBkZXRlY3RvclxuICAgICAgICAvLyBvZiB0aGF0IGNvbXBvbmVudCBhcyB3ZWxsLlxuICAgICAgICBhbGxvd1ByaXZhdGVTZXJ2aWNlcyA9ICEhKGVsRGVmICYmIC8qKiBAdHlwZSB7P30gKi8gKChlbERlZi5lbGVtZW50KSkuY29tcG9uZW50Vmlldyk7XG4gICAgfVxuICAgIGlmIChlbERlZiAmJiAoZGVwRGVmLmZsYWdzICYgMSAvKiBTa2lwU2VsZiAqLykpIHtcbiAgICAgICAgYWxsb3dQcml2YXRlU2VydmljZXMgPSBmYWxzZTtcbiAgICAgICAgZWxEZWYgPSAvKiogQHR5cGUgez99ICovICgoZWxEZWYucGFyZW50KSk7XG4gICAgfVxuICAgIHdoaWxlICh2aWV3KSB7XG4gICAgICAgIGlmIChlbERlZikge1xuICAgICAgICAgICAgc3dpdGNoICh0b2tlbktleSQkMSkge1xuICAgICAgICAgICAgICAgIGNhc2UgUmVuZGVyZXJWMVRva2VuS2V5OiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNvbXBWaWV3ID0gZmluZENvbXBWaWV3KHZpZXcsIGVsRGVmLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVSZW5kZXJlclYxKGNvbXBWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBSZW5kZXJlcjJUb2tlbktleToge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wVmlldyA9IGZpbmRDb21wVmlldyh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcFZpZXcucmVuZGVyZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgRWxlbWVudFJlZlRva2VuS2V5OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRSZWYoYXNFbGVtZW50RGF0YSh2aWV3LCBlbERlZi5ub2RlSW5kZXgpLnJlbmRlckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGNhc2UgVmlld0NvbnRhaW5lclJlZlRva2VuS2V5OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXNFbGVtZW50RGF0YSh2aWV3LCBlbERlZi5ub2RlSW5kZXgpLnZpZXdDb250YWluZXI7XG4gICAgICAgICAgICAgICAgY2FzZSBUZW1wbGF0ZVJlZlRva2VuS2V5OiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgvKiogQHR5cGUgez99ICovICgoZWxEZWYuZWxlbWVudCkpLnRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXNFbGVtZW50RGF0YSh2aWV3LCBlbERlZi5ub2RlSW5kZXgpLnRlbXBsYXRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIENoYW5nZURldGVjdG9yUmVmVG9rZW5LZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2RWaWV3ID0gZmluZENvbXBWaWV3KHZpZXcsIGVsRGVmLCBhbGxvd1ByaXZhdGVTZXJ2aWNlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVDaGFuZ2VEZXRlY3RvclJlZihjZFZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEluamVjdG9yUmVmVG9rZW5LZXk6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbmplY3Rvcih2aWV3LCBlbERlZik7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZXJEZWZfMSA9IC8qKiBAdHlwZSB7P30gKi8gKCgoYWxsb3dQcml2YXRlU2VydmljZXMgPyAvKiogQHR5cGUgez99ICovICgoZWxEZWYuZWxlbWVudCkpLmFsbFByb3ZpZGVycyA6IC8qKiBAdHlwZSB7P30gKi8gKChlbERlZi5lbGVtZW50KSkucHVibGljUHJvdmlkZXJzKSkpW3Rva2VuS2V5JCQxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyRGVmXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3ZpZGVyRGF0YSA9IGFzUHJvdmlkZXJEYXRhKHZpZXcsIHByb3ZpZGVyRGVmXzEubm9kZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvdmlkZXJEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhID0geyBpbnN0YW5jZTogX2NyZWF0ZVByb3ZpZGVySW5zdGFuY2UodmlldywgcHJvdmlkZXJEZWZfMSkgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Lm5vZGVzW3Byb3ZpZGVyRGVmXzEubm9kZUluZGV4XSA9IC8qKiBAdHlwZSB7P30gKi8gKHByb3ZpZGVyRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmlkZXJEYXRhLmluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYWxsb3dQcml2YXRlU2VydmljZXMgPSBpc0NvbXBvbmVudFZpZXcodmlldyk7XG4gICAgICAgIGVsRGVmID0gLyoqIEB0eXBlIHs/fSAqLyAoKHZpZXdQYXJlbnRFbCh2aWV3KSkpO1xuICAgICAgICB2aWV3ID0gLyoqIEB0eXBlIHs/fSAqLyAoKHZpZXcucGFyZW50KSk7XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlID0gc3RhcnRWaWV3LnJvb3QuaW5qZWN0b3IuZ2V0KGRlcERlZi50b2tlbiwgTk9UX0ZPVU5EX0NIRUNLX09OTFlfRUxFTUVOVF9JTkpFQ1RPUik7XG4gICAgaWYgKHZhbHVlICE9PSBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SIHx8XG4gICAgICAgIG5vdEZvdW5kVmFsdWUgPT09IE5PVF9GT1VORF9DSEVDS19PTkxZX0VMRU1FTlRfSU5KRUNUT1IpIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBmcm9tIHRoZSByb290IGVsZW1lbnQgaW5qZWN0b3Igd2hlblxuICAgICAgICAvLyAtIGl0IHByb3ZpZGVzIGl0XG4gICAgICAgIC8vICAgKHZhbHVlICE9PSBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SKVxuICAgICAgICAvLyAtIHRoZSBtb2R1bGUgaW5qZWN0b3Igc2hvdWxkIG5vdCBiZSBjaGVja2VkXG4gICAgICAgIC8vICAgKG5vdEZvdW5kVmFsdWUgPT09IE5PVF9GT1VORF9DSEVDS19PTkxZX0VMRU1FTlRfSU5KRUNUT1IpXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0Vmlldy5yb290Lm5nTW9kdWxlLmluamVjdG9yLmdldChkZXBEZWYudG9rZW4sIG5vdEZvdW5kVmFsdWUpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gZWxEZWZcbiAqIEBwYXJhbSB7P30gYWxsb3dQcml2YXRlU2VydmljZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21wVmlldyh2aWV3LCBlbERlZiwgYWxsb3dQcml2YXRlU2VydmljZXMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wVmlldztcbiAgICBpZiAoYWxsb3dQcml2YXRlU2VydmljZXMpIHtcbiAgICAgICAgY29tcFZpZXcgPSBhc0VsZW1lbnREYXRhKHZpZXcsIGVsRGVmLm5vZGVJbmRleCkuY29tcG9uZW50VmlldztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbXBWaWV3ID0gdmlldztcbiAgICAgICAgd2hpbGUgKGNvbXBWaWV3LnBhcmVudCAmJiAhaXNDb21wb25lbnRWaWV3KGNvbXBWaWV3KSkge1xuICAgICAgICAgICAgY29tcFZpZXcgPSBjb21wVmlldy5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbXBWaWV3O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gcHJvdmlkZXJEYXRhXG4gKiBAcGFyYW0gez99IGRlZlxuICogQHBhcmFtIHs/fSBiaW5kaW5nSWR4XG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcGFyYW0gez99IGNoYW5nZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVByb3AodmlldywgcHJvdmlkZXJEYXRhLCBkZWYsIGJpbmRpbmdJZHgsIHZhbHVlLCBjaGFuZ2VzKSB7XG4gICAgaWYgKGRlZi5mbGFncyAmIDMyNzY4IC8qIENvbXBvbmVudCAqLykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wVmlldyA9IGFzRWxlbWVudERhdGEodmlldywgLyoqIEB0eXBlIHs/fSAqLyAoKGRlZi5wYXJlbnQpKS5ub2RlSW5kZXgpLmNvbXBvbmVudFZpZXc7XG4gICAgICAgIGlmIChjb21wVmlldy5kZWYuZmxhZ3MgJiAyIC8qIE9uUHVzaCAqLykge1xuICAgICAgICAgICAgY29tcFZpZXcuc3RhdGUgfD0gOCAvKiBDaGVja3NFbmFibGVkICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRpbmcgPSBkZWYuYmluZGluZ3NbYmluZGluZ0lkeF07XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcE5hbWUgPSAvKiogQHR5cGUgez99ICovICgoYmluZGluZy5uYW1lKSk7XG4gICAgLy8gTm90ZTogVGhpcyBpcyBzdGlsbCBzYWZlIHdpdGggQ2xvc3VyZSBDb21waWxlciBhc1xuICAgIC8vIHRoZSB1c2VyIHBhc3NlZCBpbiB0aGUgcHJvcGVydHkgbmFtZSBhcyBhbiBvYmplY3QgaGFzIHRvIGBwcm92aWRlckRlZmAsXG4gICAgLy8gc28gQ2xvc3VyZSBDb21waWxlciB3aWxsIGhhdmUgcmVuYW1lZCB0aGUgcHJvcGVydHkgY29ycmVjdGx5IGFscmVhZHkuXG4gICAgcHJvdmlkZXJEYXRhLmluc3RhbmNlW3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgIGlmIChkZWYuZmxhZ3MgJiA1MjQyODggLyogT25DaGFuZ2VzICovKSB7XG4gICAgICAgIGNoYW5nZXMgPSBjaGFuZ2VzIHx8IHt9O1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvbGRWYWx1ZSA9IHZpZXcub2xkVmFsdWVzW2RlZi5iaW5kaW5nSW5kZXggKyBiaW5kaW5nSWR4XTtcbiAgICAgICAgaWYgKG9sZFZhbHVlIGluc3RhbmNlb2YgV3JhcHBlZFZhbHVlKSB7XG4gICAgICAgICAgICBvbGRWYWx1ZSA9IG9sZFZhbHVlLndyYXBwZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ18xID0gZGVmLmJpbmRpbmdzW2JpbmRpbmdJZHhdO1xuICAgICAgICBjaGFuZ2VzWy8qKiBAdHlwZSB7P30gKi8gKChiaW5kaW5nXzEubm9uTWluaWZpZWROYW1lKSldID1cbiAgICAgICAgICAgIG5ldyBTaW1wbGVDaGFuZ2Uob2xkVmFsdWUsIHZhbHVlLCAodmlldy5zdGF0ZSAmIDIgLyogRmlyc3RDaGVjayAqLykgIT09IDApO1xuICAgIH1cbiAgICB2aWV3Lm9sZFZhbHVlc1tkZWYuYmluZGluZ0luZGV4ICsgYmluZGluZ0lkeF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gY2hhbmdlcztcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGxpZmVjeWNsZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNhbGxMaWZlY3ljbGVIb29rc0NoaWxkcmVuRmlyc3QodmlldywgbGlmZWN5Y2xlcykge1xuICAgIGlmICghKHZpZXcuZGVmLm5vZGVGbGFncyAmIGxpZmVjeWNsZXMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZXMgPSB2aWV3LmRlZi5ub2RlcztcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbml0SW5kZXggPSAwO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gbm9kZXNbaV07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudF8xID0gbm9kZURlZi5wYXJlbnQ7XG4gICAgICAgIGlmICghcGFyZW50XzEgJiYgbm9kZURlZi5mbGFncyAmIGxpZmVjeWNsZXMpIHtcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIHJvb3Qgbm9kZSAoZS5nLiBhIHBpcGUpXG4gICAgICAgICAgICBjYWxsUHJvdmlkZXJMaWZlY3ljbGVzKHZpZXcsIGksIG5vZGVEZWYuZmxhZ3MgJiBsaWZlY3ljbGVzLCBpbml0SW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChub2RlRGVmLmNoaWxkRmxhZ3MgJiBsaWZlY3ljbGVzKSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gbm8gY2hpbGQgbWF0Y2hlcyBvbmUgb2YgdGhlIGxpZmVjeWNsZXNcbiAgICAgICAgICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChwYXJlbnRfMSAmJiAocGFyZW50XzEuZmxhZ3MgJiAxIC8qIFR5cGVFbGVtZW50ICovKSAmJlxuICAgICAgICAgICAgaSA9PT0gcGFyZW50XzEubm9kZUluZGV4ICsgcGFyZW50XzEuY2hpbGRDb3VudCkge1xuICAgICAgICAgICAgLy8gbGFzdCBjaGlsZCBvZiBhbiBlbGVtZW50XG4gICAgICAgICAgICBpZiAocGFyZW50XzEuZGlyZWN0Q2hpbGRGbGFncyAmIGxpZmVjeWNsZXMpIHtcbiAgICAgICAgICAgICAgICBpbml0SW5kZXggPSBjYWxsRWxlbWVudFByb3ZpZGVyc0xpZmVjeWNsZXModmlldywgcGFyZW50XzEsIGxpZmVjeWNsZXMsIGluaXRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRfMSA9IHBhcmVudF8xLnBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGVsRGVmXG4gKiBAcGFyYW0gez99IGxpZmVjeWNsZXNcbiAqIEBwYXJhbSB7P30gaW5pdEluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjYWxsRWxlbWVudFByb3ZpZGVyc0xpZmVjeWNsZXModmlldywgZWxEZWYsIGxpZmVjeWNsZXMsIGluaXRJbmRleCkge1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IGVsRGVmLm5vZGVJbmRleCArIDE7IGkgPD0gZWxEZWYubm9kZUluZGV4ICsgZWxEZWYuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiBsaWZlY3ljbGVzKSB7XG4gICAgICAgICAgICBjYWxsUHJvdmlkZXJMaWZlY3ljbGVzKHZpZXcsIGksIG5vZGVEZWYuZmxhZ3MgJiBsaWZlY3ljbGVzLCBpbml0SW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25seSB2aXNpdCBkaXJlY3QgY2hpbGRyZW5cbiAgICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgfVxuICAgIHJldHVybiBpbml0SW5kZXg7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBpbmRleFxuICogQHBhcmFtIHs/fSBsaWZlY3ljbGVzXG4gKiBAcGFyYW0gez99IGluaXRJbmRleFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2FsbFByb3ZpZGVyTGlmZWN5Y2xlcyh2aWV3LCBpbmRleCwgbGlmZWN5Y2xlcywgaW5pdEluZGV4KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZXJEYXRhID0gYXNQcm92aWRlckRhdGEodmlldywgaW5kZXgpO1xuICAgIGlmICghcHJvdmlkZXJEYXRhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvdmlkZXIgPSBwcm92aWRlckRhdGEuaW5zdGFuY2U7XG4gICAgaWYgKCFwcm92aWRlcikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFNlcnZpY2VzLnNldEN1cnJlbnROb2RlKHZpZXcsIGluZGV4KTtcbiAgICBpZiAobGlmZWN5Y2xlcyAmIDEwNDg1NzYgLyogQWZ0ZXJDb250ZW50SW5pdCAqLyAmJlxuICAgICAgICBzaG91bGRDYWxsTGlmZWN5Y2xlSW5pdEhvb2sodmlldywgNTEyIC8qIEluaXRTdGF0ZV9DYWxsaW5nQWZ0ZXJDb250ZW50SW5pdCAqLywgaW5pdEluZGV4KSkge1xuICAgICAgICBwcm92aWRlci5uZ0FmdGVyQ29udGVudEluaXQoKTtcbiAgICB9XG4gICAgaWYgKGxpZmVjeWNsZXMgJiAyMDk3MTUyIC8qIEFmdGVyQ29udGVudENoZWNrZWQgKi8pIHtcbiAgICAgICAgcHJvdmlkZXIubmdBZnRlckNvbnRlbnRDaGVja2VkKCk7XG4gICAgfVxuICAgIGlmIChsaWZlY3ljbGVzICYgNDE5NDMwNCAvKiBBZnRlclZpZXdJbml0ICovICYmXG4gICAgICAgIHNob3VsZENhbGxMaWZlY3ljbGVJbml0SG9vayh2aWV3LCA3NjggLyogSW5pdFN0YXRlX0NhbGxpbmdBZnRlclZpZXdJbml0ICovLCBpbml0SW5kZXgpKSB7XG4gICAgICAgIHByb3ZpZGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuICAgIH1cbiAgICBpZiAobGlmZWN5Y2xlcyAmIDgzODg2MDggLyogQWZ0ZXJWaWV3Q2hlY2tlZCAqLykge1xuICAgICAgICBwcm92aWRlci5uZ0FmdGVyVmlld0NoZWNrZWQoKTtcbiAgICB9XG4gICAgaWYgKGxpZmVjeWNsZXMgJiAxMzEwNzIgLyogT25EZXN0cm95ICovKSB7XG4gICAgICAgIHByb3ZpZGVyLm5nT25EZXN0cm95KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwYXJhbSB7P30gZmxhZ3NcbiAqIEBwYXJhbSB7P30gaWRcbiAqIEBwYXJhbSB7P30gYmluZGluZ3NcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5RGVmKGZsYWdzLCBpZCwgYmluZGluZ3MpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBiaW5kaW5nRGVmcyA9IFtdO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvcE5hbWUgaW4gYmluZGluZ3MpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ1R5cGUgPSBiaW5kaW5nc1twcm9wTmFtZV07XG4gICAgICAgIGJpbmRpbmdEZWZzLnB1c2goeyBwcm9wTmFtZTogcHJvcE5hbWUsIGJpbmRpbmdUeXBlOiBiaW5kaW5nVHlwZSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gd2lsbCBiZXQgc2V0IGJ5IHRoZSB2aWV3IGRlZmluaXRpb25cbiAgICAgICAgbm9kZUluZGV4OiAtMSxcbiAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICByZW5kZXJQYXJlbnQ6IG51bGwsXG4gICAgICAgIGJpbmRpbmdJbmRleDogLTEsXG4gICAgICAgIG91dHB1dEluZGV4OiAtMSxcbiAgICAgICAgLy8gcmVndWxhciB2YWx1ZXNcbiAgICAgICAgLy8gVE9ETyh2aWNiKTogY2hlY2tcbiAgICAgICAgY2hlY2tJbmRleDogLTEsIGZsYWdzOiBmbGFncyxcbiAgICAgICAgY2hpbGRGbGFnczogMCxcbiAgICAgICAgZGlyZWN0Q2hpbGRGbGFnczogMCxcbiAgICAgICAgY2hpbGRNYXRjaGVkUXVlcmllczogMCxcbiAgICAgICAgbmdDb250ZW50SW5kZXg6IC0xLFxuICAgICAgICBtYXRjaGVkUXVlcmllczoge30sXG4gICAgICAgIG1hdGNoZWRRdWVyeUlkczogMCxcbiAgICAgICAgcmVmZXJlbmNlczoge30sXG4gICAgICAgIGNoaWxkQ291bnQ6IDAsXG4gICAgICAgIGJpbmRpbmdzOiBbXSxcbiAgICAgICAgYmluZGluZ0ZsYWdzOiAwLFxuICAgICAgICBvdXRwdXRzOiBbXSxcbiAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgcHJvdmlkZXI6IG51bGwsXG4gICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgIHF1ZXJ5OiB7IGlkOiBpZCwgZmlsdGVySWQ6IGZpbHRlclF1ZXJ5SWQoaWQpLCBiaW5kaW5nczogYmluZGluZ0RlZnMgfSxcbiAgICAgICAgbmdDb250ZW50OiBudWxsXG4gICAgfTtcbn1cbi8qKlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUXVlcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBRdWVyeUxpc3QoKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkaXJ0eVBhcmVudFF1ZXJpZXModmlldykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHF1ZXJ5SWRzID0gdmlldy5kZWYubm9kZU1hdGNoZWRRdWVyaWVzO1xuICAgIHdoaWxlICh2aWV3LnBhcmVudCAmJiBpc0VtYmVkZGVkVmlldyh2aWV3KSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0cGxEZWYgPSAvKiogQHR5cGUgez99ICovICgodmlldy5wYXJlbnROb2RlRGVmKSk7XG4gICAgICAgIHZpZXcgPSB2aWV3LnBhcmVudDtcbiAgICAgICAgLy8gY29udGVudCBxdWVyaWVzXG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVuZCA9IHRwbERlZi5ub2RlSW5kZXggKyB0cGxEZWYuY2hpbGRDb3VudDtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZURlZiA9IHZpZXcuZGVmLm5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKChub2RlRGVmLmZsYWdzICYgNjcxMDg4NjQgLyogVHlwZUNvbnRlbnRRdWVyeSAqLykgJiZcbiAgICAgICAgICAgICAgICAobm9kZURlZi5mbGFncyAmIDUzNjg3MDkxMiAvKiBEeW5hbWljUXVlcnkgKi8pICYmXG4gICAgICAgICAgICAgICAgKC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLnF1ZXJ5KSkuZmlsdGVySWQgJiBxdWVyeUlkcykgPT09IC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLnF1ZXJ5KSkuZmlsdGVySWQpIHtcbiAgICAgICAgICAgICAgICBhc1F1ZXJ5TGlzdCh2aWV3LCBpKS5zZXREaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChub2RlRGVmLmZsYWdzICYgMSAvKiBUeXBlRWxlbWVudCAqLyAmJiBpICsgbm9kZURlZi5jaGlsZENvdW50IDwgdHBsRGVmLm5vZGVJbmRleCkgfHxcbiAgICAgICAgICAgICAgICAhKG5vZGVEZWYuY2hpbGRGbGFncyAmIDY3MTA4ODY0IC8qIFR5cGVDb250ZW50UXVlcnkgKi8pIHx8XG4gICAgICAgICAgICAgICAgIShub2RlRGVmLmNoaWxkRmxhZ3MgJiA1MzY4NzA5MTIgLyogRHluYW1pY1F1ZXJ5ICovKSkge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgZWxlbWVudHMgdGhhdCBkb24ndCBjb250YWluIHRoZSB0ZW1wbGF0ZSBlbGVtZW50IG9yIG5vIHF1ZXJ5LlxuICAgICAgICAgICAgICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHZpZXcgcXVlcmllc1xuICAgIGlmICh2aWV3LmRlZi5ub2RlRmxhZ3MgJiAxMzQyMTc3MjggLyogVHlwZVZpZXdRdWVyeSAqLykge1xuICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmlldy5kZWYubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmICgobm9kZURlZi5mbGFncyAmIDEzNDIxNzcyOCAvKiBUeXBlVmlld1F1ZXJ5ICovKSAmJiAobm9kZURlZi5mbGFncyAmIDUzNjg3MDkxMiAvKiBEeW5hbWljUXVlcnkgKi8pKSB7XG4gICAgICAgICAgICAgICAgYXNRdWVyeUxpc3QodmlldywgaSkuc2V0RGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIG9ubHkgdmlzaXQgdGhlIHJvb3Qgbm9kZXNcbiAgICAgICAgICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gbm9kZURlZlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVRdWVyeSh2aWV3LCBub2RlRGVmKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcXVlcnlMaXN0ID0gYXNRdWVyeUxpc3Qodmlldywgbm9kZURlZi5ub2RlSW5kZXgpO1xuICAgIGlmICghcXVlcnlMaXN0LmRpcnR5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGlyZWN0aXZlSW5zdGFuY2U7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV3VmFsdWVzID0gLyoqIEB0eXBlIHs/fSAqLyAoKHVuZGVmaW5lZCkpO1xuICAgIGlmIChub2RlRGVmLmZsYWdzICYgNjcxMDg4NjQgLyogVHlwZUNvbnRlbnRRdWVyeSAqLykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbGVtZW50RGVmID0gLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLnBhcmVudCkpLnBhcmVudCkpO1xuICAgICAgICBuZXdWYWx1ZXMgPSBjYWxjUXVlcnlWYWx1ZXModmlldywgZWxlbWVudERlZi5ub2RlSW5kZXgsIGVsZW1lbnREZWYubm9kZUluZGV4ICsgZWxlbWVudERlZi5jaGlsZENvdW50LCAvKiogQHR5cGUgez99ICovICgobm9kZURlZi5xdWVyeSkpLCBbXSk7XG4gICAgICAgIGRpcmVjdGl2ZUluc3RhbmNlID0gYXNQcm92aWRlckRhdGEodmlldywgLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYucGFyZW50KSkubm9kZUluZGV4KS5pbnN0YW5jZTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZURlZi5mbGFncyAmIDEzNDIxNzcyOCAvKiBUeXBlVmlld1F1ZXJ5ICovKSB7XG4gICAgICAgIG5ld1ZhbHVlcyA9IGNhbGNRdWVyeVZhbHVlcyh2aWV3LCAwLCB2aWV3LmRlZi5ub2Rlcy5sZW5ndGggLSAxLCAvKiogQHR5cGUgez99ICovICgobm9kZURlZi5xdWVyeSkpLCBbXSk7XG4gICAgICAgIGRpcmVjdGl2ZUluc3RhbmNlID0gdmlldy5jb21wb25lbnQ7XG4gICAgfVxuICAgIHF1ZXJ5TGlzdC5yZXNldChuZXdWYWx1ZXMpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRpbmdzID0gLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYucXVlcnkpKS5iaW5kaW5ncztcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub3RpZnkgPSBmYWxzZTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZyA9IGJpbmRpbmdzW2ldO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBib3VuZFZhbHVlID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKGJpbmRpbmcuYmluZGluZ1R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBGaXJzdCAqLzpcbiAgICAgICAgICAgICAgICBib3VuZFZhbHVlID0gcXVlcnlMaXN0LmZpcnN0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxIC8qIEFsbCAqLzpcbiAgICAgICAgICAgICAgICBib3VuZFZhbHVlID0gcXVlcnlMaXN0O1xuICAgICAgICAgICAgICAgIG5vdGlmeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGlyZWN0aXZlSW5zdGFuY2VbYmluZGluZy5wcm9wTmFtZV0gPSBib3VuZFZhbHVlO1xuICAgIH1cbiAgICBpZiAobm90aWZ5KSB7XG4gICAgICAgIHF1ZXJ5TGlzdC5ub3RpZnlPbkNoYW5nZXMoKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBzdGFydEluZGV4XG4gKiBAcGFyYW0gez99IGVuZEluZGV4XG4gKiBAcGFyYW0gez99IHF1ZXJ5RGVmXG4gKiBAcGFyYW0gez99IHZhbHVlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2FsY1F1ZXJ5VmFsdWVzKHZpZXcsIHN0YXJ0SW5kZXgsIGVuZEluZGV4LCBxdWVyeURlZiwgdmFsdWVzKSB7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gc3RhcnRJbmRleDsgaSA8PSBlbmRJbmRleDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tpXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWVUeXBlID0gbm9kZURlZi5tYXRjaGVkUXVlcmllc1txdWVyeURlZi5pZF07XG4gICAgICAgIGlmICh2YWx1ZVR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goZ2V0UXVlcnlWYWx1ZSh2aWV3LCBub2RlRGVmLCB2YWx1ZVR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZURlZi5mbGFncyAmIDEgLyogVHlwZUVsZW1lbnQgKi8gJiYgLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYuZWxlbWVudCkpLnRlbXBsYXRlICYmXG4gICAgICAgICAgICAoLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLmVsZW1lbnQpKS50ZW1wbGF0ZSkpLm5vZGVNYXRjaGVkUXVlcmllcyAmIHF1ZXJ5RGVmLmZpbHRlcklkKSA9PT1cbiAgICAgICAgICAgICAgICBxdWVyeURlZi5maWx0ZXJJZCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxlbWVudERhdGEgPSBhc0VsZW1lbnREYXRhKHZpZXcsIGkpO1xuICAgICAgICAgICAgLy8gY2hlY2sgZW1iZWRkZWQgdmlld3MgdGhhdCB3ZXJlIGF0dGFjaGVkIGF0IHRoZSBwbGFjZSBvZiB0aGVpciB0ZW1wbGF0ZSxcbiAgICAgICAgICAgIC8vIGJ1dCBwcm9jZXNzIGNoaWxkIG5vZGVzIGZpcnN0IGlmIHNvbWUgbWF0Y2ggdGhlIHF1ZXJ5IChzZWUgaXNzdWUgIzE2NTY4KVxuICAgICAgICAgICAgaWYgKChub2RlRGVmLmNoaWxkTWF0Y2hlZFF1ZXJpZXMgJiBxdWVyeURlZi5maWx0ZXJJZCkgPT09IHF1ZXJ5RGVmLmZpbHRlcklkKSB7XG4gICAgICAgICAgICAgICAgY2FsY1F1ZXJ5VmFsdWVzKHZpZXcsIGkgKyAxLCBpICsgbm9kZURlZi5jaGlsZENvdW50LCBxdWVyeURlZiwgdmFsdWVzKTtcbiAgICAgICAgICAgICAgICBpICs9IG5vZGVEZWYuY2hpbGRDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgMTY3NzcyMTYgLyogRW1iZWRkZWRWaWV3cyAqLykge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVtYmVkZGVkVmlld3MgPSAvKiogQHR5cGUgez99ICovICgoZWxlbWVudERhdGEudmlld0NvbnRhaW5lcikpLl9lbWJlZGRlZFZpZXdzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gayA9IDA7IGsgPCBlbWJlZGRlZFZpZXdzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVtYmVkZGVkVmlldyA9IGVtYmVkZGVkVmlld3Nba107XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGR2YyA9IGRlY2xhcmVkVmlld0NvbnRhaW5lcihlbWJlZGRlZFZpZXcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHZjICYmIGR2YyA9PT0gZWxlbWVudERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGNRdWVyeVZhbHVlcyhlbWJlZGRlZFZpZXcsIDAsIGVtYmVkZGVkVmlldy5kZWYubm9kZXMubGVuZ3RoIC0gMSwgcXVlcnlEZWYsIHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9qZWN0ZWRWaWV3cyA9IGVsZW1lbnREYXRhLnRlbXBsYXRlLl9wcm9qZWN0ZWRWaWV3cztcbiAgICAgICAgICAgIGlmIChwcm9qZWN0ZWRWaWV3cykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gayA9IDA7IGsgPCBwcm9qZWN0ZWRWaWV3cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9qZWN0ZWRWaWV3ID0gcHJvamVjdGVkVmlld3Nba107XG4gICAgICAgICAgICAgICAgICAgIGNhbGNRdWVyeVZhbHVlcyhwcm9qZWN0ZWRWaWV3LCAwLCBwcm9qZWN0ZWRWaWV3LmRlZi5ub2Rlcy5sZW5ndGggLSAxLCBxdWVyeURlZiwgdmFsdWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChub2RlRGVmLmNoaWxkTWF0Y2hlZFF1ZXJpZXMgJiBxdWVyeURlZi5maWx0ZXJJZCkgIT09IHF1ZXJ5RGVmLmZpbHRlcklkKSB7XG4gICAgICAgICAgICAvLyBpZiBubyBjaGlsZCBtYXRjaGVzIHRoZSBxdWVyeSwgc2tpcCB0aGUgY2hpbGRyZW4uXG4gICAgICAgICAgICBpICs9IG5vZGVEZWYuY2hpbGRDb3VudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gbm9kZURlZlxuICogQHBhcmFtIHs/fSBxdWVyeVZhbHVlVHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ2V0UXVlcnlWYWx1ZSh2aWV3LCBub2RlRGVmLCBxdWVyeVZhbHVlVHlwZSkge1xuICAgIGlmIChxdWVyeVZhbHVlVHlwZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIGEgbWF0Y2hcbiAgICAgICAgc3dpdGNoIChxdWVyeVZhbHVlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAxIC8qIFJlbmRlckVsZW1lbnQgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzRWxlbWVudERhdGEodmlldywgbm9kZURlZi5ub2RlSW5kZXgpLnJlbmRlckVsZW1lbnQ7XG4gICAgICAgICAgICBjYXNlIDAgLyogRWxlbWVudFJlZiAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVsZW1lbnRSZWYoYXNFbGVtZW50RGF0YSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCkucmVuZGVyRWxlbWVudCk7XG4gICAgICAgICAgICBjYXNlIDIgLyogVGVtcGxhdGVSZWYgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzRWxlbWVudERhdGEodmlldywgbm9kZURlZi5ub2RlSW5kZXgpLnRlbXBsYXRlO1xuICAgICAgICAgICAgY2FzZSAzIC8qIFZpZXdDb250YWluZXJSZWYgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzRWxlbWVudERhdGEodmlldywgbm9kZURlZi5ub2RlSW5kZXgpLnZpZXdDb250YWluZXI7XG4gICAgICAgICAgICBjYXNlIDQgLyogUHJvdmlkZXIgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzUHJvdmlkZXJEYXRhKHZpZXcsIG5vZGVEZWYubm9kZUluZGV4KS5pbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcGFyYW0gez99IG5nQ29udGVudEluZGV4XG4gKiBAcGFyYW0gez99IGluZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBuZ0NvbnRlbnREZWYobmdDb250ZW50SW5kZXgsIGluZGV4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gd2lsbCBiZXQgc2V0IGJ5IHRoZSB2aWV3IGRlZmluaXRpb25cbiAgICAgICAgbm9kZUluZGV4OiAtMSxcbiAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICByZW5kZXJQYXJlbnQ6IG51bGwsXG4gICAgICAgIGJpbmRpbmdJbmRleDogLTEsXG4gICAgICAgIG91dHB1dEluZGV4OiAtMSxcbiAgICAgICAgLy8gcmVndWxhciB2YWx1ZXNcbiAgICAgICAgY2hlY2tJbmRleDogLTEsXG4gICAgICAgIGZsYWdzOiA4IC8qIFR5cGVOZ0NvbnRlbnQgKi8sXG4gICAgICAgIGNoaWxkRmxhZ3M6IDAsXG4gICAgICAgIGRpcmVjdENoaWxkRmxhZ3M6IDAsXG4gICAgICAgIGNoaWxkTWF0Y2hlZFF1ZXJpZXM6IDAsXG4gICAgICAgIG1hdGNoZWRRdWVyaWVzOiB7fSxcbiAgICAgICAgbWF0Y2hlZFF1ZXJ5SWRzOiAwLFxuICAgICAgICByZWZlcmVuY2VzOiB7fSwgbmdDb250ZW50SW5kZXg6IG5nQ29udGVudEluZGV4LFxuICAgICAgICBjaGlsZENvdW50OiAwLFxuICAgICAgICBiaW5kaW5nczogW10sXG4gICAgICAgIGJpbmRpbmdGbGFnczogMCxcbiAgICAgICAgb3V0cHV0czogW10sXG4gICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgIHByb3ZpZGVyOiBudWxsLFxuICAgICAgICB0ZXh0OiBudWxsLFxuICAgICAgICBxdWVyeTogbnVsbCxcbiAgICAgICAgbmdDb250ZW50OiB7IGluZGV4OiBpbmRleCB9XG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IHJlbmRlckhvc3RcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBhcHBlbmROZ0NvbnRlbnQodmlldywgcmVuZGVySG9zdCwgZGVmKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGFyZW50RWwgPSBnZXRQYXJlbnRSZW5kZXJFbGVtZW50KHZpZXcsIHJlbmRlckhvc3QsIGRlZik7XG4gICAgaWYgKCFwYXJlbnRFbCkge1xuICAgICAgICAvLyBOb3RoaW5nIHRvIGRvIGlmIHRoZXJlIGlzIG5vIHBhcmVudCBlbGVtZW50LlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIG5nQ29udGVudEluZGV4ID0gLyoqIEB0eXBlIHs/fSAqLyAoKGRlZi5uZ0NvbnRlbnQpKS5pbmRleDtcbiAgICB2aXNpdFByb2plY3RlZFJlbmRlck5vZGVzKHZpZXcsIG5nQ29udGVudEluZGV4LCAxIC8qIEFwcGVuZENoaWxkICovLCBwYXJlbnRFbCwgbnVsbCwgdW5kZWZpbmVkKTtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcGFyYW0gez99IGNoZWNrSW5kZXhcbiAqIEBwYXJhbSB7P30gYXJnQ291bnRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHB1cmVQaXBlRGVmKGNoZWNrSW5kZXgsIGFyZ0NvdW50KSB7XG4gICAgLy8gYXJnQ291bnQgKyAxIHRvIGluY2x1ZGUgdGhlIHBpcGUgYXMgZmlyc3QgYXJnXG4gICAgcmV0dXJuIF9wdXJlRXhwcmVzc2lvbkRlZigxMjggLyogVHlwZVB1cmVQaXBlICovLCBjaGVja0luZGV4LCBuZXcgQXJyYXkoYXJnQ291bnQgKyAxKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gY2hlY2tJbmRleFxuICogQHBhcmFtIHs/fSBhcmdDb3VudFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gcHVyZUFycmF5RGVmKGNoZWNrSW5kZXgsIGFyZ0NvdW50KSB7XG4gICAgcmV0dXJuIF9wdXJlRXhwcmVzc2lvbkRlZigzMiAvKiBUeXBlUHVyZUFycmF5ICovLCBjaGVja0luZGV4LCBuZXcgQXJyYXkoYXJnQ291bnQpKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBjaGVja0luZGV4XG4gKiBAcGFyYW0gez99IHByb3BUb0luZGV4XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwdXJlT2JqZWN0RGVmKGNoZWNrSW5kZXgsIHByb3BUb0luZGV4KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8ga2V5cyA9IE9iamVjdC5rZXlzKHByb3BUb0luZGV4KTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBuYktleXMgPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm9wZXJ0eU5hbWVzID0gbmV3IEFycmF5KG5iS2V5cyk7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IG5iS2V5czsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluZGV4ID0gcHJvcFRvSW5kZXhba2V5XTtcbiAgICAgICAgcHJvcGVydHlOYW1lc1tpbmRleF0gPSBrZXk7XG4gICAgfVxuICAgIHJldHVybiBfcHVyZUV4cHJlc3Npb25EZWYoNjQgLyogVHlwZVB1cmVPYmplY3QgKi8sIGNoZWNrSW5kZXgsIHByb3BlcnR5TmFtZXMpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGZsYWdzXG4gKiBAcGFyYW0gez99IGNoZWNrSW5kZXhcbiAqIEBwYXJhbSB7P30gcHJvcGVydHlOYW1lc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gX3B1cmVFeHByZXNzaW9uRGVmKGZsYWdzLCBjaGVja0luZGV4LCBwcm9wZXJ0eU5hbWVzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ3MgPSBuZXcgQXJyYXkocHJvcGVydHlOYW1lcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBwcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb3AgPSBwcm9wZXJ0eU5hbWVzW2ldO1xuICAgICAgICBiaW5kaW5nc1tpXSA9IHtcbiAgICAgICAgICAgIGZsYWdzOiA4IC8qIFR5cGVQcm9wZXJ0eSAqLyxcbiAgICAgICAgICAgIG5hbWU6IHByb3AsXG4gICAgICAgICAgICBuczogbnVsbCxcbiAgICAgICAgICAgIG5vbk1pbmlmaWVkTmFtZTogcHJvcCxcbiAgICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDogbnVsbCxcbiAgICAgICAgICAgIHN1ZmZpeDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyB3aWxsIGJldCBzZXQgYnkgdGhlIHZpZXcgZGVmaW5pdGlvblxuICAgICAgICBub2RlSW5kZXg6IC0xLFxuICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgIHJlbmRlclBhcmVudDogbnVsbCxcbiAgICAgICAgYmluZGluZ0luZGV4OiAtMSxcbiAgICAgICAgb3V0cHV0SW5kZXg6IC0xLFxuICAgICAgICAvLyByZWd1bGFyIHZhbHVlc1xuICAgICAgICBjaGVja0luZGV4OiBjaGVja0luZGV4LFxuICAgICAgICBmbGFnczogZmxhZ3MsXG4gICAgICAgIGNoaWxkRmxhZ3M6IDAsXG4gICAgICAgIGRpcmVjdENoaWxkRmxhZ3M6IDAsXG4gICAgICAgIGNoaWxkTWF0Y2hlZFF1ZXJpZXM6IDAsXG4gICAgICAgIG1hdGNoZWRRdWVyaWVzOiB7fSxcbiAgICAgICAgbWF0Y2hlZFF1ZXJ5SWRzOiAwLFxuICAgICAgICByZWZlcmVuY2VzOiB7fSxcbiAgICAgICAgbmdDb250ZW50SW5kZXg6IC0xLFxuICAgICAgICBjaGlsZENvdW50OiAwLCBiaW5kaW5nczogYmluZGluZ3MsXG4gICAgICAgIGJpbmRpbmdGbGFnczogY2FsY0JpbmRpbmdGbGFncyhiaW5kaW5ncyksXG4gICAgICAgIG91dHB1dHM6IFtdLFxuICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICBwcm92aWRlcjogbnVsbCxcbiAgICAgICAgdGV4dDogbnVsbCxcbiAgICAgICAgcXVlcnk6IG51bGwsXG4gICAgICAgIG5nQ29udGVudDogbnVsbFxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVB1cmVFeHByZXNzaW9uKHZpZXcsIGRlZikge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHBhcmFtIHs/fSB2MFxuICogQHBhcmFtIHs/fSB2MVxuICogQHBhcmFtIHs/fSB2MlxuICogQHBhcmFtIHs/fSB2M1xuICogQHBhcmFtIHs/fSB2NFxuICogQHBhcmFtIHs/fSB2NVxuICogQHBhcmFtIHs/fSB2NlxuICogQHBhcmFtIHs/fSB2N1xuICogQHBhcmFtIHs/fSB2OFxuICogQHBhcmFtIHs/fSB2OVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVQdXJlRXhwcmVzc2lvbklubGluZSh2aWV3LCBkZWYsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ3MgPSBkZWYuYmluZGluZ3M7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRMZW4gPSBiaW5kaW5ncy5sZW5ndGg7XG4gICAgaWYgKGJpbmRMZW4gPiAwICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDAsIHYwKSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiAxICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDEsIHYxKSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiAyICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDIsIHYyKSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiAzICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDMsIHYzKSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA0ICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDQsIHY0KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA1ICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDUsIHY1KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA2ICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDYsIHY2KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA3ICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDcsIHY3KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA4ICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDgsIHY4KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGJpbmRMZW4gPiA5ICYmIGNoZWNrQW5kVXBkYXRlQmluZGluZyh2aWV3LCBkZWYsIDksIHY5KSlcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGF0YSA9IGFzUHVyZUV4cHJlc3Npb25EYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChkZWYuZmxhZ3MgJiAyMDEzNDcwNjcgLyogVHlwZXMgKi8pIHtcbiAgICAgICAgICAgIGNhc2UgMzIgLyogVHlwZVB1cmVBcnJheSAqLzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5ldyBBcnJheShiaW5kaW5ncy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gMClcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbMF0gPSB2MDtcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDEpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWzFdID0gdjE7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRMZW4gPiAyKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVsyXSA9IHYyO1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gMylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbM10gPSB2MztcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDQpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWzRdID0gdjQ7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRMZW4gPiA1KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVs1XSA9IHY1O1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gNilcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbNl0gPSB2NjtcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDcpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWzddID0gdjc7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRMZW4gPiA4KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVs4XSA9IHY4O1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gOSlcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbOV0gPSB2OTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjQgLyogVHlwZVB1cmVPYmplY3QgKi86XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDApXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWy8qKiBAdHlwZSB7P30gKi8gKChiaW5kaW5nc1swXS5uYW1lKSldID0gdjA7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRMZW4gPiAxKVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVsvKiogQHR5cGUgez99ICovICgoYmluZGluZ3NbMV0ubmFtZSkpXSA9IHYxO1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gMilcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbLyoqIEB0eXBlIHs/fSAqLyAoKGJpbmRpbmdzWzJdLm5hbWUpKV0gPSB2MjtcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDMpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWy8qKiBAdHlwZSB7P30gKi8gKChiaW5kaW5nc1szXS5uYW1lKSldID0gdjM7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRMZW4gPiA0KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVsvKiogQHR5cGUgez99ICovICgoYmluZGluZ3NbNF0ubmFtZSkpXSA9IHY0O1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gNSlcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbLyoqIEB0eXBlIHs/fSAqLyAoKGJpbmRpbmdzWzVdLm5hbWUpKV0gPSB2NTtcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDYpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWy8qKiBAdHlwZSB7P30gKi8gKChiaW5kaW5nc1s2XS5uYW1lKSldID0gdjY7XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRMZW4gPiA3KVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVsvKiogQHR5cGUgez99ICovICgoYmluZGluZ3NbN10ubmFtZSkpXSA9IHY3O1xuICAgICAgICAgICAgICAgIGlmIChiaW5kTGVuID4gOClcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbLyoqIEB0eXBlIHs/fSAqLyAoKGJpbmRpbmdzWzhdLm5hbWUpKV0gPSB2ODtcbiAgICAgICAgICAgICAgICBpZiAoYmluZExlbiA+IDkpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWy8qKiBAdHlwZSB7P30gKi8gKChiaW5kaW5nc1s5XS5uYW1lKSldID0gdjk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyOCAvKiBUeXBlUHVyZVBpcGUgKi86XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcGlwZSA9IHYwO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYmluZExlbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYxLCB2Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwaXBlLnRyYW5zZm9ybSh2MSwgdjIsIHYzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYxLCB2MiwgdjMsIHY0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYxLCB2MiwgdjMsIHY0LCB2NSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwaXBlLnRyYW5zZm9ybSh2MSwgdjIsIHYzLCB2NCwgdjUsIHY2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtKHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGlwZS50cmFuc2Zvcm0odjEsIHYyLCB2MywgdjQsIHY1LCB2NiwgdjcsIHY4LCB2OSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHBhcmFtIHs/fSB2YWx1ZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlUHVyZUV4cHJlc3Npb25EeW5hbWljKHZpZXcsIGRlZiwgdmFsdWVzKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ3MgPSBkZWYuYmluZGluZ3M7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2hhbmdlZCA9IGZhbHNlO1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gTm90ZTogV2UgbmVlZCB0byBsb29wIG92ZXIgYWxsIHZhbHVlcywgc28gdGhhdFxuICAgICAgICAvLyB0aGUgb2xkIHZhbHVlcyBhcmUgdXBkYXRlcyBhcyB3ZWxsIVxuICAgICAgICBpZiAoY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgaSwgdmFsdWVzW2ldKSkge1xuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGF0YSA9IGFzUHVyZUV4cHJlc3Npb25EYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgc3dpdGNoIChkZWYuZmxhZ3MgJiAyMDEzNDcwNjcgLyogVHlwZXMgKi8pIHtcbiAgICAgICAgICAgIGNhc2UgMzIgLyogVHlwZVB1cmVBcnJheSAqLzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjQgLyogVHlwZVB1cmVPYmplY3QgKi86XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlWy8qKiBAdHlwZSB7P30gKi8gKChiaW5kaW5nc1tpXS5uYW1lKSldID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTI4IC8qIFR5cGVQdXJlUGlwZSAqLzpcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwaXBlID0gdmFsdWVzWzBdO1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmFtcyA9IHZhbHVlcy5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBpcGUudHJhbnNmb3JtLmFwcGx5KHBpcGUsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAcGFyYW0gez99IGNoZWNrSW5kZXhcbiAqIEBwYXJhbSB7P30gbmdDb250ZW50SW5kZXhcbiAqIEBwYXJhbSB7P30gc3RhdGljVGV4dFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdGV4dERlZihjaGVja0luZGV4LCBuZ0NvbnRlbnRJbmRleCwgc3RhdGljVGV4dCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRpbmdzID0gbmV3IEFycmF5KHN0YXRpY1RleHQubGVuZ3RoIC0gMSk7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMTsgaSA8IHN0YXRpY1RleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYmluZGluZ3NbaSAtIDFdID0ge1xuICAgICAgICAgICAgZmxhZ3M6IDggLyogVHlwZVByb3BlcnR5ICovLFxuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIG5zOiBudWxsLFxuICAgICAgICAgICAgbm9uTWluaWZpZWROYW1lOiBudWxsLFxuICAgICAgICAgICAgc2VjdXJpdHlDb250ZXh0OiBudWxsLFxuICAgICAgICAgICAgc3VmZml4OiBzdGF0aWNUZXh0W2ldLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyB3aWxsIGJldCBzZXQgYnkgdGhlIHZpZXcgZGVmaW5pdGlvblxuICAgICAgICBub2RlSW5kZXg6IC0xLFxuICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgIHJlbmRlclBhcmVudDogbnVsbCxcbiAgICAgICAgYmluZGluZ0luZGV4OiAtMSxcbiAgICAgICAgb3V0cHV0SW5kZXg6IC0xLFxuICAgICAgICAvLyByZWd1bGFyIHZhbHVlc1xuICAgICAgICBjaGVja0luZGV4OiBjaGVja0luZGV4LFxuICAgICAgICBmbGFnczogMiAvKiBUeXBlVGV4dCAqLyxcbiAgICAgICAgY2hpbGRGbGFnczogMCxcbiAgICAgICAgZGlyZWN0Q2hpbGRGbGFnczogMCxcbiAgICAgICAgY2hpbGRNYXRjaGVkUXVlcmllczogMCxcbiAgICAgICAgbWF0Y2hlZFF1ZXJpZXM6IHt9LFxuICAgICAgICBtYXRjaGVkUXVlcnlJZHM6IDAsXG4gICAgICAgIHJlZmVyZW5jZXM6IHt9LCBuZ0NvbnRlbnRJbmRleDogbmdDb250ZW50SW5kZXgsXG4gICAgICAgIGNoaWxkQ291bnQ6IDAsIGJpbmRpbmdzOiBiaW5kaW5ncyxcbiAgICAgICAgYmluZGluZ0ZsYWdzOiA4IC8qIFR5cGVQcm9wZXJ0eSAqLyxcbiAgICAgICAgb3V0cHV0czogW10sXG4gICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgIHByb3ZpZGVyOiBudWxsLFxuICAgICAgICB0ZXh0OiB7IHByZWZpeDogc3RhdGljVGV4dFswXSB9LFxuICAgICAgICBxdWVyeTogbnVsbCxcbiAgICAgICAgbmdDb250ZW50OiBudWxsLFxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSByZW5kZXJIb3N0XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGV4dCh2aWV3LCByZW5kZXJIb3N0LCBkZWYpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZW5kZXJOb2RlJCQxO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlcmVyID0gdmlldy5yZW5kZXJlcjtcbiAgICByZW5kZXJOb2RlJCQxID0gcmVuZGVyZXIuY3JlYXRlVGV4dCgvKiogQHR5cGUgez99ICovICgoZGVmLnRleHQpKS5wcmVmaXgpO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudEVsID0gZ2V0UGFyZW50UmVuZGVyRWxlbWVudCh2aWV3LCByZW5kZXJIb3N0LCBkZWYpO1xuICAgIGlmIChwYXJlbnRFbCkge1xuICAgICAgICByZW5kZXJlci5hcHBlbmRDaGlsZChwYXJlbnRFbCwgcmVuZGVyTm9kZSQkMSk7XG4gICAgfVxuICAgIHJldHVybiB7IHJlbmRlclRleHQ6IHJlbmRlck5vZGUkJDEgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHBhcmFtIHs/fSB2MFxuICogQHBhcmFtIHs/fSB2MVxuICogQHBhcmFtIHs/fSB2MlxuICogQHBhcmFtIHs/fSB2M1xuICogQHBhcmFtIHs/fSB2NFxuICogQHBhcmFtIHs/fSB2NVxuICogQHBhcmFtIHs/fSB2NlxuICogQHBhcmFtIHs/fSB2N1xuICogQHBhcmFtIHs/fSB2OFxuICogQHBhcmFtIHs/fSB2OVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVUZXh0SW5saW5lKHZpZXcsIGRlZiwgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCwgdjkpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZ3MgPSBkZWYuYmluZGluZ3M7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZExlbiA9IGJpbmRpbmdzLmxlbmd0aDtcbiAgICBpZiAoYmluZExlbiA+IDAgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgMCwgdjApKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDEgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgMSwgdjEpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDIgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgMiwgdjIpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDMgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgMywgdjMpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDQgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgNCwgdjQpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDUgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgNSwgdjUpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDYgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgNiwgdjYpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDcgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgNywgdjcpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDggJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgOCwgdjgpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoYmluZExlbiA+IDkgJiYgY2hlY2tBbmRVcGRhdGVCaW5kaW5nKHZpZXcsIGRlZiwgOSwgdjkpKVxuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9IC8qKiBAdHlwZSB7P30gKi8gKChkZWYudGV4dCkpLnByZWZpeDtcbiAgICAgICAgaWYgKGJpbmRMZW4gPiAwKVxuICAgICAgICAgICAgdmFsdWUgKz0gX2FkZEludGVycG9sYXRpb25QYXJ0KHYwLCBiaW5kaW5nc1swXSk7XG4gICAgICAgIGlmIChiaW5kTGVuID4gMSlcbiAgICAgICAgICAgIHZhbHVlICs9IF9hZGRJbnRlcnBvbGF0aW9uUGFydCh2MSwgYmluZGluZ3NbMV0pO1xuICAgICAgICBpZiAoYmluZExlbiA+IDIpXG4gICAgICAgICAgICB2YWx1ZSArPSBfYWRkSW50ZXJwb2xhdGlvblBhcnQodjIsIGJpbmRpbmdzWzJdKTtcbiAgICAgICAgaWYgKGJpbmRMZW4gPiAzKVxuICAgICAgICAgICAgdmFsdWUgKz0gX2FkZEludGVycG9sYXRpb25QYXJ0KHYzLCBiaW5kaW5nc1szXSk7XG4gICAgICAgIGlmIChiaW5kTGVuID4gNClcbiAgICAgICAgICAgIHZhbHVlICs9IF9hZGRJbnRlcnBvbGF0aW9uUGFydCh2NCwgYmluZGluZ3NbNF0pO1xuICAgICAgICBpZiAoYmluZExlbiA+IDUpXG4gICAgICAgICAgICB2YWx1ZSArPSBfYWRkSW50ZXJwb2xhdGlvblBhcnQodjUsIGJpbmRpbmdzWzVdKTtcbiAgICAgICAgaWYgKGJpbmRMZW4gPiA2KVxuICAgICAgICAgICAgdmFsdWUgKz0gX2FkZEludGVycG9sYXRpb25QYXJ0KHY2LCBiaW5kaW5nc1s2XSk7XG4gICAgICAgIGlmIChiaW5kTGVuID4gNylcbiAgICAgICAgICAgIHZhbHVlICs9IF9hZGRJbnRlcnBvbGF0aW9uUGFydCh2NywgYmluZGluZ3NbN10pO1xuICAgICAgICBpZiAoYmluZExlbiA+IDgpXG4gICAgICAgICAgICB2YWx1ZSArPSBfYWRkSW50ZXJwb2xhdGlvblBhcnQodjgsIGJpbmRpbmdzWzhdKTtcbiAgICAgICAgaWYgKGJpbmRMZW4gPiA5KVxuICAgICAgICAgICAgdmFsdWUgKz0gX2FkZEludGVycG9sYXRpb25QYXJ0KHY5LCBiaW5kaW5nc1s5XSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlck5vZGUkJDEgPSBhc1RleHREYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpLnJlbmRlclRleHQ7XG4gICAgICAgIHZpZXcucmVuZGVyZXIuc2V0VmFsdWUocmVuZGVyTm9kZSQkMSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGRlZlxuICogQHBhcmFtIHs/fSB2YWx1ZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlVGV4dER5bmFtaWModmlldywgZGVmLCB2YWx1ZXMpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBiaW5kaW5ncyA9IGRlZi5iaW5kaW5ncztcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjaGFuZ2VkID0gZmFsc2U7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBOb3RlOiBXZSBuZWVkIHRvIGxvb3Agb3ZlciBhbGwgdmFsdWVzLCBzbyB0aGF0XG4gICAgICAgIC8vIHRoZSBvbGQgdmFsdWVzIGFyZSB1cGRhdGVzIGFzIHdlbGwhXG4gICAgICAgIGlmIChjaGVja0FuZFVwZGF0ZUJpbmRpbmcodmlldywgZGVmLCBpLCB2YWx1ZXNbaV0pKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZSA9ICcnO1xuICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgX2FkZEludGVycG9sYXRpb25QYXJ0KHZhbHVlc1tpXSwgYmluZGluZ3NbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gLyoqIEB0eXBlIHs/fSAqLyAoKGRlZi50ZXh0KSkucHJlZml4ICsgdmFsdWU7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlck5vZGUkJDEgPSBhc1RleHREYXRhKHZpZXcsIGRlZi5ub2RlSW5kZXgpLnJlbmRlclRleHQ7XG4gICAgICAgIHZpZXcucmVuZGVyZXIuc2V0VmFsdWUocmVuZGVyTm9kZSQkMSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2YWx1ZVxuICogQHBhcmFtIHs/fSBiaW5kaW5nXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBfYWRkSW50ZXJwb2xhdGlvblBhcnQodmFsdWUsIGJpbmRpbmcpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2YWx1ZVN0ciA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogJyc7XG4gICAgcmV0dXJuIHZhbHVlU3RyICsgYmluZGluZy5zdWZmaXg7XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQHBhcmFtIHs/fSBmbGFnc1xuICogQHBhcmFtIHs/fSBub2Rlc1xuICogQHBhcmFtIHs/PX0gdXBkYXRlRGlyZWN0aXZlc1xuICogQHBhcmFtIHs/PX0gdXBkYXRlUmVuZGVyZXJcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHZpZXdEZWYoZmxhZ3MsIG5vZGVzLCB1cGRhdGVEaXJlY3RpdmVzLCB1cGRhdGVSZW5kZXJlcikge1xuICAgIC8vIGNsb25lIG5vZGVzIGFuZCBzZXQgYXV0byBjYWxjdWxhdGVkIHZhbHVlc1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdCaW5kaW5nQ291bnQgPSAwO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdEaXNwb3NhYmxlQ291bnQgPSAwO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdOb2RlRmxhZ3MgPSAwO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXdSb290Tm9kZUZsYWdzID0gMDtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2aWV3TWF0Y2hlZFF1ZXJpZXMgPSAwO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRQYXJlbnQgPSBudWxsO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRSZW5kZXJQYXJlbnQgPSBudWxsO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJlbnRFbGVtZW50SGFzUHVibGljUHJvdmlkZXJzID0gZmFsc2U7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY3VycmVudEVsZW1lbnRIYXNQcml2YXRlUHJvdmlkZXJzID0gZmFsc2U7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGFzdFJlbmRlclJvb3ROb2RlID0gbnVsbDtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBub2RlLm5vZGVJbmRleCA9IGk7XG4gICAgICAgIG5vZGUucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgbm9kZS5iaW5kaW5nSW5kZXggPSB2aWV3QmluZGluZ0NvdW50O1xuICAgICAgICBub2RlLm91dHB1dEluZGV4ID0gdmlld0Rpc3Bvc2FibGVDb3VudDtcbiAgICAgICAgbm9kZS5yZW5kZXJQYXJlbnQgPSBjdXJyZW50UmVuZGVyUGFyZW50O1xuICAgICAgICB2aWV3Tm9kZUZsYWdzIHw9IG5vZGUuZmxhZ3M7XG4gICAgICAgIHZpZXdNYXRjaGVkUXVlcmllcyB8PSBub2RlLm1hdGNoZWRRdWVyeUlkcztcbiAgICAgICAgaWYgKG5vZGUuZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxEZWYgPSBub2RlLmVsZW1lbnQ7XG4gICAgICAgICAgICBlbERlZi5wdWJsaWNQcm92aWRlcnMgPVxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPyAvKiogQHR5cGUgez99ICovICgoY3VycmVudFBhcmVudC5lbGVtZW50KSkucHVibGljUHJvdmlkZXJzIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIGVsRGVmLmFsbFByb3ZpZGVycyA9IGVsRGVmLnB1YmxpY1Byb3ZpZGVycztcbiAgICAgICAgICAgIC8vIE5vdGU6IFdlIGFzc3VtZSB0aGF0IGFsbCBwcm92aWRlcnMgb2YgYW4gZWxlbWVudCBhcmUgYmVmb3JlIGFueSBjaGlsZCBlbGVtZW50IVxuICAgICAgICAgICAgY3VycmVudEVsZW1lbnRIYXNQdWJsaWNQcm92aWRlcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50SGFzUHJpdmF0ZVByb3ZpZGVycyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG5vZGUuZWxlbWVudC50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIHZpZXdNYXRjaGVkUXVlcmllcyB8PSBub2RlLmVsZW1lbnQudGVtcGxhdGUubm9kZU1hdGNoZWRRdWVyaWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlTm9kZShjdXJyZW50UGFyZW50LCBub2RlLCBub2Rlcy5sZW5ndGgpO1xuICAgICAgICB2aWV3QmluZGluZ0NvdW50ICs9IG5vZGUuYmluZGluZ3MubGVuZ3RoO1xuICAgICAgICB2aWV3RGlzcG9zYWJsZUNvdW50ICs9IG5vZGUub3V0cHV0cy5sZW5ndGg7XG4gICAgICAgIGlmICghY3VycmVudFJlbmRlclBhcmVudCAmJiAobm9kZS5mbGFncyAmIDMgLyogQ2F0UmVuZGVyTm9kZSAqLykpIHtcbiAgICAgICAgICAgIGxhc3RSZW5kZXJSb290Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuZmxhZ3MgJiAyMDIyNCAvKiBDYXRQcm92aWRlciAqLykge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50RWxlbWVudEhhc1B1YmxpY1Byb3ZpZGVycykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50SGFzUHVibGljUHJvdmlkZXJzID0gdHJ1ZTsgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgICAgICgoLyoqIEB0eXBlIHs/fSAqLyAoKGN1cnJlbnRQYXJlbnQpKS5lbGVtZW50KSkucHVibGljUHJvdmlkZXJzID0gT2JqZWN0LmNyZWF0ZSgvKiogQHR5cGUgez99ICovICgoLyoqIEB0eXBlIHs/fSAqLyAoKGN1cnJlbnRQYXJlbnQpKS5lbGVtZW50KSkucHVibGljUHJvdmlkZXJzKTsgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgICAgICgoLyoqIEB0eXBlIHs/fSAqLyAoKGN1cnJlbnRQYXJlbnQpKS5lbGVtZW50KSkuYWxsUHJvdmlkZXJzID0gLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKChjdXJyZW50UGFyZW50KSkuZWxlbWVudCkpLnB1YmxpY1Byb3ZpZGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlzUHJpdmF0ZVNlcnZpY2UgPSAobm9kZS5mbGFncyAmIDgxOTIgLyogUHJpdmF0ZVByb3ZpZGVyICovKSAhPT0gMDtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGlzQ29tcG9uZW50ID0gKG5vZGUuZmxhZ3MgJiAzMjc2OCAvKiBDb21wb25lbnQgKi8pICE9PSAwO1xuICAgICAgICAgICAgaWYgKCFpc1ByaXZhdGVTZXJ2aWNlIHx8IGlzQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgoY3VycmVudFBhcmVudCkpLmVsZW1lbnQpKS5wdWJsaWNQcm92aWRlcnMpKVt0b2tlbktleSgvKiogQHR5cGUgez99ICovICgobm9kZS5wcm92aWRlcikpLnRva2VuKV0gPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50RWxlbWVudEhhc1ByaXZhdGVQcm92aWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnRIYXNQcml2YXRlUHJvdmlkZXJzID0gdHJ1ZTsgLyoqIEB0eXBlIHs/fSAqL1xuICAgICAgICAgICAgICAgICAgICAoKC8qKiBAdHlwZSB7P30gKi8gKChjdXJyZW50UGFyZW50KSkuZWxlbWVudCkpLmFsbFByb3ZpZGVycyA9IE9iamVjdC5jcmVhdGUoLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKChjdXJyZW50UGFyZW50KSkuZWxlbWVudCkpLnB1YmxpY1Byb3ZpZGVycyk7XG4gICAgICAgICAgICAgICAgfSAvKiogQHR5cGUgez99ICovXG4gICAgICAgICAgICAgICAgKCgvKiogQHR5cGUgez99ICovICgoLyoqIEB0eXBlIHs/fSAqLyAoKGN1cnJlbnRQYXJlbnQpKS5lbGVtZW50KSkuYWxsUHJvdmlkZXJzKSlbdG9rZW5LZXkoLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGUucHJvdmlkZXIpKS50b2tlbildID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0NvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgoY3VycmVudFBhcmVudCkpLmVsZW1lbnQpKS5jb21wb25lbnRQcm92aWRlciA9IG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRGbGFncyB8PSBub2RlLmZsYWdzO1xuICAgICAgICAgICAgY3VycmVudFBhcmVudC5kaXJlY3RDaGlsZEZsYWdzIHw9IG5vZGUuZmxhZ3M7XG4gICAgICAgICAgICBjdXJyZW50UGFyZW50LmNoaWxkTWF0Y2hlZFF1ZXJpZXMgfD0gbm9kZS5tYXRjaGVkUXVlcnlJZHM7XG4gICAgICAgICAgICBpZiAobm9kZS5lbGVtZW50ICYmIG5vZGUuZWxlbWVudC50ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRNYXRjaGVkUXVlcmllcyB8PSBub2RlLmVsZW1lbnQudGVtcGxhdGUubm9kZU1hdGNoZWRRdWVyaWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmlld1Jvb3ROb2RlRmxhZ3MgfD0gbm9kZS5mbGFncztcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5jaGlsZENvdW50ID4gMCkge1xuICAgICAgICAgICAgY3VycmVudFBhcmVudCA9IG5vZGU7XG4gICAgICAgICAgICBpZiAoIWlzTmdDb250YWluZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmVuZGVyUGFyZW50ID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIGN1cnJlbnQgbm9kZSBoYXMgbm8gY2hpbGRyZW4sIGNoZWNrIGlmIGl0IGlzIHRoZSBsYXN0IGNoaWxkcmVuIG9mIGl0cyBwYXJlbnQuXG4gICAgICAgICAgICAvLyBXaGVuIGl0IGlzLCBwcm9wYWdhdGUgdGhlIGZsYWdzIHVwLlxuICAgICAgICAgICAgLy8gVGhlIGxvb3AgaXMgcmVxdWlyZWQgYmVjYXVzZSBhbiBlbGVtZW50IGNvdWxkIGJlIHRoZSBsYXN0IHRyYW5zaXRpdmUgY2hpbGRyZW4gb2Ygc2V2ZXJhbFxuICAgICAgICAgICAgLy8gZWxlbWVudHMuIFdlIGxvb3AgdG8gZWl0aGVyIHRoZSByb290IG9yIHRoZSBoaWdoZXN0IG9wZW5lZCBlbGVtZW50ICg9IHdpdGggcmVtYWluaW5nXG4gICAgICAgICAgICAvLyBjaGlsZHJlbilcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50UGFyZW50ICYmIGkgPT09IGN1cnJlbnRQYXJlbnQubm9kZUluZGV4ICsgY3VycmVudFBhcmVudC5jaGlsZENvdW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbmV3UGFyZW50ID0gY3VycmVudFBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1BhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdQYXJlbnQuY2hpbGRGbGFncyB8PSBjdXJyZW50UGFyZW50LmNoaWxkRmxhZ3M7XG4gICAgICAgICAgICAgICAgICAgIG5ld1BhcmVudC5jaGlsZE1hdGNoZWRRdWVyaWVzIHw9IGN1cnJlbnRQYXJlbnQuY2hpbGRNYXRjaGVkUXVlcmllcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudFBhcmVudCA9IG5ld1BhcmVudDtcbiAgICAgICAgICAgICAgICAvLyBXZSBhbHNvIG5lZWQgdG8gdXBkYXRlIHRoZSByZW5kZXIgcGFyZW50ICYgYWNjb3VudCBmb3IgbmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnQgJiYgaXNOZ0NvbnRhaW5lcihjdXJyZW50UGFyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVuZGVyUGFyZW50ID0gY3VycmVudFBhcmVudC5yZW5kZXJQYXJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVuZGVyUGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAodmlldywgbm9kZUluZGV4LCBldmVudE5hbWUsIGV2ZW50KSB7IHJldHVybiAoKC8qKiBAdHlwZSB7P30gKi8gKChub2Rlc1tub2RlSW5kZXhdLmVsZW1lbnQpKS5oYW5kbGVFdmVudCkpKHZpZXcsIGV2ZW50TmFtZSwgZXZlbnQpOyB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIFdpbGwgYmUgZmlsbGVkIGxhdGVyLi4uXG4gICAgICAgIGZhY3Rvcnk6IG51bGwsXG4gICAgICAgIG5vZGVGbGFnczogdmlld05vZGVGbGFncyxcbiAgICAgICAgcm9vdE5vZGVGbGFnczogdmlld1Jvb3ROb2RlRmxhZ3MsXG4gICAgICAgIG5vZGVNYXRjaGVkUXVlcmllczogdmlld01hdGNoZWRRdWVyaWVzLCBmbGFnczogZmxhZ3MsXG4gICAgICAgIG5vZGVzOiBub2RlcyxcbiAgICAgICAgdXBkYXRlRGlyZWN0aXZlczogdXBkYXRlRGlyZWN0aXZlcyB8fCBOT09QLFxuICAgICAgICB1cGRhdGVSZW5kZXJlcjogdXBkYXRlUmVuZGVyZXIgfHwgTk9PUCwgaGFuZGxlRXZlbnQ6IGhhbmRsZUV2ZW50LFxuICAgICAgICBiaW5kaW5nQ291bnQ6IHZpZXdCaW5kaW5nQ291bnQsXG4gICAgICAgIG91dHB1dENvdW50OiB2aWV3RGlzcG9zYWJsZUNvdW50LCBsYXN0UmVuZGVyUm9vdE5vZGU6IGxhc3RSZW5kZXJSb290Tm9kZVxuICAgIH07XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbm9kZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaXNOZ0NvbnRhaW5lcihub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLmZsYWdzICYgMSAvKiBUeXBlRWxlbWVudCAqLykgIT09IDAgJiYgLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGUuZWxlbWVudCkpLm5hbWUgPT09IG51bGw7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcGFyZW50XG4gKiBAcGFyYW0gez99IG5vZGVcbiAqIEBwYXJhbSB7P30gbm9kZUNvdW50XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZU5vZGUocGFyZW50LCBub2RlLCBub2RlQ291bnQpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB0ZW1wbGF0ZSA9IG5vZGUuZWxlbWVudCAmJiBub2RlLmVsZW1lbnQudGVtcGxhdGU7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgIGlmICghdGVtcGxhdGUubGFzdFJlbmRlclJvb3ROb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIFN0YXRlOiBFbWJlZGRlZCB0ZW1wbGF0ZXMgd2l0aG91dCBub2RlcyBhcmUgbm90IGFsbG93ZWQhXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW1wbGF0ZS5sYXN0UmVuZGVyUm9vdE5vZGUgJiZcbiAgICAgICAgICAgIHRlbXBsYXRlLmxhc3RSZW5kZXJSb290Tm9kZS5mbGFncyAmIDE2Nzc3MjE2IC8qIEVtYmVkZGVkVmlld3MgKi8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgU3RhdGU6IExhc3Qgcm9vdCBub2RlIG9mIGEgdGVtcGxhdGUgY2FuJ3QgaGF2ZSBlbWJlZGRlZCB2aWV3cywgYXQgaW5kZXggXCIgKyBub2RlLm5vZGVJbmRleCArIFwiIVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5mbGFncyAmIDIwMjI0IC8qIENhdFByb3ZpZGVyICovKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHBhcmVudEZsYWdzID0gcGFyZW50ID8gcGFyZW50LmZsYWdzIDogMDtcbiAgICAgICAgaWYgKChwYXJlbnRGbGFncyAmIDEgLyogVHlwZUVsZW1lbnQgKi8pID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIFN0YXRlOiBTdGF0aWNQcm92aWRlci9EaXJlY3RpdmUgbm9kZXMgbmVlZCB0byBiZSBjaGlsZHJlbiBvZiBlbGVtZW50cyBvciBhbmNob3JzLCBhdCBpbmRleCBcIiArIG5vZGUubm9kZUluZGV4ICsgXCIhXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLnF1ZXJ5KSB7XG4gICAgICAgIGlmIChub2RlLmZsYWdzICYgNjcxMDg4NjQgLyogVHlwZUNvbnRlbnRRdWVyeSAqLyAmJlxuICAgICAgICAgICAgKCFwYXJlbnQgfHwgKHBhcmVudC5mbGFncyAmIDE2Mzg0IC8qIFR5cGVEaXJlY3RpdmUgKi8pID09PSAwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBTdGF0ZTogQ29udGVudCBRdWVyeSBub2RlcyBuZWVkIHRvIGJlIGNoaWxkcmVuIG9mIGRpcmVjdGl2ZXMsIGF0IGluZGV4IFwiICsgbm9kZS5ub2RlSW5kZXggKyBcIiFcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuZmxhZ3MgJiAxMzQyMTc3MjggLyogVHlwZVZpZXdRdWVyeSAqLyAmJiBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgU3RhdGU6IFZpZXcgUXVlcnkgbm9kZXMgaGF2ZSB0byBiZSB0b3AgbGV2ZWwgbm9kZXMsIGF0IGluZGV4IFwiICsgbm9kZS5ub2RlSW5kZXggKyBcIiFcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRDb3VudCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwYXJlbnRFbmQgPSBwYXJlbnQgPyBwYXJlbnQubm9kZUluZGV4ICsgcGFyZW50LmNoaWxkQ291bnQgOiBub2RlQ291bnQgLSAxO1xuICAgICAgICBpZiAobm9kZS5ub2RlSW5kZXggPD0gcGFyZW50RW5kICYmIG5vZGUubm9kZUluZGV4ICsgbm9kZS5jaGlsZENvdW50ID4gcGFyZW50RW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIFN0YXRlOiBjaGlsZENvdW50IG9mIG5vZGUgbGVhZHMgb3V0c2lkZSBvZiBwYXJlbnQsIGF0IGluZGV4IFwiICsgbm9kZS5ub2RlSW5kZXggKyBcIiFcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcGFyZW50XG4gKiBAcGFyYW0gez99IGFuY2hvckRlZlxuICogQHBhcmFtIHs/fSB2aWV3RGVmXG4gKiBAcGFyYW0gez89fSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbWJlZGRlZFZpZXcocGFyZW50LCBhbmNob3JEZWYkJDEsIHZpZXdEZWYsIGNvbnRleHQpIHtcbiAgICAvLyBlbWJlZGRlZCB2aWV3cyBhcmUgc2VlbiBhcyBzaWJsaW5ncyB0byB0aGUgYW5jaG9yLCBzbyB3ZSBuZWVkXG4gICAgLy8gdG8gZ2V0IHRoZSBwYXJlbnQgb2YgdGhlIGFuY2hvciBhbmQgdXNlIGl0IGFzIHBhcmVudEluZGV4LlxuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXcgPSBjcmVhdGVWaWV3KHBhcmVudC5yb290LCBwYXJlbnQucmVuZGVyZXIsIHBhcmVudCwgYW5jaG9yRGVmJCQxLCB2aWV3RGVmKTtcbiAgICBpbml0Vmlldyh2aWV3LCBwYXJlbnQuY29tcG9uZW50LCBjb250ZXh0KTtcbiAgICBjcmVhdGVWaWV3Tm9kZXModmlldyk7XG4gICAgcmV0dXJuIHZpZXc7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcm9vdFxuICogQHBhcmFtIHs/fSBkZWZcbiAqIEBwYXJhbSB7Pz19IGNvbnRleHRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RWaWV3KHJvb3QsIGRlZiwgY29udGV4dCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHZpZXcgPSBjcmVhdGVWaWV3KHJvb3QsIHJvb3QucmVuZGVyZXIsIG51bGwsIG51bGwsIGRlZik7XG4gICAgaW5pdFZpZXcodmlldywgY29udGV4dCwgY29udGV4dCk7XG4gICAgY3JlYXRlVmlld05vZGVzKHZpZXcpO1xuICAgIHJldHVybiB2aWV3O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHBhcmVudFZpZXdcbiAqIEBwYXJhbSB7P30gbm9kZURlZlxuICogQHBhcmFtIHs/fSB2aWV3RGVmXG4gKiBAcGFyYW0gez99IGhvc3RFbGVtZW50XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRWaWV3KHBhcmVudFZpZXcsIG5vZGVEZWYsIHZpZXdEZWYsIGhvc3RFbGVtZW50KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyZXJUeXBlID0gLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYuZWxlbWVudCkpLmNvbXBvbmVudFJlbmRlcmVyVHlwZTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wUmVuZGVyZXI7XG4gICAgaWYgKCFyZW5kZXJlclR5cGUpIHtcbiAgICAgICAgY29tcFJlbmRlcmVyID0gcGFyZW50Vmlldy5yb290LnJlbmRlcmVyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29tcFJlbmRlcmVyID0gcGFyZW50Vmlldy5yb290LnJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihob3N0RWxlbWVudCwgcmVuZGVyZXJUeXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVZpZXcocGFyZW50Vmlldy5yb290LCBjb21wUmVuZGVyZXIsIHBhcmVudFZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLmVsZW1lbnQpKS5jb21wb25lbnRQcm92aWRlciwgdmlld0RlZik7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcm9vdFxuICogQHBhcmFtIHs/fSByZW5kZXJlclxuICogQHBhcmFtIHs/fSBwYXJlbnRcbiAqIEBwYXJhbSB7P30gcGFyZW50Tm9kZURlZlxuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZpZXcocm9vdCwgcmVuZGVyZXIsIHBhcmVudCwgcGFyZW50Tm9kZURlZiwgZGVmKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZXMgPSBuZXcgQXJyYXkoZGVmLm5vZGVzLmxlbmd0aCk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGlzcG9zYWJsZXMgPSBkZWYub3V0cHV0Q291bnQgPyBuZXcgQXJyYXkoZGVmLm91dHB1dENvdW50KSA6IG51bGw7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmlldyA9IHtcbiAgICAgICAgZGVmOiBkZWYsXG4gICAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgICB2aWV3Q29udGFpbmVyUGFyZW50OiBudWxsLCBwYXJlbnROb2RlRGVmOiBwYXJlbnROb2RlRGVmLFxuICAgICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgICBjb21wb25lbnQ6IG51bGwsIG5vZGVzOiBub2RlcyxcbiAgICAgICAgc3RhdGU6IDEzIC8qIENhdEluaXQgKi8sIHJvb3Q6IHJvb3QsIHJlbmRlcmVyOiByZW5kZXJlcixcbiAgICAgICAgb2xkVmFsdWVzOiBuZXcgQXJyYXkoZGVmLmJpbmRpbmdDb3VudCksIGRpc3Bvc2FibGVzOiBkaXNwb3NhYmxlcyxcbiAgICAgICAgaW5pdEluZGV4OiAtMVxuICAgIH07XG4gICAgcmV0dXJuIHZpZXc7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7P30gY29udGV4dFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gaW5pdFZpZXcodmlldywgY29tcG9uZW50LCBjb250ZXh0KSB7XG4gICAgdmlldy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgdmlldy5jb250ZXh0ID0gY29udGV4dDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVWaWV3Tm9kZXModmlldykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlckhvc3Q7XG4gICAgaWYgKGlzQ29tcG9uZW50Vmlldyh2aWV3KSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBob3N0RGVmID0gdmlldy5wYXJlbnROb2RlRGVmO1xuICAgICAgICByZW5kZXJIb3N0ID0gYXNFbGVtZW50RGF0YSgvKiogQHR5cGUgez99ICovICgodmlldy5wYXJlbnQpKSwgLyoqIEB0eXBlIHs/fSAqLyAoKC8qKiBAdHlwZSB7P30gKi8gKChob3N0RGVmKSkucGFyZW50KSkubm9kZUluZGV4KS5yZW5kZXJFbGVtZW50O1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWYgPSB2aWV3LmRlZjtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlcyA9IHZpZXcubm9kZXM7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGRlZi5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gZGVmLm5vZGVzW2ldO1xuICAgICAgICBTZXJ2aWNlcy5zZXRDdXJyZW50Tm9kZSh2aWV3LCBpKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZURhdGEgPSB2b2lkIDA7XG4gICAgICAgIHN3aXRjaCAobm9kZURlZi5mbGFncyAmIDIwMTM0NzA2NyAvKiBUeXBlcyAqLykge1xuICAgICAgICAgICAgY2FzZSAxIC8qIFR5cGVFbGVtZW50ICovOlxuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsID0gLyoqIEB0eXBlIHs/fSAqLyAoY3JlYXRlRWxlbWVudCh2aWV3LCByZW5kZXJIb3N0LCBub2RlRGVmKSk7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcG9uZW50VmlldyA9IC8qKiBAdHlwZSB7P30gKi8gKCh1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZURlZi5mbGFncyAmIDMzNTU0NDMyIC8qIENvbXBvbmVudFZpZXcgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcFZpZXdEZWYgPSByZXNvbHZlRGVmaW5pdGlvbigvKiogQHR5cGUgez99ICovICgoLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYuZWxlbWVudCkpLmNvbXBvbmVudFZpZXcpKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFZpZXcgPSBTZXJ2aWNlcy5jcmVhdGVDb21wb25lbnRWaWV3KHZpZXcsIG5vZGVEZWYsIGNvbXBWaWV3RGVmLCBlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpc3RlblRvRWxlbWVudE91dHB1dHModmlldywgY29tcG9uZW50Vmlldywgbm9kZURlZiwgZWwpO1xuICAgICAgICAgICAgICAgIG5vZGVEYXRhID0gLyoqIEB0eXBlIHs/fSAqLyAoe1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJFbGVtZW50OiBlbCxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50VmlldzogY29tcG9uZW50VmlldyxcbiAgICAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLmVsZW1lbnQpKS50ZW1wbGF0ZSA/IGNyZWF0ZVRlbXBsYXRlRGF0YSh2aWV3LCBub2RlRGVmKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgMTY3NzcyMTYgLyogRW1iZWRkZWRWaWV3cyAqLykge1xuICAgICAgICAgICAgICAgICAgICBub2RlRGF0YS52aWV3Q29udGFpbmVyID0gY3JlYXRlVmlld0NvbnRhaW5lckRhdGEodmlldywgbm9kZURlZiwgbm9kZURhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMiAvKiBUeXBlVGV4dCAqLzpcbiAgICAgICAgICAgICAgICBub2RlRGF0YSA9IC8qKiBAdHlwZSB7P30gKi8gKGNyZWF0ZVRleHQodmlldywgcmVuZGVySG9zdCwgbm9kZURlZikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1MTIgLyogVHlwZUNsYXNzUHJvdmlkZXIgKi86XG4gICAgICAgICAgICBjYXNlIDEwMjQgLyogVHlwZUZhY3RvcnlQcm92aWRlciAqLzpcbiAgICAgICAgICAgIGNhc2UgMjA0OCAvKiBUeXBlVXNlRXhpc3RpbmdQcm92aWRlciAqLzpcbiAgICAgICAgICAgIGNhc2UgMjU2IC8qIFR5cGVWYWx1ZVByb3ZpZGVyICovOiB7XG4gICAgICAgICAgICAgICAgbm9kZURhdGEgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGVEYXRhICYmICEobm9kZURlZi5mbGFncyAmIDQwOTYgLyogTGF6eVByb3ZpZGVyICovKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBpbnN0YW5jZSA9IGNyZWF0ZVByb3ZpZGVySW5zdGFuY2Uodmlldywgbm9kZURlZik7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVEYXRhID0gLyoqIEB0eXBlIHs/fSAqLyAoeyBpbnN0YW5jZTogaW5zdGFuY2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAxNiAvKiBUeXBlUGlwZSAqLzoge1xuICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGluc3RhbmNlID0gY3JlYXRlUGlwZUluc3RhbmNlKHZpZXcsIG5vZGVEZWYpO1xuICAgICAgICAgICAgICAgIG5vZGVEYXRhID0gLyoqIEB0eXBlIHs/fSAqLyAoeyBpbnN0YW5jZTogaW5zdGFuY2UgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDE2Mzg0IC8qIFR5cGVEaXJlY3RpdmUgKi86IHtcbiAgICAgICAgICAgICAgICBub2RlRGF0YSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghbm9kZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaW5zdGFuY2UgPSBjcmVhdGVEaXJlY3RpdmVJbnN0YW5jZSh2aWV3LCBub2RlRGVmKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZURhdGEgPSAvKiogQHR5cGUgez99ICovICh7IGluc3RhbmNlOiBpbnN0YW5jZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAzMjc2OCAvKiBDb21wb25lbnQgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tcFZpZXcgPSBhc0VsZW1lbnREYXRhKHZpZXcsIC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLnBhcmVudCkpLm5vZGVJbmRleCkuY29tcG9uZW50VmlldztcbiAgICAgICAgICAgICAgICAgICAgaW5pdFZpZXcoY29tcFZpZXcsIG5vZGVEYXRhLmluc3RhbmNlLCBub2RlRGF0YS5pbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAzMiAvKiBUeXBlUHVyZUFycmF5ICovOlxuICAgICAgICAgICAgY2FzZSA2NCAvKiBUeXBlUHVyZU9iamVjdCAqLzpcbiAgICAgICAgICAgIGNhc2UgMTI4IC8qIFR5cGVQdXJlUGlwZSAqLzpcbiAgICAgICAgICAgICAgICBub2RlRGF0YSA9IC8qKiBAdHlwZSB7P30gKi8gKGNyZWF0ZVB1cmVFeHByZXNzaW9uKHZpZXcsIG5vZGVEZWYpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjcxMDg4NjQgLyogVHlwZUNvbnRlbnRRdWVyeSAqLzpcbiAgICAgICAgICAgIGNhc2UgMTM0MjE3NzI4IC8qIFR5cGVWaWV3UXVlcnkgKi86XG4gICAgICAgICAgICAgICAgbm9kZURhdGEgPSAvKiogQHR5cGUgez99ICovIChjcmVhdGVRdWVyeSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOCAvKiBUeXBlTmdDb250ZW50ICovOlxuICAgICAgICAgICAgICAgIGFwcGVuZE5nQ29udGVudCh2aWV3LCByZW5kZXJIb3N0LCBub2RlRGVmKTtcbiAgICAgICAgICAgICAgICAvLyBubyBydW50aW1lIGRhdGEgbmVlZGVkIGZvciBOZ0NvbnRlbnQuLi5cbiAgICAgICAgICAgICAgICBub2RlRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBub2Rlc1tpXSA9IG5vZGVEYXRhO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgdGhlIFZpZXdEYXRhLm5vZGVzIG9mIGNvbXBvbmVudCB2aWV3cyBhZnRlciB3ZSBjcmVhdGVkIGV2ZXJ5dGhpbmcgZWxzZSxcbiAgICAvLyBzbyB0aGF0IGUuZy4gbmctY29udGVudCB3b3Jrc1xuICAgIGV4ZWNDb21wb25lbnRWaWV3c0FjdGlvbih2aWV3LCBWaWV3QWN0aW9uLkNyZWF0ZVZpZXdOb2Rlcyk7XG4gICAgLy8gZmlsbCBzdGF0aWMgY29udGVudCBhbmQgdmlldyBxdWVyaWVzXG4gICAgZXhlY1F1ZXJpZXNBY3Rpb24odmlldywgNjcxMDg4NjQgLyogVHlwZUNvbnRlbnRRdWVyeSAqLyB8IDEzNDIxNzcyOCAvKiBUeXBlVmlld1F1ZXJ5ICovLCAyNjg0MzU0NTYgLyogU3RhdGljUXVlcnkgKi8sIDAgLyogQ2hlY2tBbmRVcGRhdGUgKi8pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrTm9DaGFuZ2VzVmlldyh2aWV3KSB7XG4gICAgbWFya1Byb2plY3RlZFZpZXdzRm9yQ2hlY2sodmlldyk7XG4gICAgU2VydmljZXMudXBkYXRlRGlyZWN0aXZlcyh2aWV3LCAxIC8qIENoZWNrTm9DaGFuZ2VzICovKTtcbiAgICBleGVjRW1iZWRkZWRWaWV3c0FjdGlvbih2aWV3LCBWaWV3QWN0aW9uLkNoZWNrTm9DaGFuZ2VzKTtcbiAgICBTZXJ2aWNlcy51cGRhdGVSZW5kZXJlcih2aWV3LCAxIC8qIENoZWNrTm9DaGFuZ2VzICovKTtcbiAgICBleGVjQ29tcG9uZW50Vmlld3NBY3Rpb24odmlldywgVmlld0FjdGlvbi5DaGVja05vQ2hhbmdlcyk7XG4gICAgLy8gTm90ZTogV2UgZG9uJ3QgY2hlY2sgcXVlcmllcyBmb3IgY2hhbmdlcyBhcyB3ZSBkaWRuJ3QgZG8gdGhpcyBpbiB2Mi54LlxuICAgIC8vIFRPRE8odGJvc2NoKTogaW52ZXN0aWdhdGUgaWYgd2UgY2FuIGVuYWJsZSB0aGUgY2hlY2sgYWdhaW4gaW4gdjUueCB3aXRoIGEgbmljZXIgZXJyb3IgbWVzc2FnZS5cbiAgICB2aWV3LnN0YXRlICY9IH4oNjQgLyogQ2hlY2tQcm9qZWN0ZWRWaWV3cyAqLyB8IDMyIC8qIENoZWNrUHJvamVjdGVkVmlldyAqLyk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVWaWV3KHZpZXcpIHtcbiAgICBpZiAodmlldy5zdGF0ZSAmIDEgLyogQmVmb3JlRmlyc3RDaGVjayAqLykge1xuICAgICAgICB2aWV3LnN0YXRlICY9IH4xIC8qIEJlZm9yZUZpcnN0Q2hlY2sgKi87XG4gICAgICAgIHZpZXcuc3RhdGUgfD0gMiAvKiBGaXJzdENoZWNrICovO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlldy5zdGF0ZSAmPSB+MiAvKiBGaXJzdENoZWNrICovO1xuICAgIH1cbiAgICBzaGlmdEluaXRTdGF0ZSh2aWV3LCAwIC8qIEluaXRTdGF0ZV9CZWZvcmVJbml0ICovLCAyNTYgLyogSW5pdFN0YXRlX0NhbGxpbmdPbkluaXQgKi8pO1xuICAgIG1hcmtQcm9qZWN0ZWRWaWV3c0ZvckNoZWNrKHZpZXcpO1xuICAgIFNlcnZpY2VzLnVwZGF0ZURpcmVjdGl2ZXModmlldywgMCAvKiBDaGVja0FuZFVwZGF0ZSAqLyk7XG4gICAgZXhlY0VtYmVkZGVkVmlld3NBY3Rpb24odmlldywgVmlld0FjdGlvbi5DaGVja0FuZFVwZGF0ZSk7XG4gICAgZXhlY1F1ZXJpZXNBY3Rpb24odmlldywgNjcxMDg4NjQgLyogVHlwZUNvbnRlbnRRdWVyeSAqLywgNTM2ODcwOTEyIC8qIER5bmFtaWNRdWVyeSAqLywgMCAvKiBDaGVja0FuZFVwZGF0ZSAqLyk7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY2FsbEluaXQgPSBzaGlmdEluaXRTdGF0ZSh2aWV3LCAyNTYgLyogSW5pdFN0YXRlX0NhbGxpbmdPbkluaXQgKi8sIDUxMiAvKiBJbml0U3RhdGVfQ2FsbGluZ0FmdGVyQ29udGVudEluaXQgKi8pO1xuICAgIGNhbGxMaWZlY3ljbGVIb29rc0NoaWxkcmVuRmlyc3QodmlldywgMjA5NzE1MiAvKiBBZnRlckNvbnRlbnRDaGVja2VkICovIHwgKGNhbGxJbml0ID8gMTA0ODU3NiAvKiBBZnRlckNvbnRlbnRJbml0ICovIDogMCkpO1xuICAgIFNlcnZpY2VzLnVwZGF0ZVJlbmRlcmVyKHZpZXcsIDAgLyogQ2hlY2tBbmRVcGRhdGUgKi8pO1xuICAgIGV4ZWNDb21wb25lbnRWaWV3c0FjdGlvbih2aWV3LCBWaWV3QWN0aW9uLkNoZWNrQW5kVXBkYXRlKTtcbiAgICBleGVjUXVlcmllc0FjdGlvbih2aWV3LCAxMzQyMTc3MjggLyogVHlwZVZpZXdRdWVyeSAqLywgNTM2ODcwOTEyIC8qIER5bmFtaWNRdWVyeSAqLywgMCAvKiBDaGVja0FuZFVwZGF0ZSAqLyk7XG4gICAgY2FsbEluaXQgPSBzaGlmdEluaXRTdGF0ZSh2aWV3LCA1MTIgLyogSW5pdFN0YXRlX0NhbGxpbmdBZnRlckNvbnRlbnRJbml0ICovLCA3NjggLyogSW5pdFN0YXRlX0NhbGxpbmdBZnRlclZpZXdJbml0ICovKTtcbiAgICBjYWxsTGlmZWN5Y2xlSG9va3NDaGlsZHJlbkZpcnN0KHZpZXcsIDgzODg2MDggLyogQWZ0ZXJWaWV3Q2hlY2tlZCAqLyB8IChjYWxsSW5pdCA/IDQxOTQzMDQgLyogQWZ0ZXJWaWV3SW5pdCAqLyA6IDApKTtcbiAgICBpZiAodmlldy5kZWYuZmxhZ3MgJiAyIC8qIE9uUHVzaCAqLykge1xuICAgICAgICB2aWV3LnN0YXRlICY9IH44IC8qIENoZWNrc0VuYWJsZWQgKi87XG4gICAgfVxuICAgIHZpZXcuc3RhdGUgJj0gfig2NCAvKiBDaGVja1Byb2plY3RlZFZpZXdzICovIHwgMzIgLyogQ2hlY2tQcm9qZWN0ZWRWaWV3ICovKTtcbiAgICBzaGlmdEluaXRTdGF0ZSh2aWV3LCA3NjggLyogSW5pdFN0YXRlX0NhbGxpbmdBZnRlclZpZXdJbml0ICovLCAxMDI0IC8qIEluaXRTdGF0ZV9BZnRlckluaXQgKi8pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gbm9kZURlZlxuICogQHBhcmFtIHs/fSBhcmdTdHlsZVxuICogQHBhcmFtIHs/PX0gdjBcbiAqIEBwYXJhbSB7Pz19IHYxXG4gKiBAcGFyYW0gez89fSB2MlxuICogQHBhcmFtIHs/PX0gdjNcbiAqIEBwYXJhbSB7Pz19IHY0XG4gKiBAcGFyYW0gez89fSB2NVxuICogQHBhcmFtIHs/PX0gdjZcbiAqIEBwYXJhbSB7Pz19IHY3XG4gKiBAcGFyYW0gez89fSB2OFxuICogQHBhcmFtIHs/PX0gdjlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNoZWNrQW5kVXBkYXRlTm9kZSh2aWV3LCBub2RlRGVmLCBhcmdTdHlsZSwgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCwgdjkpIHtcbiAgICBpZiAoYXJnU3R5bGUgPT09IDAgLyogSW5saW5lICovKSB7XG4gICAgICAgIHJldHVybiBjaGVja0FuZFVwZGF0ZU5vZGVJbmxpbmUodmlldywgbm9kZURlZiwgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCwgdjkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQW5kVXBkYXRlTm9kZUR5bmFtaWModmlldywgbm9kZURlZiwgdjApO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBtYXJrUHJvamVjdGVkVmlld3NGb3JDaGVjayh2aWV3KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVmID0gdmlldy5kZWY7XG4gICAgaWYgKCEoZGVmLm5vZGVGbGFncyAmIDQgLyogUHJvamVjdGVkVGVtcGxhdGUgKi8pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGRlZi5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gZGVmLm5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZURlZi5mbGFncyAmIDQgLyogUHJvamVjdGVkVGVtcGxhdGUgKi8pIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHByb2plY3RlZFZpZXdzID0gYXNFbGVtZW50RGF0YSh2aWV3LCBpKS50ZW1wbGF0ZS5fcHJvamVjdGVkVmlld3M7XG4gICAgICAgICAgICBpZiAocHJvamVjdGVkVmlld3MpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGlfMSA9IDA7IGlfMSA8IHByb2plY3RlZFZpZXdzLmxlbmd0aDsgaV8xKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcHJvamVjdGVkVmlldyA9IHByb2plY3RlZFZpZXdzW2lfMV07XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RlZFZpZXcuc3RhdGUgfD0gMzIgLyogQ2hlY2tQcm9qZWN0ZWRWaWV3ICovO1xuICAgICAgICAgICAgICAgICAgICBtYXJrUGFyZW50Vmlld3NGb3JDaGVja1Byb2plY3RlZFZpZXdzKHByb2plY3RlZFZpZXcsIHZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobm9kZURlZi5jaGlsZEZsYWdzICYgNCAvKiBQcm9qZWN0ZWRUZW1wbGF0ZSAqLykgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGEgcGFyZW50IHdpdGggbGVhZnNcbiAgICAgICAgICAgIC8vIG5vIGNoaWxkIGlzIGEgY29tcG9uZW50LFxuICAgICAgICAgICAgLy8gdGhlbiBza2lwIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBub2RlRGVmXG4gKiBAcGFyYW0gez89fSB2MFxuICogQHBhcmFtIHs/PX0gdjFcbiAqIEBwYXJhbSB7Pz19IHYyXG4gKiBAcGFyYW0gez89fSB2M1xuICogQHBhcmFtIHs/PX0gdjRcbiAqIEBwYXJhbSB7Pz19IHY1XG4gKiBAcGFyYW0gez89fSB2NlxuICogQHBhcmFtIHs/PX0gdjdcbiAqIEBwYXJhbSB7Pz19IHY4XG4gKiBAcGFyYW0gez89fSB2OVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tBbmRVcGRhdGVOb2RlSW5saW5lKHZpZXcsIG5vZGVEZWYsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KSB7XG4gICAgc3dpdGNoIChub2RlRGVmLmZsYWdzICYgMjAxMzQ3MDY3IC8qIFR5cGVzICovKSB7XG4gICAgICAgIGNhc2UgMSAvKiBUeXBlRWxlbWVudCAqLzpcbiAgICAgICAgICAgIHJldHVybiBjaGVja0FuZFVwZGF0ZUVsZW1lbnRJbmxpbmUodmlldywgbm9kZURlZiwgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCwgdjkpO1xuICAgICAgICBjYXNlIDIgLyogVHlwZVRleHQgKi86XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tBbmRVcGRhdGVUZXh0SW5saW5lKHZpZXcsIG5vZGVEZWYsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KTtcbiAgICAgICAgY2FzZSAxNjM4NCAvKiBUeXBlRGlyZWN0aXZlICovOlxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrQW5kVXBkYXRlRGlyZWN0aXZlSW5saW5lKHZpZXcsIG5vZGVEZWYsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KTtcbiAgICAgICAgY2FzZSAzMiAvKiBUeXBlUHVyZUFycmF5ICovOlxuICAgICAgICBjYXNlIDY0IC8qIFR5cGVQdXJlT2JqZWN0ICovOlxuICAgICAgICBjYXNlIDEyOCAvKiBUeXBlUHVyZVBpcGUgKi86XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tBbmRVcGRhdGVQdXJlRXhwcmVzc2lvbklubGluZSh2aWV3LCBub2RlRGVmLCB2MCwgdjEsIHYyLCB2MywgdjQsIHY1LCB2NiwgdjcsIHY4LCB2OSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyAndW5yZWFjaGFibGUnO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gdmFsdWVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja0FuZFVwZGF0ZU5vZGVEeW5hbWljKHZpZXcsIG5vZGVEZWYsIHZhbHVlcykge1xuICAgIHN3aXRjaCAobm9kZURlZi5mbGFncyAmIDIwMTM0NzA2NyAvKiBUeXBlcyAqLykge1xuICAgICAgICBjYXNlIDEgLyogVHlwZUVsZW1lbnQgKi86XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tBbmRVcGRhdGVFbGVtZW50RHluYW1pYyh2aWV3LCBub2RlRGVmLCB2YWx1ZXMpO1xuICAgICAgICBjYXNlIDIgLyogVHlwZVRleHQgKi86XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tBbmRVcGRhdGVUZXh0RHluYW1pYyh2aWV3LCBub2RlRGVmLCB2YWx1ZXMpO1xuICAgICAgICBjYXNlIDE2Mzg0IC8qIFR5cGVEaXJlY3RpdmUgKi86XG4gICAgICAgICAgICByZXR1cm4gY2hlY2tBbmRVcGRhdGVEaXJlY3RpdmVEeW5hbWljKHZpZXcsIG5vZGVEZWYsIHZhbHVlcyk7XG4gICAgICAgIGNhc2UgMzIgLyogVHlwZVB1cmVBcnJheSAqLzpcbiAgICAgICAgY2FzZSA2NCAvKiBUeXBlUHVyZU9iamVjdCAqLzpcbiAgICAgICAgY2FzZSAxMjggLyogVHlwZVB1cmVQaXBlICovOlxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrQW5kVXBkYXRlUHVyZUV4cHJlc3Npb25EeW5hbWljKHZpZXcsIG5vZGVEZWYsIHZhbHVlcyk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyAndW5yZWFjaGFibGUnO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gYXJnU3R5bGVcbiAqIEBwYXJhbSB7Pz19IHYwXG4gKiBAcGFyYW0gez89fSB2MVxuICogQHBhcmFtIHs/PX0gdjJcbiAqIEBwYXJhbSB7Pz19IHYzXG4gKiBAcGFyYW0gez89fSB2NFxuICogQHBhcmFtIHs/PX0gdjVcbiAqIEBwYXJhbSB7Pz19IHY2XG4gKiBAcGFyYW0gez89fSB2N1xuICogQHBhcmFtIHs/PX0gdjhcbiAqIEBwYXJhbSB7Pz19IHY5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja05vQ2hhbmdlc05vZGUodmlldywgbm9kZURlZiwgYXJnU3R5bGUsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KSB7XG4gICAgaWYgKGFyZ1N0eWxlID09PSAwIC8qIElubGluZSAqLykge1xuICAgICAgICBjaGVja05vQ2hhbmdlc05vZGVJbmxpbmUodmlldywgbm9kZURlZiwgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCwgdjkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hlY2tOb0NoYW5nZXNOb2RlRHluYW1pYyh2aWV3LCBub2RlRGVmLCB2MCk7XG4gICAgfVxuICAgIC8vIFJldHVybmluZyBmYWxzZSBpcyBvayBoZXJlIGFzIHdlIHdvdWxkIGhhdmUgdGhyb3duIGluIGNhc2Ugb2YgYSBjaGFuZ2UuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gbm9kZURlZlxuICogQHBhcmFtIHs/fSB2MFxuICogQHBhcmFtIHs/fSB2MVxuICogQHBhcmFtIHs/fSB2MlxuICogQHBhcmFtIHs/fSB2M1xuICogQHBhcmFtIHs/fSB2NFxuICogQHBhcmFtIHs/fSB2NVxuICogQHBhcmFtIHs/fSB2NlxuICogQHBhcmFtIHs/fSB2N1xuICogQHBhcmFtIHs/fSB2OFxuICogQHBhcmFtIHs/fSB2OVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2hlY2tOb0NoYW5nZXNOb2RlSW5saW5lKHZpZXcsIG5vZGVEZWYsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZExlbiA9IG5vZGVEZWYuYmluZGluZ3MubGVuZ3RoO1xuICAgIGlmIChiaW5kTGVuID4gMClcbiAgICAgICAgY2hlY2tCaW5kaW5nTm9DaGFuZ2VzKHZpZXcsIG5vZGVEZWYsIDAsIHYwKTtcbiAgICBpZiAoYmluZExlbiA+IDEpXG4gICAgICAgIGNoZWNrQmluZGluZ05vQ2hhbmdlcyh2aWV3LCBub2RlRGVmLCAxLCB2MSk7XG4gICAgaWYgKGJpbmRMZW4gPiAyKVxuICAgICAgICBjaGVja0JpbmRpbmdOb0NoYW5nZXModmlldywgbm9kZURlZiwgMiwgdjIpO1xuICAgIGlmIChiaW5kTGVuID4gMylcbiAgICAgICAgY2hlY2tCaW5kaW5nTm9DaGFuZ2VzKHZpZXcsIG5vZGVEZWYsIDMsIHYzKTtcbiAgICBpZiAoYmluZExlbiA+IDQpXG4gICAgICAgIGNoZWNrQmluZGluZ05vQ2hhbmdlcyh2aWV3LCBub2RlRGVmLCA0LCB2NCk7XG4gICAgaWYgKGJpbmRMZW4gPiA1KVxuICAgICAgICBjaGVja0JpbmRpbmdOb0NoYW5nZXModmlldywgbm9kZURlZiwgNSwgdjUpO1xuICAgIGlmIChiaW5kTGVuID4gNilcbiAgICAgICAgY2hlY2tCaW5kaW5nTm9DaGFuZ2VzKHZpZXcsIG5vZGVEZWYsIDYsIHY2KTtcbiAgICBpZiAoYmluZExlbiA+IDcpXG4gICAgICAgIGNoZWNrQmluZGluZ05vQ2hhbmdlcyh2aWV3LCBub2RlRGVmLCA3LCB2Nyk7XG4gICAgaWYgKGJpbmRMZW4gPiA4KVxuICAgICAgICBjaGVja0JpbmRpbmdOb0NoYW5nZXModmlldywgbm9kZURlZiwgOCwgdjgpO1xuICAgIGlmIChiaW5kTGVuID4gOSlcbiAgICAgICAgY2hlY2tCaW5kaW5nTm9DaGFuZ2VzKHZpZXcsIG5vZGVEZWYsIDksIHY5KTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gdmFsdWVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja05vQ2hhbmdlc05vZGVEeW5hbWljKHZpZXcsIG5vZGVEZWYsIHZhbHVlcykge1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hlY2tCaW5kaW5nTm9DaGFuZ2VzKHZpZXcsIG5vZGVEZWYsIGksIHZhbHVlc1tpXSk7XG4gICAgfVxufVxuLyoqXG4gKiBXb3JrYXJvdW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3RzaWNrbGUvaXNzdWVzLzQ5N1xuICogQHN1cHByZXNzIHttaXNwbGFjZWRUeXBlQW5ub3RhdGlvbn1cbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBub2RlRGVmXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjaGVja05vQ2hhbmdlc1F1ZXJ5KHZpZXcsIG5vZGVEZWYpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBxdWVyeUxpc3QgPSBhc1F1ZXJ5TGlzdCh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCk7XG4gICAgaWYgKHF1ZXJ5TGlzdC5kaXJ0eSkge1xuICAgICAgICB0aHJvdyBleHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEVycm9yKFNlcnZpY2VzLmNyZWF0ZURlYnVnQ29udGV4dCh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCksIFwiUXVlcnkgXCIgKyAoLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYucXVlcnkpKSkuaWQgKyBcIiBub3QgZGlydHlcIiwgXCJRdWVyeSBcIiArICgvKiogQHR5cGUgez99ICovICgobm9kZURlZi5xdWVyeSkpKS5pZCArIFwiIGRpcnR5XCIsICh2aWV3LnN0YXRlICYgMSAvKiBCZWZvcmVGaXJzdENoZWNrICovKSAhPT0gMCk7XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3lWaWV3KHZpZXcpIHtcbiAgICBpZiAodmlldy5zdGF0ZSAmIDEyOCAvKiBEZXN0cm95ZWQgKi8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBleGVjRW1iZWRkZWRWaWV3c0FjdGlvbih2aWV3LCBWaWV3QWN0aW9uLkRlc3Ryb3kpO1xuICAgIGV4ZWNDb21wb25lbnRWaWV3c0FjdGlvbih2aWV3LCBWaWV3QWN0aW9uLkRlc3Ryb3kpO1xuICAgIGNhbGxMaWZlY3ljbGVIb29rc0NoaWxkcmVuRmlyc3QodmlldywgMTMxMDcyIC8qIE9uRGVzdHJveSAqLyk7XG4gICAgaWYgKHZpZXcuZGlzcG9zYWJsZXMpIHtcbiAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IHZpZXcuZGlzcG9zYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZpZXcuZGlzcG9zYWJsZXNbaV0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXRhY2hQcm9qZWN0ZWRWaWV3KHZpZXcpO1xuICAgIGlmICh2aWV3LnJlbmRlcmVyLmRlc3Ryb3lOb2RlKSB7XG4gICAgICAgIGRlc3Ryb3lWaWV3Tm9kZXModmlldyk7XG4gICAgfVxuICAgIGlmIChpc0NvbXBvbmVudFZpZXcodmlldykpIHtcbiAgICAgICAgdmlldy5yZW5kZXJlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIHZpZXcuc3RhdGUgfD0gMTI4IC8qIERlc3Ryb3llZCAqLztcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZXN0cm95Vmlld05vZGVzKHZpZXcpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsZW4gPSB2aWV3LmRlZi5ub2Rlcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlZiA9IHZpZXcuZGVmLm5vZGVzW2ldO1xuICAgICAgICBpZiAoZGVmLmZsYWdzICYgMSAvKiBUeXBlRWxlbWVudCAqLykge1xuICAgICAgICAgICAgLyoqIEB0eXBlIHs/fSAqLyAoKHZpZXcucmVuZGVyZXIuZGVzdHJveU5vZGUpKShhc0VsZW1lbnREYXRhKHZpZXcsIGkpLnJlbmRlckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlZi5mbGFncyAmIDIgLyogVHlwZVRleHQgKi8pIHtcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3LnJlbmRlcmVyLmRlc3Ryb3lOb2RlKSkoYXNUZXh0RGF0YSh2aWV3LCBpKS5yZW5kZXJUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWYuZmxhZ3MgJiA2NzEwODg2NCAvKiBUeXBlQ29udGVudFF1ZXJ5ICovIHx8IGRlZi5mbGFncyAmIDEzNDIxNzcyOCAvKiBUeXBlVmlld1F1ZXJ5ICovKSB7XG4gICAgICAgICAgICBhc1F1ZXJ5TGlzdCh2aWV3LCBpKS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKiogQGVudW0ge251bWJlcn0gKi9cbnZhciBWaWV3QWN0aW9uID0ge1xuICAgIENyZWF0ZVZpZXdOb2RlczogMCxcbiAgICBDaGVja05vQ2hhbmdlczogMSxcbiAgICBDaGVja05vQ2hhbmdlc1Byb2plY3RlZFZpZXdzOiAyLFxuICAgIENoZWNrQW5kVXBkYXRlOiAzLFxuICAgIENoZWNrQW5kVXBkYXRlUHJvamVjdGVkVmlld3M6IDQsXG4gICAgRGVzdHJveTogNSxcbn07XG5WaWV3QWN0aW9uW1ZpZXdBY3Rpb24uQ3JlYXRlVmlld05vZGVzXSA9IFwiQ3JlYXRlVmlld05vZGVzXCI7XG5WaWV3QWN0aW9uW1ZpZXdBY3Rpb24uQ2hlY2tOb0NoYW5nZXNdID0gXCJDaGVja05vQ2hhbmdlc1wiO1xuVmlld0FjdGlvbltWaWV3QWN0aW9uLkNoZWNrTm9DaGFuZ2VzUHJvamVjdGVkVmlld3NdID0gXCJDaGVja05vQ2hhbmdlc1Byb2plY3RlZFZpZXdzXCI7XG5WaWV3QWN0aW9uW1ZpZXdBY3Rpb24uQ2hlY2tBbmRVcGRhdGVdID0gXCJDaGVja0FuZFVwZGF0ZVwiO1xuVmlld0FjdGlvbltWaWV3QWN0aW9uLkNoZWNrQW5kVXBkYXRlUHJvamVjdGVkVmlld3NdID0gXCJDaGVja0FuZFVwZGF0ZVByb2plY3RlZFZpZXdzXCI7XG5WaWV3QWN0aW9uW1ZpZXdBY3Rpb24uRGVzdHJveV0gPSBcIkRlc3Ryb3lcIjtcbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGFjdGlvblxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZXhlY0NvbXBvbmVudFZpZXdzQWN0aW9uKHZpZXcsIGFjdGlvbikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlZiA9IHZpZXcuZGVmO1xuICAgIGlmICghKGRlZi5ub2RlRmxhZ3MgJiAzMzU1NDQzMiAvKiBDb21wb25lbnRWaWV3ICovKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBkZWYubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZURlZiA9IGRlZi5ub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAzMzU1NDQzMiAvKiBDb21wb25lbnRWaWV3ICovKSB7XG4gICAgICAgICAgICAvLyBhIGxlYWZcbiAgICAgICAgICAgIGNhbGxWaWV3QWN0aW9uKGFzRWxlbWVudERhdGEodmlldywgaSkuY29tcG9uZW50VmlldywgYWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgobm9kZURlZi5jaGlsZEZsYWdzICYgMzM1NTQ0MzIgLyogQ29tcG9uZW50VmlldyAqLykgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGEgcGFyZW50IHdpdGggbGVhZnNcbiAgICAgICAgICAgIC8vIG5vIGNoaWxkIGlzIGEgY29tcG9uZW50LFxuICAgICAgICAgICAgLy8gdGhlbiBza2lwIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBhY3Rpb25cbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGV4ZWNFbWJlZGRlZFZpZXdzQWN0aW9uKHZpZXcsIGFjdGlvbikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlZiA9IHZpZXcuZGVmO1xuICAgIGlmICghKGRlZi5ub2RlRmxhZ3MgJiAxNjc3NzIxNiAvKiBFbWJlZGRlZFZpZXdzICovKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBkZWYubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZURlZiA9IGRlZi5ub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAxNjc3NzIxNiAvKiBFbWJlZGRlZFZpZXdzICovKSB7XG4gICAgICAgICAgICAvLyBhIGxlYWZcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVtYmVkZGVkVmlld3MgPSAvKiogQHR5cGUgez99ICovICgoYXNFbGVtZW50RGF0YSh2aWV3LCBpKS52aWV3Q29udGFpbmVyKSkuX2VtYmVkZGVkVmlld3M7XG4gICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGsgPSAwOyBrIDwgZW1iZWRkZWRWaWV3cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIGNhbGxWaWV3QWN0aW9uKGVtYmVkZGVkVmlld3Nba10sIGFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKG5vZGVEZWYuY2hpbGRGbGFncyAmIDE2Nzc3MjE2IC8qIEVtYmVkZGVkVmlld3MgKi8pID09PSAwKSB7XG4gICAgICAgICAgICAvLyBhIHBhcmVudCB3aXRoIGxlYWZzXG4gICAgICAgICAgICAvLyBubyBjaGlsZCBpcyBhIGNvbXBvbmVudCxcbiAgICAgICAgICAgIC8vIHRoZW4gc2tpcCB0aGUgY2hpbGRyZW5cbiAgICAgICAgICAgIGkgKz0gbm9kZURlZi5jaGlsZENvdW50O1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gYWN0aW9uXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjYWxsVmlld0FjdGlvbih2aWV3LCBhY3Rpb24pIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyB2aWV3U3RhdGUgPSB2aWV3LnN0YXRlO1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgVmlld0FjdGlvbi5DaGVja05vQ2hhbmdlczpcbiAgICAgICAgICAgIGlmICgodmlld1N0YXRlICYgMTI4IC8qIERlc3Ryb3llZCAqLykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoKHZpZXdTdGF0ZSAmIDEyIC8qIENhdERldGVjdENoYW5nZXMgKi8pID09PSAxMiAvKiBDYXREZXRlY3RDaGFuZ2VzICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrTm9DaGFuZ2VzVmlldyh2aWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmlld1N0YXRlICYgNjQgLyogQ2hlY2tQcm9qZWN0ZWRWaWV3cyAqLykge1xuICAgICAgICAgICAgICAgICAgICBleGVjUHJvamVjdGVkVmlld3NBY3Rpb24odmlldywgVmlld0FjdGlvbi5DaGVja05vQ2hhbmdlc1Byb2plY3RlZFZpZXdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBWaWV3QWN0aW9uLkNoZWNrTm9DaGFuZ2VzUHJvamVjdGVkVmlld3M6XG4gICAgICAgICAgICBpZiAoKHZpZXdTdGF0ZSAmIDEyOCAvKiBEZXN0cm95ZWQgKi8pID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXdTdGF0ZSAmIDMyIC8qIENoZWNrUHJvamVjdGVkVmlldyAqLykge1xuICAgICAgICAgICAgICAgICAgICBjaGVja05vQ2hhbmdlc1ZpZXcodmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZpZXdTdGF0ZSAmIDY0IC8qIENoZWNrUHJvamVjdGVkVmlld3MgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY1Byb2plY3RlZFZpZXdzQWN0aW9uKHZpZXcsIGFjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVmlld0FjdGlvbi5DaGVja0FuZFVwZGF0ZTpcbiAgICAgICAgICAgIGlmICgodmlld1N0YXRlICYgMTI4IC8qIERlc3Ryb3llZCAqLykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoKHZpZXdTdGF0ZSAmIDEyIC8qIENhdERldGVjdENoYW5nZXMgKi8pID09PSAxMiAvKiBDYXREZXRlY3RDaGFuZ2VzICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQW5kVXBkYXRlVmlldyh2aWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmlld1N0YXRlICYgNjQgLyogQ2hlY2tQcm9qZWN0ZWRWaWV3cyAqLykge1xuICAgICAgICAgICAgICAgICAgICBleGVjUHJvamVjdGVkVmlld3NBY3Rpb24odmlldywgVmlld0FjdGlvbi5DaGVja0FuZFVwZGF0ZVByb2plY3RlZFZpZXdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBWaWV3QWN0aW9uLkNoZWNrQW5kVXBkYXRlUHJvamVjdGVkVmlld3M6XG4gICAgICAgICAgICBpZiAoKHZpZXdTdGF0ZSAmIDEyOCAvKiBEZXN0cm95ZWQgKi8pID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXdTdGF0ZSAmIDMyIC8qIENoZWNrUHJvamVjdGVkVmlldyAqLykge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0FuZFVwZGF0ZVZpZXcodmlldyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZpZXdTdGF0ZSAmIDY0IC8qIENoZWNrUHJvamVjdGVkVmlld3MgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY1Byb2plY3RlZFZpZXdzQWN0aW9uKHZpZXcsIGFjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVmlld0FjdGlvbi5EZXN0cm95OlxuICAgICAgICAgICAgLy8gTm90ZTogZGVzdHJveVZpZXcgcmVjdXJzZXMgb3ZlciBhbGwgdmlld3MsXG4gICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIHNwZWNpYWwgY2FzZSBwcm9qZWN0ZWQgdmlld3MgaGVyZS5cbiAgICAgICAgICAgIGRlc3Ryb3lWaWV3KHZpZXcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVmlld0FjdGlvbi5DcmVhdGVWaWV3Tm9kZXM6XG4gICAgICAgICAgICBjcmVhdGVWaWV3Tm9kZXModmlldyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBhY3Rpb25cbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGV4ZWNQcm9qZWN0ZWRWaWV3c0FjdGlvbih2aWV3LCBhY3Rpb24pIHtcbiAgICBleGVjRW1iZWRkZWRWaWV3c0FjdGlvbih2aWV3LCBhY3Rpb24pO1xuICAgIGV4ZWNDb21wb25lbnRWaWV3c0FjdGlvbih2aWV3LCBhY3Rpb24pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gcXVlcnlGbGFnc1xuICogQHBhcmFtIHs/fSBzdGF0aWNEeW5hbWljUXVlcnlGbGFnXG4gKiBAcGFyYW0gez99IGNoZWNrVHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZXhlY1F1ZXJpZXNBY3Rpb24odmlldywgcXVlcnlGbGFncywgc3RhdGljRHluYW1pY1F1ZXJ5RmxhZywgY2hlY2tUeXBlKSB7XG4gICAgaWYgKCEodmlldy5kZWYubm9kZUZsYWdzICYgcXVlcnlGbGFncykgfHwgISh2aWV3LmRlZi5ub2RlRmxhZ3MgJiBzdGF0aWNEeW5hbWljUXVlcnlGbGFnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVDb3VudCA9IHZpZXcuZGVmLm5vZGVzLmxlbmd0aDtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZURlZiA9IHZpZXcuZGVmLm5vZGVzW2ldO1xuICAgICAgICBpZiAoKG5vZGVEZWYuZmxhZ3MgJiBxdWVyeUZsYWdzKSAmJiAobm9kZURlZi5mbGFncyAmIHN0YXRpY0R5bmFtaWNRdWVyeUZsYWcpKSB7XG4gICAgICAgICAgICBTZXJ2aWNlcy5zZXRDdXJyZW50Tm9kZSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoZWNrVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMCAvKiBDaGVja0FuZFVwZGF0ZSAqLzpcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tBbmRVcGRhdGVRdWVyeSh2aWV3LCBub2RlRGVmKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIENoZWNrTm9DaGFuZ2VzICovOlxuICAgICAgICAgICAgICAgICAgICBjaGVja05vQ2hhbmdlc1F1ZXJ5KHZpZXcsIG5vZGVEZWYpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIShub2RlRGVmLmNoaWxkRmxhZ3MgJiBxdWVyeUZsYWdzKSB8fCAhKG5vZGVEZWYuY2hpbGRGbGFncyAmIHN0YXRpY0R5bmFtaWNRdWVyeUZsYWcpKSB7XG4gICAgICAgICAgICAvLyBubyBjaGlsZCBoYXMgYSBtYXRjaGluZyBxdWVyeVxuICAgICAgICAgICAgLy8gdGhlbiBza2lwIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgaSArPSBub2RlRGVmLmNoaWxkQ291bnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbnZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBpbml0U2VydmljZXNJZk5lZWRlZCgpIHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2VydmljZXMgPSBpc0Rldk1vZGUoKSA/IGNyZWF0ZURlYnVnU2VydmljZXMoKSA6IGNyZWF0ZVByb2RTZXJ2aWNlcygpO1xuICAgIFNlcnZpY2VzLnNldEN1cnJlbnROb2RlID0gc2VydmljZXMuc2V0Q3VycmVudE5vZGU7XG4gICAgU2VydmljZXMuY3JlYXRlUm9vdFZpZXcgPSBzZXJ2aWNlcy5jcmVhdGVSb290VmlldztcbiAgICBTZXJ2aWNlcy5jcmVhdGVFbWJlZGRlZFZpZXcgPSBzZXJ2aWNlcy5jcmVhdGVFbWJlZGRlZFZpZXc7XG4gICAgU2VydmljZXMuY3JlYXRlQ29tcG9uZW50VmlldyA9IHNlcnZpY2VzLmNyZWF0ZUNvbXBvbmVudFZpZXc7XG4gICAgU2VydmljZXMuY3JlYXRlTmdNb2R1bGVSZWYgPSBzZXJ2aWNlcy5jcmVhdGVOZ01vZHVsZVJlZjtcbiAgICBTZXJ2aWNlcy5vdmVycmlkZVByb3ZpZGVyID0gc2VydmljZXMub3ZlcnJpZGVQcm92aWRlcjtcbiAgICBTZXJ2aWNlcy5vdmVycmlkZUNvbXBvbmVudFZpZXcgPSBzZXJ2aWNlcy5vdmVycmlkZUNvbXBvbmVudFZpZXc7XG4gICAgU2VydmljZXMuY2xlYXJPdmVycmlkZXMgPSBzZXJ2aWNlcy5jbGVhck92ZXJyaWRlcztcbiAgICBTZXJ2aWNlcy5jaGVja0FuZFVwZGF0ZVZpZXcgPSBzZXJ2aWNlcy5jaGVja0FuZFVwZGF0ZVZpZXc7XG4gICAgU2VydmljZXMuY2hlY2tOb0NoYW5nZXNWaWV3ID0gc2VydmljZXMuY2hlY2tOb0NoYW5nZXNWaWV3O1xuICAgIFNlcnZpY2VzLmRlc3Ryb3lWaWV3ID0gc2VydmljZXMuZGVzdHJveVZpZXc7XG4gICAgU2VydmljZXMucmVzb2x2ZURlcCA9IHJlc29sdmVEZXA7XG4gICAgU2VydmljZXMuY3JlYXRlRGVidWdDb250ZXh0ID0gc2VydmljZXMuY3JlYXRlRGVidWdDb250ZXh0O1xuICAgIFNlcnZpY2VzLmhhbmRsZUV2ZW50ID0gc2VydmljZXMuaGFuZGxlRXZlbnQ7XG4gICAgU2VydmljZXMudXBkYXRlRGlyZWN0aXZlcyA9IHNlcnZpY2VzLnVwZGF0ZURpcmVjdGl2ZXM7XG4gICAgU2VydmljZXMudXBkYXRlUmVuZGVyZXIgPSBzZXJ2aWNlcy51cGRhdGVSZW5kZXJlcjtcbiAgICBTZXJ2aWNlcy5kaXJ0eVBhcmVudFF1ZXJpZXMgPSBkaXJ0eVBhcmVudFF1ZXJpZXM7XG59XG4vKipcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVByb2RTZXJ2aWNlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRDdXJyZW50Tm9kZTogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICBjcmVhdGVSb290VmlldzogY3JlYXRlUHJvZFJvb3RWaWV3LFxuICAgICAgICBjcmVhdGVFbWJlZGRlZFZpZXc6IGNyZWF0ZUVtYmVkZGVkVmlldyxcbiAgICAgICAgY3JlYXRlQ29tcG9uZW50VmlldzogY3JlYXRlQ29tcG9uZW50VmlldyxcbiAgICAgICAgY3JlYXRlTmdNb2R1bGVSZWY6IGNyZWF0ZU5nTW9kdWxlUmVmLFxuICAgICAgICBvdmVycmlkZVByb3ZpZGVyOiBOT09QLFxuICAgICAgICBvdmVycmlkZUNvbXBvbmVudFZpZXc6IE5PT1AsXG4gICAgICAgIGNsZWFyT3ZlcnJpZGVzOiBOT09QLFxuICAgICAgICBjaGVja0FuZFVwZGF0ZVZpZXc6IGNoZWNrQW5kVXBkYXRlVmlldyxcbiAgICAgICAgY2hlY2tOb0NoYW5nZXNWaWV3OiBjaGVja05vQ2hhbmdlc1ZpZXcsXG4gICAgICAgIGRlc3Ryb3lWaWV3OiBkZXN0cm95VmlldyxcbiAgICAgICAgY3JlYXRlRGVidWdDb250ZXh0OiBmdW5jdGlvbiAodmlldywgbm9kZUluZGV4KSB7IHJldHVybiBuZXcgRGVidWdDb250ZXh0Xyh2aWV3LCBub2RlSW5kZXgpOyB9LFxuICAgICAgICBoYW5kbGVFdmVudDogZnVuY3Rpb24gKHZpZXcsIG5vZGVJbmRleCwgZXZlbnROYW1lLCBldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXcuZGVmLmhhbmRsZUV2ZW50KHZpZXcsIG5vZGVJbmRleCwgZXZlbnROYW1lLCBldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZURpcmVjdGl2ZXM6IGZ1bmN0aW9uICh2aWV3LCBjaGVja1R5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3LmRlZi51cGRhdGVEaXJlY3RpdmVzKGNoZWNrVHlwZSA9PT0gMCAvKiBDaGVja0FuZFVwZGF0ZSAqLyA/IHByb2RDaGVja0FuZFVwZGF0ZU5vZGUgOlxuICAgICAgICAgICAgICAgIHByb2RDaGVja05vQ2hhbmdlc05vZGUsIHZpZXcpO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVSZW5kZXJlcjogZnVuY3Rpb24gKHZpZXcsIGNoZWNrVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXcuZGVmLnVwZGF0ZVJlbmRlcmVyKGNoZWNrVHlwZSA9PT0gMCAvKiBDaGVja0FuZFVwZGF0ZSAqLyA/IHByb2RDaGVja0FuZFVwZGF0ZU5vZGUgOlxuICAgICAgICAgICAgICAgIHByb2RDaGVja05vQ2hhbmdlc05vZGUsIHZpZXcpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnU2VydmljZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0Q3VycmVudE5vZGU6IGRlYnVnU2V0Q3VycmVudE5vZGUsXG4gICAgICAgIGNyZWF0ZVJvb3RWaWV3OiBkZWJ1Z0NyZWF0ZVJvb3RWaWV3LFxuICAgICAgICBjcmVhdGVFbWJlZGRlZFZpZXc6IGRlYnVnQ3JlYXRlRW1iZWRkZWRWaWV3LFxuICAgICAgICBjcmVhdGVDb21wb25lbnRWaWV3OiBkZWJ1Z0NyZWF0ZUNvbXBvbmVudFZpZXcsXG4gICAgICAgIGNyZWF0ZU5nTW9kdWxlUmVmOiBkZWJ1Z0NyZWF0ZU5nTW9kdWxlUmVmLFxuICAgICAgICBvdmVycmlkZVByb3ZpZGVyOiBkZWJ1Z092ZXJyaWRlUHJvdmlkZXIsXG4gICAgICAgIG92ZXJyaWRlQ29tcG9uZW50VmlldzogZGVidWdPdmVycmlkZUNvbXBvbmVudFZpZXcsXG4gICAgICAgIGNsZWFyT3ZlcnJpZGVzOiBkZWJ1Z0NsZWFyT3ZlcnJpZGVzLFxuICAgICAgICBjaGVja0FuZFVwZGF0ZVZpZXc6IGRlYnVnQ2hlY2tBbmRVcGRhdGVWaWV3LFxuICAgICAgICBjaGVja05vQ2hhbmdlc1ZpZXc6IGRlYnVnQ2hlY2tOb0NoYW5nZXNWaWV3LFxuICAgICAgICBkZXN0cm95VmlldzogZGVidWdEZXN0cm95VmlldyxcbiAgICAgICAgY3JlYXRlRGVidWdDb250ZXh0OiBmdW5jdGlvbiAodmlldywgbm9kZUluZGV4KSB7IHJldHVybiBuZXcgRGVidWdDb250ZXh0Xyh2aWV3LCBub2RlSW5kZXgpOyB9LFxuICAgICAgICBoYW5kbGVFdmVudDogZGVidWdIYW5kbGVFdmVudCxcbiAgICAgICAgdXBkYXRlRGlyZWN0aXZlczogZGVidWdVcGRhdGVEaXJlY3RpdmVzLFxuICAgICAgICB1cGRhdGVSZW5kZXJlcjogZGVidWdVcGRhdGVSZW5kZXJlcixcbiAgICB9O1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGVsSW5qZWN0b3JcbiAqIEBwYXJhbSB7P30gcHJvamVjdGFibGVOb2Rlc1xuICogQHBhcmFtIHs/fSByb290U2VsZWN0b3JPck5vZGVcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IG5nTW9kdWxlXG4gKiBAcGFyYW0gez89fSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjcmVhdGVQcm9kUm9vdFZpZXcoZWxJbmplY3RvciwgcHJvamVjdGFibGVOb2Rlcywgcm9vdFNlbGVjdG9yT3JOb2RlLCBkZWYsIG5nTW9kdWxlLCBjb250ZXh0KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyZXJGYWN0b3J5ID0gbmdNb2R1bGUuaW5qZWN0b3IuZ2V0KFJlbmRlcmVyRmFjdG9yeTIpO1xuICAgIHJldHVybiBjcmVhdGVSb290VmlldyhjcmVhdGVSb290RGF0YShlbEluamVjdG9yLCBuZ01vZHVsZSwgcmVuZGVyZXJGYWN0b3J5LCBwcm9qZWN0YWJsZU5vZGVzLCByb290U2VsZWN0b3JPck5vZGUpLCBkZWYsIGNvbnRleHQpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGVsSW5qZWN0b3JcbiAqIEBwYXJhbSB7P30gcHJvamVjdGFibGVOb2Rlc1xuICogQHBhcmFtIHs/fSByb290U2VsZWN0b3JPck5vZGVcbiAqIEBwYXJhbSB7P30gZGVmXG4gKiBAcGFyYW0gez99IG5nTW9kdWxlXG4gKiBAcGFyYW0gez89fSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZWJ1Z0NyZWF0ZVJvb3RWaWV3KGVsSW5qZWN0b3IsIHByb2plY3RhYmxlTm9kZXMsIHJvb3RTZWxlY3Rvck9yTm9kZSwgZGVmLCBuZ01vZHVsZSwgY29udGV4dCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlbmRlcmVyRmFjdG9yeSA9IG5nTW9kdWxlLmluamVjdG9yLmdldChSZW5kZXJlckZhY3RvcnkyKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByb290ID0gY3JlYXRlUm9vdERhdGEoZWxJbmplY3RvciwgbmdNb2R1bGUsIG5ldyBEZWJ1Z1JlbmRlcmVyRmFjdG9yeTIocmVuZGVyZXJGYWN0b3J5KSwgcHJvamVjdGFibGVOb2Rlcywgcm9vdFNlbGVjdG9yT3JOb2RlKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWZXaXRoT3ZlcnJpZGUgPSBhcHBseVByb3ZpZGVyT3ZlcnJpZGVzVG9WaWV3KGRlZik7XG4gICAgcmV0dXJuIGNhbGxXaXRoRGVidWdDb250ZXh0KERlYnVnQWN0aW9uLmNyZWF0ZSwgY3JlYXRlUm9vdFZpZXcsIG51bGwsIFtyb290LCBkZWZXaXRoT3ZlcnJpZGUsIGNvbnRleHRdKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBlbEluamVjdG9yXG4gKiBAcGFyYW0gez99IG5nTW9kdWxlXG4gKiBAcGFyYW0gez99IHJlbmRlcmVyRmFjdG9yeVxuICogQHBhcmFtIHs/fSBwcm9qZWN0YWJsZU5vZGVzXG4gKiBAcGFyYW0gez99IHJvb3RTZWxlY3Rvck9yTm9kZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUm9vdERhdGEoZWxJbmplY3RvciwgbmdNb2R1bGUsIHJlbmRlcmVyRmFjdG9yeSwgcHJvamVjdGFibGVOb2Rlcywgcm9vdFNlbGVjdG9yT3JOb2RlKSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gc2FuaXRpemVyID0gbmdNb2R1bGUuaW5qZWN0b3IuZ2V0KFNhbml0aXplcik7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZXJyb3JIYW5kbGVyID0gbmdNb2R1bGUuaW5qZWN0b3IuZ2V0KEVycm9ySGFuZGxlcik7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmdNb2R1bGU6IG5nTW9kdWxlLFxuICAgICAgICBpbmplY3RvcjogZWxJbmplY3RvciwgcHJvamVjdGFibGVOb2RlczogcHJvamVjdGFibGVOb2RlcyxcbiAgICAgICAgc2VsZWN0b3JPck5vZGU6IHJvb3RTZWxlY3Rvck9yTm9kZSwgc2FuaXRpemVyOiBzYW5pdGl6ZXIsIHJlbmRlcmVyRmFjdG9yeTogcmVuZGVyZXJGYWN0b3J5LCByZW5kZXJlcjogcmVuZGVyZXIsIGVycm9ySGFuZGxlcjogZXJyb3JIYW5kbGVyXG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBwYXJlbnRWaWV3XG4gKiBAcGFyYW0gez99IGFuY2hvckRlZlxuICogQHBhcmFtIHs/fSB2aWV3RGVmXG4gKiBAcGFyYW0gez89fSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZWJ1Z0NyZWF0ZUVtYmVkZGVkVmlldyhwYXJlbnRWaWV3LCBhbmNob3JEZWYsIHZpZXdEZWYkJDEsIGNvbnRleHQpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWZXaXRoT3ZlcnJpZGUgPSBhcHBseVByb3ZpZGVyT3ZlcnJpZGVzVG9WaWV3KHZpZXdEZWYkJDEpO1xuICAgIHJldHVybiBjYWxsV2l0aERlYnVnQ29udGV4dChEZWJ1Z0FjdGlvbi5jcmVhdGUsIGNyZWF0ZUVtYmVkZGVkVmlldywgbnVsbCwgW3BhcmVudFZpZXcsIGFuY2hvckRlZiwgZGVmV2l0aE92ZXJyaWRlLCBjb250ZXh0XSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gcGFyZW50Vmlld1xuICogQHBhcmFtIHs/fSBub2RlRGVmXG4gKiBAcGFyYW0gez99IHZpZXdEZWZcbiAqIEBwYXJhbSB7P30gaG9zdEVsZW1lbnRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnQ3JlYXRlQ29tcG9uZW50VmlldyhwYXJlbnRWaWV3LCBub2RlRGVmLCB2aWV3RGVmJCQxLCBob3N0RWxlbWVudCkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG92ZXJyaWRlQ29tcG9uZW50VmlldyA9IHZpZXdEZWZPdmVycmlkZXMuZ2V0KC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgoLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYuZWxlbWVudCkpLmNvbXBvbmVudFByb3ZpZGVyKSkucHJvdmlkZXIpKS50b2tlbik7XG4gICAgaWYgKG92ZXJyaWRlQ29tcG9uZW50Vmlldykge1xuICAgICAgICB2aWV3RGVmJCQxID0gb3ZlcnJpZGVDb21wb25lbnRWaWV3O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmlld0RlZiQkMSA9IGFwcGx5UHJvdmlkZXJPdmVycmlkZXNUb1ZpZXcodmlld0RlZiQkMSk7XG4gICAgfVxuICAgIHJldHVybiBjYWxsV2l0aERlYnVnQ29udGV4dChEZWJ1Z0FjdGlvbi5jcmVhdGUsIGNyZWF0ZUNvbXBvbmVudFZpZXcsIG51bGwsIFtwYXJlbnRWaWV3LCBub2RlRGVmLCB2aWV3RGVmJCQxLCBob3N0RWxlbWVudF0pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG1vZHVsZVR5cGVcbiAqIEBwYXJhbSB7P30gcGFyZW50SW5qZWN0b3JcbiAqIEBwYXJhbSB7P30gYm9vdHN0cmFwQ29tcG9uZW50c1xuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnQ3JlYXRlTmdNb2R1bGVSZWYobW9kdWxlVHlwZSwgcGFyZW50SW5qZWN0b3IsIGJvb3RzdHJhcENvbXBvbmVudHMsIGRlZikge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlZldpdGhPdmVycmlkZSA9IGFwcGx5UHJvdmlkZXJPdmVycmlkZXNUb05nTW9kdWxlKGRlZik7XG4gICAgcmV0dXJuIGNyZWF0ZU5nTW9kdWxlUmVmKG1vZHVsZVR5cGUsIHBhcmVudEluamVjdG9yLCBib290c3RyYXBDb21wb25lbnRzLCBkZWZXaXRoT3ZlcnJpZGUpO1xufVxudmFyIHByb3ZpZGVyT3ZlcnJpZGVzID0gbmV3IE1hcCgpO1xudmFyIHZpZXdEZWZPdmVycmlkZXMgPSBuZXcgTWFwKCk7XG4vKipcbiAqIEBwYXJhbSB7P30gb3ZlcnJpZGVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnT3ZlcnJpZGVQcm92aWRlcihvdmVycmlkZSkge1xuICAgIHByb3ZpZGVyT3ZlcnJpZGVzLnNldChvdmVycmlkZS50b2tlbiwgb3ZlcnJpZGUpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGNvbXBcbiAqIEBwYXJhbSB7P30gY29tcEZhY3RvcnlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnT3ZlcnJpZGVDb21wb25lbnRWaWV3KGNvbXAsIGNvbXBGYWN0b3J5KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaG9zdFZpZXdEZWYgPSByZXNvbHZlRGVmaW5pdGlvbihnZXRDb21wb25lbnRWaWV3RGVmaW5pdGlvbkZhY3RvcnkoY29tcEZhY3RvcnkpKTtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjb21wVmlld0RlZiA9IHJlc29sdmVEZWZpbml0aW9uKC8qKiBAdHlwZSB7P30gKi8gKCgvKiogQHR5cGUgez99ICovICgoaG9zdFZpZXdEZWYubm9kZXNbMF0uZWxlbWVudCkpLmNvbXBvbmVudFZpZXcpKSk7XG4gICAgdmlld0RlZk92ZXJyaWRlcy5zZXQoY29tcCwgY29tcFZpZXdEZWYpO1xufVxuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZWJ1Z0NsZWFyT3ZlcnJpZGVzKCkge1xuICAgIHByb3ZpZGVyT3ZlcnJpZGVzLmNsZWFyKCk7XG4gICAgdmlld0RlZk92ZXJyaWRlcy5jbGVhcigpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IGRlZlxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gYXBwbHlQcm92aWRlck92ZXJyaWRlc1RvVmlldyhkZWYpIHtcbiAgICBpZiAocHJvdmlkZXJPdmVycmlkZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbGVtZW50SW5kaWNlc1dpdGhPdmVyd3JpdHRlblByb3ZpZGVycyA9IGZpbmRFbGVtZW50SW5kaWNlc1dpdGhPdmVyd3JpdHRlblByb3ZpZGVycyhkZWYpO1xuICAgIGlmIChlbGVtZW50SW5kaWNlc1dpdGhPdmVyd3JpdHRlblByb3ZpZGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGRlZjtcbiAgICB9XG4gICAgLy8gY2xvbmUgdGhlIHdob2xlIHZpZXcgZGVmaW5pdGlvbixcbiAgICAvLyBhcyBpdCBtYWludGFpbnMgcmVmZXJlbmNlcyBiZXR3ZWVuIHRoZSBub2RlcyB0aGF0IGFyZSBoYXJkIHRvIHVwZGF0ZS5cbiAgICBkZWYgPSAvKiogQHR5cGUgez99ICovICgoZGVmLmZhY3RvcnkpKShmdW5jdGlvbiAoKSB7IHJldHVybiBOT09QOyB9KTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgZWxlbWVudEluZGljZXNXaXRoT3ZlcndyaXR0ZW5Qcm92aWRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXBwbHlQcm92aWRlck92ZXJyaWRlc1RvRWxlbWVudChkZWYsIGVsZW1lbnRJbmRpY2VzV2l0aE92ZXJ3cml0dGVuUHJvdmlkZXJzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZjtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGRlZlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEVsZW1lbnRJbmRpY2VzV2l0aE92ZXJ3cml0dGVuUHJvdmlkZXJzKGRlZikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbEluZGljZXNXaXRoT3ZlcndyaXR0ZW5Qcm92aWRlcnMgPSBbXTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbGFzdEVsZW1lbnREZWYgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDwgZGVmLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gZGVmLm5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAxIC8qIFR5cGVFbGVtZW50ICovKSB7XG4gICAgICAgICAgICAgICAgbGFzdEVsZW1lbnREZWYgPSBub2RlRGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3RFbGVtZW50RGVmICYmIG5vZGVEZWYuZmxhZ3MgJiAzODQwIC8qIENhdFByb3ZpZGVyTm9EaXJlY3RpdmUgKi8gJiZcbiAgICAgICAgICAgICAgICBwcm92aWRlck92ZXJyaWRlcy5oYXMoLyoqIEB0eXBlIHs/fSAqLyAoKG5vZGVEZWYucHJvdmlkZXIpKS50b2tlbikpIHtcbiAgICAgICAgICAgICAgICBlbEluZGljZXNXaXRoT3ZlcndyaXR0ZW5Qcm92aWRlcnMucHVzaCgvKiogQHR5cGUgez99ICovICgobGFzdEVsZW1lbnREZWYpKS5ub2RlSW5kZXgpO1xuICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50RGVmID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxJbmRpY2VzV2l0aE92ZXJ3cml0dGVuUHJvdmlkZXJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHZpZXdEZWZcbiAgICAgKiBAcGFyYW0gez99IGVsSW5kZXhcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5UHJvdmlkZXJPdmVycmlkZXNUb0VsZW1lbnQodmlld0RlZiQkMSwgZWxJbmRleCkge1xuICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSBlbEluZGV4ICsgMTsgaSA8IHZpZXdEZWYkJDEubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3RGVmJCQxLm5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAxIC8qIFR5cGVFbGVtZW50ICovKSB7XG4gICAgICAgICAgICAgICAgLy8gc3RvcCBhdCB0aGUgbmV4dCBlbGVtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGVEZWYuZmxhZ3MgJiAzODQwIC8qIENhdFByb3ZpZGVyTm9EaXJlY3RpdmUgKi8pIHtcbiAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm92aWRlciA9IC8qKiBAdHlwZSB7P30gKi8gKChub2RlRGVmLnByb3ZpZGVyKSk7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb3ZlcnJpZGUgPSBwcm92aWRlck92ZXJyaWRlcy5nZXQocHJvdmlkZXIudG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlRGVmLmZsYWdzID0gKG5vZGVEZWYuZmxhZ3MgJiB+Mzg0MCAvKiBDYXRQcm92aWRlck5vRGlyZWN0aXZlICovKSB8IG92ZXJyaWRlLmZsYWdzO1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5kZXBzID0gc3BsaXREZXBzRHNsKG92ZXJyaWRlLmRlcHMpO1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci52YWx1ZSA9IG92ZXJyaWRlLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSBkZWZcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFwcGx5UHJvdmlkZXJPdmVycmlkZXNUb05nTW9kdWxlKGRlZikge1xuICAgIHZhciBfYSA9IGNhbGNIYXNPdmVycmlkZXMoZGVmKSwgaGFzT3ZlcnJpZGVzID0gX2EuaGFzT3ZlcnJpZGVzLCBoYXNEZXByZWNhdGVkT3ZlcnJpZGVzID0gX2EuaGFzRGVwcmVjYXRlZE92ZXJyaWRlcztcbiAgICBpZiAoIWhhc092ZXJyaWRlcykge1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICAvLyBjbG9uZSB0aGUgd2hvbGUgdmlldyBkZWZpbml0aW9uLFxuICAgIC8vIGFzIGl0IG1haW50YWlucyByZWZlcmVuY2VzIGJldHdlZW4gdGhlIG5vZGVzIHRoYXQgYXJlIGhhcmQgdG8gdXBkYXRlLlxuICAgIGRlZiA9IC8qKiBAdHlwZSB7P30gKi8gKChkZWYuZmFjdG9yeSkpKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5PT1A7IH0pO1xuICAgIGFwcGx5UHJvdmlkZXJPdmVycmlkZXMoZGVmKTtcbiAgICByZXR1cm4gZGVmO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZGVmXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYWxjSGFzT3ZlcnJpZGVzKGRlZikge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBoYXNPdmVycmlkZXMgPSBmYWxzZTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gaGFzRGVwcmVjYXRlZE92ZXJyaWRlcyA9IGZhbHNlO1xuICAgICAgICBpZiAocHJvdmlkZXJPdmVycmlkZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaGFzT3ZlcnJpZGVzOiBoYXNPdmVycmlkZXMsIGhhc0RlcHJlY2F0ZWRPdmVycmlkZXM6IGhhc0RlcHJlY2F0ZWRPdmVycmlkZXMgfTtcbiAgICAgICAgfVxuICAgICAgICBkZWYucHJvdmlkZXJzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG92ZXJyaWRlID0gcHJvdmlkZXJPdmVycmlkZXMuZ2V0KG5vZGUudG9rZW4pO1xuICAgICAgICAgICAgaWYgKChub2RlLmZsYWdzICYgMzg0MCAvKiBDYXRQcm92aWRlck5vRGlyZWN0aXZlICovKSAmJiBvdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIGhhc092ZXJyaWRlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaGFzRGVwcmVjYXRlZE92ZXJyaWRlcyA9IGhhc0RlcHJlY2F0ZWRPdmVycmlkZXMgfHwgb3ZlcnJpZGUuZGVwcmVjYXRlZEJlaGF2aW9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgaGFzT3ZlcnJpZGVzOiBoYXNPdmVycmlkZXMsIGhhc0RlcHJlY2F0ZWRPdmVycmlkZXM6IGhhc0RlcHJlY2F0ZWRPdmVycmlkZXMgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBkZWZcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFwcGx5UHJvdmlkZXJPdmVycmlkZXMoZGVmKSB7XG4gICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBkZWYucHJvdmlkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBwcm92aWRlciA9IGRlZi5wcm92aWRlcnNbaV07XG4gICAgICAgICAgICBpZiAoaGFzRGVwcmVjYXRlZE92ZXJyaWRlcykge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhZCBhIGJ1ZyB3aGVyZSBtZSBtYWRlXG4gICAgICAgICAgICAgICAgLy8gYWxsIHByb3ZpZGVycyBsYXp5LiBLZWVwIHRoaXMgbG9naWMgYmVoaW5kIGEgZmxhZ1xuICAgICAgICAgICAgICAgIC8vIGZvciBtaWdyYXRpbmcgZXhpc3RpbmcgdXNlcnMuXG4gICAgICAgICAgICAgICAgcHJvdmlkZXIuZmxhZ3MgfD0gNDA5NiAvKiBMYXp5UHJvdmlkZXIgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBvdmVycmlkZSA9IHByb3ZpZGVyT3ZlcnJpZGVzLmdldChwcm92aWRlci50b2tlbik7XG4gICAgICAgICAgICBpZiAob3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlci5mbGFncyA9IChwcm92aWRlci5mbGFncyAmIH4zODQwIC8qIENhdFByb3ZpZGVyTm9EaXJlY3RpdmUgKi8pIHwgb3ZlcnJpZGUuZmxhZ3M7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIuZGVwcyA9IHNwbGl0RGVwc0RzbChvdmVycmlkZS5kZXBzKTtcbiAgICAgICAgICAgICAgICBwcm92aWRlci52YWx1ZSA9IG92ZXJyaWRlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEBwYXJhbSB7P30gY2hlY2tJbmRleFxuICogQHBhcmFtIHs/fSBhcmdTdHlsZVxuICogQHBhcmFtIHs/PX0gdjBcbiAqIEBwYXJhbSB7Pz19IHYxXG4gKiBAcGFyYW0gez89fSB2MlxuICogQHBhcmFtIHs/PX0gdjNcbiAqIEBwYXJhbSB7Pz19IHY0XG4gKiBAcGFyYW0gez89fSB2NVxuICogQHBhcmFtIHs/PX0gdjZcbiAqIEBwYXJhbSB7Pz19IHY3XG4gKiBAcGFyYW0gez89fSB2OFxuICogQHBhcmFtIHs/PX0gdjlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHByb2RDaGVja0FuZFVwZGF0ZU5vZGUodmlldywgY2hlY2tJbmRleCwgYXJnU3R5bGUsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KSB7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZURlZiA9IHZpZXcuZGVmLm5vZGVzW2NoZWNrSW5kZXhdO1xuICAgIGNoZWNrQW5kVXBkYXRlTm9kZSh2aWV3LCBub2RlRGVmLCBhcmdTdHlsZSwgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB2OCwgdjkpO1xuICAgIHJldHVybiAobm9kZURlZi5mbGFncyAmIDIyNCAvKiBDYXRQdXJlRXhwcmVzc2lvbiAqLykgP1xuICAgICAgICBhc1B1cmVFeHByZXNzaW9uRGF0YSh2aWV3LCBjaGVja0luZGV4KS52YWx1ZSA6XG4gICAgICAgIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGNoZWNrSW5kZXhcbiAqIEBwYXJhbSB7P30gYXJnU3R5bGVcbiAqIEBwYXJhbSB7Pz19IHYwXG4gKiBAcGFyYW0gez89fSB2MVxuICogQHBhcmFtIHs/PX0gdjJcbiAqIEBwYXJhbSB7Pz19IHYzXG4gKiBAcGFyYW0gez89fSB2NFxuICogQHBhcmFtIHs/PX0gdjVcbiAqIEBwYXJhbSB7Pz19IHY2XG4gKiBAcGFyYW0gez89fSB2N1xuICogQHBhcmFtIHs/PX0gdjhcbiAqIEBwYXJhbSB7Pz19IHY5XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBwcm9kQ2hlY2tOb0NoYW5nZXNOb2RlKHZpZXcsIGNoZWNrSW5kZXgsIGFyZ1N0eWxlLCB2MCwgdjEsIHYyLCB2MywgdjQsIHY1LCB2NiwgdjcsIHY4LCB2OSkge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tjaGVja0luZGV4XTtcbiAgICBjaGVja05vQ2hhbmdlc05vZGUodmlldywgbm9kZURlZiwgYXJnU3R5bGUsIHYwLCB2MSwgdjIsIHYzLCB2NCwgdjUsIHY2LCB2NywgdjgsIHY5KTtcbiAgICByZXR1cm4gKG5vZGVEZWYuZmxhZ3MgJiAyMjQgLyogQ2F0UHVyZUV4cHJlc3Npb24gKi8pID9cbiAgICAgICAgYXNQdXJlRXhwcmVzc2lvbkRhdGEodmlldywgY2hlY2tJbmRleCkudmFsdWUgOlxuICAgICAgICB1bmRlZmluZWQ7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGVidWdDaGVja0FuZFVwZGF0ZVZpZXcodmlldykge1xuICAgIHJldHVybiBjYWxsV2l0aERlYnVnQ29udGV4dChEZWJ1Z0FjdGlvbi5kZXRlY3RDaGFuZ2VzLCBjaGVja0FuZFVwZGF0ZVZpZXcsIG51bGwsIFt2aWV3XSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGVidWdDaGVja05vQ2hhbmdlc1ZpZXcodmlldykge1xuICAgIHJldHVybiBjYWxsV2l0aERlYnVnQ29udGV4dChEZWJ1Z0FjdGlvbi5jaGVja05vQ2hhbmdlcywgY2hlY2tOb0NoYW5nZXNWaWV3LCBudWxsLCBbdmlld10pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZpZXdcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnRGVzdHJveVZpZXcodmlldykge1xuICAgIHJldHVybiBjYWxsV2l0aERlYnVnQ29udGV4dChEZWJ1Z0FjdGlvbi5kZXN0cm95LCBkZXN0cm95VmlldywgbnVsbCwgW3ZpZXddKTtcbn1cbi8qKiBAZW51bSB7bnVtYmVyfSAqL1xudmFyIERlYnVnQWN0aW9uID0ge1xuICAgIGNyZWF0ZTogMCxcbiAgICBkZXRlY3RDaGFuZ2VzOiAxLFxuICAgIGNoZWNrTm9DaGFuZ2VzOiAyLFxuICAgIGRlc3Ryb3k6IDMsXG4gICAgaGFuZGxlRXZlbnQ6IDQsXG59O1xuRGVidWdBY3Rpb25bRGVidWdBY3Rpb24uY3JlYXRlXSA9IFwiY3JlYXRlXCI7XG5EZWJ1Z0FjdGlvbltEZWJ1Z0FjdGlvbi5kZXRlY3RDaGFuZ2VzXSA9IFwiZGV0ZWN0Q2hhbmdlc1wiO1xuRGVidWdBY3Rpb25bRGVidWdBY3Rpb24uY2hlY2tOb0NoYW5nZXNdID0gXCJjaGVja05vQ2hhbmdlc1wiO1xuRGVidWdBY3Rpb25bRGVidWdBY3Rpb24uZGVzdHJveV0gPSBcImRlc3Ryb3lcIjtcbkRlYnVnQWN0aW9uW0RlYnVnQWN0aW9uLmhhbmRsZUV2ZW50XSA9IFwiaGFuZGxlRXZlbnRcIjtcbnZhciBfY3VycmVudEFjdGlvbjtcbnZhciBfY3VycmVudFZpZXc7XG52YXIgX2N1cnJlbnROb2RlSW5kZXg7XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBub2RlSW5kZXhcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnU2V0Q3VycmVudE5vZGUodmlldywgbm9kZUluZGV4KSB7XG4gICAgX2N1cnJlbnRWaWV3ID0gdmlldztcbiAgICBfY3VycmVudE5vZGVJbmRleCA9IG5vZGVJbmRleDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVJbmRleFxuICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAqIEBwYXJhbSB7P30gZXZlbnRcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnSGFuZGxlRXZlbnQodmlldywgbm9kZUluZGV4LCBldmVudE5hbWUsIGV2ZW50KSB7XG4gICAgZGVidWdTZXRDdXJyZW50Tm9kZSh2aWV3LCBub2RlSW5kZXgpO1xuICAgIHJldHVybiBjYWxsV2l0aERlYnVnQ29udGV4dChEZWJ1Z0FjdGlvbi5oYW5kbGVFdmVudCwgdmlldy5kZWYuaGFuZGxlRXZlbnQsIG51bGwsIFt2aWV3LCBub2RlSW5kZXgsIGV2ZW50TmFtZSwgZXZlbnRdKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGNoZWNrVHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGVidWdVcGRhdGVEaXJlY3RpdmVzKHZpZXcsIGNoZWNrVHlwZSkge1xuICAgIGlmICh2aWV3LnN0YXRlICYgMTI4IC8qIERlc3Ryb3llZCAqLykge1xuICAgICAgICB0aHJvdyB2aWV3RGVzdHJveWVkRXJyb3IoRGVidWdBY3Rpb25bX2N1cnJlbnRBY3Rpb25dKTtcbiAgICB9XG4gICAgZGVidWdTZXRDdXJyZW50Tm9kZSh2aWV3LCBuZXh0RGlyZWN0aXZlV2l0aEJpbmRpbmcodmlldywgMCkpO1xuICAgIHJldHVybiB2aWV3LmRlZi51cGRhdGVEaXJlY3RpdmVzKGRlYnVnQ2hlY2tEaXJlY3RpdmVzRm4sIHZpZXcpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmlld1xuICAgICAqIEBwYXJhbSB7P30gbm9kZUluZGV4XG4gICAgICogQHBhcmFtIHs/fSBhcmdTdHlsZVxuICAgICAqIEBwYXJhbSB7Li4uP30gdmFsdWVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1Z0NoZWNrRGlyZWN0aXZlc0ZuKHZpZXcsIG5vZGVJbmRleCwgYXJnU3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFsdWVzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tub2RlSW5kZXhdO1xuICAgICAgICBpZiAoY2hlY2tUeXBlID09PSAwIC8qIENoZWNrQW5kVXBkYXRlICovKSB7XG4gICAgICAgICAgICBkZWJ1Z0NoZWNrQW5kVXBkYXRlTm9kZSh2aWV3LCBub2RlRGVmLCBhcmdTdHlsZSwgdmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnQ2hlY2tOb0NoYW5nZXNOb2RlKHZpZXcsIG5vZGVEZWYsIGFyZ1N0eWxlLCB2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgMTYzODQgLyogVHlwZURpcmVjdGl2ZSAqLykge1xuICAgICAgICAgICAgZGVidWdTZXRDdXJyZW50Tm9kZSh2aWV3LCBuZXh0RGlyZWN0aXZlV2l0aEJpbmRpbmcodmlldywgbm9kZUluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChub2RlRGVmLmZsYWdzICYgMjI0IC8qIENhdFB1cmVFeHByZXNzaW9uICovKSA/XG4gICAgICAgICAgICBhc1B1cmVFeHByZXNzaW9uRGF0YSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCkudmFsdWUgOlxuICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IGNoZWNrVHlwZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZGVidWdVcGRhdGVSZW5kZXJlcih2aWV3LCBjaGVja1R5cGUpIHtcbiAgICBpZiAodmlldy5zdGF0ZSAmIDEyOCAvKiBEZXN0cm95ZWQgKi8pIHtcbiAgICAgICAgdGhyb3cgdmlld0Rlc3Ryb3llZEVycm9yKERlYnVnQWN0aW9uW19jdXJyZW50QWN0aW9uXSk7XG4gICAgfVxuICAgIGRlYnVnU2V0Q3VycmVudE5vZGUodmlldywgbmV4dFJlbmRlck5vZGVXaXRoQmluZGluZyh2aWV3LCAwKSk7XG4gICAgcmV0dXJuIHZpZXcuZGVmLnVwZGF0ZVJlbmRlcmVyKGRlYnVnQ2hlY2tSZW5kZXJOb2RlRm4sIHZpZXcpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmlld1xuICAgICAqIEBwYXJhbSB7P30gbm9kZUluZGV4XG4gICAgICogQHBhcmFtIHs/fSBhcmdTdHlsZVxuICAgICAqIEBwYXJhbSB7Li4uP30gdmFsdWVzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1Z0NoZWNrUmVuZGVyTm9kZUZuKHZpZXcsIG5vZGVJbmRleCwgYXJnU3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFsdWVzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3LmRlZi5ub2Rlc1tub2RlSW5kZXhdO1xuICAgICAgICBpZiAoY2hlY2tUeXBlID09PSAwIC8qIENoZWNrQW5kVXBkYXRlICovKSB7XG4gICAgICAgICAgICBkZWJ1Z0NoZWNrQW5kVXBkYXRlTm9kZSh2aWV3LCBub2RlRGVmLCBhcmdTdHlsZSwgdmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnQ2hlY2tOb0NoYW5nZXNOb2RlKHZpZXcsIG5vZGVEZWYsIGFyZ1N0eWxlLCB2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgMyAvKiBDYXRSZW5kZXJOb2RlICovKSB7XG4gICAgICAgICAgICBkZWJ1Z1NldEN1cnJlbnROb2RlKHZpZXcsIG5leHRSZW5kZXJOb2RlV2l0aEJpbmRpbmcodmlldywgbm9kZUluZGV4KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChub2RlRGVmLmZsYWdzICYgMjI0IC8qIENhdFB1cmVFeHByZXNzaW9uICovKSA/XG4gICAgICAgICAgICBhc1B1cmVFeHByZXNzaW9uRGF0YSh2aWV3LCBub2RlRGVmLm5vZGVJbmRleCkudmFsdWUgOlxuICAgICAgICAgICAgdW5kZWZpbmVkO1xuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gYXJnU3R5bGVcbiAqIEBwYXJhbSB7P30gZ2l2ZW5WYWx1ZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGRlYnVnQ2hlY2tBbmRVcGRhdGVOb2RlKHZpZXcsIG5vZGVEZWYsIGFyZ1N0eWxlLCBnaXZlblZhbHVlcykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoYW5nZWQgPSAoLyoqIEB0eXBlIHs/fSAqLyAoY2hlY2tBbmRVcGRhdGVOb2RlKSkuYXBwbHkodm9pZCAwLCBbdmlldywgbm9kZURlZiwgYXJnU3R5bGVdLmNvbmNhdChnaXZlblZhbHVlcykpO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHZhbHVlcyA9IGFyZ1N0eWxlID09PSAxIC8qIER5bmFtaWMgKi8gPyBnaXZlblZhbHVlc1swXSA6IGdpdmVuVmFsdWVzO1xuICAgICAgICBpZiAobm9kZURlZi5mbGFncyAmIDE2Mzg0IC8qIFR5cGVEaXJlY3RpdmUgKi8pIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGJpbmRpbmdWYWx1ZXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IDA7IGkgPCBub2RlRGVmLmJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gYmluZGluZyA9IG5vZGVEZWYuYmluZGluZ3NbaV07XG4gICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGJpbmRpbmcuZmxhZ3MgJiA4IC8qIFR5cGVQcm9wZXJ0eSAqLykge1xuICAgICAgICAgICAgICAgICAgICBiaW5kaW5nVmFsdWVzW25vcm1hbGl6ZURlYnVnQmluZGluZ05hbWUoLyoqIEB0eXBlIHs/fSAqLyAoKGJpbmRpbmcubm9uTWluaWZpZWROYW1lKSkpXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVEZWJ1Z0JpbmRpbmdWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxEZWYgPSAvKiogQHR5cGUgez99ICovICgobm9kZURlZi5wYXJlbnQpKTtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsID0gYXNFbGVtZW50RGF0YSh2aWV3LCBlbERlZi5ub2RlSW5kZXgpLnJlbmRlckVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoIS8qKiBAdHlwZSB7P30gKi8gKChlbERlZi5lbGVtZW50KSkubmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIGEgY29tbWVudC5cbiAgICAgICAgICAgICAgICB2aWV3LnJlbmRlcmVyLnNldFZhbHVlKGVsLCBcImJpbmRpbmdzPVwiICsgSlNPTi5zdHJpbmdpZnkoYmluZGluZ1ZhbHVlcywgbnVsbCwgMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYSByZWd1bGFyIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgLyoqIEB0eXBlIHs/fSAqLyBhdHRyIGluIGJpbmRpbmdWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdmFsdWUgPSBiaW5kaW5nVmFsdWVzW2F0dHJdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWwsIGF0dHIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKGVsLCBhdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gYXJnU3R5bGVcbiAqIEBwYXJhbSB7P30gdmFsdWVzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBkZWJ1Z0NoZWNrTm9DaGFuZ2VzTm9kZSh2aWV3LCBub2RlRGVmLCBhcmdTdHlsZSwgdmFsdWVzKSB7XG4gICAgKC8qKiBAdHlwZSB7P30gKi8gKGNoZWNrTm9DaGFuZ2VzTm9kZSkpLmFwcGx5KHZvaWQgMCwgW3ZpZXcsIG5vZGVEZWYsIGFyZ1N0eWxlXS5jb25jYXQodmFsdWVzKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplRGVidWdCaW5kaW5nTmFtZShuYW1lKSB7XG4gICAgLy8gQXR0cmlidXRlIG5hbWVzIHdpdGggYCRgIChlZyBgeC15JGApIGFyZSB2YWxpZCBwZXIgc3BlYywgYnV0IHVuc3VwcG9ydGVkIGJ5IHNvbWUgYnJvd3NlcnNcbiAgICBuYW1lID0gY2FtZWxDYXNlVG9EYXNoQ2FzZShuYW1lLnJlcGxhY2UoL1skQF0vZywgJ18nKSk7XG4gICAgcmV0dXJuIFwibmctcmVmbGVjdC1cIiArIG5hbWU7XG59XG52YXIgQ0FNRUxfQ0FTRV9SRUdFWFAgPSAvKFtBLVpdKS9nO1xuLyoqXG4gKiBAcGFyYW0gez99IGlucHV0XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjYW1lbENhc2VUb0Rhc2hDYXNlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoQ0FNRUxfQ0FTRV9SRUdFWFAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG0gPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG1bX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy0nICsgbVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IHZhbHVlXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEZWJ1Z0JpbmRpbmdWYWx1ZSh2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIExpbWl0IHRoZSBzaXplIG9mIHRoZSB2YWx1ZSBhcyBvdGhlcndpc2UgdGhlIERPTSBqdXN0IGdldHMgcG9sbHV0ZWQuXG4gICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsID8gdmFsdWUudG9TdHJpbmcoKS5zbGljZSgwLCAzMCkgOiB2YWx1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKC8qKiBAdHlwZSB7P30gKi8gZSkge1xuICAgICAgICByZXR1cm4gJ1tFUlJPUl0gRXhjZXB0aW9uIHdoaWxlIHRyeWluZyB0byBzZXJpYWxpemUgdGhlIHZhbHVlJztcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld1xuICogQHBhcmFtIHs/fSBub2RlSW5kZXhcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG5leHREaXJlY3RpdmVXaXRoQmluZGluZyh2aWV3LCBub2RlSW5kZXgpIHtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSBub2RlSW5kZXg7IGkgPCB2aWV3LmRlZi5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gdmlldy5kZWYubm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlRGVmLmZsYWdzICYgMTYzODQgLyogVHlwZURpcmVjdGl2ZSAqLyAmJiBub2RlRGVmLmJpbmRpbmdzICYmIG5vZGVEZWYuYmluZGluZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVJbmRleFxuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gbmV4dFJlbmRlck5vZGVXaXRoQmluZGluZyh2aWV3LCBub2RlSW5kZXgpIHtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSBub2RlSW5kZXg7IGkgPCB2aWV3LmRlZi5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBub2RlRGVmID0gdmlldy5kZWYubm9kZXNbaV07XG4gICAgICAgIGlmICgobm9kZURlZi5mbGFncyAmIDMgLyogQ2F0UmVuZGVyTm9kZSAqLykgJiYgbm9kZURlZi5iaW5kaW5ncyAmJiBub2RlRGVmLmJpbmRpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG52YXIgRGVidWdDb250ZXh0XyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWJ1Z0NvbnRleHRfKHZpZXcsIG5vZGVJbmRleCkge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLm5vZGVJbmRleCA9IG5vZGVJbmRleDtcbiAgICAgICAgaWYgKG5vZGVJbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVJbmRleCA9IG5vZGVJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub2RlRGVmID0gdmlldy5kZWYubm9kZXNbbm9kZUluZGV4XTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZWxEZWYgPSB0aGlzLm5vZGVEZWY7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsVmlldyA9IHZpZXc7XG4gICAgICAgIHdoaWxlIChlbERlZiAmJiAoZWxEZWYuZmxhZ3MgJiAxIC8qIFR5cGVFbGVtZW50ICovKSA9PT0gMCkge1xuICAgICAgICAgICAgZWxEZWYgPSAvKiogQHR5cGUgez99ICovICgoZWxEZWYucGFyZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFlbERlZikge1xuICAgICAgICAgICAgd2hpbGUgKCFlbERlZiAmJiBlbFZpZXcpIHtcbiAgICAgICAgICAgICAgICBlbERlZiA9IC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3UGFyZW50RWwoZWxWaWV3KSkpO1xuICAgICAgICAgICAgICAgIGVsVmlldyA9IC8qKiBAdHlwZSB7P30gKi8gKChlbFZpZXcucGFyZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbERlZiA9IGVsRGVmO1xuICAgICAgICB0aGlzLmVsVmlldyA9IGVsVmlldztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnQ29udGV4dF8ucHJvdG90eXBlLCBcImVsT3JDb21wVmlld1wiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBIYXMgdG8gYmUgZG9uZSBsYXppbHkgYXMgd2UgdXNlIHRoZSBEZWJ1Z0NvbnRleHQgYWxzbyBkdXJpbmcgY3JlYXRpb24gb2YgZWxlbWVudHMuLi5cbiAgICAgICAgICAgIHJldHVybiBhc0VsZW1lbnREYXRhKHRoaXMuZWxWaWV3LCB0aGlzLmVsRGVmLm5vZGVJbmRleCkuY29tcG9uZW50VmlldyB8fCB0aGlzLnZpZXc7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWJ1Z0NvbnRleHRfLnByb3RvdHlwZSwgXCJpbmplY3RvclwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVJbmplY3Rvcih0aGlzLmVsVmlldywgdGhpcy5lbERlZik7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWJ1Z0NvbnRleHRfLnByb3RvdHlwZSwgXCJjb21wb25lbnRcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbE9yQ29tcFZpZXcuY29tcG9uZW50OyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdDb250ZXh0Xy5wcm90b3R5cGUsIFwiY29udGV4dFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVsT3JDb21wVmlldy5jb250ZXh0OyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdDb250ZXh0Xy5wcm90b3R5cGUsIFwicHJvdmlkZXJUb2tlbnNcIiwge1xuICAgICAgICBnZXQ6IC8qKlxuICAgICAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gdG9rZW5zID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5lbERlZikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gaSA9IHRoaXMuZWxEZWYubm9kZUluZGV4ICsgMTsgaSA8PSB0aGlzLmVsRGVmLm5vZGVJbmRleCArIHRoaXMuZWxEZWYuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGNoaWxkRGVmID0gdGhpcy5lbFZpZXcuZGVmLm5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGREZWYuZmxhZ3MgJiAyMDIyNCAvKiBDYXRQcm92aWRlciAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goLyoqIEB0eXBlIHs/fSAqLyAoKGNoaWxkRGVmLnByb3ZpZGVyKSkudG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gY2hpbGREZWYuY2hpbGRDb3VudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdDb250ZXh0Xy5wcm90b3R5cGUsIFwicmVmZXJlbmNlc1wiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZWZlcmVuY2VzID0ge307XG4gICAgICAgICAgICBpZiAodGhpcy5lbERlZikge1xuICAgICAgICAgICAgICAgIGNvbGxlY3RSZWZlcmVuY2VzKHRoaXMuZWxWaWV3LCB0aGlzLmVsRGVmLCByZWZlcmVuY2VzKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSB0aGlzLmVsRGVmLm5vZGVJbmRleCArIDE7IGkgPD0gdGhpcy5lbERlZi5ub2RlSW5kZXggKyB0aGlzLmVsRGVmLmNoaWxkQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBjaGlsZERlZiA9IHRoaXMuZWxWaWV3LmRlZi5ub2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkRGVmLmZsYWdzICYgMjAyMjQgLyogQ2F0UHJvdmlkZXIgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RSZWZlcmVuY2VzKHRoaXMuZWxWaWV3LCBjaGlsZERlZiwgcmVmZXJlbmNlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaSArPSBjaGlsZERlZi5jaGlsZENvdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWZlcmVuY2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdDb250ZXh0Xy5wcm90b3R5cGUsIFwiY29tcG9uZW50UmVuZGVyRWxlbWVudFwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbERhdGEgPSBmaW5kSG9zdEVsZW1lbnQodGhpcy5lbE9yQ29tcFZpZXcpO1xuICAgICAgICAgICAgcmV0dXJuIGVsRGF0YSA/IGVsRGF0YS5yZW5kZXJFbGVtZW50IDogdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGVidWdDb250ZXh0Xy5wcm90b3R5cGUsIFwicmVuZGVyTm9kZVwiLCB7XG4gICAgICAgIGdldDogLyoqXG4gICAgICAgICAqIEByZXR1cm4gez99XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlRGVmLmZsYWdzICYgMiAvKiBUeXBlVGV4dCAqLyA/IHJlbmRlck5vZGUodGhpcy52aWV3LCB0aGlzLm5vZGVEZWYpIDpcbiAgICAgICAgICAgICAgICByZW5kZXJOb2RlKHRoaXMuZWxWaWV3LCB0aGlzLmVsRGVmKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb25zb2xlXG4gICAgICogQHBhcmFtIHsuLi4/fSB2YWx1ZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnQ29udGV4dF8ucHJvdG90eXBlLmxvZ0Vycm9yID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBjb25zb2xlXG4gICAgICogQHBhcmFtIHsuLi4/fSB2YWx1ZXNcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChjb25zb2xlKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhbHVlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsb2dWaWV3RGVmO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBsb2dOb2RlSW5kZXg7XG4gICAgICAgIGlmICh0aGlzLm5vZGVEZWYuZmxhZ3MgJiAyIC8qIFR5cGVUZXh0ICovKSB7XG4gICAgICAgICAgICBsb2dWaWV3RGVmID0gdGhpcy52aWV3LmRlZjtcbiAgICAgICAgICAgIGxvZ05vZGVJbmRleCA9IHRoaXMubm9kZURlZi5ub2RlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dWaWV3RGVmID0gdGhpcy5lbFZpZXcuZGVmO1xuICAgICAgICAgICAgbG9nTm9kZUluZGV4ID0gdGhpcy5lbERlZi5ub2RlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm90ZTogd2Ugb25seSBnZW5lcmF0ZSBhIGxvZyBmdW5jdGlvbiBmb3IgdGV4dCBhbmQgZWxlbWVudCBub2Rlc1xuICAgICAgICAvLyB0byBtYWtlIHRoZSBnZW5lcmF0ZWQgY29kZSBhcyBzbWFsbCBhcyBwb3NzaWJsZS5cbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gcmVuZGVyTm9kZUluZGV4ID0gZ2V0UmVuZGVyTm9kZUluZGV4KGxvZ1ZpZXdEZWYsIGxvZ05vZGVJbmRleCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGN1cnJSZW5kZXJOb2RlSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gbm9kZUxvZ2dlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGN1cnJSZW5kZXJOb2RlSW5kZXgrKztcbiAgICAgICAgICAgIGlmIChjdXJyUmVuZGVyTm9kZUluZGV4ID09PSByZW5kZXJOb2RlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gY29uc29sZS5lcnJvcikuYmluZC5hcHBseShfYSwgW2NvbnNvbGVdLmNvbmNhdCh2YWx1ZXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBOT09QO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICB9OyAvKiogQHR5cGUgez99ICovXG4gICAgICAgICgobG9nVmlld0RlZi5mYWN0b3J5KSkobm9kZUxvZ2dlcik7XG4gICAgICAgIGlmIChjdXJyUmVuZGVyTm9kZUluZGV4IDwgcmVuZGVyTm9kZUluZGV4KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbGxlZ2FsIHN0YXRlOiB0aGUgVmlld0RlZmluaXRpb25GYWN0b3J5IGRpZCBub3QgY2FsbCB0aGUgbG9nZ2VyIScpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCB2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRGVidWdDb250ZXh0Xztcbn0oKSk7XG4vKipcbiAqIEBwYXJhbSB7P30gdmlld0RlZlxuICogQHBhcmFtIHs/fSBub2RlSW5kZXhcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGdldFJlbmRlck5vZGVJbmRleCh2aWV3RGVmJCQxLCBub2RlSW5kZXgpIHtcbiAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyByZW5kZXJOb2RlSW5kZXggPSAtMTtcbiAgICBmb3IgKHZhciAvKiogQHR5cGUgez99ICovIGkgPSAwOyBpIDw9IG5vZGVJbmRleDsgaSsrKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIG5vZGVEZWYgPSB2aWV3RGVmJCQxLm5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZURlZi5mbGFncyAmIDMgLyogQ2F0UmVuZGVyTm9kZSAqLykge1xuICAgICAgICAgICAgcmVuZGVyTm9kZUluZGV4Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlck5vZGVJbmRleDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBmaW5kSG9zdEVsZW1lbnQodmlldykge1xuICAgIHdoaWxlICh2aWV3ICYmICFpc0NvbXBvbmVudFZpZXcodmlldykpIHtcbiAgICAgICAgdmlldyA9IC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3LnBhcmVudCkpO1xuICAgIH1cbiAgICBpZiAodmlldy5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIGFzRWxlbWVudERhdGEodmlldy5wYXJlbnQsIC8qKiBAdHlwZSB7P30gKi8gKCh2aWV3UGFyZW50RWwodmlldykpKS5ub2RlSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSB2aWV3XG4gKiBAcGFyYW0gez99IG5vZGVEZWZcbiAqIEBwYXJhbSB7P30gcmVmZXJlbmNlc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY29sbGVjdFJlZmVyZW5jZXModmlldywgbm9kZURlZiwgcmVmZXJlbmNlcykge1xuICAgIGZvciAodmFyIC8qKiBAdHlwZSB7P30gKi8gcmVmTmFtZSBpbiBub2RlRGVmLnJlZmVyZW5jZXMpIHtcbiAgICAgICAgcmVmZXJlbmNlc1tyZWZOYW1lXSA9IGdldFF1ZXJ5VmFsdWUodmlldywgbm9kZURlZiwgbm9kZURlZi5yZWZlcmVuY2VzW3JlZk5hbWVdKTtcbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSB7P30gYWN0aW9uXG4gKiBAcGFyYW0gez99IGZuXG4gKiBAcGFyYW0gez99IHNlbGZcbiAqIEBwYXJhbSB7P30gYXJnc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gY2FsbFdpdGhEZWJ1Z0NvbnRleHQoYWN0aW9uLCBmbiwgc2VsZiwgYXJncykge1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG9sZEFjdGlvbiA9IF9jdXJyZW50QWN0aW9uO1xuICAgIHZhciAvKiogQHR5cGUgez99ICovIG9sZFZpZXcgPSBfY3VycmVudFZpZXc7XG4gICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gb2xkTm9kZUluZGV4ID0gX2N1cnJlbnROb2RlSW5kZXg7XG4gICAgdHJ5IHtcbiAgICAgICAgX2N1cnJlbnRBY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHJlc3VsdCA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICBfY3VycmVudFZpZXcgPSBvbGRWaWV3O1xuICAgICAgICBfY3VycmVudE5vZGVJbmRleCA9IG9sZE5vZGVJbmRleDtcbiAgICAgICAgX2N1cnJlbnRBY3Rpb24gPSBvbGRBY3Rpb247XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGNoICgvKiogQHR5cGUgez99ICovIGUpIHtcbiAgICAgICAgaWYgKGlzVmlld0RlYnVnRXJyb3IoZSkgfHwgIV9jdXJyZW50Vmlldykge1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB2aWV3V3JhcHBlZERlYnVnRXJyb3IoZSwgLyoqIEB0eXBlIHs/fSAqLyAoKGdldEN1cnJlbnREZWJ1Z0NvbnRleHQoKSkpKTtcbiAgICB9XG59XG4vKipcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnREZWJ1Z0NvbnRleHQoKSB7XG4gICAgcmV0dXJuIF9jdXJyZW50VmlldyA/IG5ldyBEZWJ1Z0NvbnRleHRfKF9jdXJyZW50VmlldywgX2N1cnJlbnROb2RlSW5kZXgpIDogbnVsbDtcbn1cbnZhciBEZWJ1Z1JlbmRlcmVyRmFjdG9yeTIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVidWdSZW5kZXJlckZhY3RvcnkyKGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJEYXRhXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyRmFjdG9yeTIucHJvdG90eXBlLmNyZWF0ZVJlbmRlcmVyID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHs/fSByZW5kZXJEYXRhXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgcmVuZGVyRGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IERlYnVnUmVuZGVyZXIyKHRoaXMuZGVsZWdhdGUuY3JlYXRlUmVuZGVyZXIoZWxlbWVudCwgcmVuZGVyRGF0YSkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyRmFjdG9yeTIucHJvdG90eXBlLmJlZ2luID0gLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlLmJlZ2luKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmJlZ2luKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVidWdSZW5kZXJlckZhY3RvcnkyLnByb3RvdHlwZS5lbmQgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUuZW5kKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXJGYWN0b3J5Mi5wcm90b3R5cGUud2hlblJlbmRlcmluZ0RvbmUgPSAvKipcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUud2hlblJlbmRlcmluZ0RvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLndoZW5SZW5kZXJpbmdEb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWJ1Z1JlbmRlcmVyRmFjdG9yeTI7XG59KCkpO1xudmFyIERlYnVnUmVuZGVyZXIyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlYnVnUmVuZGVyZXIyKGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZSwgXCJkYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAvKipcbiAgICAgICAgICogQHJldHVybiB7P31cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUuZGF0YTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUuZGVzdHJveU5vZGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJlbW92ZURlYnVnTm9kZUZyb21JbmRleCgvKiogQHR5cGUgez99ICovICgoZ2V0RGVidWdOb2RlKG5vZGUpKSkpO1xuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZS5kZXN0cm95Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5kZXN0cm95Tm9kZShub2RlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUuZGVzdHJveSA9IC8qKlxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKCkgeyB0aGlzLmRlbGVnYXRlLmRlc3Ryb3koKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5jcmVhdGVFbGVtZW50ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/PX0gbmFtZXNwYWNlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobmFtZSwgbmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGVsID0gdGhpcy5kZWxlZ2F0ZS5jcmVhdGVFbGVtZW50KG5hbWUsIG5hbWVzcGFjZSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlYnVnQ3R4ID0gZ2V0Q3VycmVudERlYnVnQ29udGV4dCgpO1xuICAgICAgICBpZiAoZGVidWdDdHgpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlYnVnRWwgPSBuZXcgRGVidWdFbGVtZW50KGVsLCBudWxsLCBkZWJ1Z0N0eCk7XG4gICAgICAgICAgICBkZWJ1Z0VsLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgaW5kZXhEZWJ1Z05vZGUoZGVidWdFbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVidWdSZW5kZXJlcjIucHJvdG90eXBlLmNyZWF0ZUNvbW1lbnQgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gY29tbWVudCA9IHRoaXMuZGVsZWdhdGUuY3JlYXRlQ29tbWVudCh2YWx1ZSk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlYnVnQ3R4ID0gZ2V0Q3VycmVudERlYnVnQ29udGV4dCgpO1xuICAgICAgICBpZiAoZGVidWdDdHgpIHtcbiAgICAgICAgICAgIGluZGV4RGVidWdOb2RlKG5ldyBEZWJ1Z05vZGUoY29tbWVudCwgbnVsbCwgZGVidWdDdHgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tbWVudDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIHRleHQgPSB0aGlzLmRlbGVnYXRlLmNyZWF0ZVRleHQodmFsdWUpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0N0eCA9IGdldEN1cnJlbnREZWJ1Z0NvbnRleHQoKTtcbiAgICAgICAgaWYgKGRlYnVnQ3R4KSB7XG4gICAgICAgICAgICBpbmRleERlYnVnTm9kZShuZXcgRGVidWdOb2RlKHRleHQsIG51bGwsIGRlYnVnQ3R4KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGRcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5hcHBlbmRDaGlsZCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBuZXdDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudCwgbmV3Q2hpbGQpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVidWdFbCA9IGdldERlYnVnTm9kZShwYXJlbnQpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0NoaWxkRWwgPSBnZXREZWJ1Z05vZGUobmV3Q2hpbGQpO1xuICAgICAgICBpZiAoZGVidWdFbCAmJiBkZWJ1Z0NoaWxkRWwgJiYgZGVidWdFbCBpbnN0YW5jZW9mIERlYnVnRWxlbWVudCkge1xuICAgICAgICAgICAgZGVidWdFbC5hZGRDaGlsZChkZWJ1Z0NoaWxkRWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuYXBwZW5kQ2hpbGQocGFyZW50LCBuZXdDaGlsZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IHBhcmVudFxuICAgICAqIEBwYXJhbSB7P30gbmV3Q2hpbGRcbiAgICAgKiBAcGFyYW0gez99IHJlZkNoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IG5ld0NoaWxkXG4gICAgICogQHBhcmFtIHs/fSByZWZDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudCwgbmV3Q2hpbGQsIHJlZkNoaWxkKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlYnVnRWwgPSBnZXREZWJ1Z05vZGUocGFyZW50KTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVidWdDaGlsZEVsID0gZ2V0RGVidWdOb2RlKG5ld0NoaWxkKTtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVidWdSZWZFbCA9IC8qKiBAdHlwZSB7P30gKi8gKChnZXREZWJ1Z05vZGUocmVmQ2hpbGQpKSk7XG4gICAgICAgIGlmIChkZWJ1Z0VsICYmIGRlYnVnQ2hpbGRFbCAmJiBkZWJ1Z0VsIGluc3RhbmNlb2YgRGVidWdFbGVtZW50KSB7XG4gICAgICAgICAgICBkZWJ1Z0VsLmluc2VydEJlZm9yZShkZWJ1Z1JlZkVsLCBkZWJ1Z0NoaWxkRWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuaW5zZXJ0QmVmb3JlKHBhcmVudCwgbmV3Q2hpbGQsIHJlZkNoaWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gcGFyZW50XG4gICAgICogQHBhcmFtIHs/fSBvbGRDaGlsZFxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVidWdSZW5kZXJlcjIucHJvdG90eXBlLnJlbW92ZUNoaWxkID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRcbiAgICAgKiBAcGFyYW0gez99IG9sZENoaWxkXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAocGFyZW50LCBvbGRDaGlsZCkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0VsID0gZ2V0RGVidWdOb2RlKHBhcmVudCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlYnVnQ2hpbGRFbCA9IGdldERlYnVnTm9kZShvbGRDaGlsZCk7XG4gICAgICAgIGlmIChkZWJ1Z0VsICYmIGRlYnVnQ2hpbGRFbCAmJiBkZWJ1Z0VsIGluc3RhbmNlb2YgRGVidWdFbGVtZW50KSB7XG4gICAgICAgICAgICBkZWJ1Z0VsLnJlbW92ZUNoaWxkKGRlYnVnQ2hpbGRFbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5yZW1vdmVDaGlsZChwYXJlbnQsIG9sZENoaWxkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JPck5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5zZWxlY3RSb290RWxlbWVudCA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gc2VsZWN0b3JPck5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzZWxlY3Rvck9yTm9kZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBlbCA9IHRoaXMuZGVsZWdhdGUuc2VsZWN0Um9vdEVsZW1lbnQoc2VsZWN0b3JPck5vZGUpO1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0N0eCA9IGdldEN1cnJlbnREZWJ1Z0NvbnRleHQoKTtcbiAgICAgICAgaWYgKGRlYnVnQ3R4KSB7XG4gICAgICAgICAgICBpbmRleERlYnVnTm9kZShuZXcgRGVidWdFbGVtZW50KGVsLCBudWxsLCBkZWJ1Z0N0eCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcGFyYW0gez99IHZhbHVlXG4gICAgICogQHBhcmFtIHs/PX0gbmFtZXNwYWNlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez89fSBuYW1lc3BhY2VcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsdWUsIG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0VsID0gZ2V0RGVidWdOb2RlKGVsKTtcbiAgICAgICAgaWYgKGRlYnVnRWwgJiYgZGVidWdFbCBpbnN0YW5jZW9mIERlYnVnRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZnVsbE5hbWUgPSBuYW1lc3BhY2UgPyBuYW1lc3BhY2UgKyAnOicgKyBuYW1lIDogbmFtZTtcbiAgICAgICAgICAgIGRlYnVnRWwuYXR0cmlidXRlc1tmdWxsTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGVnYXRlLnNldEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWUsIG5hbWVzcGFjZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/PX0gbmFtZXNwYWNlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7Pz19IG5hbWVzcGFjZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKGVsLCBuYW1lLCBuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVidWdFbCA9IGdldERlYnVnTm9kZShlbCk7XG4gICAgICAgIGlmIChkZWJ1Z0VsICYmIGRlYnVnRWwgaW5zdGFuY2VvZiBEZWJ1Z0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGZ1bGxOYW1lID0gbmFtZXNwYWNlID8gbmFtZXNwYWNlICsgJzonICsgbmFtZSA6IG5hbWU7XG4gICAgICAgICAgICBkZWJ1Z0VsLmF0dHJpYnV0ZXNbZnVsbE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGVnYXRlLnJlbW92ZUF0dHJpYnV0ZShlbCwgbmFtZSwgbmFtZXNwYWNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5hZGRDbGFzcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0VsID0gZ2V0RGVidWdOb2RlKGVsKTtcbiAgICAgICAgaWYgKGRlYnVnRWwgJiYgZGVidWdFbCBpbnN0YW5jZW9mIERlYnVnRWxlbWVudCkge1xuICAgICAgICAgICAgZGVidWdFbC5jbGFzc2VzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGVnYXRlLmFkZENsYXNzKGVsLCBuYW1lKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gZWxcbiAgICAgKiBAcGFyYW0gez99IG5hbWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSkge1xuICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0VsID0gZ2V0RGVidWdOb2RlKGVsKTtcbiAgICAgICAgaWYgKGRlYnVnRWwgJiYgZGVidWdFbCBpbnN0YW5jZW9mIERlYnVnRWxlbWVudCkge1xuICAgICAgICAgICAgZGVidWdFbC5jbGFzc2VzW25hbWVdID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5yZW1vdmVDbGFzcyhlbCwgbmFtZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGZsYWdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUuc2V0U3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcGFyYW0gez99IGZsYWdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoZWwsIHN0eWxlLCB2YWx1ZSwgZmxhZ3MpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVidWdFbCA9IGdldERlYnVnTm9kZShlbCk7XG4gICAgICAgIGlmIChkZWJ1Z0VsICYmIGRlYnVnRWwgaW5zdGFuY2VvZiBEZWJ1Z0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGRlYnVnRWwuc3R5bGVzW3N0eWxlXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuc2V0U3R5bGUoZWwsIHN0eWxlLCB2YWx1ZSwgZmxhZ3MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gc3R5bGVcbiAgICAgKiBAcGFyYW0gez99IGZsYWdzXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUucmVtb3ZlU3R5bGUgPSAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBzdHlsZVxuICAgICAqIEBwYXJhbSB7P30gZmxhZ3NcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgc3R5bGUsIGZsYWdzKSB7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlYnVnRWwgPSBnZXREZWJ1Z05vZGUoZWwpO1xuICAgICAgICBpZiAoZGVidWdFbCAmJiBkZWJ1Z0VsIGluc3RhbmNlb2YgRGVidWdFbGVtZW50KSB7XG4gICAgICAgICAgICBkZWJ1Z0VsLnN0eWxlc1tzdHlsZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGUucmVtb3ZlU3R5bGUoZWwsIHN0eWxlLCBmbGFncyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IGVsXG4gICAgICogQHBhcmFtIHs/fSBuYW1lXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVidWdSZW5kZXJlcjIucHJvdG90eXBlLnNldFByb3BlcnR5ID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBlbFxuICAgICAqIEBwYXJhbSB7P30gbmFtZVxuICAgICAqIEBwYXJhbSB7P30gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIC8qKiBAdHlwZSB7P30gKi8gZGVidWdFbCA9IGdldERlYnVnTm9kZShlbCk7XG4gICAgICAgIGlmIChkZWJ1Z0VsICYmIGRlYnVnRWwgaW5zdGFuY2VvZiBEZWJ1Z0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGRlYnVnRWwucHJvcGVydGllc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVsZWdhdGUuc2V0UHJvcGVydHkoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7P30gdGFyZ2V0XG4gICAgICogQHBhcmFtIHs/fSBldmVudE5hbWVcbiAgICAgKiBAcGFyYW0gez99IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUubGlzdGVuID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gez99IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7P30gY2FsbGJhY2tcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgLyoqIEB0eXBlIHs/fSAqLyBkZWJ1Z0VsID0gZ2V0RGVidWdOb2RlKHRhcmdldCk7XG4gICAgICAgICAgICBpZiAoZGVidWdFbCkge1xuICAgICAgICAgICAgICAgIGRlYnVnRWwubGlzdGVuZXJzLnB1c2gobmV3IEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLmxpc3Rlbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHJldHVybiB7P31cbiAgICAgKi9cbiAgICBEZWJ1Z1JlbmRlcmVyMi5wcm90b3R5cGUucGFyZW50Tm9kZSA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUucGFyZW50Tm9kZShub2RlKTsgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez99IG5vZGVcbiAgICAgKiBAcmV0dXJuIHs/fVxuICAgICAqL1xuICAgIERlYnVnUmVuZGVyZXIyLnByb3RvdHlwZS5uZXh0U2libGluZyA9IC8qKlxuICAgICAqIEBwYXJhbSB7P30gbm9kZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIHRoaXMuZGVsZWdhdGUubmV4dFNpYmxpbmcobm9kZSk7IH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgRGVidWdSZW5kZXJlcjIucHJvdG90eXBlLnNldFZhbHVlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBub2RlXG4gICAgICogQHBhcmFtIHs/fSB2YWx1ZVxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKG5vZGUsIHZhbHVlKSB7IHJldHVybiB0aGlzLmRlbGVnYXRlLnNldFZhbHVlKG5vZGUsIHZhbHVlKTsgfTtcbiAgICByZXR1cm4gRGVidWdSZW5kZXJlcjI7XG59KCkpO1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwYXJhbSB7P30gb3ZlcnJpZGVcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG92ZXJyaWRlUHJvdmlkZXIob3ZlcnJpZGUpIHtcbiAgICBpbml0U2VydmljZXNJZk5lZWRlZCgpO1xuICAgIHJldHVybiBTZXJ2aWNlcy5vdmVycmlkZVByb3ZpZGVyKG92ZXJyaWRlKTtcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBjb21wXG4gKiBAcGFyYW0gez99IGNvbXBvbmVudEZhY3RvcnlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIG92ZXJyaWRlQ29tcG9uZW50Vmlldyhjb21wLCBjb21wb25lbnRGYWN0b3J5KSB7XG4gICAgaW5pdFNlcnZpY2VzSWZOZWVkZWQoKTtcbiAgICByZXR1cm4gU2VydmljZXMub3ZlcnJpZGVDb21wb25lbnRWaWV3KGNvbXAsIGNvbXBvbmVudEZhY3RvcnkpO1xufVxuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBjbGVhck92ZXJyaWRlcygpIHtcbiAgICBpbml0U2VydmljZXNJZk5lZWRlZCgpO1xuICAgIHJldHVybiBTZXJ2aWNlcy5jbGVhck92ZXJyaWRlcygpO1xufVxuLyoqXG4gKiBAcGFyYW0gez99IG5nTW9kdWxlVHlwZVxuICogQHBhcmFtIHs/fSBib290c3RyYXBDb21wb25lbnRzXG4gKiBAcGFyYW0gez99IGRlZkZhY3RvcnlcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5nTW9kdWxlRmFjdG9yeShuZ01vZHVsZVR5cGUsIGJvb3RzdHJhcENvbXBvbmVudHMsIGRlZkZhY3RvcnkpIHtcbiAgICByZXR1cm4gbmV3IE5nTW9kdWxlRmFjdG9yeV8obmdNb2R1bGVUeXBlLCBib290c3RyYXBDb21wb25lbnRzLCBkZWZGYWN0b3J5KTtcbn1cbnZhciBOZ01vZHVsZUZhY3RvcnlfID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOZ01vZHVsZUZhY3RvcnlfLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE5nTW9kdWxlRmFjdG9yeV8obW9kdWxlVHlwZSwgX2Jvb3RzdHJhcENvbXBvbmVudHMsIF9uZ01vZHVsZURlZkZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gXG4gICAgICAgIC8vIEF0dGVudGlvbjogdGhpcyBjdG9yIGlzIGNhbGxlZCBhcyB0b3AgbGV2ZWwgZnVuY3Rpb24uXG4gICAgICAgIC8vIFB1dHRpbmcgYW55IGxvZ2ljIGluIGhlcmUgd2lsbCBkZXN0cm95IGNsb3N1cmUgdHJlZSBzaGFraW5nIVxuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5tb2R1bGVUeXBlID0gbW9kdWxlVHlwZTtcbiAgICAgICAgX3RoaXMuX2Jvb3RzdHJhcENvbXBvbmVudHMgPSBfYm9vdHN0cmFwQ29tcG9uZW50cztcbiAgICAgICAgX3RoaXMuX25nTW9kdWxlRGVmRmFjdG9yeSA9IF9uZ01vZHVsZURlZkZhY3Rvcnk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRJbmplY3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgTmdNb2R1bGVGYWN0b3J5Xy5wcm90b3R5cGUuY3JlYXRlID0gLyoqXG4gICAgICogQHBhcmFtIHs/fSBwYXJlbnRJbmplY3RvclxuICAgICAqIEByZXR1cm4gez99XG4gICAgICovXG4gICAgZnVuY3Rpb24gKHBhcmVudEluamVjdG9yKSB7XG4gICAgICAgIGluaXRTZXJ2aWNlc0lmTmVlZGVkKCk7XG4gICAgICAgIHZhciAvKiogQHR5cGUgez99ICovIGRlZiA9IHJlc29sdmVEZWZpbml0aW9uKHRoaXMuX25nTW9kdWxlRGVmRmFjdG9yeSk7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlcy5jcmVhdGVOZ01vZHVsZVJlZih0aGlzLm1vZHVsZVR5cGUsIHBhcmVudEluamVjdG9yIHx8IEluamVjdG9yLk5VTEwsIHRoaXMuX2Jvb3RzdHJhcENvbXBvbmVudHMsIGRlZik7XG4gICAgfTtcbiAgICByZXR1cm4gTmdNb2R1bGVGYWN0b3J5Xztcbn0oTmdNb2R1bGVGYWN0b3J5KSk7XG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICovXG5cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIE1ldGFkYXRhIHJlcHJlc2VudGluZyB0aGUgZW50cnkgb2YgYW5pbWF0aW9ucy4gSW5zdGFuY2VzIG9mIHRoaXMgaW50ZXJmYWNlIGFyZSBwcm92aWRlZCB2aWEgdGhlXG4gKiBhbmltYXRpb24gRFNMIHdoZW4gdGhlIHtcXEBsaW5rIHRyaWdnZXIgdHJpZ2dlciBhbmltYXRpb24gZnVuY3Rpb259IGlzIGNhbGxlZC5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogTWV0YWRhdGEgcmVwcmVzZW50aW5nIHRoZSBlbnRyeSBvZiBhbmltYXRpb25zLiBJbnN0YW5jZXMgb2YgdGhpcyBpbnRlcmZhY2UgYXJlIHByb3ZpZGVkIHZpYSB0aGVcbiAqIGFuaW1hdGlvbiBEU0wgd2hlbiB0aGUge1xcQGxpbmsgc3RhdGUgc3RhdGUgYW5pbWF0aW9uIGZ1bmN0aW9ufSBpcyBjYWxsZWQuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIE1ldGFkYXRhIHJlcHJlc2VudGluZyB0aGUgZW50cnkgb2YgYW5pbWF0aW9ucy4gSW5zdGFuY2VzIG9mIHRoaXMgaW50ZXJmYWNlIGFyZSBwcm92aWRlZCB2aWEgdGhlXG4gKiBhbmltYXRpb24gRFNMIHdoZW4gdGhlIHtcXEBsaW5rIHRyYW5zaXRpb24gdHJhbnNpdGlvbiBhbmltYXRpb24gZnVuY3Rpb259IGlzIGNhbGxlZC5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBNZXRhZGF0YSByZXByZXNlbnRpbmcgdGhlIGVudHJ5IG9mIGFuaW1hdGlvbnMuIEluc3RhbmNlcyBvZiB0aGlzIGludGVyZmFjZSBhcmUgcHJvdmlkZWQgdmlhIHRoZVxuICogYW5pbWF0aW9uIERTTCB3aGVuIHRoZSB7XFxAbGluayBrZXlmcmFtZXMga2V5ZnJhbWVzIGFuaW1hdGlvbiBmdW5jdGlvbn0gaXMgY2FsbGVkLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBNZXRhZGF0YSByZXByZXNlbnRpbmcgdGhlIGVudHJ5IG9mIGFuaW1hdGlvbnMuIEluc3RhbmNlcyBvZiB0aGlzIGludGVyZmFjZSBhcmUgcHJvdmlkZWQgdmlhIHRoZVxuICogYW5pbWF0aW9uIERTTCB3aGVuIHRoZSB7XFxAbGluayBzdHlsZSBzdHlsZSBhbmltYXRpb24gZnVuY3Rpb259IGlzIGNhbGxlZC5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogTWV0YWRhdGEgcmVwcmVzZW50aW5nIHRoZSBlbnRyeSBvZiBhbmltYXRpb25zLiBJbnN0YW5jZXMgb2YgdGhpcyBpbnRlcmZhY2UgYXJlIHByb3ZpZGVkIHZpYSB0aGVcbiAqIGFuaW1hdGlvbiBEU0wgd2hlbiB0aGUge1xcQGxpbmsgYW5pbWF0ZSBhbmltYXRlIGFuaW1hdGlvbiBmdW5jdGlvbn0gaXMgY2FsbGVkLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBNZXRhZGF0YSByZXByZXNlbnRpbmcgdGhlIGVudHJ5IG9mIGFuaW1hdGlvbnMuIEluc3RhbmNlcyBvZiB0aGlzIGludGVyZmFjZSBhcmUgcHJvdmlkZWQgdmlhIHRoZVxuICogYW5pbWF0aW9uIERTTCB3aGVuIHRoZSB7XFxAbGluayBhbmltYXRlQ2hpbGQgYW5pbWF0ZUNoaWxkIGFuaW1hdGlvbiBmdW5jdGlvbn0gaXMgY2FsbGVkLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBNZXRhZGF0YSByZXByZXNlbnRpbmcgdGhlIGVudHJ5IG9mIGFuaW1hdGlvbnMuIEluc3RhbmNlcyBvZiB0aGlzIGludGVyZmFjZSBhcmUgcHJvdmlkZWQgdmlhIHRoZVxuICogYW5pbWF0aW9uIERTTCB3aGVuIHRoZSB7XFxAbGluayB1c2VBbmltYXRpb24gdXNlQW5pbWF0aW9uIGFuaW1hdGlvbiBmdW5jdGlvbn0gaXMgY2FsbGVkLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBNZXRhZGF0YSByZXByZXNlbnRpbmcgdGhlIGVudHJ5IG9mIGFuaW1hdGlvbnMuIEluc3RhbmNlcyBvZiB0aGlzIGludGVyZmFjZSBhcmUgcHJvdmlkZWQgdmlhIHRoZVxuICogYW5pbWF0aW9uIERTTCB3aGVuIHRoZSB7XFxAbGluayBzZXF1ZW5jZSBzZXF1ZW5jZSBhbmltYXRpb24gZnVuY3Rpb259IGlzIGNhbGxlZC5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogTWV0YWRhdGEgcmVwcmVzZW50aW5nIHRoZSBlbnRyeSBvZiBhbmltYXRpb25zLiBJbnN0YW5jZXMgb2YgdGhpcyBpbnRlcmZhY2UgYXJlIHByb3ZpZGVkIHZpYSB0aGVcbiAqIGFuaW1hdGlvbiBEU0wgd2hlbiB0aGUge1xcQGxpbmsgZ3JvdXAgZ3JvdXAgYW5pbWF0aW9uIGZ1bmN0aW9ufSBpcyBjYWxsZWQuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIE1ldGFkYXRhIHJlcHJlc2VudGluZyB0aGUgZW50cnkgb2YgYW5pbWF0aW9ucy4gSW5zdGFuY2VzIG9mIHRoaXMgaW50ZXJmYWNlIGFyZSBwcm92aWRlZCB2aWEgdGhlXG4gKiBhbmltYXRpb24gRFNMIHdoZW4gdGhlIHtcXEBsaW5rIHN0YWdnZXIgc3RhZ2dlciBhbmltYXRpb24gZnVuY3Rpb259IGlzIGNhbGxlZC5cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogYHRyaWdnZXJgIGlzIGFuIGFuaW1hdGlvbi1zcGVjaWZpYyBmdW5jdGlvbiB0aGF0IGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgaW5zaWRlIG9mIEFuZ3VsYXInc1xuICogYW5pbWF0aW9uIERTTCBsYW5ndWFnZS4gSWYgdGhpcyBpbmZvcm1hdGlvbiBpcyBuZXcsIHBsZWFzZSBuYXZpZ2F0ZSB0byB0aGVcbiAqIHtcXEBsaW5rIENvbXBvbmVudCNhbmltYXRpb25zIGNvbXBvbmVudCBhbmltYXRpb25zIG1ldGFkYXRhIHBhZ2V9IHRvIGdhaW4gYSBiZXR0ZXJcbiAqIHVuZGVyc3RhbmRpbmcgb2YgaG93IGFuaW1hdGlvbnMgaW4gQW5ndWxhciBhcmUgdXNlZC5cbiAqXG4gKiBgdHJpZ2dlcmAgQ3JlYXRlcyBhbiBhbmltYXRpb24gdHJpZ2dlciB3aGljaCB3aWxsIGEgbGlzdCBvZiB7XFxAbGluayBzdGF0ZSBzdGF0ZX0gYW5kXG4gKiB7XFxAbGluayB0cmFuc2l0aW9uIHRyYW5zaXRpb259IGVudHJpZXMgdGhhdCB3aWxsIGJlIGV2YWx1YXRlZCB3aGVuIHRoZSBleHByZXNzaW9uXG4gKiBib3VuZCB0byB0aGUgdHJpZ2dlciBjaGFuZ2VzLlxuICpcbiAqIFRyaWdnZXJzIGFyZSByZWdpc3RlcmVkIHdpdGhpbiB0aGUgY29tcG9uZW50IGFubm90YXRpb24gZGF0YSB1bmRlciB0aGVcbiAqIHtcXEBsaW5rIENvbXBvbmVudCNhbmltYXRpb25zIGFuaW1hdGlvbnMgc2VjdGlvbn0uIEFuIGFuaW1hdGlvbiB0cmlnZ2VyIGNhbiBiZSBwbGFjZWQgb24gYW4gZWxlbWVudFxuICogd2l0aGluIGEgdGVtcGxhdGUgYnkgcmVmZXJlbmNpbmcgdGhlIG5hbWUgb2YgdGhlIHRyaWdnZXIgZm9sbG93ZWQgYnkgdGhlIGV4cHJlc3Npb24gdmFsdWUgdGhhdFxuICogdGhlXG4gKiB0cmlnZ2VyIGlzIGJvdW5kIHRvIChpbiB0aGUgZm9ybSBvZiBgW1xcQHRyaWdnZXJOYW1lXT1cImV4cHJlc3Npb25cImAuXG4gKlxuICogQW5pbWF0aW9uIHRyaWdnZXIgYmluZGluZ3Mgc3RyaWdpZnkgdmFsdWVzIGFuZCB0aGVuIG1hdGNoIHRoZSBwcmV2aW91cyBhbmQgY3VycmVudCB2YWx1ZXMgYWdhaW5zdFxuICogYW55IGxpbmtlZCB0cmFuc2l0aW9ucy4gSWYgYSBib29sZWFuIHZhbHVlIGlzIHByb3ZpZGVkIGludG8gdGhlIHRyaWdnZXIgYmluZGluZyB0aGVuIGl0IHdpbGwgYm90aFxuICogYmUgcmVwcmVzZW50ZWQgYXMgYDFgIG9yIGB0cnVlYCBhbmQgYDBgIG9yIGBmYWxzZWAgZm9yIGEgdHJ1ZSBhbmQgZmFsc2UgYm9vbGVhbiB2YWx1ZXNcbiAqIHJlc3BlY3RpdmVseS5cbiAqXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBgdHJpZ2dlcmAgd2lsbCBjcmVhdGUgYW4gYW5pbWF0aW9uIHRyaWdnZXIgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBgbmFtZWAgdmFsdWUuIFRoZVxuICogcHJvdmlkZWQgYGFuaW1hdGlvbmAgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXkgY29uc2lzdGluZyBvZiB7XFxAbGluayBzdGF0ZSBzdGF0ZX0gYW5kXG4gKiB7XFxAbGluayB0cmFuc2l0aW9uIHRyYW5zaXRpb259IGRlY2xhcmF0aW9ucy5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBcXEBDb21wb25lbnQoe1xuICogICBzZWxlY3RvcjogJ215LWNvbXBvbmVudCcsXG4gKiAgIHRlbXBsYXRlVXJsOiAnbXktY29tcG9uZW50LXRwbC5odG1sJyxcbiAqICAgYW5pbWF0aW9uczogW1xuICogICAgIHRyaWdnZXIoXCJteUFuaW1hdGlvblRyaWdnZXJcIiwgW1xuICogICAgICAgc3RhdGUoLi4uKSxcbiAqICAgICAgIHN0YXRlKC4uLiksXG4gKiAgICAgICB0cmFuc2l0aW9uKC4uLiksXG4gKiAgICAgICB0cmFuc2l0aW9uKC4uLilcbiAqICAgICBdKVxuICogICBdXG4gKiB9KVxuICogY2xhc3MgTXlDb21wb25lbnQge1xuICogICBteVN0YXR1c0V4cCA9IFwic29tZXRoaW5nXCI7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgdGVtcGxhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29tcG9uZW50IHdpbGwgbWFrZSB1c2Ugb2YgdGhlIGBteUFuaW1hdGlvblRyaWdnZXJgIGFuaW1hdGlvblxuICogdHJpZ2dlciBieSBiaW5kaW5nIHRvIGFuIGVsZW1lbnQgd2l0aGluIGl0cyB0ZW1wbGF0ZSBjb2RlLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gc29tZXdoZXJlIGluc2lkZSBvZiBteS1jb21wb25lbnQtdHBsLmh0bWwgLS0+XG4gKiA8ZGl2IFtcXEBteUFuaW1hdGlvblRyaWdnZXJdPVwibXlTdGF0dXNFeHBcIj4uLi48L2Rpdj5cbiAqIGBgYFxuICpcbiAqICMjIERpc2FibGUgQW5pbWF0aW9uc1xuICogQSBzcGVjaWFsIGFuaW1hdGlvbiBjb250cm9sIGJpbmRpbmcgY2FsbGVkIGBcXEAuZGlzYWJsZWRgIGNhbiBiZSBwbGFjZWQgb24gYW4gZWxlbWVudCB3aGljaCB3aWxsXG4gKiB0aGVuIGRpc2FibGUgYW5pbWF0aW9ucyBmb3IgYW55IGlubmVyIGFuaW1hdGlvbiB0cmlnZ2VycyBzaXR1YXRlZCB3aXRoaW4gdGhlIGVsZW1lbnQgYXMgd2VsbCBhc1xuICogYW55IGFuaW1hdGlvbnMgb24gdGhlIGVsZW1lbnQgaXRzZWxmLlxuICpcbiAqIFdoZW4gdHJ1ZSwgdGhlIGBcXEAuZGlzYWJsZWRgIGJpbmRpbmcgd2lsbCBwcmV2ZW50IGFsbCBhbmltYXRpb25zIGZyb20gcmVuZGVyaW5nLiBUaGUgZXhhbXBsZVxuICogYmVsb3cgc2hvd3MgaG93IHRvIHVzZSB0aGlzIGZlYXR1cmU6XG4gKlxuICogYGBgdHNcbiAqIFxcQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAnbXktY29tcG9uZW50JyxcbiAqICAgdGVtcGxhdGU6IGBcbiAqICAgICA8ZGl2IFtcXEAuZGlzYWJsZWRdPVwiaXNEaXNhYmxlZFwiPlxuICogICAgICAgPGRpdiBbXFxAY2hpbGRBbmltYXRpb25dPVwiZXhwXCI+PC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIGAsXG4gKiAgIGFuaW1hdGlvbnM6IFtcbiAqICAgICB0cmlnZ2VyKFwiY2hpbGRBbmltYXRpb25cIiwgW1xuICogICAgICAgLy8gLi4uXG4gKiAgICAgXSlcbiAqICAgXVxuICogfSlcbiAqIGNsYXNzIE15Q29tcG9uZW50IHtcbiAqICAgaXNEaXNhYmxlZCA9IHRydWU7XG4gKiAgIGV4cCA9ICcuLi4nO1xuICogfVxuICogYGBgXG4gKlxuICogVGhlIGBcXEBjaGlsZEFuaW1hdGlvbmAgdHJpZ2dlciB3aWxsIG5vdCBhbmltYXRlIGJlY2F1c2UgYFxcQC5kaXNhYmxlZGAgcHJldmVudHMgaXQgZnJvbSBoYXBwZW5pbmdcbiAqICh3aGVuIHRydWUpLlxuICpcbiAqIE5vdGUgdGhhdCBgXFxALmRpc2JsZWRgIHdpbGwgb25seSBkaXNhYmxlIGFsbCBhbmltYXRpb25zICh0aGlzIG1lYW5zIGFueSBhbmltYXRpb25zIHJ1bm5pbmcgb25cbiAqIHRoZSBzYW1lIGVsZW1lbnQgd2lsbCBhbHNvIGJlIGRpc2FibGVkKS5cbiAqXG4gKiAjIyMgRGlzYWJsaW5nIEFuaW1hdGlvbnMgQXBwbGljYXRpb24td2lkZVxuICogV2hlbiBhbiBhcmVhIG9mIHRoZSB0ZW1wbGF0ZSBpcyBzZXQgdG8gaGF2ZSBhbmltYXRpb25zIGRpc2FibGVkLCAqKmFsbCoqIGlubmVyIGNvbXBvbmVudHMgd2lsbFxuICogYWxzbyBoYXZlIHRoZWlyIGFuaW1hdGlvbnMgZGlzYWJsZWQgYXMgd2VsbC4gVGhpcyBtZWFucyB0aGF0IGFsbCBhbmltYXRpb25zIGZvciBhbiBhbmd1bGFyXG4gKiBhcHBsaWNhdGlvbiBjYW4gYmUgZGlzYWJsZWQgYnkgcGxhY2luZyBhIGhvc3QgYmluZGluZyBzZXQgb24gYFxcQC5kaXNhYmxlZGAgb24gdGhlIHRvcG1vc3QgQW5ndWxhclxuICogY29tcG9uZW50LlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQge0NvbXBvbmVudCwgSG9zdEJpbmRpbmd9IGZyb20gJ1xcQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogXFxAQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICdhcHAtY29tcG9uZW50JyxcbiAqICAgdGVtcGxhdGVVcmw6ICdhcHAuY29tcG9uZW50Lmh0bWwnLFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgIFxcQEhvc3RCaW5kaW5nKCdcXEAuZGlzYWJsZWQnKVxuICogICBwdWJsaWMgYW5pbWF0aW9uc0Rpc2FibGVkID0gdHJ1ZTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIyBXaGF0IGFib3V0IGFuaW1hdGlvbnMgdGhhdCB1cyBgcXVlcnkoKWAgYW5kIGBhbmltYXRlQ2hpbGQoKWA/XG4gKiBEZXNwaXRlIGlubmVyIGFuaW1hdGlvbnMgYmVpbmcgZGlzYWJsZWQsIGEgcGFyZW50IGFuaW1hdGlvbiBjYW4ge1xcQGxpbmsgcXVlcnkgcXVlcnl9IGZvciBpbm5lclxuICogZWxlbWVudHMgbG9jYXRlZCBpbiBkaXNhYmxlZCBhcmVhcyBvZiB0aGUgdGVtcGxhdGUgYW5kIHN0aWxsIGFuaW1hdGUgdGhlbSBhcyBpdCBzZWVzIGZpdC4gVGhpcyBpc1xuICogYWxzbyB0aGUgY2FzZSBmb3Igd2hlbiBhIHN1YiBhbmltYXRpb24gaXMgcXVlcmllZCBieSBhIHBhcmVudCBhbmQgdGhlbiBsYXRlciBhbmltYXRlZCB1c2luZyB7XFxAbGlua1xuICogYW5pbWF0ZUNoaWxkIGFuaW1hdGVDaGlsZH0uXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHBhcmFtIHs/fSBkZWZpbml0aW9uc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdHJpZ2dlciQxKG5hbWUsIGRlZmluaXRpb25zKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogNyAvKiBUcmlnZ2VyICovLCBuYW1lOiBuYW1lLCBkZWZpbml0aW9uczogZGVmaW5pdGlvbnMsIG9wdGlvbnM6IHt9IH07XG59XG4vKipcbiAqIGBhbmltYXRlYCBpcyBhbiBhbmltYXRpb24tc3BlY2lmaWMgZnVuY3Rpb24gdGhhdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBBbmd1bGFyJ3NcbiAqIGFuaW1hdGlvbiBEU0wgbGFuZ3VhZ2UuIElmIHRoaXMgaW5mb3JtYXRpb24gaXMgbmV3LCBwbGVhc2UgbmF2aWdhdGUgdG8gdGhlIHtcXEBsaW5rXG4gKiBDb21wb25lbnQjYW5pbWF0aW9ucyBjb21wb25lbnQgYW5pbWF0aW9ucyBtZXRhZGF0YSBwYWdlfSB0byBnYWluIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2ZcbiAqIGhvdyBhbmltYXRpb25zIGluIEFuZ3VsYXIgYXJlIHVzZWQuXG4gKlxuICogYGFuaW1hdGVgIHNwZWNpZmllcyBhbiBhbmltYXRpb24gc3RlcCB0aGF0IHdpbGwgYXBwbHkgdGhlIHByb3ZpZGVkIGBzdHlsZXNgIGRhdGEgZm9yIGEgZ2l2ZW5cbiAqIGFtb3VudCBvZiB0aW1lIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBgdGltaW5nYCBleHByZXNzaW9uIHZhbHVlLiBDYWxscyB0byBgYW5pbWF0ZWAgYXJlIGV4cGVjdGVkXG4gKiB0byBiZSB1c2VkIHdpdGhpbiB7XFxAbGluayBzZXF1ZW5jZSBhbiBhbmltYXRpb24gc2VxdWVuY2V9LCB7XFxAbGluayBncm91cCBncm91cH0sIG9yIHtcXEBsaW5rXG4gKiB0cmFuc2l0aW9uIHRyYW5zaXRpb259LlxuICpcbiAqICMjIyBVc2FnZVxuICpcbiAqIFRoZSBgYW5pbWF0ZWAgZnVuY3Rpb24gYWNjZXB0cyB0d28gaW5wdXQgcGFyYW1ldGVyczogYHRpbWluZ2AgYW5kIGBzdHlsZXNgOlxuICpcbiAqIC0gYHRpbWluZ2AgaXMgYSBzdHJpbmcgYmFzZWQgdmFsdWUgdGhhdCBjYW4gYmUgYSBjb21iaW5hdGlvbiBvZiBhIGR1cmF0aW9uIHdpdGggb3B0aW9uYWwgZGVsYXlcbiAqIGFuZCBlYXNpbmcgdmFsdWVzLiBUaGUgZm9ybWF0IGZvciB0aGUgZXhwcmVzc2lvbiBicmVha3MgZG93biB0byBgZHVyYXRpb24gZGVsYXkgZWFzaW5nYFxuICogKHRoZXJlZm9yZSBhIHZhbHVlIHN1Y2ggYXMgYDFzIDEwMG1zIGVhc2Utb3V0YCB3aWxsIGJlIHBhcnNlIGl0c2VsZiBpbnRvIGBkdXJhdGlvbj0xMDAwLFxuICogZGVsYXk9MTAwLCBlYXNpbmc9ZWFzZS1vdXRgLiBJZiBhIG51bWVyaWMgdmFsdWUgaXMgcHJvdmlkZWQgdGhlbiB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGVcbiAqIGBkdXJhdGlvbmAgdmFsdWUgaW4gbWlsbGlzZWNvbmQgZm9ybS5cbiAqIC0gYHN0eWxlc2AgaXMgdGhlIHN0eWxlIGlucHV0IGRhdGEgd2hpY2ggY2FuIGVpdGhlciBiZSBhIGNhbGwgdG8ge1xcQGxpbmsgc3R5bGUgc3R5bGV9IG9yIHtcXEBsaW5rXG4gKiBrZXlmcmFtZXMga2V5ZnJhbWVzfS4gSWYgbGVmdCBlbXB0eSB0aGVuIHRoZSBzdHlsZXMgZnJvbSB0aGUgZGVzdGluYXRpb24gc3RhdGUgd2lsbCBiZSBjb2xsZWN0ZWRcbiAqIGFuZCB1c2VkICh0aGlzIGlzIHVzZWZ1bCB3aGVuIGRlc2NyaWJpbmcgYW4gYW5pbWF0aW9uIHN0ZXAgdGhhdCB3aWxsIGNvbXBsZXRlIGFuIGFuaW1hdGlvbiBieVxuICoge1xcQGxpbmsgdHJhbnNpdGlvbiN0aGUtZmluYWwtYW5pbWF0ZS1jYWxsIGFuaW1hdGluZyB0byB0aGUgZmluYWwgc3RhdGV9KS5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyB2YXJpb3VzIGZ1bmN0aW9ucyBmb3Igc3BlY2lmeWluZyB0aW1pbmcgZGF0YVxuICogYW5pbWF0ZSg1MDAsIHN0eWxlKC4uLikpXG4gKiBhbmltYXRlKFwiMXNcIiwgc3R5bGUoLi4uKSlcbiAqIGFuaW1hdGUoXCIxMDBtcyAwLjVzXCIsIHN0eWxlKC4uLikpXG4gKiBhbmltYXRlKFwiNXMgZWFzZVwiLCBzdHlsZSguLi4pKVxuICogYW5pbWF0ZShcIjVzIDEwbXMgY3ViaWMtYmV6aWVyKC4xNywuNjcsLjg4LC4xKVwiLCBzdHlsZSguLi4pKVxuICpcbiAqIC8vIGVpdGhlciBzdHlsZSgpIG9mIGtleWZyYW1lcygpIGNhbiBiZSB1c2VkXG4gKiBhbmltYXRlKDUwMCwgc3R5bGUoeyBiYWNrZ3JvdW5kOiBcInJlZFwiIH0pKVxuICogYW5pbWF0ZSg1MDAsIGtleWZyYW1lcyhbXG4gKiAgIHN0eWxlKHsgYmFja2dyb3VuZDogXCJibHVlXCIgfSkpLFxuICogICBzdHlsZSh7IGJhY2tncm91bmQ6IFwicmVkXCIgfSkpXG4gKiBdKVxuICogYGBgXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9hbmltYXRpb24vdHMvZHNsL2FuaW1hdGlvbl9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHBhcmFtIHs/fSB0aW1pbmdzXG4gKiBAcGFyYW0gez89fSBzdHlsZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUkMSh0aW1pbmdzLCBzdHlsZXMpIHtcbiAgICBpZiAoc3R5bGVzID09PSB2b2lkIDApIHsgc3R5bGVzID0gbnVsbDsgfVxuICAgIHJldHVybiB7IHR5cGU6IDQgLyogQW5pbWF0ZSAqLywgc3R5bGVzOiBzdHlsZXMsIHRpbWluZ3M6IHRpbWluZ3MgfTtcbn1cbi8qKlxuICogYGdyb3VwYCBpcyBhbiBhbmltYXRpb24tc3BlY2lmaWMgZnVuY3Rpb24gdGhhdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBBbmd1bGFyJ3NcbiAqIGFuaW1hdGlvbiBEU0wgbGFuZ3VhZ2UuIElmIHRoaXMgaW5mb3JtYXRpb24gaXMgbmV3LCBwbGVhc2UgbmF2aWdhdGUgdG8gdGhlIHtcXEBsaW5rXG4gKiBDb21wb25lbnQjYW5pbWF0aW9ucyBjb21wb25lbnQgYW5pbWF0aW9ucyBtZXRhZGF0YSBwYWdlfSB0byBnYWluIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2ZcbiAqIGhvdyBhbmltYXRpb25zIGluIEFuZ3VsYXIgYXJlIHVzZWQuXG4gKlxuICogYGdyb3VwYCBzcGVjaWZpZXMgYSBsaXN0IG9mIGFuaW1hdGlvbiBzdGVwcyB0aGF0IGFyZSBhbGwgcnVuIGluIHBhcmFsbGVsLiBHcm91cGVkIGFuaW1hdGlvbnMgYXJlXG4gKiB1c2VmdWwgd2hlbiBhIHNlcmllcyBvZiBzdHlsZXMgbXVzdCBiZSBhbmltYXRlZC9jbG9zZWQgb2ZmIGF0IGRpZmZlcmVudCBzdGFydGluZy9lbmRpbmcgdGltZXMuXG4gKlxuICogVGhlIGBncm91cGAgZnVuY3Rpb24gY2FuIGVpdGhlciBiZSB1c2VkIHdpdGhpbiBhIHtcXEBsaW5rIHNlcXVlbmNlIHNlcXVlbmNlfSBvciBhIHtcXEBsaW5rIHRyYW5zaXRpb25cbiAqIHRyYW5zaXRpb259IGFuZCBpdCB3aWxsIG9ubHkgY29udGludWUgdG8gdGhlIG5leHQgaW5zdHJ1Y3Rpb24gb25jZSBhbGwgb2YgdGhlIGlubmVyIGFuaW1hdGlvblxuICogc3RlcHMgaGF2ZSBjb21wbGV0ZWQuXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogVGhlIGBzdGVwc2AgZGF0YSB0aGF0IGlzIHBhc3NlZCBpbnRvIHRoZSBgZ3JvdXBgIGFuaW1hdGlvbiBmdW5jdGlvbiBjYW4gZWl0aGVyIGNvbnNpc3Qgb2Yge1xcQGxpbmtcbiAqIHN0eWxlIHN0eWxlfSBvciB7XFxAbGluayBhbmltYXRlIGFuaW1hdGV9IGZ1bmN0aW9uIGNhbGxzLiBFYWNoIGNhbGwgdG8gYHN0eWxlKClgIG9yIGBhbmltYXRlKClgXG4gKiB3aXRoaW4gYSBncm91cCB3aWxsIGJlIGV4ZWN1dGVkIGluc3RhbnRseSAodXNlIHtcXEBsaW5rIGtleWZyYW1lcyBrZXlmcmFtZXN9IG9yIGEge1xcQGxpbmtcbiAqIGFuaW1hdGUjdXNhZ2UgYW5pbWF0ZSgpIHdpdGggYSBkZWxheSB2YWx1ZX0gdG8gb2Zmc2V0IHN0eWxlcyB0byBiZSBhcHBsaWVkIGF0IGEgbGF0ZXIgdGltZSkuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogZ3JvdXAoW1xuICogICBhbmltYXRlKFwiMXNcIiwgeyBiYWNrZ3JvdW5kOiBcImJsYWNrXCIgfSkpXG4gKiAgIGFuaW1hdGUoXCIyc1wiLCB7IGNvbG9yOiBcIndoaXRlXCIgfSkpXG4gKiBdKVxuICogYGBgXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9hbmltYXRpb24vdHMvZHNsL2FuaW1hdGlvbl9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHBhcmFtIHs/fSBzdGVwc1xuICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gZ3JvdXAkMShzdGVwcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IG51bGw7IH1cbiAgICByZXR1cm4geyB0eXBlOiAzIC8qIEdyb3VwICovLCBzdGVwczogc3RlcHMsIG9wdGlvbnM6IG9wdGlvbnMgfTtcbn1cbi8qKlxuICogYHNlcXVlbmNlYCBpcyBhbiBhbmltYXRpb24tc3BlY2lmaWMgZnVuY3Rpb24gdGhhdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBBbmd1bGFyJ3NcbiAqIGFuaW1hdGlvbiBEU0wgbGFuZ3VhZ2UuIElmIHRoaXMgaW5mb3JtYXRpb24gaXMgbmV3LCBwbGVhc2UgbmF2aWdhdGUgdG8gdGhlIHtcXEBsaW5rXG4gKiBDb21wb25lbnQjYW5pbWF0aW9ucyBjb21wb25lbnQgYW5pbWF0aW9ucyBtZXRhZGF0YSBwYWdlfSB0byBnYWluIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2ZcbiAqIGhvdyBhbmltYXRpb25zIGluIEFuZ3VsYXIgYXJlIHVzZWQuXG4gKlxuICogYHNlcXVlbmNlYCBTcGVjaWZpZXMgYSBsaXN0IG9mIGFuaW1hdGlvbiBzdGVwcyB0aGF0IGFyZSBydW4gb25lIGJ5IG9uZS4gKGBzZXF1ZW5jZWAgaXMgdXNlZCBieVxuICogZGVmYXVsdCB3aGVuIGFuIGFycmF5IGlzIHBhc3NlZCBhcyBhbmltYXRpb24gZGF0YSBpbnRvIHtcXEBsaW5rIHRyYW5zaXRpb24gdHJhbnNpdGlvbn0uKVxuICpcbiAqIFRoZSBgc2VxdWVuY2VgIGZ1bmN0aW9uIGNhbiBlaXRoZXIgYmUgdXNlZCB3aXRoaW4gYSB7XFxAbGluayBncm91cCBncm91cH0gb3IgYSB7XFxAbGluayB0cmFuc2l0aW9uXG4gKiB0cmFuc2l0aW9ufSBhbmQgaXQgd2lsbCBvbmx5IGNvbnRpbnVlIHRvIHRoZSBuZXh0IGluc3RydWN0aW9uIG9uY2UgZWFjaCBvZiB0aGUgaW5uZXIgYW5pbWF0aW9uXG4gKiBzdGVwcyBoYXZlIGNvbXBsZXRlZC5cbiAqXG4gKiBUbyBwZXJmb3JtIGFuaW1hdGlvbiBzdHlsaW5nIGluIHBhcmFsbGVsIHdpdGggb3RoZXIgYW5pbWF0aW9uIHN0ZXBzIHRoZW4gaGF2ZSBhIGxvb2sgYXQgdGhlXG4gKiB7XFxAbGluayBncm91cCBncm91cH0gYW5pbWF0aW9uIGZ1bmN0aW9uLlxuICpcbiAqICMjIyBVc2FnZVxuICpcbiAqIFRoZSBgc3RlcHNgIGRhdGEgdGhhdCBpcyBwYXNzZWQgaW50byB0aGUgYHNlcXVlbmNlYCBhbmltYXRpb24gZnVuY3Rpb24gY2FuIGVpdGhlciBjb25zaXN0IG9mXG4gKiB7XFxAbGluayBzdHlsZSBzdHlsZX0gb3Ige1xcQGxpbmsgYW5pbWF0ZSBhbmltYXRlfSBmdW5jdGlvbiBjYWxscy4gQSBjYWxsIHRvIGBzdHlsZSgpYCB3aWxsIGFwcGx5IHRoZVxuICogcHJvdmlkZWQgc3R5bGluZyBkYXRhIGltbWVkaWF0ZWx5IHdoaWxlIGEgY2FsbCB0byBgYW5pbWF0ZSgpYCB3aWxsIGFwcGx5IGl0cyBzdHlsaW5nIGRhdGEgb3ZlciBhXG4gKiBnaXZlbiB0aW1lIGRlcGVuZGluZyBvbiBpdHMgdGltaW5nIGRhdGEuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogc2VxdWVuY2UoW1xuICogICBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICogICBhbmltYXRlKFwiMXNcIiwgeyBvcGFjaXR5OiAxIH0pKVxuICogXSlcbiAqIGBgYFxuICpcbiAqIHtcXEBleGFtcGxlIGNvcmUvYW5pbWF0aW9uL3RzL2RzbC9hbmltYXRpb25fZXhhbXBsZS50cyByZWdpb249J0NvbXBvbmVudCd9XG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEBwYXJhbSB7P30gc3RlcHNcbiAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNlcXVlbmNlJDEoc3RlcHMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBudWxsOyB9XG4gICAgcmV0dXJuIHsgdHlwZTogMiAvKiBTZXF1ZW5jZSAqLywgc3RlcHM6IHN0ZXBzLCBvcHRpb25zOiBvcHRpb25zIH07XG59XG4vKipcbiAqIGBzdHlsZWAgaXMgYW4gYW5pbWF0aW9uLXNwZWNpZmljIGZ1bmN0aW9uIHRoYXQgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCBpbnNpZGUgb2YgQW5ndWxhcidzXG4gKiBhbmltYXRpb24gRFNMIGxhbmd1YWdlLiBJZiB0aGlzIGluZm9ybWF0aW9uIGlzIG5ldywgcGxlYXNlIG5hdmlnYXRlIHRvIHRoZSB7XFxAbGlua1xuICogQ29tcG9uZW50I2FuaW1hdGlvbnMgY29tcG9uZW50IGFuaW1hdGlvbnMgbWV0YWRhdGEgcGFnZX0gdG8gZ2FpbiBhIGJldHRlciB1bmRlcnN0YW5kaW5nIG9mXG4gKiBob3cgYW5pbWF0aW9ucyBpbiBBbmd1bGFyIGFyZSB1c2VkLlxuICpcbiAqIGBzdHlsZWAgZGVjbGFyZXMgYSBrZXkvdmFsdWUgb2JqZWN0IGNvbnRhaW5pbmcgQ1NTIHByb3BlcnRpZXMvc3R5bGVzIHRoYXQgY2FuIHRoZW4gYmUgdXNlZCBmb3JcbiAqIHtcXEBsaW5rIHN0YXRlIGFuaW1hdGlvbiBzdGF0ZXN9LCB3aXRoaW4gYW4ge1xcQGxpbmsgc2VxdWVuY2UgYW5pbWF0aW9uIHNlcXVlbmNlfSwgb3IgYXMgc3R5bGluZyBkYXRhXG4gKiBmb3IgYm90aCB7XFxAbGluayBhbmltYXRlIGFuaW1hdGV9IGFuZCB7XFxAbGluayBrZXlmcmFtZXMga2V5ZnJhbWVzfS5cbiAqXG4gKiAjIyMgVXNhZ2VcbiAqXG4gKiBgc3R5bGVgIHRha2VzIGluIGEga2V5L3ZhbHVlIHN0cmluZyBtYXAgYXMgZGF0YSBhbmQgZXhwZWN0cyBvbmUgb3IgbW9yZSBDU1MgcHJvcGVydHkvdmFsdWUgcGFpcnNcbiAqIHRvIGJlIGRlZmluZWQuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gc3RyaW5nIHZhbHVlcyBhcmUgdXNlZCBmb3IgY3NzIHByb3BlcnRpZXNcbiAqIHN0eWxlKHsgYmFja2dyb3VuZDogXCJyZWRcIiwgY29sb3I6IFwiYmx1ZVwiIH0pXG4gKlxuICogLy8gbnVtZXJpY2FsIChwaXhlbCkgdmFsdWVzIGFyZSBhbHNvIHN1cHBvcnRlZFxuICogc3R5bGUoeyB3aWR0aDogMTAwLCBoZWlnaHQ6IDAgfSlcbiAqIGBgYFxuICpcbiAqICMjIyMgQXV0by1zdHlsZXMgKHVzaW5nIGAqYClcbiAqXG4gKiBXaGVuIGFuIGFzdGVyaXggKGAqYCkgY2hhcmFjdGVyIGlzIHVzZWQgYXMgYSB2YWx1ZSB0aGVuIGl0IHdpbGwgYmUgZGV0ZWN0ZWQgZnJvbSB0aGUgZWxlbWVudFxuICogYmVpbmcgYW5pbWF0ZWQgYW5kIGFwcGxpZWQgYXMgYW5pbWF0aW9uIGRhdGEgd2hlbiB0aGUgYW5pbWF0aW9uIHN0YXJ0cy5cbiAqXG4gKiBUaGlzIGZlYXR1cmUgcHJvdmVzIHVzZWZ1bCBmb3IgYSBzdGF0ZSBkZXBlbmRpbmcgb24gbGF5b3V0IGFuZC9vciBlbnZpcm9ubWVudCBmYWN0b3JzOyBpbiBzdWNoXG4gKiBjYXNlcyB0aGUgc3R5bGVzIGFyZSBjYWxjdWxhdGVkIGp1c3QgYmVmb3JlIHRoZSBhbmltYXRpb24gc3RhcnRzLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIHRoZSBzdGVwcyBiZWxvdyB3aWxsIGFuaW1hdGUgZnJvbSAwIHRvIHRoZVxuICogLy8gYWN0dWFsIGhlaWdodCBvZiB0aGUgZWxlbWVudFxuICogc3R5bGUoeyBoZWlnaHQ6IDAgfSksXG4gKiBhbmltYXRlKFwiMXNcIiwgc3R5bGUoeyBoZWlnaHQ6IFwiKlwiIH0pKVxuICogYGBgXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9hbmltYXRpb24vdHMvZHNsL2FuaW1hdGlvbl9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHBhcmFtIHs/fSB0b2tlbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHN0eWxlJDEodG9rZW5zKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogNiAvKiBTdHlsZSAqLywgc3R5bGVzOiB0b2tlbnMsIG9mZnNldDogbnVsbCB9O1xufVxuLyoqXG4gKiBgc3RhdGVgIGlzIGFuIGFuaW1hdGlvbi1zcGVjaWZpYyBmdW5jdGlvbiB0aGF0IGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgaW5zaWRlIG9mIEFuZ3VsYXInc1xuICogYW5pbWF0aW9uIERTTCBsYW5ndWFnZS4gSWYgdGhpcyBpbmZvcm1hdGlvbiBpcyBuZXcsIHBsZWFzZSBuYXZpZ2F0ZSB0byB0aGUge1xcQGxpbmtcbiAqIENvbXBvbmVudCNhbmltYXRpb25zIGNvbXBvbmVudCBhbmltYXRpb25zIG1ldGFkYXRhIHBhZ2V9IHRvIGdhaW4gYSBiZXR0ZXIgdW5kZXJzdGFuZGluZyBvZlxuICogaG93IGFuaW1hdGlvbnMgaW4gQW5ndWxhciBhcmUgdXNlZC5cbiAqXG4gKiBgc3RhdGVgIGRlY2xhcmVzIGFuIGFuaW1hdGlvbiBzdGF0ZSB3aXRoaW4gdGhlIGdpdmVuIHRyaWdnZXIuIFdoZW4gYSBzdGF0ZSBpcyBhY3RpdmUgd2l0aGluIGFcbiAqIGNvbXBvbmVudCB0aGVuIGl0cyBhc3NvY2lhdGVkIHN0eWxlcyB3aWxsIHBlcnNpc3Qgb24gdGhlIGVsZW1lbnQgdGhhdCB0aGUgdHJpZ2dlciBpcyBhdHRhY2hlZCB0b1xuICogKGV2ZW4gd2hlbiB0aGUgYW5pbWF0aW9uIGVuZHMpLlxuICpcbiAqIFRvIGFuaW1hdGUgYmV0d2VlbiBzdGF0ZXMsIGhhdmUgYSBsb29rIGF0IHRoZSBhbmltYXRpb24ge1xcQGxpbmsgdHJhbnNpdGlvbiB0cmFuc2l0aW9ufSBEU0xcbiAqIGZ1bmN0aW9uLiBUbyByZWdpc3RlciBzdGF0ZXMgdG8gYW4gYW5pbWF0aW9uIHRyaWdnZXIgcGxlYXNlIGhhdmUgYSBsb29rIGF0IHRoZSB7XFxAbGluayB0cmlnZ2VyXG4gKiB0cmlnZ2VyfSBmdW5jdGlvbi5cbiAqXG4gKiAjIyMjIFRoZSBgdm9pZGAgc3RhdGVcbiAqXG4gKiBUaGUgYHZvaWRgIHN0YXRlIHZhbHVlIGlzIGEgcmVzZXJ2ZWQgd29yZCB0aGF0IGFuZ3VsYXIgdXNlcyB0byBkZXRlcm1pbmUgd2hlbiB0aGUgZWxlbWVudCBpcyBub3RcbiAqIGFwYXJ0IG9mIHRoZSBhcHBsaWNhdGlvbiBhbnltb3JlIChlLmcuIHdoZW4gYW4gYG5nSWZgIGV2YWx1YXRlcyB0byBmYWxzZSB0aGVuIHRoZSBzdGF0ZSBvZiB0aGVcbiAqIGFzc29jaWF0ZWQgZWxlbWVudCBpcyB2b2lkKS5cbiAqXG4gKiAjIyMjIFRoZSBgKmAgKGRlZmF1bHQpIHN0YXRlXG4gKlxuICogVGhlIGAqYCBzdGF0ZSAod2hlbiBzdHlsZWQpIGlzIGEgZmFsbGJhY2sgc3RhdGUgdGhhdCB3aWxsIGJlIHVzZWQgaWYgdGhlIHN0YXRlIHRoYXQgaXMgYmVpbmdcbiAqIGFuaW1hdGVkIGlzIG5vdCBkZWNsYXJlZCB3aXRoaW4gdGhlIHRyaWdnZXIuXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogYHN0YXRlYCB3aWxsIGRlY2xhcmUgYW4gYW5pbWF0aW9uIHN0YXRlIHdpdGggaXRzIGFzc29jaWF0ZWQgc3R5bGVzXG4gKiB3aXRoaW4gdGhlIGdpdmVuIHRyaWdnZXIuXG4gKlxuICogLSBgc3RhdGVOYW1lRXhwcmAgY2FuIGJlIG9uZSBvciBtb3JlIHN0YXRlIG5hbWVzIHNlcGFyYXRlZCBieSBjb21tYXMuXG4gKiAtIGBzdHlsZXNgIHJlZmVycyB0byB0aGUge1xcQGxpbmsgc3R5bGUgc3R5bGluZyBkYXRhfSB0aGF0IHdpbGwgYmUgcGVyc2lzdGVkIG9uIHRoZSBlbGVtZW50IG9uY2VcbiAqIHRoZSBzdGF0ZSBoYXMgYmVlbiByZWFjaGVkLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIFwidm9pZFwiIGlzIGEgcmVzZXJ2ZWQgbmFtZSBmb3IgYSBzdGF0ZSBhbmQgaXMgdXNlZCB0byByZXByZXNlbnRcbiAqIC8vIHRoZSBzdGF0ZSBpbiB3aGljaCBhbiBlbGVtZW50IGlzIGRldGFjaGVkIGZyb20gZnJvbSB0aGUgYXBwbGljYXRpb24uXG4gKiBzdGF0ZShcInZvaWRcIiwgc3R5bGUoeyBoZWlnaHQ6IDAgfSkpXG4gKlxuICogLy8gdXNlci1kZWZpbmVkIHN0YXRlc1xuICogc3RhdGUoXCJjbG9zZWRcIiwgc3R5bGUoeyBoZWlnaHQ6IDAgfSkpXG4gKiBzdGF0ZShcIm9wZW4sIHZpc2libGVcIiwgc3R5bGUoeyBoZWlnaHQ6IFwiKlwiIH0pKVxuICogYGBgXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9hbmltYXRpb24vdHMvZHNsL2FuaW1hdGlvbl9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHBhcmFtIHs/fSBuYW1lXG4gKiBAcGFyYW0gez99IHN0eWxlc1xuICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gc3RhdGUkMShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4geyB0eXBlOiAwIC8qIFN0YXRlICovLCBuYW1lOiBuYW1lLCBzdHlsZXM6IHN0eWxlcywgb3B0aW9uczogb3B0aW9ucyB9O1xufVxuLyoqXG4gKiBga2V5ZnJhbWVzYCBpcyBhbiBhbmltYXRpb24tc3BlY2lmaWMgZnVuY3Rpb24gdGhhdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBBbmd1bGFyJ3NcbiAqIGFuaW1hdGlvbiBEU0wgbGFuZ3VhZ2UuIElmIHRoaXMgaW5mb3JtYXRpb24gaXMgbmV3LCBwbGVhc2UgbmF2aWdhdGUgdG8gdGhlIHtcXEBsaW5rXG4gKiBDb21wb25lbnQjYW5pbWF0aW9ucyBjb21wb25lbnQgYW5pbWF0aW9ucyBtZXRhZGF0YSBwYWdlfSB0byBnYWluIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2ZcbiAqIGhvdyBhbmltYXRpb25zIGluIEFuZ3VsYXIgYXJlIHVzZWQuXG4gKlxuICogYGtleWZyYW1lc2Agc3BlY2lmaWVzIGEgY29sbGVjdGlvbiBvZiB7XFxAbGluayBzdHlsZSBzdHlsZX0gZW50cmllcyBlYWNoIG9wdGlvbmFsbHkgY2hhcmFjdGVyaXplZFxuICogYnkgYW4gYG9mZnNldGAgdmFsdWUuXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogVGhlIGBrZXlmcmFtZXNgIGFuaW1hdGlvbiBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGFsb25nc2lkZSB0aGUge1xcQGxpbmsgYW5pbWF0ZSBhbmltYXRlfVxuICogYW5pbWF0aW9uIGZ1bmN0aW9uLiBJbnN0ZWFkIG9mIGFwcGx5aW5nIGFuaW1hdGlvbnMgZnJvbSB3aGVyZSB0aGV5IGFyZSBjdXJyZW50bHkgdG8gdGhlaXJcbiAqIGRlc3RpbmF0aW9uLCBrZXlmcmFtZXMgY2FuIGRlc2NyaWJlIGhvdyBlYWNoIHN0eWxlIGVudHJ5IGlzIGFwcGxpZWQgYW5kIGF0IHdoYXQgcG9pbnQgd2l0aGluIHRoZVxuICogYW5pbWF0aW9uIGFyYyAobXVjaCBsaWtlIENTUyBLZXlmcmFtZSBBbmltYXRpb25zIGRvKS5cbiAqXG4gKiBGb3IgZWFjaCBgc3R5bGUoKWAgZW50cnkgYW4gYG9mZnNldGAgdmFsdWUgY2FuIGJlIHNldC4gRG9pbmcgc28gYWxsb3dzIHRvIHNwZWNpZml5IGF0IHdoYXRcbiAqIHBlcmNlbnRhZ2Ugb2YgdGhlIGFuaW1hdGUgdGltZSB0aGUgc3R5bGVzIHdpbGwgYmUgYXBwbGllZC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyB0aGUgcHJvdmlkZWQgb2Zmc2V0IHZhbHVlcyBkZXNjcmliZSB3aGVuIGVhY2ggYmFja2dyb3VuZENvbG9yIHZhbHVlIGlzIGFwcGxpZWQuXG4gKiBhbmltYXRlKFwiNXNcIiwga2V5ZnJhbWVzKFtcbiAqICAgc3R5bGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwicmVkXCIsIG9mZnNldDogMCB9KSxcbiAqICAgc3R5bGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwiYmx1ZVwiLCBvZmZzZXQ6IDAuMiB9KSxcbiAqICAgc3R5bGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwib3JhbmdlXCIsIG9mZnNldDogMC4zIH0pLFxuICogICBzdHlsZSh7IGJhY2tncm91bmRDb2xvcjogXCJibGFja1wiLCBvZmZzZXQ6IDEgfSlcbiAqIF0pKVxuICogYGBgXG4gKlxuICogQWx0ZXJuYXRpdmVseSwgaWYgdGhlcmUgYXJlIG5vIGBvZmZzZXRgIHZhbHVlcyB1c2VkIHdpdGhpbiB0aGUgc3R5bGUgZW50cmllcyB0aGVuIHRoZSBvZmZzZXRzXG4gKiB3aWxsIGJlIGNhbGN1bGF0ZWQgYXV0b21hdGljYWxseS5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBhbmltYXRlKFwiNXNcIiwga2V5ZnJhbWVzKFtcbiAqICAgc3R5bGUoeyBiYWNrZ3JvdW5kQ29sb3I6IFwicmVkXCIgfSkgLy8gb2Zmc2V0ID0gMFxuICogICBzdHlsZSh7IGJhY2tncm91bmRDb2xvcjogXCJibHVlXCIgfSkgLy8gb2Zmc2V0ID0gMC4zM1xuICogICBzdHlsZSh7IGJhY2tncm91bmRDb2xvcjogXCJvcmFuZ2VcIiB9KSAvLyBvZmZzZXQgPSAwLjY2XG4gKiAgIHN0eWxlKHsgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIgfSkgLy8gb2Zmc2V0ID0gMVxuICogXSkpXG4gKiBgYGBcbiAqXG4gKiB7XFxAZXhhbXBsZSBjb3JlL2FuaW1hdGlvbi90cy9kc2wvYW5pbWF0aW9uX2V4YW1wbGUudHMgcmVnaW9uPSdDb21wb25lbnQnfVxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcGFyYW0gez99IHN0ZXBzXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBrZXlmcmFtZXMkMShzdGVwcykge1xuICAgIHJldHVybiB7IHR5cGU6IDUgLyogS2V5ZnJhbWVzICovLCBzdGVwczogc3RlcHMgfTtcbn1cbi8qKlxuICogYHRyYW5zaXRpb25gIGlzIGFuIGFuaW1hdGlvbi1zcGVjaWZpYyBmdW5jdGlvbiB0aGF0IGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgaW5zaWRlIG9mIEFuZ3VsYXInc1xuICogYW5pbWF0aW9uIERTTCBsYW5ndWFnZS4gSWYgdGhpcyBpbmZvcm1hdGlvbiBpcyBuZXcsIHBsZWFzZSBuYXZpZ2F0ZSB0byB0aGUge1xcQGxpbmtcbiAqIENvbXBvbmVudCNhbmltYXRpb25zIGNvbXBvbmVudCBhbmltYXRpb25zIG1ldGFkYXRhIHBhZ2V9IHRvIGdhaW4gYSBiZXR0ZXIgdW5kZXJzdGFuZGluZyBvZlxuICogaG93IGFuaW1hdGlvbnMgaW4gQW5ndWxhciBhcmUgdXNlZC5cbiAqXG4gKiBgdHJhbnNpdGlvbmAgZGVjbGFyZXMgdGhlIHtcXEBsaW5rIHNlcXVlbmNlIHNlcXVlbmNlIG9mIGFuaW1hdGlvbiBzdGVwc30gdGhhdCB3aWxsIGJlIHJ1biB3aGVuIHRoZVxuICogcHJvdmlkZWQgYHN0YXRlQ2hhbmdlRXhwcmAgdmFsdWUgaXMgc2F0aXNmaWVkLiBUaGUgYHN0YXRlQ2hhbmdlRXhwcmAgY29uc2lzdHMgb2YgYSBgc3RhdGUxID0+XG4gKiBzdGF0ZTJgIHdoaWNoIGNvbnNpc3RzIG9mIHR3byBrbm93biBzdGF0ZXMgKHVzZSBhbiBhc3Rlcml4IChgKmApIHRvIHJlZmVyIHRvIGEgZHluYW1pYyBzdGFydGluZ1xuICogYW5kL29yIGVuZGluZyBzdGF0ZSkuXG4gKlxuICogQSBmdW5jdGlvbiBjYW4gYWxzbyBiZSBwcm92aWRlZCBhcyB0aGUgYHN0YXRlQ2hhbmdlRXhwcmAgYXJndW1lbnQgZm9yIGEgdHJhbnNpdGlvbiBhbmQgdGhpc1xuICogZnVuY3Rpb24gd2lsbCBiZSBleGVjdXRlZCBlYWNoIHRpbWUgYSBzdGF0ZSBjaGFuZ2Ugb2NjdXJzLiBJZiB0aGUgdmFsdWUgcmV0dXJuZWQgd2l0aGluIHRoZVxuICogZnVuY3Rpb24gaXMgdHJ1ZSB0aGVuIHRoZSBhc3NvY2lhdGVkIGFuaW1hdGlvbiB3aWxsIGJlIHJ1bi5cbiAqXG4gKiBBbmltYXRpb24gdHJhbnNpdGlvbnMgYXJlIHBsYWNlZCB3aXRoaW4gYW4ge1xcQGxpbmsgdHJpZ2dlciBhbmltYXRpb24gdHJpZ2dlcn0uIEZvciBhbiB0cmFuc2l0aW9uXG4gKiB0byBhbmltYXRlIHRvIGEgc3RhdGUgdmFsdWUgYW5kIHBlcnNpc3QgaXRzIHN0eWxlcyB0aGVuIG9uZSBvciBtb3JlIHtcXEBsaW5rIHN0YXRlIGFuaW1hdGlvblxuICogc3RhdGVzfSBpcyBleHBlY3RlZCB0byBiZSBkZWZpbmVkLlxuICpcbiAqICMjIyBVc2FnZVxuICpcbiAqIEFuIGFuaW1hdGlvbiB0cmFuc2l0aW9uIGlzIGtpY2tlZCBvZmYgdGhlIGBzdGF0ZUNoYW5nZUV4cHJgIHByZWRpY2F0ZSBldmFsdWF0ZXMgdG8gdHJ1ZSBiYXNlZCBvblxuICogd2hhdCB0aGUgcHJldmlvdXMgc3RhdGUgaXMgYW5kIHdoYXQgdGhlIGN1cnJlbnQgc3RhdGUgaGFzIGJlY29tZS4gSW4gb3RoZXIgd29yZHMsIGlmIGEgdHJhbnNpdGlvblxuICogaXMgZGVmaW5lZCB0aGF0IG1hdGNoZXMgdGhlIG9sZC9jdXJyZW50IHN0YXRlIGNyaXRlcmlhIHRoZW4gdGhlIGFzc29jaWF0ZWQgYW5pbWF0aW9uIHdpbGwgYmVcbiAqIHRyaWdnZXJlZC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBhbGwgdHJhbnNpdGlvbi9zdGF0ZSBjaGFuZ2VzIGFyZSBkZWZpbmVkIHdpdGhpbiBhbiBhbmltYXRpb24gdHJpZ2dlclxuICogdHJpZ2dlcihcIm15QW5pbWF0aW9uVHJpZ2dlclwiLCBbXG4gKiAgIC8vIGlmIGEgc3RhdGUgaXMgZGVmaW5lZCB0aGVuIGl0cyBzdHlsZXMgd2lsbCBiZSBwZXJzaXN0ZWQgd2hlbiB0aGVcbiAqICAgLy8gYW5pbWF0aW9uIGhhcyBmdWxseSBjb21wbGV0ZWQgaXRzZWxmXG4gKiAgIHN0YXRlKFwib25cIiwgc3R5bGUoeyBiYWNrZ3JvdW5kOiBcImdyZWVuXCIgfSkpLFxuICogICBzdGF0ZShcIm9mZlwiLCBzdHlsZSh7IGJhY2tncm91bmQ6IFwiZ3JleVwiIH0pKSxcbiAqXG4gKiAgIC8vIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gdGhhdCB3aWxsIGJlIGtpY2tlZCBvZmYgd2hlbiB0aGUgc3RhdGUgdmFsdWVcbiAqICAgLy8gYm91bmQgdG8gXCJteUFuaW1hdGlvblRyaWdnZXJcIiBjaGFuZ2VzIGZyb20gXCJvblwiIHRvIFwib2ZmXCJcbiAqICAgdHJhbnNpdGlvbihcIm9uID0+IG9mZlwiLCBhbmltYXRlKDUwMCkpLFxuICpcbiAqICAgLy8gaXQgaXMgYWxzbyBwb3NzaWJsZSB0byBkbyBydW4gdGhlIHNhbWUgYW5pbWF0aW9uIGZvciBib3RoIGRpcmVjdGlvbnNcbiAqICAgdHJhbnNpdGlvbihcIm9uIDw9PiBvZmZcIiwgYW5pbWF0ZSg1MDApKSxcbiAqXG4gKiAgIC8vIG9yIHRvIGRlZmluZSBtdWx0aXBsZSBzdGF0ZXMgcGFpcnMgc2VwYXJhdGVkIGJ5IGNvbW1hc1xuICogICB0cmFuc2l0aW9uKFwib24gPT4gb2ZmLCBvZmYgPT4gdm9pZFwiLCBhbmltYXRlKDUwMCkpLFxuICpcbiAqICAgLy8gdGhpcyBpcyBhIGNhdGNoLWFsbCBzdGF0ZSBjaGFuZ2UgZm9yIHdoZW4gYW4gZWxlbWVudCBpcyBpbnNlcnRlZCBpbnRvXG4gKiAgIC8vIHRoZSBwYWdlIGFuZCB0aGUgZGVzdGluYXRpb24gc3RhdGUgaXMgdW5rbm93blxuICogICB0cmFuc2l0aW9uKFwidm9pZCA9PiAqXCIsIFtcbiAqICAgICBzdHlsZSh7IG9wYWNpdHk6IDAgfSksXG4gKiAgICAgYW5pbWF0ZSg1MDApXG4gKiAgIF0pLFxuICpcbiAqICAgLy8gdGhpcyB3aWxsIGNhcHR1cmUgYSBzdGF0ZSBjaGFuZ2UgYmV0d2VlbiBhbnkgc3RhdGVzXG4gKiAgIHRyYW5zaXRpb24oXCIqID0+ICpcIiwgYW5pbWF0ZShcIjFzIDBzXCIpKSxcbiAqXG4gKiAgIC8vIHlvdSBjYW4gYWxzbyBnbyBmdWxsIG91dCBhbmQgaW5jbHVkZSBhIGZ1bmN0aW9uXG4gKiAgIHRyYW5zaXRpb24oKGZyb21TdGF0ZSwgdG9TdGF0ZSkgPT4ge1xuICogICAgIC8vIHdoZW4gYHRydWVgIHRoZW4gaXQgd2lsbCBhbGxvdyB0aGUgYW5pbWF0aW9uIGJlbG93IHRvIGJlIGludm9rZWRcbiAqICAgICByZXR1cm4gZnJvbVN0YXRlID09IFwib2ZmXCIgJiYgdG9TdGF0ZSA9PSBcIm9uXCI7XG4gKiAgIH0sIGFuaW1hdGUoXCIxcyAwc1wiKSlcbiAqIF0pXG4gKiBgYGBcbiAqXG4gKiBUaGUgdGVtcGxhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29tcG9uZW50IHdpbGwgbWFrZSB1c2Ugb2YgdGhlIGBteUFuaW1hdGlvblRyaWdnZXJgIGFuaW1hdGlvblxuICogdHJpZ2dlciBieSBiaW5kaW5nIHRvIGFuIGVsZW1lbnQgd2l0aGluIGl0cyB0ZW1wbGF0ZSBjb2RlLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gc29tZXdoZXJlIGluc2lkZSBvZiBteS1jb21wb25lbnQtdHBsLmh0bWwgLS0+XG4gKiA8ZGl2IFtcXEBteUFuaW1hdGlvblRyaWdnZXJdPVwibXlTdGF0dXNFeHBcIj4uLi48L2Rpdj5cbiAqIGBgYFxuICpcbiAqICMjIyMgVGhlIGZpbmFsIGBhbmltYXRlYCBjYWxsXG4gKlxuICogSWYgdGhlIGZpbmFsIHN0ZXAgd2l0aGluIHRoZSB0cmFuc2l0aW9uIHN0ZXBzIGlzIGEgY2FsbCB0byBgYW5pbWF0ZSgpYCB0aGF0ICoqb25seSoqIHVzZXMgYVxuICogdGltaW5nIHZhbHVlIHdpdGggKipubyBzdHlsZSBkYXRhKiogdGhlbiBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdXNlZCBhcyB0aGUgZmluYWwgYW5pbWF0aW9uIGFyY1xuICogZm9yIHRoZSBlbGVtZW50IHRvIGFuaW1hdGUgaXRzZWxmIHRvIHRoZSBmaW5hbCBzdGF0ZS4gVGhpcyBpbnZvbHZlcyBhbiBhdXRvbWF0aWMgbWl4IG9mXG4gKiBhZGRpbmcvcmVtb3ZpbmcgQ1NTIHN0eWxlcyBzbyB0aGF0IHRoZSBlbGVtZW50IHdpbGwgYmUgaW4gdGhlIGV4YWN0IHN0YXRlIGl0IHNob3VsZCBiZSBmb3IgdGhlXG4gKiBhcHBsaWVkIHN0YXRlIHRvIGJlIHByZXNlbnRlZCBjb3JyZWN0bHkuXG4gKlxuICogYGBgXG4gKiAvLyBzdGFydCBvZmYgYnkgaGlkaW5nIHRoZSBlbGVtZW50LCBidXQgbWFrZSBzdXJlIHRoYXQgaXQgYW5pbWF0ZXMgcHJvcGVybHkgdG8gd2hhdGV2ZXIgc3RhdGVcbiAqIC8vIGlzIGN1cnJlbnRseSBhY3RpdmUgZm9yIFwibXlBbmltYXRpb25UcmlnZ2VyXCJcbiAqIHRyYW5zaXRpb24oXCJ2b2lkID0+ICpcIiwgW1xuICogICBzdHlsZSh7IG9wYWNpdHk6IDAgfSksXG4gKiAgIGFuaW1hdGUoNTAwKVxuICogXSlcbiAqIGBgYFxuICpcbiAqICMjIyBVc2luZyA6ZW50ZXIgYW5kIDpsZWF2ZVxuICpcbiAqIEdpdmVuIHRoYXQgZW50ZXIgKGluc2VydGlvbikgYW5kIGxlYXZlIChyZW1vdmFsKSBhbmltYXRpb25zIGFyZSBzbyBjb21tb24sIHRoZSBgdHJhbnNpdGlvbmBcbiAqIGZ1bmN0aW9uIGFjY2VwdHMgYm90aCBgOmVudGVyYCBhbmQgYDpsZWF2ZWAgdmFsdWVzIHdoaWNoIGFyZSBhbGlhc2VzIGZvciB0aGUgYHZvaWQgPT4gKmAgYW5kIGAqXG4gKiA9PiB2b2lkYCBzdGF0ZSBjaGFuZ2VzLlxuICpcbiAqIGBgYFxuICogdHJhbnNpdGlvbihcIjplbnRlclwiLCBbXG4gKiAgIHN0eWxlKHsgb3BhY2l0eTogMCB9KSxcbiAqICAgYW5pbWF0ZSg1MDAsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSlcbiAqIF0pLFxuICogdHJhbnNpdGlvbihcIjpsZWF2ZVwiLCBbXG4gKiAgIGFuaW1hdGUoNTAwLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpXG4gKiBdKVxuICogYGBgXG4gKlxuICogIyMjIEJvb2xlYW4gdmFsdWVzXG4gKiBpZiBhIHRyaWdnZXIgYmluZGluZyB2YWx1ZSBpcyBhIGJvb2xlYW4gdmFsdWUgdGhlbiBpdCBjYW4gYmUgbWF0Y2hlZCB1c2luZyBhIHRyYW5zaXRpb25cbiAqIGV4cHJlc3Npb24gdGhhdCBjb21wYXJlcyBgdHJ1ZWAgYW5kIGBmYWxzZWAgb3IgYDFgIGFuZCBgMGAuXG4gKlxuICogYGBgXG4gKiAvLyBpbiB0aGUgdGVtcGxhdGVcbiAqIDxkaXYgW1xcQG9wZW5DbG9zZV09XCJvcGVuID8gdHJ1ZSA6IGZhbHNlXCI+Li4uPC9kaXY+XG4gKlxuICogLy8gaW4gdGhlIGNvbXBvbmVudCBtZXRhZGF0YVxuICogdHJpZ2dlcignb3BlbkNsb3NlJywgW1xuICogICBzdGF0ZSgndHJ1ZScsIHN0eWxlKHsgaGVpZ2h0OiAnKicgfSkpLFxuICogICBzdGF0ZSgnZmFsc2UnLCBzdHlsZSh7IGhlaWdodDogJzBweCcgfSkpLFxuICogICB0cmFuc2l0aW9uKCdmYWxzZSA8PT4gdHJ1ZScsIGFuaW1hdGUoNTAwKSlcbiAqIF0pXG4gKiBgYGBcbiAqXG4gKiAjIyMgVXNpbmcgOmluY3JlbWVudCBhbmQgOmRlY3JlbWVudFxuICogSW4gYWRkaXRpb24gdG8gdGhlIDplbnRlciBhbmQgOmxlYXZlIHRyYW5zaXRpb24gYWxpYXNlcywgdGhlIDppbmNyZW1lbnQgYW5kIDpkZWNyZW1lbnQgYWxpYXNlc1xuICogY2FuIGJlIHVzZWQgdG8ga2ljayBvZmYgYSB0cmFuc2l0aW9uIHdoZW4gYSBudW1lcmljIHZhbHVlIGhhcyBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGluIHZhbHVlLlxuICpcbiAqIGBgYFxuICogaW1wb3J0IHtncm91cCwgYW5pbWF0ZSwgcXVlcnksIHRyYW5zaXRpb24sIHN0eWxlLCB0cmlnZ2VyfSBmcm9tICdcXEBhbmd1bGFyL2FuaW1hdGlvbnMnO1xuICogaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJ1xcQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogXFxAQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICdiYW5uZXItY2Fyb3VzZWwtY29tcG9uZW50JyxcbiAqICAgc3R5bGVzOiBbYFxuICogICAgIC5iYW5uZXItY29udGFpbmVyIHtcbiAqICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAqICAgICAgICBoZWlnaHQ6NTAwcHg7XG4gKiAgICAgICAgb3ZlcmZsb3c6aGlkZGVuO1xuICogICAgICB9XG4gKiAgICAgLmJhbm5lci1jb250YWluZXIgPiAuYmFubmVyIHtcbiAqICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAqICAgICAgICBsZWZ0OjA7XG4gKiAgICAgICAgdG9wOjA7XG4gKiAgICAgICAgZm9udC1zaXplOjIwMHB4O1xuICogICAgICAgIGxpbmUtaGVpZ2h0OjUwMHB4O1xuICogICAgICAgIGZvbnQtd2VpZ2h0OmJvbGQ7XG4gKiAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gKiAgICAgICAgd2lkdGg6MTAwJTtcbiAqICAgICAgfVxuICogICBgXSxcbiAqICAgdGVtcGxhdGU6IGBcbiAqICAgICA8YnV0dG9uIChjbGljayk9XCJwcmV2aW91cygpXCI+UHJldmlvdXM8L2J1dHRvbj5cbiAqICAgICA8YnV0dG9uIChjbGljayk9XCJuZXh0KClcIj5OZXh0PC9idXR0b24+XG4gKiAgICAgPGhyPlxuICogICAgIDxkaXYgW1xcQGJhbm5lckFuaW1hdGlvbl09XCJzZWxlY3RlZEluZGV4XCIgY2xhc3M9XCJiYW5uZXItY29udGFpbmVyXCI+XG4gKiAgICAgICA8ZGl2IGNsYXNzPVwiYmFubmVyXCI+IHt7IGJhbm5lciB9fSA8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgYFxuICogICBhbmltYXRpb25zOiBbXG4gKiAgICAgdHJpZ2dlcignYmFubmVyQW5pbWF0aW9uJywgW1xuICogICAgICAgdHJhbnNpdGlvbihcIjppbmNyZW1lbnRcIiwgZ3JvdXAoW1xuICogICAgICAgICBxdWVyeSgnOmVudGVyJywgW1xuICogICAgICAgICAgIHN0eWxlKHsgbGVmdDogJzEwMCUnIH0pLFxuICogICAgICAgICAgIGFuaW1hdGUoJzAuNXMgZWFzZS1vdXQnLCBzdHlsZSgnKicpKVxuICogICAgICAgICBdKSxcbiAqICAgICAgICAgcXVlcnkoJzpsZWF2ZScsIFtcbiAqICAgICAgICAgICBhbmltYXRlKCcwLjVzIGVhc2Utb3V0Jywgc3R5bGUoeyBsZWZ0OiAnLTEwMCUnIH0pKVxuICogICAgICAgICBdKVxuICogICAgICAgXSkpLFxuICogICAgICAgdHJhbnNpdGlvbihcIjpkZWNyZW1lbnRcIiwgZ3JvdXAoW1xuICogICAgICAgICBxdWVyeSgnOmVudGVyJywgW1xuICogICAgICAgICAgIHN0eWxlKHsgbGVmdDogJy0xMDAlJyB9KSxcbiAqICAgICAgICAgICBhbmltYXRlKCcwLjVzIGVhc2Utb3V0Jywgc3R5bGUoJyonKSlcbiAqICAgICAgICAgXSksXG4gKiAgICAgICAgIHF1ZXJ5KCc6bGVhdmUnLCBbXG4gKiAgICAgICAgICAgYW5pbWF0ZSgnMC41cyBlYXNlLW91dCcsIHN0eWxlKHsgbGVmdDogJzEwMCUnIH0pKVxuICogICAgICAgICBdKVxuICogICAgICAgXSkpLFxuICogICAgIF0pXG4gKiAgIF1cbiAqIH0pXG4gKiBjbGFzcyBCYW5uZXJDYXJvdXNlbENvbXBvbmVudCB7XG4gKiAgIGFsbEJhbm5lcnM6IHN0cmluZ1tdID0gWycxJywgJzInLCAnMycsICc0J107XG4gKiAgIHNlbGVjdGVkSW5kZXg6IG51bWJlciA9IDA7XG4gKlxuICogICBnZXQgYmFubmVycygpIHtcbiAqICAgICAgcmV0dXJuIFt0aGlzLmFsbEJhbm5lcnNbdGhpcy5zZWxlY3RlZEluZGV4XV07XG4gKiAgIH1cbiAqXG4gKiAgIHByZXZpb3VzKCkge1xuICogICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWF4KHRoaXMuc2VsZWN0ZWRJbmRleCAtIDEsIDApO1xuICogICB9XG4gKlxuICogICBuZXh0KCkge1xuICogICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgubWluKHRoaXMuc2VsZWN0ZWRJbmRleCArIDEsIHRoaXMuYWxsQmFubmVycy5sZW5ndGggLSAxKTtcbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICoge1xcQGV4YW1wbGUgY29yZS9hbmltYXRpb24vdHMvZHNsL2FuaW1hdGlvbl9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHBhcmFtIHs/fSBzdGF0ZUNoYW5nZUV4cHJcbiAqIEBwYXJhbSB7P30gc3RlcHNcbiAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHRyYW5zaXRpb24kMShzdGF0ZUNoYW5nZUV4cHIsIHN0ZXBzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gbnVsbDsgfVxuICAgIHJldHVybiB7IHR5cGU6IDEgLyogVHJhbnNpdGlvbiAqLywgZXhwcjogc3RhdGVDaGFuZ2VFeHByLCBhbmltYXRpb246IHN0ZXBzLCBvcHRpb25zOiBvcHRpb25zIH07XG59XG4vKipcbiAqIGBhbmltYXRpb25gIGlzIGFuIGFuaW1hdGlvbi1zcGVjaWZpYyBmdW5jdGlvbiB0aGF0IGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgaW5zaWRlIG9mIEFuZ3VsYXInc1xuICogYW5pbWF0aW9uIERTTCBsYW5ndWFnZS5cbiAqXG4gKiBgdmFyIG15QW5pbWF0aW9uID0gYW5pbWF0aW9uKC4uLilgIGlzIGRlc2lnbmVkIHRvIHByb2R1Y2UgYSByZXVzYWJsZSBhbmltYXRpb24gdGhhdCBjYW4gYmUgbGF0ZXJcbiAqIGludm9rZWQgaW4gYW5vdGhlciBhbmltYXRpb24gb3Igc2VxdWVuY2UuIFJldXNhYmxlIGFuaW1hdGlvbnMgYXJlIGRlc2lnbmVkIHRvIG1ha2UgdXNlIG9mXG4gKiBhbmltYXRpb24gcGFyYW1ldGVycyBhbmQgdGhlIHByb2R1Y2VkIGFuaW1hdGlvbiBjYW4gYmUgdXNlZCB2aWEgdGhlIGB1c2VBbmltYXRpb25gIG1ldGhvZC5cbiAqXG4gKiBgYGBcbiAqIHZhciBmYWRlQW5pbWF0aW9uID0gYW5pbWF0aW9uKFtcbiAqICAgc3R5bGUoeyBvcGFjaXR5OiAne3sgc3RhcnQgfX0nIH0pLFxuICogICBhbmltYXRlKCd7eyB0aW1lIH19JyxcbiAqICAgICBzdHlsZSh7IG9wYWNpdHk6ICd7eyBlbmQgfX0nfSkpXG4gKiBdLCB7IHBhcmFtczogeyB0aW1lOiAnMTAwMG1zJywgc3RhcnQ6IDAsIGVuZDogMSB9fSk7XG4gKiBgYGBcbiAqXG4gKiBJZiBwYXJhbWV0ZXJzIGFyZSBhdHRhY2hlZCB0byBhbiBhbmltYXRpb24gdGhlbiB0aGV5IGFjdCBhcyAqKmRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlcyoqLiBXaGVuIGFuXG4gKiBhbmltYXRpb24gaXMgaW52b2tlZCB2aWEgYHVzZUFuaW1hdGlvbmAgdGhlbiBwYXJhbWV0ZXIgdmFsdWVzIGFyZSBhbGxvd2VkIHRvIGJlIHBhc3NlZCBpblxuICogZGlyZWN0bHkuIElmIGFueSBvZiB0aGUgcGFzc2VkIGluIHBhcmFtZXRlciB2YWx1ZXMgYXJlIG1pc3NpbmcgdGhlbiB0aGUgZGVmYXVsdCB2YWx1ZXMgd2lsbCBiZVxuICogdXNlZC5cbiAqXG4gKiBgYGBcbiAqIHVzZUFuaW1hdGlvbihmYWRlQW5pbWF0aW9uLCB7XG4gKiAgIHBhcmFtczoge1xuICogICAgIHRpbWU6ICcycycsXG4gKiAgICAgc3RhcnQ6IDEsXG4gKiAgICAgZW5kOiAwXG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBJZiBvbmUgb3IgbW9yZSBwYXJhbWV0ZXIgdmFsdWVzIGFyZSBtaXNzaW5nIGJlZm9yZSBhbmltYXRlZCB0aGVuIGFuIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcGFyYW0gez99IHN0ZXBzXG4gKiBAcGFyYW0gez89fSBvcHRpb25zXG4gKiBAcmV0dXJuIHs/fVxuICovXG5cbi8qKlxuICogYGFuaW1hdGVDaGlsZGAgaXMgYW4gYW5pbWF0aW9uLXNwZWNpZmljIGZ1bmN0aW9uIHRoYXQgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCBpbnNpZGUgb2YgQW5ndWxhcidzXG4gKiBhbmltYXRpb24gRFNMIGxhbmd1YWdlLiBJdCB3b3JrcyBieSBhbGxvd2luZyBhIHF1ZXJpZWQgZWxlbWVudCB0byBleGVjdXRlIGl0cyBvd25cbiAqIGFuaW1hdGlvbiB3aXRoaW4gdGhlIGFuaW1hdGlvbiBzZXF1ZW5jZS5cbiAqXG4gKiBFYWNoIHRpbWUgYW4gYW5pbWF0aW9uIGlzIHRyaWdnZXJlZCBpbiBhbmd1bGFyLCB0aGUgcGFyZW50IGFuaW1hdGlvblxuICogd2lsbCBhbHdheXMgZ2V0IHByaW9yaXR5IGFuZCBhbnkgY2hpbGQgYW5pbWF0aW9ucyB3aWxsIGJlIGJsb2NrZWQuIEluIG9yZGVyXG4gKiBmb3IgYSBjaGlsZCBhbmltYXRpb24gdG8gcnVuLCB0aGUgcGFyZW50IGFuaW1hdGlvbiBtdXN0IHF1ZXJ5IGVhY2ggb2YgdGhlIGVsZW1lbnRzXG4gKiBjb250YWluaW5nIGNoaWxkIGFuaW1hdGlvbnMgYW5kIHRoZW4gYWxsb3cgdGhlIGFuaW1hdGlvbnMgdG8gcnVuIHVzaW5nIGBhbmltYXRlQ2hpbGRgLlxuICpcbiAqIFRoZSBleGFtcGxlIEhUTUwgY29kZSBiZWxvdyBzaG93cyBib3RoIHBhcmVudCBhbmQgY2hpbGQgZWxlbWVudHMgdGhhdCBoYXZlIGFuaW1hdGlvblxuICogdHJpZ2dlcnMgdGhhdCB3aWxsIGV4ZWN1dGUgYXQgdGhlIHNhbWUgdGltZS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHBhcmVudC1jaGlsZC5jb21wb25lbnQuaHRtbCAtLT5cbiAqIDxidXR0b24gKGNsaWNrKT1cImV4cCA9ISBleHBcIj5Ub2dnbGU8L2J1dHRvbj5cbiAqIDxocj5cbiAqXG4gKiA8ZGl2IFtcXEBwYXJlbnRBbmltYXRpb25dPVwiZXhwXCI+XG4gKiAgIDxoZWFkZXI+SGVsbG88L2hlYWRlcj5cbiAqICAgPGRpdiBbXFxAY2hpbGRBbmltYXRpb25dPVwiZXhwXCI+XG4gKiAgICAgICBvbmVcbiAqICAgPC9kaXY+XG4gKiAgIDxkaXYgW1xcQGNoaWxkQW5pbWF0aW9uXT1cImV4cFwiPlxuICogICAgICAgdHdvXG4gKiAgIDwvZGl2PlxuICogICA8ZGl2IFtcXEBjaGlsZEFuaW1hdGlvbl09XCJleHBcIj5cbiAqICAgICAgIHRocmVlXG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3cgd2hlbiB0aGUgYGV4cGAgdmFsdWUgY2hhbmdlcyB0byB0cnVlLCBvbmx5IHRoZSBgcGFyZW50QW5pbWF0aW9uYCBhbmltYXRpb24gd2lsbCBhbmltYXRlXG4gKiBiZWNhdXNlIGl0IGhhcyBwcmlvcml0eS4gSG93ZXZlciwgdXNpbmcgYHF1ZXJ5YCBhbmQgYGFuaW1hdGVDaGlsZGAgZWFjaCBvZiB0aGUgaW5uZXIgYW5pbWF0aW9uc1xuICogY2FuIGFsc28gZmlyZTpcbiAqXG4gKiBgYGB0c1xuICogLy8gcGFyZW50LWNoaWxkLmNvbXBvbmVudC50c1xuICogaW1wb3J0IHt0cmlnZ2VyLCB0cmFuc2l0aW9uLCBhbmltYXRlLCBzdHlsZSwgcXVlcnksIGFuaW1hdGVDaGlsZH0gZnJvbSAnXFxAYW5ndWxhci9hbmltYXRpb25zJztcbiAqIFxcQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAncGFyZW50LWNoaWxkLWNvbXBvbmVudCcsXG4gKiAgIGFuaW1hdGlvbnM6IFtcbiAqICAgICB0cmlnZ2VyKCdwYXJlbnRBbmltYXRpb24nLCBbXG4gKiAgICAgICB0cmFuc2l0aW9uKCdmYWxzZSA9PiB0cnVlJywgW1xuICogICAgICAgICBxdWVyeSgnaGVhZGVyJywgW1xuICogICAgICAgICAgIHN0eWxlKHsgb3BhY2l0eTogMCB9KSxcbiAqICAgICAgICAgICBhbmltYXRlKDUwMCwgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKVxuICogICAgICAgICBdKSxcbiAqICAgICAgICAgcXVlcnkoJ1xcQGNoaWxkQW5pbWF0aW9uJywgW1xuICogICAgICAgICAgIGFuaW1hdGVDaGlsZCgpXG4gKiAgICAgICAgIF0pXG4gKiAgICAgICBdKVxuICogICAgIF0pLFxuICogICAgIHRyaWdnZXIoJ2NoaWxkQW5pbWF0aW9uJywgW1xuICogICAgICAgdHJhbnNpdGlvbignZmFsc2UgPT4gdHJ1ZScsIFtcbiAqICAgICAgICAgc3R5bGUoeyBvcGFjaXR5OiAwIH0pLFxuICogICAgICAgICBhbmltYXRlKDUwMCwgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKVxuICogICAgICAgXSlcbiAqICAgICBdKVxuICogICBdXG4gKiB9KVxuICogY2xhc3MgUGFyZW50Q2hpbGRDbXAge1xuICogICBleHA6IGJvb2xlYW4gPSBmYWxzZTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhbmltYXRpb24gY29kZSBhYm92ZSwgd2hlbiB0aGUgYHBhcmVudEFuaW1hdGlvbmAgdHJhbnNpdGlvbiBraWNrcyBvZmYgaXQgZmlyc3QgcXVlcmllcyB0b1xuICogZmluZCB0aGUgaGVhZGVyIGVsZW1lbnQgYW5kIGZhZGVzIGl0IGluLiBJdCB0aGVuIGZpbmRzIGVhY2ggb2YgdGhlIHN1YiBlbGVtZW50cyB0aGF0IGNvbnRhaW4gdGhlXG4gKiBgXFxAY2hpbGRBbmltYXRpb25gIHRyaWdnZXIgYW5kIHRoZW4gYWxsb3dzIGZvciB0aGVpciBhbmltYXRpb25zIHRvIGZpcmUuXG4gKlxuICogVGhpcyBleGFtcGxlIGNhbiBiZSBmdXJ0aGVyIGV4dGVuZGVkIGJ5IHVzaW5nIHN0YWdnZXI6XG4gKlxuICogYGBgdHNcbiAqIHF1ZXJ5KCdcXEBjaGlsZEFuaW1hdGlvbicsIHN0YWdnZXIoMTAwLCBbXG4gKiAgIGFuaW1hdGVDaGlsZCgpXG4gKiBdKSlcbiAqIGBgYFxuICpcbiAqIE5vdyBlYWNoIG9mIHRoZSBzdWIgYW5pbWF0aW9ucyBzdGFydCBvZmYgd2l0aCByZXNwZWN0IHRvIHRoZSBgMTAwbXNgIHN0YWdnZXJpbmcgc3RlcC5cbiAqXG4gKiAjIyBUaGUgZmlyc3QgZnJhbWUgb2YgY2hpbGQgYW5pbWF0aW9uc1xuICogV2hlbiBzdWIgYW5pbWF0aW9ucyBhcmUgZXhlY3V0ZWQgdXNpbmcgYGFuaW1hdGVDaGlsZGAgdGhlIGFuaW1hdGlvbiBlbmdpbmUgd2lsbCBhbHdheXMgYXBwbHkgdGhlXG4gKiBmaXJzdCBmcmFtZSBvZiBldmVyeSBzdWIgYW5pbWF0aW9uIGltbWVkaWF0ZWx5IGF0IHRoZSBzdGFydCBvZiB0aGUgYW5pbWF0aW9uIHNlcXVlbmNlLiBUaGlzIHdheVxuICogdGhlIHBhcmVudCBhbmltYXRpb24gZG9lcyBub3QgbmVlZCB0byBzZXQgYW55IGluaXRpYWwgc3R5bGluZyBkYXRhIG9uIHRoZSBzdWIgZWxlbWVudHMgYmVmb3JlIHRoZVxuICogc3ViIGFuaW1hdGlvbnMga2ljayBvZmYuXG4gKlxuICogSW4gdGhlIGV4YW1wbGUgYWJvdmUgdGhlIGZpcnN0IGZyYW1lIG9mIHRoZSBgY2hpbGRBbmltYXRpb25gJ3MgYGZhbHNlID0+IHRydWVgIHRyYW5zaXRpb25cbiAqIGNvbnNpc3RzIG9mIGEgc3R5bGUgb2YgYG9wYWNpdHk6IDBgLiBUaGlzIGlzIGFwcGxpZWQgaW1tZWRpYXRlbHkgd2hlbiB0aGUgYHBhcmVudEFuaW1hdGlvbmBcbiAqIGFuaW1hdGlvbiB0cmFuc2l0aW9uIHNlcXVlbmNlIHN0YXJ0cy4gT25seSB0aGVuIHdoZW4gdGhlIGBcXEBjaGlsZEFuaW1hdGlvbmAgaXMgcXVlcmllZCBhbmQgY2FsbGVkXG4gKiB3aXRoIGBhbmltYXRlQ2hpbGRgIHdpbGwgaXQgdGhlbiBhbmltYXRlIHRvIGl0cyBkZXN0aW5hdGlvbiBvZiBgb3BhY2l0eTogMWAuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZmVhdHVyZSBkZXNpZ25lZCB0byBiZSB1c2VkIGFsb25nc2lkZSB7XFxAbGluayBxdWVyeSBxdWVyeSgpfSBhbmQgaXQgd2lsbCBvbmx5IHdvcmtcbiAqIHdpdGggYW5pbWF0aW9ucyB0aGF0IGFyZSBhc3NpZ25lZCB1c2luZyB0aGUgQW5ndWxhciBhbmltYXRpb24gRFNMICh0aGlzIG1lYW5zIHRoYXQgQ1NTIGtleWZyYW1lc1xuICogYW5kIHRyYW5zaXRpb25zIGFyZSBub3QgaGFuZGxlZCBieSB0aGlzIEFQSSkuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cblxuLyoqXG4gKiBgdXNlQW5pbWF0aW9uYCBpcyBhbiBhbmltYXRpb24tc3BlY2lmaWMgZnVuY3Rpb24gdGhhdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBBbmd1bGFyJ3NcbiAqIGFuaW1hdGlvbiBEU0wgbGFuZ3VhZ2UuIEl0IGlzIHVzZWQgdG8ga2ljayBvZmYgYSByZXVzYWJsZSBhbmltYXRpb24gdGhhdCBpcyBjcmVhdGVkIHVzaW5nIHtcXEBsaW5rXG4gKiBhbmltYXRpb24gYW5pbWF0aW9uKCl9LlxuICpcbiAqIFxcQGV4cGVyaW1lbnRhbCBBbmltYXRpb24gc3VwcG9ydCBpcyBleHBlcmltZW50YWwuXG4gKiBAcGFyYW0gez99IGFuaW1hdGlvblxuICogQHBhcmFtIHs/PX0gb3B0aW9uc1xuICogQHJldHVybiB7P31cbiAqL1xuXG4vKipcbiAqIGBxdWVyeWAgaXMgYW4gYW5pbWF0aW9uLXNwZWNpZmljIGZ1bmN0aW9uIHRoYXQgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCBpbnNpZGUgb2YgQW5ndWxhcidzXG4gKiBhbmltYXRpb24gRFNMIGxhbmd1YWdlLlxuICpcbiAqIHF1ZXJ5KCkgaXMgdXNlZCB0byBmaW5kIG9uZSBvciBtb3JlIGlubmVyIGVsZW1lbnRzIHdpdGhpbiB0aGUgY3VycmVudCBlbGVtZW50IHRoYXQgaXNcbiAqIGJlaW5nIGFuaW1hdGVkIHdpdGhpbiB0aGUgc2VxdWVuY2UuIFRoZSBwcm92aWRlZCBhbmltYXRpb24gc3RlcHMgYXJlIGFwcGxpZWRcbiAqIHRvIHRoZSBxdWVyaWVkIGVsZW1lbnQgKGJ5IGRlZmF1bHQsIGFuIGFycmF5IGlzIHByb3ZpZGVkLCB0aGVuIHRoaXMgd2lsbCBiZVxuICogdHJlYXRlZCBhcyBhbiBhbmltYXRpb24gc2VxdWVuY2UpLlxuICpcbiAqICMjIyBVc2FnZVxuICpcbiAqIHF1ZXJ5KCkgaXMgZGVzaWduZWQgdG8gY29sbGVjdCBtdXRpcGxlIGVsZW1lbnRzIGFuZCB3b3JrcyBpbnRlcm5hbGx5IGJ5IHVzaW5nXG4gKiBgZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsYC4gQW4gYWRkaXRpb25hbCBvcHRpb25zIG9iamVjdCBjYW4gYmUgcHJvdmlkZWQgd2hpY2hcbiAqIGNhbiBiZSB1c2VkIHRvIGxpbWl0IHRoZSB0b3RhbCBhbW91bnQgb2YgaXRlbXMgdG8gYmUgY29sbGVjdGVkLlxuICpcbiAqIGBgYGpzXG4gKiBxdWVyeSgnZGl2JywgW1xuICogICBhbmltYXRlKC4uLiksXG4gKiAgIGFuaW1hdGUoLi4uKVxuICogXSwgeyBsaW1pdDogMSB9KVxuICogYGBgXG4gKlxuICogcXVlcnkoKSwgYnkgZGVmYXVsdCwgd2lsbCB0aHJvdyBhbiBlcnJvciB3aGVuIHplcm8gaXRlbXMgYXJlIGZvdW5kLiBJZiBhIHF1ZXJ5XG4gKiBoYXMgdGhlIGBvcHRpb25hbGAgZmxhZyBzZXQgdG8gdHJ1ZSB0aGVuIHRoaXMgZXJyb3Igd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIGBgYGpzXG4gKiBxdWVyeSgnLnNvbWUtZWxlbWVudC10aGF0LW1heS1ub3QtYmUtdGhlcmUnLCBbXG4gKiAgIGFuaW1hdGUoLi4uKSxcbiAqICAgYW5pbWF0ZSguLi4pXG4gKiBdLCB7IG9wdGlvbmFsOiB0cnVlIH0pXG4gKiBgYGBcbiAqXG4gKiAjIyMgU3BlY2lhbCBTZWxlY3RvciBWYWx1ZXNcbiAqXG4gKiBUaGUgc2VsZWN0b3IgdmFsdWUgd2l0aGluIGEgcXVlcnkgY2FuIGNvbGxlY3QgZWxlbWVudHMgdGhhdCBjb250YWluIGFuZ3VsYXItc3BlY2lmaWNcbiAqIGNoYXJhY3RlcmlzdGljc1xuICogdXNpbmcgc3BlY2lhbCBwc2V1ZG8tc2VsZWN0b3JzIHRva2Vucy5cbiAqXG4gKiBUaGVzZSBpbmNsdWRlOlxuICpcbiAqICAtIFF1ZXJ5aW5nIGZvciBuZXdseSBpbnNlcnRlZC9yZW1vdmVkIGVsZW1lbnRzIHVzaW5nIGBxdWVyeShcIjplbnRlclwiKWAvYHF1ZXJ5KFwiOmxlYXZlXCIpYFxuICogIC0gUXVlcnlpbmcgYWxsIGN1cnJlbnRseSBhbmltYXRpbmcgZWxlbWVudHMgdXNpbmcgYHF1ZXJ5KFwiOmFuaW1hdGluZ1wiKWBcbiAqICAtIFF1ZXJ5aW5nIGVsZW1lbnRzIHRoYXQgY29udGFpbiBhbiBhbmltYXRpb24gdHJpZ2dlciB1c2luZyBgcXVlcnkoXCJcXEB0cmlnZ2VyTmFtZVwiKWBcbiAqICAtIFF1ZXJ5aW5nIGFsbCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYW4gYW5pbWF0aW9uIHRyaWdnZXJzIHVzaW5nIGBxdWVyeShcIlxcQCpcIilgXG4gKiAgLSBJbmNsdWRpbmcgdGhlIGN1cnJlbnQgZWxlbWVudCBpbnRvIHRoZSBhbmltYXRpb24gc2VxdWVuY2UgdXNpbmcgYHF1ZXJ5KFwiOnNlbGZcIilgXG4gKlxuICpcbiAqICBFYWNoIG9mIHRoZXNlIHBzZXVkby1zZWxlY3RvciB0b2tlbnMgY2FuIGJlIG1lcmdlZCB0b2dldGhlciBpbnRvIGEgY29tYmluZWQgcXVlcnkgc2VsZWN0b3JcbiAqIHN0cmluZzpcbiAqXG4gKiAgYGBgXG4gKiAgcXVlcnkoJzpzZWxmLCAucmVjb3JkOmVudGVyLCAucmVjb3JkOmxlYXZlLCBcXEBzdWJUcmlnZ2VyJywgWy4uLl0pXG4gKiAgYGBgXG4gKlxuICogIyMjIERlbW9cbiAqXG4gKiBgYGBcbiAqIFxcQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAnaW5uZXInLFxuICogICB0ZW1wbGF0ZTogYFxuICogICAgIDxkaXYgW1xcQHF1ZXJ5QW5pbWF0aW9uXT1cImV4cFwiPlxuICogICAgICAgPGgxPlRpdGxlPC9oMT5cbiAqICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gKiAgICAgICAgIEJsYWggYmxhaCBibGFoXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICA8L2Rpdj5cbiAqICAgYCxcbiAqICAgYW5pbWF0aW9uczogW1xuICogICAgdHJpZ2dlcigncXVlcnlBbmltYXRpb24nLCBbXG4gKiAgICAgIHRyYW5zaXRpb24oJyogPT4gZ29BbmltYXRlJywgW1xuICogICAgICAgIC8vIGhpZGUgdGhlIGlubmVyIGVsZW1lbnRzXG4gKiAgICAgICAgcXVlcnkoJ2gxJywgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKSxcbiAqICAgICAgICBxdWVyeSgnLmNvbnRlbnQnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpLFxuICpcbiAqICAgICAgICAvLyBhbmltYXRlIHRoZSBpbm5lciBlbGVtZW50cyBpbiwgb25lIGJ5IG9uZVxuICogICAgICAgIHF1ZXJ5KCdoMScsIGFuaW1hdGUoMTAwMCwgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKSxcbiAqICAgICAgICBxdWVyeSgnLmNvbnRlbnQnLCBhbmltYXRlKDEwMDAsIHN0eWxlKHsgb3BhY2l0eTogMSB9KSksXG4gKiAgICAgIF0pXG4gKiAgICBdKVxuICogIF1cbiAqIH0pXG4gKiBjbGFzcyBDbXAge1xuICogICBleHAgPSAnJztcbiAqXG4gKiAgIGdvQW5pbWF0ZSgpIHtcbiAqICAgICB0aGlzLmV4cCA9ICdnb0FuaW1hdGUnO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBcXEBleHBlcmltZW50YWwgQW5pbWF0aW9uIHN1cHBvcnQgaXMgZXhwZXJpbWVudGFsLlxuICogQHBhcmFtIHs/fSBzZWxlY3RvclxuICogQHBhcmFtIHs/fSBhbmltYXRpb25cbiAqIEBwYXJhbSB7Pz19IG9wdGlvbnNcbiAqIEByZXR1cm4gez99XG4gKi9cblxuLyoqXG4gKiBgc3RhZ2dlcmAgaXMgYW4gYW5pbWF0aW9uLXNwZWNpZmljIGZ1bmN0aW9uIHRoYXQgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCBpbnNpZGUgb2YgQW5ndWxhcidzXG4gKiBhbmltYXRpb24gRFNMIGxhbmd1YWdlLiBJdCBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGluc2lkZSBvZiBhbiBhbmltYXRpb24ge1xcQGxpbmsgcXVlcnkgcXVlcnkoKX1cbiAqIGFuZCB3b3JrcyBieSBpc3N1aW5nIGEgdGltaW5nIGdhcCBiZXR3ZWVuIGFmdGVyIGVhY2ggcXVlcmllZCBpdGVtIGlzIGFuaW1hdGVkLlxuICpcbiAqICMjIyBVc2FnZVxuICpcbiAqIEluIHRoZSBleGFtcGxlIGJlbG93IHRoZXJlIGlzIGEgY29udGFpbmVyIGVsZW1lbnQgdGhhdCB3cmFwcyBhIGxpc3Qgb2YgaXRlbXMgc3RhbXBlZCBvdXRcbiAqIGJ5IGFuIG5nRm9yLiBUaGUgY29udGFpbmVyIGVsZW1lbnQgY29udGFpbnMgYW4gYW5pbWF0aW9uIHRyaWdnZXIgdGhhdCB3aWxsIGxhdGVyIGJlIHNldFxuICogdG8gcXVlcnkgZm9yIGVhY2ggb2YgdGhlIGlubmVyIGl0ZW1zLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gbGlzdC5jb21wb25lbnQuaHRtbCAtLT5cbiAqIDxidXR0b24gKGNsaWNrKT1cInRvZ2dsZSgpXCI+U2hvdyAvIEhpZGUgSXRlbXM8L2J1dHRvbj5cbiAqIDxociAvPlxuICogPGRpdiBbXFxAbGlzdEFuaW1hdGlvbl09XCJpdGVtcy5sZW5ndGhcIj5cbiAqICAgPGRpdiAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtc1wiPlxuICogICAgIHt7IGl0ZW0gfX1cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb21wb25lbnQgY29kZSBmb3IgdGhpcyBsb29rcyBhcyBzdWNoOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQge3RyaWdnZXIsIHRyYW5zaXRpb24sIHN0eWxlLCBhbmltYXRlLCBxdWVyeSwgc3RhZ2dlcn0gZnJvbSAnXFxAYW5ndWxhci9hbmltYXRpb25zJztcbiAqIFxcQENvbXBvbmVudCh7XG4gKiAgIHRlbXBsYXRlVXJsOiAnbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gKiAgIGFuaW1hdGlvbnM6IFtcbiAqICAgICB0cmlnZ2VyKCdsaXN0QW5pbWF0aW9uJywgW1xuICogICAgICAgIC8vLi4uXG4gKiAgICAgXSlcbiAqICAgXVxuICogfSlcbiAqIGNsYXNzIExpc3RDb21wb25lbnQge1xuICogICBpdGVtcyA9IFtdO1xuICpcbiAqICAgc2hvd0l0ZW1zKCkge1xuICogICAgIHRoaXMuaXRlbXMgPSBbMCwxLDIsMyw0XTtcbiAqICAgfVxuICpcbiAqICAgaGlkZUl0ZW1zKCkge1xuICogICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAqICAgfVxuICpcbiAqICAgdG9nZ2xlKCkge1xuICogICAgIHRoaXMuaXRlbXMubGVuZ3RoID8gdGhpcy5oaWRlSXRlbXMoKSA6IHRoaXMuc2hvd0l0ZW1zKCk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEFuZCBub3cgZm9yIHRoZSBhbmltYXRpb24gdHJpZ2dlciBjb2RlOlxuICpcbiAqIGBgYHRzXG4gKiB0cmlnZ2VyKCdsaXN0QW5pbWF0aW9uJywgW1xuICogICB0cmFuc2l0aW9uKCcqID0+IConLCBbIC8vIGVhY2ggdGltZSB0aGUgYmluZGluZyB2YWx1ZSBjaGFuZ2VzXG4gKiAgICAgcXVlcnkoJzpsZWF2ZScsIFtcbiAqICAgICAgIHN0YWdnZXIoMTAwLCBbXG4gKiAgICAgICAgIGFuaW1hdGUoJzAuNXMnLCBzdHlsZSh7IG9wYWNpdHk6IDAgfSkpXG4gKiAgICAgICBdKVxuICogICAgIF0pLFxuICogICAgIHF1ZXJ5KCc6ZW50ZXInLCBbXG4gKiAgICAgICBzdHlsZSh7IG9wYWNpdHk6IDAgfSksXG4gKiAgICAgICBzdGFnZ2VyKDEwMCwgW1xuICogICAgICAgICBhbmltYXRlKCcwLjVzJywgc3R5bGUoeyBvcGFjaXR5OiAxIH0pKVxuICogICAgICAgXSlcbiAqICAgICBdKVxuICogICBdKVxuICogXSlcbiAqIGBgYFxuICpcbiAqIE5vdyBlYWNoIHRpbWUgdGhlIGl0ZW1zIGFyZSBhZGRlZC9yZW1vdmVkIHRoZW4gZWl0aGVyIHRoZSBvcGFjaXR5XG4gKiBmYWRlLWluIGFuaW1hdGlvbiB3aWxsIHJ1biBvciBlYWNoIHJlbW92ZWQgaXRlbSB3aWxsIGJlIGZhZGVkIG91dC5cbiAqIFdoZW4gZWl0aGVyIG9mIHRoZXNlIGFuaW1hdGlvbnMgb2NjdXIgdGhlbiBhIHN0YWdnZXIgZWZmZWN0IHdpbGwgYmVcbiAqIGFwcGxpZWQgYWZ0ZXIgZWFjaCBpdGVtJ3MgYW5pbWF0aW9uIGlzIHN0YXJ0ZWQuXG4gKlxuICogXFxAZXhwZXJpbWVudGFsIEFuaW1hdGlvbiBzdXBwb3J0IGlzIGV4cGVyaW1lbnRhbC5cbiAqIEBwYXJhbSB7P30gdGltaW5nc1xuICogQHBhcmFtIHs/fSBhbmltYXRpb25cbiAqIEByZXR1cm4gez99XG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqL1xudmFyIEFVVE9fU1RZTEUgPSAnKic7XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgc3ltYm9sIGhhcyBtb3ZlZC4gUGxlYXNlIEltcG9ydCBmcm9tIFxcQGFuZ3VsYXIvYW5pbWF0aW9ucyBpbnN0ZWFkIVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBzeW1ib2wgaGFzIG1vdmVkLiBQbGVhc2UgSW1wb3J0IGZyb20gXFxAYW5ndWxhci9hbmltYXRpb25zIGluc3RlYWQhXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgc3ltYm9sIGhhcyBtb3ZlZC4gUGxlYXNlIEltcG9ydCBmcm9tIFxcQGFuZ3VsYXIvYW5pbWF0aW9ucyBpbnN0ZWFkIVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBzeW1ib2wgaGFzIG1vdmVkLiBQbGVhc2UgSW1wb3J0IGZyb20gXFxAYW5ndWxhci9hbmltYXRpb25zIGluc3RlYWQhXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgc3ltYm9sIGhhcyBtb3ZlZC4gUGxlYXNlIEltcG9ydCBmcm9tIFxcQGFuZ3VsYXIvYW5pbWF0aW9ucyBpbnN0ZWFkIVxuICogQHJlY29yZFxuICovXG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBzeW1ib2wgaGFzIG1vdmVkLiBQbGVhc2UgSW1wb3J0IGZyb20gXFxAYW5ndWxhci9hbmltYXRpb25zIGluc3RlYWQhXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEByZWNvcmRcbiAqL1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgc3ltYm9sIGhhcyBtb3ZlZC4gUGxlYXNlIEltcG9ydCBmcm9tIFxcQGFuZ3VsYXIvYW5pbWF0aW9ucyBpbnN0ZWFkIVxuICogQHBhcmFtIHs/fSBuYW1lXG4gKiBAcGFyYW0gez99IGRlZmluaXRpb25zXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiB0cmlnZ2VyJCQxKG5hbWUsIGRlZmluaXRpb25zKSB7XG4gICAgcmV0dXJuIHRyaWdnZXIkMShuYW1lLCBkZWZpbml0aW9ucyk7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgc3ltYm9sIGhhcyBtb3ZlZC4gUGxlYXNlIEltcG9ydCBmcm9tIFxcQGFuZ3VsYXIvYW5pbWF0aW9ucyBpbnN0ZWFkIVxuICogQHBhcmFtIHs/fSB0aW1pbmdzXG4gKiBAcGFyYW0gez89fSBzdHlsZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUkJDEodGltaW5ncywgc3R5bGVzKSB7XG4gICAgcmV0dXJuIGFuaW1hdGUkMSh0aW1pbmdzLCBzdHlsZXMpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEBwYXJhbSB7P30gc3RlcHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIGdyb3VwJCQxKHN0ZXBzKSB7XG4gICAgcmV0dXJuIGdyb3VwJDEoc3RlcHMpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEBwYXJhbSB7P30gc3RlcHNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHNlcXVlbmNlJCQxKHN0ZXBzKSB7XG4gICAgcmV0dXJuIHNlcXVlbmNlJDEoc3RlcHMpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEBwYXJhbSB7P30gdG9rZW5zXG4gKiBAcmV0dXJuIHs/fVxuICovXG5mdW5jdGlvbiBzdHlsZSQkMSh0b2tlbnMpIHtcbiAgICByZXR1cm4gc3R5bGUkMSh0b2tlbnMpO1xufVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHN5bWJvbCBoYXMgbW92ZWQuIFBsZWFzZSBJbXBvcnQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMgaW5zdGVhZCFcbiAqIEBwYXJhbSB7P30gbmFtZVxuICogQHBhcmFtIHs/fSBzdHlsZXNcbiAqIEByZXR1cm4gez99XG4gKi9cbmZ1bmN0aW9uIHN0YXRlJCQxKG5hbWUsIHN0eWxlcykge1xuICAgIHJldHVybiBzdGF0ZSQxKG5hbWUsIHN0eWxlcyk7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgc3ltYm9sIGhhcyBtb3ZlZC4gUGxlYXNlIEltcG9ydCBmcm9tIFxcQGFuZ3VsYXIvYW5pbWF0aW9ucyBpbnN0ZWFkIVxuICogQHBhcmFtIHs/fSBzdGVwc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24ga2V5ZnJhbWVzJCQxKHN0ZXBzKSB7XG4gICAgcmV0dXJuIGtleWZyYW1lcyQxKHN0ZXBzKTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBzeW1ib2wgaGFzIG1vdmVkLiBQbGVhc2UgSW1wb3J0IGZyb20gXFxAYW5ndWxhci9hbmltYXRpb25zIGluc3RlYWQhXG4gKiBAcGFyYW0gez99IHN0YXRlQ2hhbmdlRXhwclxuICogQHBhcmFtIHs/fSBzdGVwc1xuICogQHJldHVybiB7P31cbiAqL1xuZnVuY3Rpb24gdHJhbnNpdGlvbiQkMShzdGF0ZUNoYW5nZUV4cHIsIHN0ZXBzKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb24kMShzdGF0ZUNoYW5nZUV4cHIsIHN0ZXBzKTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBoYXMgYmVlbiByZW5hbWVkIHRvIGBBbmltYXRpb25FdmVudGAuIFBsZWFzZSBpbXBvcnQgaXQgZnJvbSBcXEBhbmd1bGFyL2FuaW1hdGlvbnMuXG4gKiBAcmVjb3JkXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVudHJ5IHBvaW50IGZyb20gd2hpY2ggeW91IHNob3VsZCBpbXBvcnQgYWxsIHB1YmxpYyBjb3JlIEFQSXMuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVudHJ5IHBvaW50IGZvciBhbGwgcHVibGljIEFQSXMgb2YgdGhpcyBwYWNrYWdlLlxuICovXG5cbi8vIFRoaXMgZmlsZSBvbmx5IHJlZXhwb3J0cyBjb250ZW50IG9mIHRoZSBgc3JjYCBmb2xkZXIuIEtlZXAgaXQgdGhhdCB3YXkuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cbi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0IHsgY3JlYXRlUGxhdGZvcm0sIGFzc2VydFBsYXRmb3JtLCBkZXN0cm95UGxhdGZvcm0sIGdldFBsYXRmb3JtLCBQbGF0Zm9ybVJlZiwgQXBwbGljYXRpb25SZWYsIGVuYWJsZVByb2RNb2RlLCBpc0Rldk1vZGUsIGNyZWF0ZVBsYXRmb3JtRmFjdG9yeSwgTmdQcm9iZVRva2VuLCBBUFBfSUQsIFBBQ0tBR0VfUk9PVF9VUkwsIFBMQVRGT1JNX0lOSVRJQUxJWkVSLCBQTEFURk9STV9JRCwgQVBQX0JPT1RTVFJBUF9MSVNURU5FUiwgQVBQX0lOSVRJQUxJWkVSLCBBcHBsaWNhdGlvbkluaXRTdGF0dXMsIERlYnVnRWxlbWVudCwgRGVidWdOb2RlLCBhc05hdGl2ZUVsZW1lbnRzLCBnZXREZWJ1Z05vZGUsIFRlc3RhYmlsaXR5LCBUZXN0YWJpbGl0eVJlZ2lzdHJ5LCBzZXRUZXN0YWJpbGl0eUdldHRlciwgVFJBTlNMQVRJT05TLCBUUkFOU0xBVElPTlNfRk9STUFULCBMT0NBTEVfSUQsIE1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5LCBBcHBsaWNhdGlvbk1vZHVsZSwgd3RmQ3JlYXRlU2NvcGUsIHd0ZkxlYXZlLCB3dGZTdGFydFRpbWVSYW5nZSwgd3RmRW5kVGltZVJhbmdlLCBUeXBlLCBFdmVudEVtaXR0ZXIsIEVycm9ySGFuZGxlciwgU2FuaXRpemVyLCBTZWN1cml0eUNvbnRleHQsIEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIEF0dHJpYnV0ZSwgQ29udGVudENoaWxkLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5LCBWaWV3Q2hpbGQsIFZpZXdDaGlsZHJlbiwgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXQsIFBpcGUsIENVU1RPTV9FTEVNRU5UU19TQ0hFTUEsIE5PX0VSUk9SU19TQ0hFTUEsIE5nTW9kdWxlLCBWaWV3RW5jYXBzdWxhdGlvbiwgVmVyc2lvbiwgVkVSU0lPTiwgZm9yd2FyZFJlZiwgcmVzb2x2ZUZvcndhcmRSZWYsIEluamVjdG9yLCBSZWZsZWN0aXZlSW5qZWN0b3IsIFJlc29sdmVkUmVmbGVjdGl2ZUZhY3RvcnksIFJlZmxlY3RpdmVLZXksIEluamVjdGlvblRva2VuLCBJbmplY3QsIE9wdGlvbmFsLCBJbmplY3RhYmxlLCBTZWxmLCBTa2lwU2VsZiwgSG9zdCwgTmdab25lLCBSZW5kZXJDb21wb25lbnRUeXBlLCBSZW5kZXJlciwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyLCBSZW5kZXJlclN0eWxlRmxhZ3MyLCBSb290UmVuZGVyZXIsIENPTVBJTEVSX09QVElPTlMsIENvbXBpbGVyLCBDb21waWxlckZhY3RvcnksIE1vZHVsZVdpdGhDb21wb25lbnRGYWN0b3JpZXMsIENvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudFJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBFbGVtZW50UmVmLCBOZ01vZHVsZUZhY3RvcnksIE5nTW9kdWxlUmVmLCBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsIGdldE1vZHVsZUZhY3RvcnksIFF1ZXJ5TGlzdCwgU3lzdGVtSnNOZ01vZHVsZUxvYWRlciwgU3lzdGVtSnNOZ01vZHVsZUxvYWRlckNvbmZpZywgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIEVtYmVkZGVkVmlld1JlZiwgVmlld1JlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBEZWZhdWx0SXRlcmFibGVEaWZmZXIsIEl0ZXJhYmxlRGlmZmVycywgS2V5VmFsdWVEaWZmZXJzLCBTaW1wbGVDaGFuZ2UsIFdyYXBwZWRWYWx1ZSwgcGxhdGZvcm1Db3JlLCBBTExPV19NVUxUSVBMRV9QTEFURk9STVMgYXMgybVBTExPV19NVUxUSVBMRV9QTEFURk9STVMsIEFQUF9JRF9SQU5ET01fUFJPVklERVIgYXMgybVBUFBfSURfUkFORE9NX1BST1ZJREVSLCBWYWx1ZVVud3JhcHBlciBhcyDJtVZhbHVlVW53cmFwcGVyLCBkZXZNb2RlRXF1YWwgYXMgybVkZXZNb2RlRXF1YWwsIGlzTGlzdExpa2VJdGVyYWJsZSBhcyDJtWlzTGlzdExpa2VJdGVyYWJsZSwgQ2hhbmdlRGV0ZWN0b3JTdGF0dXMgYXMgybVDaGFuZ2VEZXRlY3RvclN0YXR1cywgaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgYXMgybVpc0RlZmF1bHRDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29uc29sZSBhcyDJtUNvbnNvbGUsIENvbXBvbmVudEZhY3RvcnkgYXMgybVDb21wb25lbnRGYWN0b3J5LCBDb2RlZ2VuQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGFzIMm1Q29kZWdlbkNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgUmVmbGVjdGlvbkNhcGFiaWxpdGllcyBhcyDJtVJlZmxlY3Rpb25DYXBhYmlsaXRpZXMsIFJlbmRlckRlYnVnSW5mbyBhcyDJtVJlbmRlckRlYnVnSW5mbywgX2dsb2JhbCBhcyDJtWdsb2JhbCwgbG9vc2VJZGVudGljYWwgYXMgybVsb29zZUlkZW50aWNhbCwgc3RyaW5naWZ5IGFzIMm1c3RyaW5naWZ5LCBtYWtlRGVjb3JhdG9yIGFzIMm1bWFrZURlY29yYXRvciwgaXNPYnNlcnZhYmxlIGFzIMm1aXNPYnNlcnZhYmxlLCBpc1Byb21pc2UgYXMgybVpc1Byb21pc2UsIGNsZWFyT3ZlcnJpZGVzIGFzIMm1Y2xlYXJPdmVycmlkZXMsIG92ZXJyaWRlQ29tcG9uZW50VmlldyBhcyDJtW92ZXJyaWRlQ29tcG9uZW50Vmlldywgb3ZlcnJpZGVQcm92aWRlciBhcyDJtW92ZXJyaWRlUHJvdmlkZXIsIE5PVF9GT1VORF9DSEVDS19PTkxZX0VMRU1FTlRfSU5KRUNUT1IgYXMgybVOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SLCByZWdpc3Rlck1vZHVsZUZhY3RvcnkgYXMgybVyZWdpc3Rlck1vZHVsZUZhY3RvcnksIEVNUFRZX0FSUkFZIGFzIMm1RU1QVFlfQVJSQVksIEVNUFRZX01BUCBhcyDJtUVNUFRZX01BUCwgYW5jaG9yRGVmIGFzIMm1YW5kLCBjcmVhdGVDb21wb25lbnRGYWN0b3J5IGFzIMm1Y2NmLCBjcmVhdGVOZ01vZHVsZUZhY3RvcnkgYXMgybVjbWYsIGNyZWF0ZVJlbmRlcmVyVHlwZTIgYXMgybVjcnQsIGRpcmVjdGl2ZURlZiBhcyDJtWRpZCwgZWxlbWVudERlZiBhcyDJtWVsZCwgZWxlbWVudEV2ZW50RnVsbE5hbWUgYXMgybVlbGVtZW50RXZlbnRGdWxsTmFtZSwgZ2V0Q29tcG9uZW50Vmlld0RlZmluaXRpb25GYWN0b3J5IGFzIMm1Z2V0Q29tcG9uZW50Vmlld0RlZmluaXRpb25GYWN0b3J5LCBpbmxpbmVJbnRlcnBvbGF0ZSBhcyDJtWlubGluZUludGVycG9sYXRlLCBpbnRlcnBvbGF0ZSBhcyDJtWludGVycG9sYXRlLCBtb2R1bGVEZWYgYXMgybVtb2QsIG1vZHVsZVByb3ZpZGVEZWYgYXMgybVtcGQsIG5nQ29udGVudERlZiBhcyDJtW5jZCwgbm9kZVZhbHVlIGFzIMm1bm92LCBwaXBlRGVmIGFzIMm1cGlkLCBwcm92aWRlckRlZiBhcyDJtXByZCwgcHVyZUFycmF5RGVmIGFzIMm1cGFkLCBwdXJlT2JqZWN0RGVmIGFzIMm1cG9kLCBwdXJlUGlwZURlZiBhcyDJtXBwZCwgcXVlcnlEZWYgYXMgybVxdWQsIHRleHREZWYgYXMgybV0ZWQsIHVud3JhcFZhbHVlIGFzIMm1dW52LCB2aWV3RGVmIGFzIMm1dmlkLCBBVVRPX1NUWUxFLCB0cmlnZ2VyJCQxIGFzIHRyaWdnZXIsIGFuaW1hdGUkJDEgYXMgYW5pbWF0ZSwgZ3JvdXAkJDEgYXMgZ3JvdXAsIHNlcXVlbmNlJCQxIGFzIHNlcXVlbmNlLCBzdHlsZSQkMSBhcyBzdHlsZSwgc3RhdGUkJDEgYXMgc3RhdGUsIGtleWZyYW1lcyQkMSBhcyBrZXlmcmFtZXMsIHRyYW5zaXRpb24kJDEgYXMgdHJhbnNpdGlvbiwgYW5pbWF0ZSQxIGFzIMm1eCwgZ3JvdXAkMSBhcyDJtXksIGtleWZyYW1lcyQxIGFzIMm1YmMsIHNlcXVlbmNlJDEgYXMgybV6LCBzdGF0ZSQxIGFzIMm1YmIsIHN0eWxlJDEgYXMgybViYSwgdHJhbnNpdGlvbiQxIGFzIMm1YmQsIHRyaWdnZXIkMSBhcyDJtXcsIF9pdGVyYWJsZURpZmZlcnNGYWN0b3J5IGFzIMm1aywgX2tleVZhbHVlRGlmZmVyc0ZhY3RvcnkgYXMgybVsLCBfbG9jYWxlRmFjdG9yeSBhcyDJtW0sIF9hcHBJZFJhbmRvbVByb3ZpZGVyRmFjdG9yeSBhcyDJtWYsIGRlZmF1bHRJdGVyYWJsZURpZmZlcnMgYXMgybVnLCBkZWZhdWx0S2V5VmFsdWVEaWZmZXJzIGFzIMm1aCwgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSBhcyDJtWksIERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3RvcnkgYXMgybVqLCBTdGF0aWNJbmplY3RvciBhcyDJtWIsIFJlZmxlY3RpdmVJbmplY3Rvcl8gYXMgybVjLCBSZWZsZWN0aXZlRGVwZW5kZW5jeSBhcyDJtWQsIHJlc29sdmVSZWZsZWN0aXZlUHJvdmlkZXJzIGFzIMm1ZSwgd3RmRW5hYmxlZCBhcyDJtW4sIGNyZWF0ZVNjb3BlIGFzIMm1cCwgZGV0ZWN0V1RGIGFzIMm1bywgZW5kVGltZVJhbmdlIGFzIMm1cywgbGVhdmUgYXMgybVxLCBzdGFydFRpbWVSYW5nZSBhcyDJtXIsIG1ha2VQYXJhbURlY29yYXRvciBhcyDJtWEsIF9kZWYgYXMgybV0LCBEZWJ1Z0NvbnRleHQgYXMgybV1IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb21tb25KUyAvIE5vZGUgaGF2ZSBnbG9iYWwgY29udGV4dCBleHBvc2VkIGFzIFwiZ2xvYmFsXCIgdmFyaWFibGUuXG4vLyBXZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgdGhlIHdob2xlIG5vZGUuZC50cyB0aGlzIHRoaXMgY29tcGlsYXRpb24gdW5pdCBzbyB3ZSdsbCBqdXN0IGZha2Vcbi8vIHRoZSBnbG9iYWwgXCJnbG9iYWxcIiB2YXIgZm9yIG5vdy5cbnZhciBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbnZhciBfX3NlbGYgPSB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJiBzZWxmO1xudmFyIF9fZ2xvYmFsID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsO1xudmFyIF9yb290ID0gX193aW5kb3cgfHwgX19nbG9iYWwgfHwgX19zZWxmO1xuZXhwb3J0cy5yb290ID0gX3Jvb3Q7XG4vLyBXb3JrYXJvdW5kIENsb3N1cmUgQ29tcGlsZXIgcmVzdHJpY3Rpb246IFRoZSBib2R5IG9mIGEgZ29vZy5tb2R1bGUgY2Fubm90IHVzZSB0aHJvdy5cbi8vIFRoaXMgaXMgbmVlZGVkIHdoZW4gdXNlZCB3aXRoIGFuZ3VsYXIvdHNpY2tsZSB3aGljaCBpbnNlcnRzIGEgZ29vZy5tb2R1bGUgc3RhdGVtZW50LlxuLy8gV3JhcCBpbiBJSUZFXG4oZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Jvb3QpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSeEpTIGNvdWxkIG5vdCBmaW5kIGFueSBnbG9iYWwgY29udGV4dCAod2luZG93LCBzZWxmLCBnbG9iYWwpJyk7XG4gICAgfVxufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvb3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzT2JqZWN0KHgpIHtcbiAgICByZXR1cm4geCAhPSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jztcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gdHlwZW9mIGFueSBzbyB0aGF0IGl0IHdlIGRvbid0IGhhdmUgdG8gY2FzdCB3aGVuIGNvbXBhcmluZyBhIHJlc3VsdCB0byB0aGUgZXJyb3Igb2JqZWN0XG5leHBvcnRzLmVycm9yT2JqZWN0ID0geyBlOiB7fSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JPYmplY3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gb25lIG9yIG1vcmUgZXJyb3JzIGhhdmUgb2NjdXJyZWQgZHVyaW5nIHRoZVxuICogYHVuc3Vic2NyaWJlYCBvZiBhIHtAbGluayBTdWJzY3JpcHRpb259LlxuICovXG52YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFVuc3Vic2NyaXB0aW9uRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICB2YXIgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuICBcIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gKChpICsgMSkgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKSk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIFVuc3Vic2NyaXB0aW9uRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7IHRocm93IGVycjsgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkgeyB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG52YXIgU3ltYm9sID0gcm9vdF8xLnJvb3QuU3ltYm9sO1xuZXhwb3J0cy5yeFN1YnNjcmliZXIgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJykgP1xuICAgIFN5bWJvbC5mb3IoJ3J4U3Vic2NyaWJlcicpIDogJ0BAcnhTdWJzY3JpYmVyJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHJ4U3Vic2NyaWJlciBpbnN0ZWFkXG4gKi9cbmV4cG9ydHMuJCRyeFN1YnNjcmliZXIgPSBleHBvcnRzLnJ4U3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ4U3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoJy4vdXRpbC9pc0Z1bmN0aW9uJyk7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuL1N1YnNjcmlwdGlvbicpO1xudmFyIE9ic2VydmVyXzEgPSByZXF1aXJlKCcuL09ic2VydmVyJyk7XG52YXIgcnhTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL3N5bWJvbC9yeFN1YnNjcmliZXInKTtcbi8qKlxuICogSW1wbGVtZW50cyB0aGUge0BsaW5rIE9ic2VydmVyfSBpbnRlcmZhY2UgYW5kIGV4dGVuZHMgdGhlXG4gKiB7QGxpbmsgU3Vic2NyaXB0aW9ufSBjbGFzcy4gV2hpbGUgdGhlIHtAbGluayBPYnNlcnZlcn0gaXMgdGhlIHB1YmxpYyBBUEkgZm9yXG4gKiBjb25zdW1pbmcgdGhlIHZhbHVlcyBvZiBhbiB7QGxpbmsgT2JzZXJ2YWJsZX0sIGFsbCBPYnNlcnZlcnMgZ2V0IGNvbnZlcnRlZCB0b1xuICogYSBTdWJzY3JpYmVyLCBpbiBvcmRlciB0byBwcm92aWRlIFN1YnNjcmlwdGlvbi1saWtlIGNhcGFiaWxpdGllcyBzdWNoIGFzXG4gKiBgdW5zdWJzY3JpYmVgLiBTdWJzY3JpYmVyIGlzIGEgY29tbW9uIHR5cGUgaW4gUnhKUywgYW5kIGNydWNpYWwgZm9yXG4gKiBpbXBsZW1lbnRpbmcgb3BlcmF0b3JzLCBidXQgaXQgaXMgcmFyZWx5IHVzZWQgYXMgYSBwdWJsaWMgQVBJLlxuICpcbiAqIEBjbGFzcyBTdWJzY3JpYmVyPFQ+XG4gKi9cbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09ic2VydmVyfGZ1bmN0aW9uKHZhbHVlOiBUKTogdm9pZH0gW2Rlc3RpbmF0aW9uT3JOZXh0XSBBIHBhcnRpYWxseVxuICAgICAqIGRlZmluZWQgT2JzZXJ2ZXIgb3IgYSBgbmV4dGAgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihlOiA/YW55KTogdm9pZH0gW2Vycm9yXSBUaGUgYGVycm9yYCBjYWxsYmFjayBvZiBhblxuICAgICAqIE9ic2VydmVyLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdm9pZH0gW2NvbXBsZXRlXSBUaGUgYGNvbXBsZXRlYCBjYWxsYmFjayBvZiBhblxuICAgICAqIE9ic2VydmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5zeW5jRXJyb3JWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBPYnNlcnZlcl8xLmVtcHR5O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghZGVzdGluYXRpb25Pck5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IE9ic2VydmVyXzEuZW1wdHk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uT3JOZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb25Pck5leHQgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb25Pck5leHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmFkZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3luY0Vycm9yVGhyb3dhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIodGhpcywgZGVzdGluYXRpb25Pck5leHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5zeW5jRXJyb3JUaHJvd2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBuZXcgU2FmZVN1YnNjcmliZXIodGhpcywgZGVzdGluYXRpb25Pck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGVbcnhTdWJzY3JpYmVyXzEucnhTdWJzY3JpYmVyXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG4gICAgLyoqXG4gICAgICogQSBzdGF0aWMgZmFjdG9yeSBmb3IgYSBTdWJzY3JpYmVyLCBnaXZlbiBhIChwb3RlbnRpYWxseSBwYXJ0aWFsKSBkZWZpbml0aW9uXG4gICAgICogb2YgYW4gT2JzZXJ2ZXIuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbih4OiA/VCk6IHZvaWR9IFtuZXh0XSBUaGUgYG5leHRgIGNhbGxiYWNrIG9mIGFuIE9ic2VydmVyLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZTogP2FueSk6IHZvaWR9IFtlcnJvcl0gVGhlIGBlcnJvcmAgY2FsbGJhY2sgb2YgYW5cbiAgICAgKiBPYnNlcnZlci5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IFtjb21wbGV0ZV0gVGhlIGBjb21wbGV0ZWAgY2FsbGJhY2sgb2YgYW5cbiAgICAgKiBPYnNlcnZlci5cbiAgICAgKiBAcmV0dXJuIHtTdWJzY3JpYmVyPFQ+fSBBIFN1YnNjcmliZXIgd3JhcHBpbmcgdGhlIChwYXJ0aWFsbHkgZGVmaW5lZClcbiAgICAgKiBPYnNlcnZlciByZXByZXNlbnRlZCBieSB0aGUgZ2l2ZW4gYXJndW1lbnRzLlxuICAgICAqL1xuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIHN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBub3RpZmljYXRpb25zIG9mIHR5cGUgYG5leHRgIGZyb21cbiAgICAgKiB0aGUgT2JzZXJ2YWJsZSwgd2l0aCBhIHZhbHVlLiBUaGUgT2JzZXJ2YWJsZSBtYXkgY2FsbCB0aGlzIG1ldGhvZCAwIG9yIG1vcmVcbiAgICAgKiB0aW1lcy5cbiAgICAgKiBAcGFyYW0ge1R9IFt2YWx1ZV0gVGhlIGBuZXh0YCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvZiB0eXBlIGBlcnJvcmAgZnJvbVxuICAgICAqIHRoZSBPYnNlcnZhYmxlLCB3aXRoIGFuIGF0dGFjaGVkIHtAbGluayBFcnJvcn0uIE5vdGlmaWVzIHRoZSBPYnNlcnZlciB0aGF0XG4gICAgICogdGhlIE9ic2VydmFibGUgaGFzIGV4cGVyaWVuY2VkIGFuIGVycm9yIGNvbmRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge2FueX0gW2Vycl0gVGhlIGBlcnJvcmAgZXhjZXB0aW9uLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgYSB2YWx1ZWxlc3Mgbm90aWZpY2F0aW9uIG9mIHR5cGVcbiAgICAgKiBgY29tcGxldGVgIGZyb20gdGhlIE9ic2VydmFibGUuIE5vdGlmaWVzIHRoZSBPYnNlcnZlciB0aGF0IHRoZSBPYnNlcnZhYmxlXG4gICAgICogaGFzIGZpbmlzaGVkIHNlbmRpbmcgcHVzaC1iYXNlZCBub3RpZmljYXRpb25zLlxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl91bnN1YnNjcmliZUFuZFJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9wYXJlbnQgPSBfYS5fcGFyZW50LCBfcGFyZW50cyA9IF9hLl9wYXJlbnRzO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRzID0gbnVsbDtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcGFyZW50O1xuICAgICAgICB0aGlzLl9wYXJlbnRzID0gX3BhcmVudHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5TdWJzY3JpYmVyID0gU3Vic2NyaWJlcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihfcGFyZW50U3Vic2NyaWJlciwgb2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcGFyZW50U3Vic2NyaWJlciA9IF9wYXJlbnRTdWJzY3JpYmVyO1xuICAgICAgICB2YXIgbmV4dDtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpKSB7XG4gICAgICAgICAgICBuZXh0ID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0O1xuICAgICAgICAgICAgZXJyb3IgPSBvYnNlcnZlck9yTmV4dC5lcnJvcjtcbiAgICAgICAgICAgIGNvbXBsZXRlID0gb2JzZXJ2ZXJPck5leHQuY29tcGxldGU7XG4gICAgICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgIT09IE9ic2VydmVyXzEuZW1wdHkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGNvbnRleHQudW5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKGNvbnRleHQudW5zdWJzY3JpYmUuYmluZChjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRleHQudW5zdWJzY3JpYmUgPSB0aGlzLnVuc3Vic2NyaWJlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuX25leHQgPSBuZXh0O1xuICAgICAgICB0aGlzLl9lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLl9jb21wbGV0ZSA9IGNvbXBsZXRlO1xuICAgIH1cbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkICYmIHRoaXMuX25leHQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAoIV9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX25leHQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB0aGlzLl9uZXh0LCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdmFyIF9wYXJlbnRTdWJzY3JpYmVyID0gdGhpcy5fcGFyZW50U3Vic2NyaWJlcjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICAgIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHRoaXMuX2Vycm9yLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9fdHJ5T3JTZXRFcnJvcihfcGFyZW50U3Vic2NyaWJlciwgdGhpcy5fZXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclZhbHVlID0gZXJyO1xuICAgICAgICAgICAgICAgIF9wYXJlbnRTdWJzY3JpYmVyLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgICAgICBpZiAodGhpcy5fY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlZENvbXBsZXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBsZXRlLmNhbGwoX3RoaXMuX2NvbnRleHQpOyB9O1xuICAgICAgICAgICAgICAgIGlmICghX3BhcmVudFN1YnNjcmliZXIuc3luY0Vycm9yVGhyb3dhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclVuc3ViKHdyYXBwZWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX190cnlPclNldEVycm9yKF9wYXJlbnRTdWJzY3JpYmVyLCB3cmFwcGVkQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclVuc3ViID0gZnVuY3Rpb24gKGZuLCB2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLl9jb250ZXh0LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTYWZlU3Vic2NyaWJlci5wcm90b3R5cGUuX190cnlPclNldEVycm9yID0gZnVuY3Rpb24gKHBhcmVudCwgZm4sIHZhbHVlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMuX2NvbnRleHQsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVmFsdWUgPSBlcnI7XG4gICAgICAgICAgICBwYXJlbnQuc3luY0Vycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFNhZmVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfcGFyZW50U3Vic2NyaWJlciA9IHRoaXMuX3BhcmVudFN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgICAgICB0aGlzLl9wYXJlbnRTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgX3BhcmVudFN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaWJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9TdWJzY3JpYmVyJyk7XG52YXIgcnhTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG52YXIgT2JzZXJ2ZXJfMSA9IHJlcXVpcmUoJy4uL09ic2VydmVyJyk7XG5mdW5jdGlvbiB0b1N1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIGlmIChuZXh0T3JPYnNlcnZlcikge1xuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgaW5zdGFuY2VvZiBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHRPck9ic2VydmVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJfMS5yeFN1YnNjcmliZXJdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXJbcnhTdWJzY3JpYmVyXzEucnhTdWJzY3JpYmVyXSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghbmV4dE9yT2JzZXJ2ZXIgJiYgIWVycm9yICYmICFjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKE9ic2VydmVyXzEuZW1wdHkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xufVxuZXhwb3J0cy50b1N1YnNjcmliZXIgPSB0b1N1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b1N1YnNjcmliZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG5mdW5jdGlvbiBnZXRTeW1ib2xPYnNlcnZhYmxlKGNvbnRleHQpIHtcbiAgICB2YXIgJCRvYnNlcnZhYmxlO1xuICAgIHZhciBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbDtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcbiAgICAgICAgICAgICQkb2JzZXJ2YWJsZSA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgJCRvYnNlcnZhYmxlID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG4gICAgICAgICAgICBTeW1ib2wub2JzZXJ2YWJsZSA9ICQkb2JzZXJ2YWJsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJCRvYnNlcnZhYmxlID0gJ0BAb2JzZXJ2YWJsZSc7XG4gICAgfVxuICAgIHJldHVybiAkJG9ic2VydmFibGU7XG59XG5leHBvcnRzLmdldFN5bWJvbE9ic2VydmFibGUgPSBnZXRTeW1ib2xPYnNlcnZhYmxlO1xuZXhwb3J0cy5vYnNlcnZhYmxlID0gZ2V0U3ltYm9sT2JzZXJ2YWJsZShyb290XzEucm9vdCk7XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBvYnNlcnZhYmxlIGluc3RlYWRcbiAqL1xuZXhwb3J0cy4kJG9ic2VydmFibGUgPSBleHBvcnRzLm9ic2VydmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGU6bm8tZW1wdHkgKi9cbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4vdXRpbC9yb290Jyk7XG52YXIgdG9TdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL3V0aWwvdG9TdWJzY3JpYmVyJyk7XG52YXIgb2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9zeW1ib2wvb2JzZXJ2YWJsZScpO1xudmFyIHBpcGVfMSA9IHJlcXVpcmUoJy4vdXRpbC9waXBlJyk7XG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYW55IHNldCBvZiB2YWx1ZXMgb3ZlciBhbnkgYW1vdW50IG9mIHRpbWUuIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgYnVpbGRpbmcgYmxvY2tcbiAqIG9mIFJ4SlMuXG4gKlxuICogQGNsYXNzIE9ic2VydmFibGU8VD5cbiAqL1xudmFyIE9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YnNjcmliZSB0aGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgT2JzZXJ2YWJsZSBpc1xuICAgICAqIGluaXRpYWxseSBzdWJzY3JpYmVkIHRvLiBUaGlzIGZ1bmN0aW9uIGlzIGdpdmVuIGEgU3Vic2NyaWJlciwgdG8gd2hpY2ggbmV3IHZhbHVlc1xuICAgICAqIGNhbiBiZSBgbmV4dGBlZCwgb3IgYW4gYGVycm9yYCBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByYWlzZSBhbiBlcnJvciwgb3JcbiAgICAgKiBgY29tcGxldGVgIGNhbiBiZSBjYWxsZWQgdG8gbm90aWZ5IG9mIGEgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX2lzU2NhbGFyID0gZmFsc2U7XG4gICAgICAgIGlmIChzdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE9ic2VydmFibGUsIHdpdGggdGhpcyBPYnNlcnZhYmxlIGFzIHRoZSBzb3VyY2UsIGFuZCB0aGUgcGFzc2VkXG4gICAgICogb3BlcmF0b3IgZGVmaW5lZCBhcyB0aGUgbmV3IG9ic2VydmFibGUncyBvcGVyYXRvci5cbiAgICAgKiBAbWV0aG9kIGxpZnRcbiAgICAgKiBAcGFyYW0ge09wZXJhdG9yfSBvcGVyYXRvciB0aGUgb3BlcmF0b3IgZGVmaW5pbmcgdGhlIG9wZXJhdGlvbiB0byB0YWtlIG9uIHRoZSBvYnNlcnZhYmxlXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYSBuZXcgb2JzZXJ2YWJsZSB3aXRoIHRoZSBPcGVyYXRvciBhcHBsaWVkXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEludm9rZXMgYW4gZXhlY3V0aW9uIG9mIGFuIE9ic2VydmFibGUgYW5kIHJlZ2lzdGVycyBPYnNlcnZlciBoYW5kbGVycyBmb3Igbm90aWZpY2F0aW9ucyBpdCB3aWxsIGVtaXQuXG4gICAgICpcbiAgICAgKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+VXNlIGl0IHdoZW4geW91IGhhdmUgYWxsIHRoZXNlIE9ic2VydmFibGVzLCBidXQgc3RpbGwgbm90aGluZyBpcyBoYXBwZW5pbmcuPC9zcGFuPlxuICAgICAqXG4gICAgICogYHN1YnNjcmliZWAgaXMgbm90IGEgcmVndWxhciBvcGVyYXRvciwgYnV0IGEgbWV0aG9kIHRoYXQgY2FsbHMgT2JzZXJ2YWJsZSdzIGludGVybmFsIGBzdWJzY3JpYmVgIGZ1bmN0aW9uLiBJdFxuICAgICAqIG1pZ2h0IGJlIGZvciBleGFtcGxlIGEgZnVuY3Rpb24gdGhhdCB5b3UgcGFzc2VkIHRvIGEge0BsaW5rIGNyZWF0ZX0gc3RhdGljIGZhY3RvcnksIGJ1dCBtb3N0IG9mIHRoZSB0aW1lIGl0IGlzXG4gICAgICogYSBsaWJyYXJ5IGltcGxlbWVudGF0aW9uLCB3aGljaCBkZWZpbmVzIHdoYXQgYW5kIHdoZW4gd2lsbCBiZSBlbWl0dGVkIGJ5IGFuIE9ic2VydmFibGUuIFRoaXMgbWVhbnMgdGhhdCBjYWxsaW5nXG4gICAgICogYHN1YnNjcmliZWAgaXMgYWN0dWFsbHkgdGhlIG1vbWVudCB3aGVuIE9ic2VydmFibGUgc3RhcnRzIGl0cyB3b3JrLCBub3Qgd2hlbiBpdCBpcyBjcmVhdGVkLCBhcyBpdCBpcyBvZnRlblxuICAgICAqIHRob3VnaHQuXG4gICAgICpcbiAgICAgKiBBcGFydCBmcm9tIHN0YXJ0aW5nIHRoZSBleGVjdXRpb24gb2YgYW4gT2JzZXJ2YWJsZSwgdGhpcyBtZXRob2QgYWxsb3dzIHlvdSB0byBsaXN0ZW4gZm9yIHZhbHVlc1xuICAgICAqIHRoYXQgYW4gT2JzZXJ2YWJsZSBlbWl0cywgYXMgd2VsbCBhcyBmb3Igd2hlbiBpdCBjb21wbGV0ZXMgb3IgZXJyb3JzLiBZb3UgY2FuIGFjaGlldmUgdGhpcyBpbiB0d29cbiAgICAgKiBmb2xsb3dpbmcgd2F5cy5cbiAgICAgKlxuICAgICAqIFRoZSBmaXJzdCB3YXkgaXMgY3JlYXRpbmcgYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB7QGxpbmsgT2JzZXJ2ZXJ9IGludGVyZmFjZS4gSXQgc2hvdWxkIGhhdmUgbWV0aG9kc1xuICAgICAqIGRlZmluZWQgYnkgdGhhdCBpbnRlcmZhY2UsIGJ1dCBub3RlIHRoYXQgaXQgc2hvdWxkIGJlIGp1c3QgYSByZWd1bGFyIEphdmFTY3JpcHQgb2JqZWN0LCB3aGljaCB5b3UgY2FuIGNyZWF0ZVxuICAgICAqIHlvdXJzZWxmIGluIGFueSB3YXkgeW91IHdhbnQgKEVTNiBjbGFzcywgY2xhc3NpYyBmdW5jdGlvbiBjb25zdHJ1Y3Rvciwgb2JqZWN0IGxpdGVyYWwgZXRjLikuIEluIHBhcnRpY3VsYXIgZG9cbiAgICAgKiBub3QgYXR0ZW1wdCB0byB1c2UgYW55IFJ4SlMgaW1wbGVtZW50YXRpb24gZGV0YWlscyB0byBjcmVhdGUgT2JzZXJ2ZXJzIC0geW91IGRvbid0IG5lZWQgdGhlbS4gUmVtZW1iZXIgYWxzb1xuICAgICAqIHRoYXQgeW91ciBvYmplY3QgZG9lcyBub3QgaGF2ZSB0byBpbXBsZW1lbnQgYWxsIG1ldGhvZHMuIElmIHlvdSBmaW5kIHlvdXJzZWxmIGNyZWF0aW5nIGEgbWV0aG9kIHRoYXQgZG9lc24ndFxuICAgICAqIGRvIGFueXRoaW5nLCB5b3UgY2FuIHNpbXBseSBvbWl0IGl0LiBOb3RlIGhvd2V2ZXIsIHRoYXQgaWYgYGVycm9yYCBtZXRob2QgaXMgbm90IHByb3ZpZGVkLCBhbGwgZXJyb3JzIHdpbGxcbiAgICAgKiBiZSBsZWZ0IHVuY2F1Z2h0LlxuICAgICAqXG4gICAgICogVGhlIHNlY29uZCB3YXkgaXMgdG8gZ2l2ZSB1cCBvbiBPYnNlcnZlciBvYmplY3QgYWx0b2dldGhlciBhbmQgc2ltcGx5IHByb3ZpZGUgY2FsbGJhY2sgZnVuY3Rpb25zIGluIHBsYWNlIG9mIGl0cyBtZXRob2RzLlxuICAgICAqIFRoaXMgbWVhbnMgeW91IGNhbiBwcm92aWRlIHRocmVlIGZ1bmN0aW9ucyBhcyBhcmd1bWVudHMgdG8gYHN1YnNjcmliZWAsIHdoZXJlIGZpcnN0IGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnRcbiAgICAgKiBvZiBhIGBuZXh0YCBtZXRob2QsIHNlY29uZCBvZiBhbiBgZXJyb3JgIG1ldGhvZCBhbmQgdGhpcmQgb2YgYSBgY29tcGxldGVgIG1ldGhvZC4gSnVzdCBhcyBpbiBjYXNlIG9mIE9ic2VydmVyLFxuICAgICAqIGlmIHlvdSBkbyBub3QgbmVlZCB0byBsaXN0ZW4gZm9yIHNvbWV0aGluZywgeW91IGNhbiBvbWl0IGEgZnVuY3Rpb24sIHByZWZlcmFibHkgYnkgcGFzc2luZyBgdW5kZWZpbmVkYCBvciBgbnVsbGAsXG4gICAgICogc2luY2UgYHN1YnNjcmliZWAgcmVjb2duaXplcyB0aGVzZSBmdW5jdGlvbnMgYnkgd2hlcmUgdGhleSB3ZXJlIHBsYWNlZCBpbiBmdW5jdGlvbiBjYWxsLiBXaGVuIGl0IGNvbWVzXG4gICAgICogdG8gYGVycm9yYCBmdW5jdGlvbiwganVzdCBhcyBiZWZvcmUsIGlmIG5vdCBwcm92aWRlZCwgZXJyb3JzIGVtaXR0ZWQgYnkgYW4gT2JzZXJ2YWJsZSB3aWxsIGJlIHRocm93bi5cbiAgICAgKlxuICAgICAqIFdoYXRldmVyIHN0eWxlIG9mIGNhbGxpbmcgYHN1YnNjcmliZWAgeW91IHVzZSwgaW4gYm90aCBjYXNlcyBpdCByZXR1cm5zIGEgU3Vic2NyaXB0aW9uIG9iamVjdC5cbiAgICAgKiBUaGlzIG9iamVjdCBhbGxvd3MgeW91IHRvIGNhbGwgYHVuc3Vic2NyaWJlYCBvbiBpdCwgd2hpY2ggaW4gdHVybiB3aWxsIHN0b3Agd29yayB0aGF0IGFuIE9ic2VydmFibGUgZG9lcyBhbmQgd2lsbCBjbGVhblxuICAgICAqIHVwIGFsbCByZXNvdXJjZXMgdGhhdCBhbiBPYnNlcnZhYmxlIHVzZWQuIE5vdGUgdGhhdCBjYW5jZWxsaW5nIGEgc3Vic2NyaXB0aW9uIHdpbGwgbm90IGNhbGwgYGNvbXBsZXRlYCBjYWxsYmFja1xuICAgICAqIHByb3ZpZGVkIHRvIGBzdWJzY3JpYmVgIGZ1bmN0aW9uLCB3aGljaCBpcyByZXNlcnZlZCBmb3IgYSByZWd1bGFyIGNvbXBsZXRpb24gc2lnbmFsIHRoYXQgY29tZXMgZnJvbSBhbiBPYnNlcnZhYmxlLlxuICAgICAqXG4gICAgICogUmVtZW1iZXIgdGhhdCBjYWxsYmFja3MgcHJvdmlkZWQgdG8gYHN1YnNjcmliZWAgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseS5cbiAgICAgKiBJdCBpcyBhbiBPYnNlcnZhYmxlIGl0c2VsZiB0aGF0IGRlY2lkZXMgd2hlbiB0aGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQuIEZvciBleGFtcGxlIHtAbGluayBvZn1cbiAgICAgKiBieSBkZWZhdWx0IGVtaXRzIGFsbCBpdHMgdmFsdWVzIHN5bmNocm9ub3VzbHkuIEFsd2F5cyBjaGVjayBkb2N1bWVudGF0aW9uIGZvciBob3cgZ2l2ZW4gT2JzZXJ2YWJsZVxuICAgICAqIHdpbGwgYmVoYXZlIHdoZW4gc3Vic2NyaWJlZCBhbmQgaWYgaXRzIGRlZmF1bHQgYmVoYXZpb3IgY2FuIGJlIG1vZGlmaWVkIHdpdGggYSB7QGxpbmsgU2NoZWR1bGVyfS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlN1YnNjcmliZSB3aXRoIGFuIE9ic2VydmVyPC9jYXB0aW9uPlxuICAgICAqIGNvbnN0IHN1bU9ic2VydmVyID0ge1xuICAgICAqICAgc3VtOiAwLFxuICAgICAqICAgbmV4dCh2YWx1ZSkge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnQWRkaW5nOiAnICsgdmFsdWUpO1xuICAgICAqICAgICB0aGlzLnN1bSA9IHRoaXMuc3VtICsgdmFsdWU7XG4gICAgICogICB9LFxuICAgICAqICAgZXJyb3IoKSB7IC8vIFdlIGFjdHVhbGx5IGNvdWxkIGp1c3QgcmVtb3ZlIHRoaXMgbWV0aG9kLFxuICAgICAqICAgfSwgICAgICAgIC8vIHNpbmNlIHdlIGRvIG5vdCByZWFsbHkgY2FyZSBhYm91dCBlcnJvcnMgcmlnaHQgbm93LlxuICAgICAqICAgY29tcGxldGUoKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdTdW0gZXF1YWxzOiAnICsgdGhpcy5zdW0pO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBSeC5PYnNlcnZhYmxlLm9mKDEsIDIsIDMpIC8vIFN5bmNocm9ub3VzbHkgZW1pdHMgMSwgMiwgMyBhbmQgdGhlbiBjb21wbGV0ZXMuXG4gICAgICogLnN1YnNjcmliZShzdW1PYnNlcnZlcik7XG4gICAgICpcbiAgICAgKiAvLyBMb2dzOlxuICAgICAqIC8vIFwiQWRkaW5nOiAxXCJcbiAgICAgKiAvLyBcIkFkZGluZzogMlwiXG4gICAgICogLy8gXCJBZGRpbmc6IDNcIlxuICAgICAqIC8vIFwiU3VtIGVxdWFsczogNlwiXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlN1YnNjcmliZSB3aXRoIGZ1bmN0aW9uczwvY2FwdGlvbj5cbiAgICAgKiBsZXQgc3VtID0gMDtcbiAgICAgKlxuICAgICAqIFJ4Lk9ic2VydmFibGUub2YoMSwgMiwgMylcbiAgICAgKiAuc3Vic2NyaWJlKFxuICAgICAqICAgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ0FkZGluZzogJyArIHZhbHVlKTtcbiAgICAgKiAgICAgc3VtID0gc3VtICsgdmFsdWU7XG4gICAgICogICB9LFxuICAgICAqICAgdW5kZWZpbmVkLFxuICAgICAqICAgZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdTdW0gZXF1YWxzOiAnICsgc3VtKTtcbiAgICAgKiAgIH1cbiAgICAgKiApO1xuICAgICAqXG4gICAgICogLy8gTG9nczpcbiAgICAgKiAvLyBcIkFkZGluZzogMVwiXG4gICAgICogLy8gXCJBZGRpbmc6IDJcIlxuICAgICAqIC8vIFwiQWRkaW5nOiAzXCJcbiAgICAgKiAvLyBcIlN1bSBlcXVhbHM6IDZcIlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5DYW5jZWwgYSBzdWJzY3JpcHRpb248L2NhcHRpb24+XG4gICAgICogY29uc3Qgc3Vic2NyaXB0aW9uID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS5zdWJzY3JpYmUoXG4gICAgICogICBudW0gPT4gY29uc29sZS5sb2cobnVtKSxcbiAgICAgKiAgIHVuZGVmaW5lZCxcbiAgICAgKiAgICgpID0+IGNvbnNvbGUubG9nKCdjb21wbGV0ZWQhJykgLy8gV2lsbCBub3QgYmUgY2FsbGVkLCBldmVuXG4gICAgICogKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gY2FuY2VsbGluZyBzdWJzY3JpcHRpb25cbiAgICAgKlxuICAgICAqXG4gICAgICogc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICogICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCd1bnN1YnNjcmliZWQhJyk7XG4gICAgICogfSwgMjUwMCk7XG4gICAgICpcbiAgICAgKiAvLyBMb2dzOlxuICAgICAqIC8vIDAgYWZ0ZXIgMXNcbiAgICAgKiAvLyAxIGFmdGVyIDJzXG4gICAgICogLy8gXCJ1bnN1YnNjcmliZWQhXCIgYWZ0ZXIgMi41c1xuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09ic2VydmVyfEZ1bmN0aW9ufSBvYnNlcnZlck9yTmV4dCAob3B0aW9uYWwpIEVpdGhlciBhbiBvYnNlcnZlciB3aXRoIG1ldGhvZHMgdG8gYmUgY2FsbGVkLFxuICAgICAqICBvciB0aGUgZmlyc3Qgb2YgdGhyZWUgcG9zc2libGUgaGFuZGxlcnMsIHdoaWNoIGlzIHRoZSBoYW5kbGVyIGZvciBlYWNoIHZhbHVlIGVtaXR0ZWQgZnJvbSB0aGUgc3Vic2NyaWJlZFxuICAgICAqICBPYnNlcnZhYmxlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVycm9yIChvcHRpb25hbCkgQSBoYW5kbGVyIGZvciBhIHRlcm1pbmFsIGV2ZW50IHJlc3VsdGluZyBmcm9tIGFuIGVycm9yLiBJZiBubyBlcnJvciBoYW5kbGVyIGlzIHByb3ZpZGVkLFxuICAgICAqICB0aGUgZXJyb3Igd2lsbCBiZSB0aHJvd24gYXMgdW5oYW5kbGVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBsZXRlIChvcHRpb25hbCkgQSBoYW5kbGVyIGZvciBhIHRlcm1pbmFsIGV2ZW50IHJlc3VsdGluZyBmcm9tIHN1Y2Nlc3NmdWwgY29tcGxldGlvbi5cbiAgICAgKiBAcmV0dXJuIHtJU3Vic2NyaXB0aW9ufSBhIHN1YnNjcmlwdGlvbiByZWZlcmVuY2UgdG8gdGhlIHJlZ2lzdGVyZWQgaGFuZGxlcnNcbiAgICAgKiBAbWV0aG9kIHN1YnNjcmliZVxuICAgICAqL1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyXzEudG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc2luaywgdGhpcy5zb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2luay5hZGQodGhpcy5zb3VyY2UgPyB0aGlzLl9zdWJzY3JpYmUoc2luaykgOiB0aGlzLl90cnlTdWJzY3JpYmUoc2luaykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93YWJsZSkge1xuICAgICAgICAgICAgc2luay5zeW5jRXJyb3JUaHJvd2FibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IHNpbmsuc3luY0Vycm9yVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpbms7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5zeW5jRXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgICAgc2luay5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBmb3JFYWNoXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dCBhIGhhbmRsZXIgZm9yIGVhY2ggdmFsdWUgZW1pdHRlZCBieSB0aGUgb2JzZXJ2YWJsZVxuICAgICAqIEBwYXJhbSB7UHJvbWlzZUNvbnN0cnVjdG9yfSBbUHJvbWlzZUN0b3JdIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gdXNlZCB0byBpbnN0YW50aWF0ZSB0aGUgUHJvbWlzZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IGVpdGhlciByZXNvbHZlcyBvbiBvYnNlcnZhYmxlIGNvbXBsZXRpb24gb3JcbiAgICAgKiAgcmVqZWN0cyB3aXRoIHRoZSBoYW5kbGVkIGVycm9yXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBQcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIVByb21pc2VDdG9yKSB7XG4gICAgICAgICAgICBpZiAocm9vdF8xLnJvb3QuUnggJiYgcm9vdF8xLnJvb3QuUnguY29uZmlnICYmIHJvb3RfMS5yb290LlJ4LmNvbmZpZy5Qcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUN0b3IgPSByb290XzEucm9vdC5SeC5jb25maWcuUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJvb3RfMS5yb290LlByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBQcm9taXNlQ3RvciA9IHJvb3RfMS5yb290LlByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFQcm9taXNlQ3Rvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIC8vIE11c3QgYmUgZGVjbGFyZWQgaW4gYSBzZXBhcmF0ZSBzdGF0ZW1lbnQgdG8gYXZvaWQgYSBSZWZlcm5jZUVycm9yIHdoZW5cbiAgICAgICAgICAgIC8vIGFjY2Vzc2luZyBzdWJzY3JpcHRpb24gYmVsb3cgaW4gdGhlIGNsb3N1cmUgZHVlIHRvIFRlbXBvcmFsIERlYWQgWm9uZS5cbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhIHN1YnNjcmlwdGlvbiwgdGhlbiB3ZSBjYW4gc3VybWlzZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbmV4dCBoYW5kbGluZyBpcyBhc3luY2hyb25vdXMuIEFueSBlcnJvcnMgdGhyb3duXG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gYmUgcmVqZWN0ZWQgZXhwbGljaXRseSBhbmQgdW5zdWJzY3JpYmUgbXVzdCBiZVxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsZWQgbWFudWFsbHlcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIE5PIHN1YnNjcmlwdGlvbiwgdGhlbiB3ZSdyZSBnZXR0aW5nIGEgbmV4dGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlIHN5bmNocm9ub3VzbHkgZHVyaW5nIHN1YnNjcmlwdGlvbi4gV2UgY2FuIGp1c3QgY2FsbCBpdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgZXJyb3JzLCBPYnNlcnZhYmxlJ3MgYHN1YnNjcmliZWAgd2lsbCBlbnN1cmUgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuc3Vic2NyaXB0aW9uIGxvZ2ljIGlzIGNhbGxlZCwgdGhlbiBzeW5jaHJvbm91c2x5IHJldGhyb3cgdGhlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICAvLyBBZnRlciB0aGF0LCBQcm9taXNlIHdpbGwgdHJhcCB0aGUgZXJyb3IgYW5kIHNlbmQgaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gZG93biB0aGUgcmVqZWN0aW9uIHBhdGguXG4gICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbiBpbnRlcm9wIHBvaW50IGRlZmluZWQgYnkgdGhlIGVzNy1vYnNlcnZhYmxlIHNwZWMgaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxuICAgICAqIEBtZXRob2QgU3ltYm9sLm9ic2VydmFibGVcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSB0aGlzIGluc3RhbmNlIG9mIHRoZSBvYnNlcnZhYmxlXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbb2JzZXJ2YWJsZV8xLm9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzdGl0Y2ggdG9nZXRoZXIgZnVuY3Rpb25hbCBvcGVyYXRvcnMgaW50byBhIGNoYWluLlxuICAgICAqIEBtZXRob2QgcGlwZVxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9IHRoZSBPYnNlcnZhYmxlIHJlc3VsdCBvZiBhbGwgb2YgdGhlIG9wZXJhdG9ycyBoYXZpbmdcbiAgICAgKiBiZWVuIGNhbGxlZCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIHBhc3NlZCBpbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBpbXBvcnQgeyBtYXAsIGZpbHRlciwgc2NhbiB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbiAgICAgKlxuICAgICAqIFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMClcbiAgICAgKiAgIC5waXBlKFxuICAgICAqICAgICBmaWx0ZXIoeCA9PiB4ICUgMiA9PT0gMCksXG4gICAgICogICAgIG1hcCh4ID0+IHggKyB4KSxcbiAgICAgKiAgICAgc2NhbigoYWNjLCB4KSA9PiBhY2MgKyB4KVxuICAgICAqICAgKVxuICAgICAqICAgLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKVxuICAgICAqL1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pIC0gMF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVfMS5waXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAoUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCFQcm9taXNlQ3Rvcikge1xuICAgICAgICAgICAgaWYgKHJvb3RfMS5yb290LlJ4ICYmIHJvb3RfMS5yb290LlJ4LmNvbmZpZyAmJiByb290XzEucm9vdC5SeC5jb25maWcuUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIFByb21pc2VDdG9yID0gcm9vdF8xLnJvb3QuUnguY29uZmlnLlByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyb290XzEucm9vdC5Qcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgUHJvbWlzZUN0b3IgPSByb290XzEucm9vdC5Qcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghUHJvbWlzZUN0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm8gUHJvbWlzZSBpbXBsIGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHZhbHVlID0geDsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBIQUNLOiBTaW5jZSBUeXBlU2NyaXB0IGluaGVyaXRzIHN0YXRpYyBwcm9wZXJ0aWVzIHRvbywgd2UgaGF2ZSB0b1xuICAgIC8vIGZpZ2h0IGFnYWluc3QgVHlwZVNjcmlwdCBoZXJlIHNvIFN1YmplY3QgY2FuIGhhdmUgYSBkaWZmZXJlbnQgc3RhdGljIGNyZWF0ZSBzaWduYXR1cmVcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbGQgT2JzZXJ2YWJsZSBieSBjYWxsaW5nIHRoZSBPYnNlcnZhYmxlIGNvbnN0cnVjdG9yXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YnNjcmliZT8gdGhlIHN1YnNjcmliZXIgZnVuY3Rpb24gdG8gYmUgcGFzc2VkIHRvIHRoZSBPYnNlcnZhYmxlIGNvbnN0cnVjdG9yXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYSBuZXcgY29sZCBvYnNlcnZhYmxlXG4gICAgICovXG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIFNjYWxhck9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTY2FsYXJPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjYWxhck9ic2VydmFibGUodmFsdWUsIHNjaGVkdWxlcikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgdGhpcy5faXNTY2FsYXIgPSB0cnVlO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1NjYWxhciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFNjYWxhck9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2FsYXJPYnNlcnZhYmxlKHZhbHVlLCBzY2hlZHVsZXIpO1xuICAgIH07XG4gICAgU2NhbGFyT2JzZXJ2YWJsZS5kaXNwYXRjaCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgZG9uZSA9IHN0YXRlLmRvbmUsIHZhbHVlID0gc3RhdGUudmFsdWUsIHN1YnNjcmliZXIgPSBzdGF0ZS5zdWJzY3JpYmVyO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmRvbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbiAgICB9O1xuICAgIFNjYWxhck9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoU2NhbGFyT2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLCB2YWx1ZTogdmFsdWUsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTY2FsYXJPYnNlcnZhYmxlO1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5TY2FsYXJPYnNlcnZhYmxlID0gU2NhbGFyT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjYWxhck9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqIEBoaWRlIHRydWVcbiAqL1xudmFyIEVtcHR5T2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVtcHR5T2JzZXJ2YWJsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbXB0eU9ic2VydmFibGUoc2NoZWR1bGVyKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgbm8gaXRlbXMgdG8gdGhlIE9ic2VydmVyIGFuZCBpbW1lZGlhdGVseVxuICAgICAqIGVtaXRzIGEgY29tcGxldGUgbm90aWZpY2F0aW9uLlxuICAgICAqXG4gICAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkp1c3QgZW1pdHMgJ2NvbXBsZXRlJywgYW5kIG5vdGhpbmcgZWxzZS5cbiAgICAgKiA8L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL2VtcHR5LnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogVGhpcyBzdGF0aWMgb3BlcmF0b3IgaXMgdXNlZnVsIGZvciBjcmVhdGluZyBhIHNpbXBsZSBPYnNlcnZhYmxlIHRoYXQgb25seVxuICAgICAqIGVtaXRzIHRoZSBjb21wbGV0ZSBub3RpZmljYXRpb24uIEl0IGNhbiBiZSB1c2VkIGZvciBjb21wb3Npbmcgd2l0aCBvdGhlclxuICAgICAqIE9ic2VydmFibGVzLCBzdWNoIGFzIGluIGEge0BsaW5rIG1lcmdlTWFwfS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtaXQgdGhlIG51bWJlciA3LCB0aGVuIGNvbXBsZXRlLjwvY2FwdGlvbj5cbiAgICAgKiB2YXIgcmVzdWx0ID0gUnguT2JzZXJ2YWJsZS5lbXB0eSgpLnN0YXJ0V2l0aCg3KTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+TWFwIGFuZCBmbGF0dGVuIG9ubHkgb2RkIG51bWJlcnMgdG8gdGhlIHNlcXVlbmNlICdhJywgJ2InLCAnYyc8L2NhcHRpb24+XG4gICAgICogdmFyIGludGVydmFsID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAgICAgKiB2YXIgcmVzdWx0ID0gaW50ZXJ2YWwubWVyZ2VNYXAoeCA9PlxuICAgICAqICAgeCAlIDIgPT09IDEgPyBSeC5PYnNlcnZhYmxlLm9mKCdhJywgJ2InLCAnYycpIDogUnguT2JzZXJ2YWJsZS5lbXB0eSgpXG4gICAgICogKTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICAgICAqXG4gICAgICogLy8gUmVzdWx0cyBpbiB0aGUgZm9sbG93aW5nIHRvIHRoZSBjb25zb2xlOlxuICAgICAqIC8vIHggaXMgZXF1YWwgdG8gdGhlIGNvdW50IG9uIHRoZSBpbnRlcnZhbCBlZygwLDEsMiwzLC4uLilcbiAgICAgKiAvLyB4IHdpbGwgb2NjdXIgZXZlcnkgMTAwMG1zXG4gICAgICogLy8gaWYgeCAlIDIgaXMgZXF1YWwgdG8gMSBwcmludCBhYmNcbiAgICAgKiAvLyBpZiB4ICUgMiBpcyBub3QgZXF1YWwgdG8gMSBub3RoaW5nIHdpbGwgYmUgb3V0cHV0XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayBjcmVhdGV9XG4gICAgICogQHNlZSB7QGxpbmsgbmV2ZXJ9XG4gICAgICogQHNlZSB7QGxpbmsgb2Z9XG4gICAgICogQHNlZSB7QGxpbmsgdGhyb3d9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQSB7QGxpbmsgSVNjaGVkdWxlcn0gdG8gdXNlIGZvciBzY2hlZHVsaW5nXG4gICAgICogdGhlIGVtaXNzaW9uIG9mIHRoZSBjb21wbGV0ZSBub3RpZmljYXRpb24uXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gXCJlbXB0eVwiIE9ic2VydmFibGU6IGVtaXRzIG9ubHkgdGhlIGNvbXBsZXRlXG4gICAgICogbm90aWZpY2F0aW9uLlxuICAgICAqIEBzdGF0aWMgdHJ1ZVxuICAgICAqIEBuYW1lIGVtcHR5XG4gICAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICAgKi9cbiAgICBFbXB0eU9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IEVtcHR5T2JzZXJ2YWJsZShzY2hlZHVsZXIpO1xuICAgIH07XG4gICAgRW1wdHlPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGFyZy5zdWJzY3JpYmVyO1xuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBFbXB0eU9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc2NoZWR1bGVyID0gdGhpcy5zY2hlZHVsZXI7XG4gICAgICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoRW1wdHlPYnNlcnZhYmxlLmRpc3BhdGNoLCAwLCB7IHN1YnNjcmliZXI6IHN1YnNjcmliZXIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBFbXB0eU9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkVtcHR5T2JzZXJ2YWJsZSA9IEVtcHR5T2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVtcHR5T2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzU2NoZWR1bGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5zY2hlZHVsZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNTY2hlZHVsZXIgPSBpc1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIFNjYWxhck9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4vU2NhbGFyT2JzZXJ2YWJsZScpO1xudmFyIEVtcHR5T2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi9FbXB0eU9ic2VydmFibGUnKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZSgnLi4vdXRpbC9pc1NjaGVkdWxlcicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKiBAaGlkZSB0cnVlXG4gKi9cbnZhciBBcnJheU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBcnJheU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXJyYXlPYnNlcnZhYmxlKGFycmF5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIGlmICghc2NoZWR1bGVyICYmIGFycmF5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5faXNTY2FsYXIgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGFycmF5WzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFycmF5T2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoYXJyYXksIHNjaGVkdWxlcikge1xuICAgICAgICByZXR1cm4gbmV3IEFycmF5T2JzZXJ2YWJsZShhcnJheSwgc2NoZWR1bGVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHNvbWUgdmFsdWVzIHlvdSBzcGVjaWZ5IGFzIGFyZ3VtZW50cyxcbiAgICAgKiBpbW1lZGlhdGVseSBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBhbmQgdGhlbiBlbWl0cyBhIGNvbXBsZXRlIG5vdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FbWl0cyB0aGUgYXJndW1lbnRzIHlvdSBwcm92aWRlLCB0aGVuIGNvbXBsZXRlcy5cbiAgICAgKiA8L3NwYW4+XG4gICAgICpcbiAgICAgKiA8aW1nIHNyYz1cIi4vaW1nL29mLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICAgICAqXG4gICAgICogVGhpcyBzdGF0aWMgb3BlcmF0b3IgaXMgdXNlZnVsIGZvciBjcmVhdGluZyBhIHNpbXBsZSBPYnNlcnZhYmxlIHRoYXQgb25seVxuICAgICAqIGVtaXRzIHRoZSBhcmd1bWVudHMgZ2l2ZW4sIGFuZCB0aGUgY29tcGxldGUgbm90aWZpY2F0aW9uIHRoZXJlYWZ0ZXIuIEl0IGNhblxuICAgICAqIGJlIHVzZWQgZm9yIGNvbXBvc2luZyB3aXRoIG90aGVyIE9ic2VydmFibGVzLCBzdWNoIGFzIHdpdGgge0BsaW5rIGNvbmNhdH0uXG4gICAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyBhIGBudWxsYCBJU2NoZWR1bGVyLCB3aGljaCBtZWFucyB0aGUgYG5leHRgXG4gICAgICogbm90aWZpY2F0aW9ucyBhcmUgc2VudCBzeW5jaHJvbm91c2x5LCBhbHRob3VnaCB3aXRoIGEgZGlmZmVyZW50IElTY2hlZHVsZXJcbiAgICAgKiBpdCBpcyBwb3NzaWJsZSB0byBkZXRlcm1pbmUgd2hlbiB0aG9zZSBub3RpZmljYXRpb25zIHdpbGwgYmUgZGVsaXZlcmVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1pdCAxMCwgMjAsIDMwLCB0aGVuICdhJywgJ2InLCAnYycsIHRoZW4gc3RhcnQgdGlja2luZyBldmVyeSBzZWNvbmQuPC9jYXB0aW9uPlxuICAgICAqIHZhciBudW1iZXJzID0gUnguT2JzZXJ2YWJsZS5vZigxMCwgMjAsIDMwKTtcbiAgICAgKiB2YXIgbGV0dGVycyA9IFJ4Lk9ic2VydmFibGUub2YoJ2EnLCAnYicsICdjJyk7XG4gICAgICogdmFyIGludGVydmFsID0gUnguT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKTtcbiAgICAgKiB2YXIgcmVzdWx0ID0gbnVtYmVycy5jb25jYXQobGV0dGVycykuY29uY2F0KGludGVydmFsKTtcbiAgICAgKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgY3JlYXRlfVxuICAgICAqIEBzZWUge0BsaW5rIGVtcHR5fVxuICAgICAqIEBzZWUge0BsaW5rIG5ldmVyfVxuICAgICAqIEBzZWUge0BsaW5rIHRocm93fVxuICAgICAqXG4gICAgICogQHBhcmFtIHsuLi5UfSB2YWx1ZXMgQXJndW1lbnRzIHRoYXQgcmVwcmVzZW50IGBuZXh0YCB2YWx1ZXMgdG8gYmUgZW1pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcl0gQSB7QGxpbmsgSVNjaGVkdWxlcn0gdG8gdXNlIGZvciBzY2hlZHVsaW5nXG4gICAgICogdGhlIGVtaXNzaW9ucyBvZiB0aGUgYG5leHRgIG5vdGlmaWNhdGlvbnMuXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGVhY2ggZ2l2ZW4gaW5wdXQgdmFsdWUuXG4gICAgICogQHN0YXRpYyB0cnVlXG4gICAgICogQG5hbWUgb2ZcbiAgICAgKiBAb3duZXIgT2JzZXJ2YWJsZVxuICAgICAqL1xuICAgIEFycmF5T2JzZXJ2YWJsZS5vZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcnJheVtfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NoZWR1bGVyID0gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKHNjaGVkdWxlcikpIHtcbiAgICAgICAgICAgIGFycmF5LnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcnJheU9ic2VydmFibGUoYXJyYXksIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNjYWxhck9ic2VydmFibGVfMS5TY2FsYXJPYnNlcnZhYmxlKGFycmF5WzBdLCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFbXB0eU9ic2VydmFibGVfMS5FbXB0eU9ic2VydmFibGUoc2NoZWR1bGVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQXJyYXlPYnNlcnZhYmxlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBhcnJheSA9IHN0YXRlLmFycmF5LCBpbmRleCA9IHN0YXRlLmluZGV4LCBjb3VudCA9IHN0YXRlLmNvdW50LCBzdWJzY3JpYmVyID0gc3RhdGUuc3Vic2NyaWJlcjtcbiAgICAgICAgaWYgKGluZGV4ID49IGNvdW50KSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2luZGV4XSk7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKHN0YXRlKTtcbiAgICB9O1xuICAgIEFycmF5T2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgICAgIHZhciBjb3VudCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKEFycmF5T2JzZXJ2YWJsZS5kaXNwYXRjaCwgMCwge1xuICAgICAgICAgICAgICAgIGFycmF5OiBhcnJheSwgaW5kZXg6IGluZGV4LCBjb3VudDogY291bnQsIHN1YnNjcmliZXI6IHN1YnNjcmliZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBcnJheU9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkFycmF5T2JzZXJ2YWJsZSA9IEFycmF5T2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFycmF5T2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc1Byb21pc2UgPSBpc1Byb21pc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcm9vdF8xID0gcmVxdWlyZSgnLi4vdXRpbC9yb290Jyk7XG5mdW5jdGlvbiBzeW1ib2xJdGVyYXRvclBvbnlmaWxsKHJvb3QpIHtcbiAgICB2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbCgnaXRlcmF0b3IgcG9seWZpbGwnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gW2ZvciBNb3ppbGxhIEdlY2tvIDI3LTM1Ol0oaHR0cHM6Ly9temwubGEvMmV3RTF6QylcbiAgICAgICAgdmFyIFNldF8xID0gcm9vdC5TZXQ7XG4gICAgICAgIGlmIChTZXRfMSAmJiB0eXBlb2YgbmV3IFNldF8xKClbJ0BAaXRlcmF0b3InXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgTWFwXzEgPSByb290Lk1hcDtcbiAgICAgICAgLy8gcmVxdWlyZWQgZm9yIGNvbXBhdGFiaWxpdHkgd2l0aCBlczYtc2hpbVxuICAgICAgICBpZiAoTWFwXzEpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTWFwXzEucHJvdG90eXBlKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIC8vIGFjY29yZGluZyB0byBzcGVjLCBNYXAucHJvdG90eXBlW0BAaXRlcmF0b3JdIGFuZCBNYXAub3JvdG90eXBlLmVudHJpZXMgbXVzdCBiZSBlcXVhbC5cbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnZW50cmllcycgJiYga2V5ICE9PSAnc2l6ZScgJiYgTWFwXzEucHJvdG90eXBlW2tleV0gPT09IE1hcF8xLnByb3RvdHlwZVsnZW50cmllcyddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxufVxuZXhwb3J0cy5zeW1ib2xJdGVyYXRvclBvbnlmaWxsID0gc3ltYm9sSXRlcmF0b3JQb255ZmlsbDtcbmV4cG9ydHMuaXRlcmF0b3IgPSBzeW1ib2xJdGVyYXRvclBvbnlmaWxsKHJvb3RfMS5yb290KTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGl0ZXJhdG9yIGluc3RlYWRcbiAqL1xuZXhwb3J0cy4kJGl0ZXJhdG9yID0gZXhwb3J0cy5pdGVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9TdWJzY3JpYmVyJyk7XG4vKipcbiAqIFdlIG5lZWQgdGhpcyBKU0RvYyBjb21tZW50IGZvciBhZmZlY3RpbmcgRVNEb2MuXG4gKiBAaWdub3JlXG4gKiBAZXh0ZW5kcyB7SWdub3JlZH1cbiAqL1xudmFyIElubmVyU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKElubmVyU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbm5lclN1YnNjcmliZXIocGFyZW50LCBvdXRlclZhbHVlLCBvdXRlckluZGV4KSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5vdXRlclZhbHVlID0gb3V0ZXJWYWx1ZTtcbiAgICAgICAgdGhpcy5vdXRlckluZGV4ID0gb3V0ZXJJbmRleDtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgfVxuICAgIElubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQubm90aWZ5TmV4dCh0aGlzLm91dGVyVmFsdWUsIHZhbHVlLCB0aGlzLm91dGVySW5kZXgsIHRoaXMuaW5kZXgrKywgdGhpcyk7XG4gICAgfTtcbiAgICBJbm5lclN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlFcnJvcihlcnJvciwgdGhpcyk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIElubmVyU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnBhcmVudC5ub3RpZnlDb21wbGV0ZSh0aGlzKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIElubmVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuSW5uZXJTdWJzY3JpYmVyID0gSW5uZXJTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZXJTdWJzY3JpYmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIHJvb3RfMSA9IHJlcXVpcmUoJy4vcm9vdCcpO1xudmFyIGlzQXJyYXlMaWtlXzEgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKCcuL2lzUHJvbWlzZScpO1xudmFyIGlzT2JqZWN0XzEgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIGl0ZXJhdG9yXzEgPSByZXF1aXJlKCcuLi9zeW1ib2wvaXRlcmF0b3InKTtcbnZhciBJbm5lclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL0lubmVyU3Vic2NyaWJlcicpO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoJy4uL3N5bWJvbC9vYnNlcnZhYmxlJyk7XG5mdW5jdGlvbiBzdWJzY3JpYmVUb1Jlc3VsdChvdXRlclN1YnNjcmliZXIsIHJlc3VsdCwgb3V0ZXJWYWx1ZSwgb3V0ZXJJbmRleCkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IG5ldyBJbm5lclN1YnNjcmliZXJfMS5Jbm5lclN1YnNjcmliZXIob3V0ZXJTdWJzY3JpYmVyLCBvdXRlclZhbHVlLCBvdXRlckluZGV4KTtcbiAgICBpZiAoZGVzdGluYXRpb24uY2xvc2VkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5faXNTY2FsYXIpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnN5bmNFcnJvclRocm93YWJsZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnN1YnNjcmliZShkZXN0aW5hdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNBcnJheUxpa2VfMS5pc0FycmF5TGlrZShyZXN1bHQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuICYmICFkZXN0aW5hdGlvbi5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChyZXN1bHRbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVzdGluYXRpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUHJvbWlzZV8xLmlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBkZXN0aW5hdGlvbi5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgLy8gRXNjYXBpbmcgdGhlIFByb21pc2UgdHJhcDogZ2xvYmFsbHkgdGhyb3cgdW5oYW5kbGVkIGVycm9yc1xuICAgICAgICAgICAgcm9vdF8xLnJvb3Quc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVzdGluYXRpb247XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0W2l0ZXJhdG9yXzEuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IHJlc3VsdFtpdGVyYXRvcl8xLml0ZXJhdG9yXSgpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmRvbmUpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dChpdGVtLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkZXN0aW5hdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0W29ic2VydmFibGVfMS5vYnNlcnZhYmxlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgb2JzID0gcmVzdWx0W29ic2VydmFibGVfMS5vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAodHlwZW9mIG9icy5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUobmV3IElubmVyU3Vic2NyaWJlcl8xLklubmVyU3Vic2NyaWJlcihvdXRlclN1YnNjcmliZXIsIG91dGVyVmFsdWUsIG91dGVySW5kZXgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaXNPYmplY3RfMS5pc09iamVjdChyZXN1bHQpID8gJ2FuIGludmFsaWQgb2JqZWN0JyA6IFwiJ1wiICsgcmVzdWx0ICsgXCInXCI7XG4gICAgICAgIHZhciBtc2cgPSAoXCJZb3UgcHJvdmlkZWQgXCIgKyB2YWx1ZSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC5cIilcbiAgICAgICAgICAgICsgJyBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgQXJyYXksIG9yIEl0ZXJhYmxlLic7XG4gICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKG5ldyBUeXBlRXJyb3IobXNnKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5zdWJzY3JpYmVUb1Jlc3VsdCA9IHN1YnNjcmliZVRvUmVzdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlVG9SZXN1bHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL1N1YnNjcmliZXInKTtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgT3V0ZXJTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoT3V0ZXJTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE91dGVyU3Vic2NyaWJlcigpIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5TmV4dCA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4LCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQoaW5uZXJWYWx1ZSk7XG4gICAgfTtcbiAgICBPdXRlclN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeUVycm9yID0gZnVuY3Rpb24gKGVycm9yLCBpbm5lclN1Yikge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycm9yKTtcbiAgICB9O1xuICAgIE91dGVyU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE91dGVyU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuT3V0ZXJTdWJzY3JpYmVyID0gT3V0ZXJTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3V0ZXJTdWJzY3JpYmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgc3Vic2NyaWJlVG9SZXN1bHRfMSA9IHJlcXVpcmUoJy4uL3V0aWwvc3Vic2NyaWJlVG9SZXN1bHQnKTtcbnZhciBPdXRlclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL091dGVyU3Vic2NyaWJlcicpO1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogUHJvamVjdHMgZWFjaCBzb3VyY2UgdmFsdWUgdG8gYW4gT2JzZXJ2YWJsZSB3aGljaCBpcyBtZXJnZWQgaW4gdGhlIG91dHB1dFxuICogT2JzZXJ2YWJsZS5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+TWFwcyBlYWNoIHZhbHVlIHRvIGFuIE9ic2VydmFibGUsIHRoZW4gZmxhdHRlbnMgYWxsIG9mXG4gKiB0aGVzZSBpbm5lciBPYnNlcnZhYmxlcyB1c2luZyB7QGxpbmsgbWVyZ2VBbGx9Ljwvc3Bhbj5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL21lcmdlTWFwLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGJhc2VkIG9uIGFwcGx5aW5nIGEgZnVuY3Rpb24gdGhhdCB5b3VcbiAqIHN1cHBseSB0byBlYWNoIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHdoZXJlIHRoYXQgZnVuY3Rpb25cbiAqIHJldHVybnMgYW4gT2JzZXJ2YWJsZSwgYW5kIHRoZW4gbWVyZ2luZyB0aG9zZSByZXN1bHRpbmcgT2JzZXJ2YWJsZXMgYW5kXG4gKiBlbWl0dGluZyB0aGUgcmVzdWx0cyBvZiB0aGlzIG1lcmdlci5cbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5NYXAgYW5kIGZsYXR0ZW4gZWFjaCBsZXR0ZXIgdG8gYW4gT2JzZXJ2YWJsZSB0aWNraW5nIGV2ZXJ5IDEgc2Vjb25kPC9jYXB0aW9uPlxuICogdmFyIGxldHRlcnMgPSBSeC5PYnNlcnZhYmxlLm9mKCdhJywgJ2InLCAnYycpO1xuICogdmFyIHJlc3VsdCA9IGxldHRlcnMubWVyZ2VNYXAoeCA9PlxuICogICBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLm1hcChpID0+IHgraSlcbiAqICk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIC8vIFJlc3VsdHMgaW4gdGhlIGZvbGxvd2luZzpcbiAqIC8vIGEwXG4gKiAvLyBiMFxuICogLy8gYzBcbiAqIC8vIGExXG4gKiAvLyBiMVxuICogLy8gYzFcbiAqIC8vIGNvbnRpbnVlcyB0byBsaXN0IGEsYixjIHdpdGggcmVzcGVjdGl2ZSBhc2NlbmRpbmcgaW50ZWdlcnNcbiAqXG4gKiBAc2VlIHtAbGluayBjb25jYXRNYXB9XG4gKiBAc2VlIHtAbGluayBleGhhdXN0TWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2V9XG4gKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlTWFwVG99XG4gKiBAc2VlIHtAbGluayBtZXJnZVNjYW59XG4gKiBAc2VlIHtAbGluayBzd2l0Y2hNYXB9XG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgP2luZGV4OiBudW1iZXIpOiBPYnNlcnZhYmxlSW5wdXR9IHByb2plY3QgQSBmdW5jdGlvblxuICogdGhhdCwgd2hlbiBhcHBsaWVkIHRvIGFuIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHJldHVybnMgYW5cbiAqIE9ic2VydmFibGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKG91dGVyVmFsdWU6IFQsIGlubmVyVmFsdWU6IEksIG91dGVySW5kZXg6IG51bWJlciwgaW5uZXJJbmRleDogbnVtYmVyKTogYW55fSBbcmVzdWx0U2VsZWN0b3JdXG4gKiBBIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHZhbHVlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBiYXNlZCBvbiB0aGUgdmFsdWVzXG4gKiBhbmQgdGhlIGluZGljZXMgb2YgdGhlIHNvdXJjZSAob3V0ZXIpIGVtaXNzaW9uIGFuZCB0aGUgaW5uZXIgT2JzZXJ2YWJsZVxuICogZW1pc3Npb24uIFRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24gYXJlOlxuICogLSBgb3V0ZXJWYWx1ZWA6IHRoZSB2YWx1ZSB0aGF0IGNhbWUgZnJvbSB0aGUgc291cmNlXG4gKiAtIGBpbm5lclZhbHVlYDogdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuICogLSBgb3V0ZXJJbmRleGA6IHRoZSBcImluZGV4XCIgb2YgdGhlIHZhbHVlIHRoYXQgY2FtZSBmcm9tIHRoZSBzb3VyY2VcbiAqIC0gYGlubmVySW5kZXhgOiB0aGUgXCJpbmRleFwiIG9mIHRoZSB2YWx1ZSBmcm9tIHRoZSBwcm9qZWN0ZWQgT2JzZXJ2YWJsZVxuICogQHBhcmFtIHtudW1iZXJ9IFtjb25jdXJyZW50PU51bWJlci5QT1NJVElWRV9JTkZJTklUWV0gTWF4aW11bSBudW1iZXIgb2YgaW5wdXRcbiAqIE9ic2VydmFibGVzIGJlaW5nIHN1YnNjcmliZWQgdG8gY29uY3VycmVudGx5LlxuICogQHJldHVybiB7T2JzZXJ2YWJsZX0gQW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlXG4gKiBwcm9qZWN0aW9uIGZ1bmN0aW9uIChhbmQgdGhlIG9wdGlvbmFsIGByZXN1bHRTZWxlY3RvcmApIHRvIGVhY2ggaXRlbSBlbWl0dGVkXG4gKiBieSB0aGUgc291cmNlIE9ic2VydmFibGUgYW5kIG1lcmdpbmcgdGhlIHJlc3VsdHMgb2YgdGhlIE9ic2VydmFibGVzIG9idGFpbmVkXG4gKiBmcm9tIHRoaXMgdHJhbnNmb3JtYXRpb24uXG4gKiBAbWV0aG9kIG1lcmdlTWFwXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZU1hcE9wZXJhdG9yRnVuY3Rpb24oc291cmNlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgICAgICByZXN1bHRTZWxlY3RvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWVyZ2VNYXAgPSBtZXJnZU1hcDtcbnZhciBNZXJnZU1hcE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNZXJnZU1hcE9wZXJhdG9yKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KSB7XG4gICAgICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTsgfVxuICAgICAgICB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuICAgICAgICB0aGlzLnJlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29uY3VycmVudCA9IGNvbmN1cnJlbnQ7XG4gICAgfVxuICAgIE1lcmdlTWFwT3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgTWVyZ2VNYXBTdWJzY3JpYmVyKG9ic2VydmVyLCB0aGlzLnByb2plY3QsIHRoaXMucmVzdWx0U2VsZWN0b3IsIHRoaXMuY29uY3VycmVudCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwT3BlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5NZXJnZU1hcE9wZXJhdG9yID0gTWVyZ2VNYXBPcGVyYXRvcjtcbi8qKlxuICogV2UgbmVlZCB0aGlzIEpTRG9jIGNvbW1lbnQgZm9yIGFmZmVjdGluZyBFU0RvYy5cbiAqIEBpZ25vcmVcbiAqIEBleHRlbmRzIHtJZ25vcmVkfVxuICovXG52YXIgTWVyZ2VNYXBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWVyZ2VNYXBTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1lcmdlTWFwU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgcHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgICAgICB0aGlzLmNvbmN1cnJlbnQgPSBjb25jdXJyZW50O1xuICAgICAgICB0aGlzLmhhc0NvbXBsZXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA8IHRoaXMuY29uY3VycmVudCkge1xuICAgICAgICAgICAgdGhpcy5fdHJ5TmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fdHJ5TmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnByb2plY3QodmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgdGhpcy5faW5uZXJTdWIocmVzdWx0LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5faW5uZXJTdWIgPSBmdW5jdGlvbiAoaXNoLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5hZGQoc3Vic2NyaWJlVG9SZXN1bHRfMS5zdWJzY3JpYmVUb1Jlc3VsdCh0aGlzLCBpc2gsIHZhbHVlLCBpbmRleCkpO1xuICAgIH07XG4gICAgTWVyZ2VNYXBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlID09PSAwICYmIHRoaXMuYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLm5vdGlmeU5leHQgPSBmdW5jdGlvbiAob3V0ZXJWYWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCwgaW5uZXJTdWIpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeVJlc3VsdFNlbGVjdG9yKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNZXJnZU1hcFN1YnNjcmliZXIucHJvdG90eXBlLl9ub3RpZnlSZXN1bHRTZWxlY3RvciA9IGZ1bmN0aW9uIChvdXRlclZhbHVlLCBpbm5lclZhbHVlLCBvdXRlckluZGV4LCBpbm5lckluZGV4KSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlc3VsdFNlbGVjdG9yKG91dGVyVmFsdWUsIGlubmVyVmFsdWUsIG91dGVySW5kZXgsIGlubmVySW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQocmVzdWx0KTtcbiAgICB9O1xuICAgIE1lcmdlTWFwU3Vic2NyaWJlci5wcm90b3R5cGUubm90aWZ5Q29tcGxldGUgPSBmdW5jdGlvbiAoaW5uZXJTdWIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICB0aGlzLnJlbW92ZShpbm5lclN1Yik7XG4gICAgICAgIHRoaXMuYWN0aXZlLS07XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fbmV4dChidWZmZXIuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hY3RpdmUgPT09IDAgJiYgdGhpcy5oYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1lcmdlTWFwU3Vic2NyaWJlcjtcbn0oT3V0ZXJTdWJzY3JpYmVyXzEuT3V0ZXJTdWJzY3JpYmVyKSk7XG5leHBvcnRzLk1lcmdlTWFwU3Vic2NyaWJlciA9IE1lcmdlTWFwU3Vic2NyaWJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuZXhwb3J0cy5pZGVudGl0eSA9IGlkZW50aXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoJy4vbWVyZ2VNYXAnKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZSgnLi4vdXRpbC9pZGVudGl0eScpO1xuLyoqXG4gKiBDb252ZXJ0cyBhIGhpZ2hlci1vcmRlciBPYnNlcnZhYmxlIGludG8gYSBmaXJzdC1vcmRlciBPYnNlcnZhYmxlIHdoaWNoXG4gKiBjb25jdXJyZW50bHkgZGVsaXZlcnMgYWxsIHZhbHVlcyB0aGF0IGFyZSBlbWl0dGVkIG9uIHRoZSBpbm5lciBPYnNlcnZhYmxlcy5cbiAqXG4gKiA8c3BhbiBjbGFzcz1cImluZm9ybWFsXCI+RmxhdHRlbnMgYW4gT2JzZXJ2YWJsZS1vZi1PYnNlcnZhYmxlcy48L3NwYW4+XG4gKlxuICogPGltZyBzcmM9XCIuL2ltZy9tZXJnZUFsbC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBgbWVyZ2VBbGxgIHN1YnNjcmliZXMgdG8gYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIE9ic2VydmFibGVzLCBhbHNvIGtub3duIGFzXG4gKiBhIGhpZ2hlci1vcmRlciBPYnNlcnZhYmxlLiBFYWNoIHRpbWUgaXQgb2JzZXJ2ZXMgb25lIG9mIHRoZXNlIGVtaXR0ZWQgaW5uZXJcbiAqIE9ic2VydmFibGVzLCBpdCBzdWJzY3JpYmVzIHRvIHRoYXQgYW5kIGRlbGl2ZXJzIGFsbCB0aGUgdmFsdWVzIGZyb20gdGhlXG4gKiBpbm5lciBPYnNlcnZhYmxlIG9uIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIG9ubHlcbiAqIGNvbXBsZXRlcyBvbmNlIGFsbCBpbm5lciBPYnNlcnZhYmxlcyBoYXZlIGNvbXBsZXRlZC4gQW55IGVycm9yIGRlbGl2ZXJlZCBieVxuICogYSBpbm5lciBPYnNlcnZhYmxlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZW1pdHRlZCBvbiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+U3Bhd24gYSBuZXcgaW50ZXJ2YWwgT2JzZXJ2YWJsZSBmb3IgZWFjaCBjbGljayBldmVudCwgYW5kIGJsZW5kIHRoZWlyIG91dHB1dHMgYXMgb25lIE9ic2VydmFibGU8L2NhcHRpb24+XG4gKiB2YXIgY2xpY2tzID0gUnguT2JzZXJ2YWJsZS5mcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogdmFyIGhpZ2hlck9yZGVyID0gY2xpY2tzLm1hcCgoZXYpID0+IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMTAwMCkpO1xuICogdmFyIGZpcnN0T3JkZXIgPSBoaWdoZXJPcmRlci5tZXJnZUFsbCgpO1xuICogZmlyc3RPcmRlci5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+Q291bnQgZnJvbSAwIHRvIDkgZXZlcnkgc2Vjb25kIGZvciBlYWNoIGNsaWNrLCBidXQgb25seSBhbGxvdyAyIGNvbmN1cnJlbnQgdGltZXJzPC9jYXB0aW9uPlxuICogdmFyIGNsaWNrcyA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIHZhciBoaWdoZXJPcmRlciA9IGNsaWNrcy5tYXAoKGV2KSA9PiBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApKTtcbiAqIHZhciBmaXJzdE9yZGVyID0gaGlnaGVyT3JkZXIubWVyZ2VBbGwoMik7XG4gKiBmaXJzdE9yZGVyLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqXG4gKiBAc2VlIHtAbGluayBjb21iaW5lQWxsfVxuICogQHNlZSB7QGxpbmsgY29uY2F0QWxsfVxuICogQHNlZSB7QGxpbmsgZXhoYXVzdH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXB9XG4gKiBAc2VlIHtAbGluayBtZXJnZU1hcFRvfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VTY2FufVxuICogQHNlZSB7QGxpbmsgc3dpdGNofVxuICogQHNlZSB7QGxpbmsgemlwQWxsfVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbY29uY3VycmVudD1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldIE1heGltdW0gbnVtYmVyIG9mIGlubmVyXG4gKiBPYnNlcnZhYmxlcyBiZWluZyBzdWJzY3JpYmVkIHRvIGNvbmN1cnJlbnRseS5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IEFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB2YWx1ZXMgY29taW5nIGZyb20gYWxsIHRoZVxuICogaW5uZXIgT2JzZXJ2YWJsZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAbWV0aG9kIG1lcmdlQWxsXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBtZXJnZUFsbChjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZOyB9XG4gICAgcmV0dXJuIG1lcmdlTWFwXzEubWVyZ2VNYXAoaWRlbnRpdHlfMS5pZGVudGl0eSwgbnVsbCwgY29uY3VycmVudCk7XG59XG5leHBvcnRzLm1lcmdlQWxsID0gbWVyZ2VBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9PYnNlcnZhYmxlJyk7XG52YXIgQXJyYXlPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL0FycmF5T2JzZXJ2YWJsZScpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKCcuLi91dGlsL2lzU2NoZWR1bGVyJyk7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoJy4uL29wZXJhdG9ycy9tZXJnZUFsbCcpO1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogQ3JlYXRlcyBhbiBvdXRwdXQgT2JzZXJ2YWJsZSB3aGljaCBjb25jdXJyZW50bHkgZW1pdHMgYWxsIHZhbHVlcyBmcm9tIGV2ZXJ5XG4gKiBnaXZlbiBpbnB1dCBPYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5GbGF0dGVucyBtdWx0aXBsZSBPYnNlcnZhYmxlcyB0b2dldGhlciBieSBibGVuZGluZ1xuICogdGhlaXIgdmFsdWVzIGludG8gb25lIE9ic2VydmFibGUuPC9zcGFuPlxuICpcbiAqIDxpbWcgc3JjPVwiLi9pbWcvbWVyZ2UucG5nXCIgd2lkdGg9XCIxMDAlXCI+XG4gKlxuICogYG1lcmdlYCBzdWJzY3JpYmVzIHRvIGVhY2ggZ2l2ZW4gaW5wdXQgT2JzZXJ2YWJsZSAoYXMgYXJndW1lbnRzKSwgYW5kIHNpbXBseVxuICogZm9yd2FyZHMgKHdpdGhvdXQgZG9pbmcgYW55IHRyYW5zZm9ybWF0aW9uKSBhbGwgdGhlIHZhbHVlcyBmcm9tIGFsbCB0aGUgaW5wdXRcbiAqIE9ic2VydmFibGVzIHRvIHRoZSBvdXRwdXQgT2JzZXJ2YWJsZS4gVGhlIG91dHB1dCBPYnNlcnZhYmxlIG9ubHkgY29tcGxldGVzXG4gKiBvbmNlIGFsbCBpbnB1dCBPYnNlcnZhYmxlcyBoYXZlIGNvbXBsZXRlZC4gQW55IGVycm9yIGRlbGl2ZXJlZCBieSBhbiBpbnB1dFxuICogT2JzZXJ2YWJsZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGVtaXR0ZWQgb24gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1lcmdlIHRvZ2V0aGVyIHR3byBPYnNlcnZhYmxlczogMXMgaW50ZXJ2YWwgYW5kIGNsaWNrczwvY2FwdGlvbj5cbiAqIHZhciBjbGlja3MgPSBSeC5PYnNlcnZhYmxlLmZyb21FdmVudChkb2N1bWVudCwgJ2NsaWNrJyk7XG4gKiB2YXIgdGltZXIgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApO1xuICogdmFyIGNsaWNrc09yVGltZXIgPSBSeC5PYnNlcnZhYmxlLm1lcmdlKGNsaWNrcywgdGltZXIpO1xuICogY2xpY2tzT3JUaW1lci5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKlxuICogLy8gUmVzdWx0cyBpbiB0aGUgZm9sbG93aW5nOlxuICogLy8gdGltZXIgd2lsbCBlbWl0IGFzY2VuZGluZyB2YWx1ZXMsIG9uZSBldmVyeSBzZWNvbmQoMTAwMG1zKSB0byBjb25zb2xlXG4gKiAvLyBjbGlja3MgbG9ncyBNb3VzZUV2ZW50cyB0byBjb25zb2xlIGV2ZXJ5dGltZSB0aGUgXCJkb2N1bWVudFwiIGlzIGNsaWNrZWRcbiAqIC8vIFNpbmNlIHRoZSB0d28gc3RyZWFtcyBhcmUgbWVyZ2VkIHlvdSBzZWUgdGhlc2UgaGFwcGVuaW5nXG4gKiAvLyBhcyB0aGV5IG9jY3VyLlxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPk1lcmdlIHRvZ2V0aGVyIDMgT2JzZXJ2YWJsZXMsIGJ1dCBvbmx5IDIgcnVuIGNvbmN1cnJlbnRseTwvY2FwdGlvbj5cbiAqIHZhciB0aW1lcjEgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDEwMDApLnRha2UoMTApO1xuICogdmFyIHRpbWVyMiA9IFJ4Lk9ic2VydmFibGUuaW50ZXJ2YWwoMjAwMCkudGFrZSg2KTtcbiAqIHZhciB0aW1lcjMgPSBSeC5PYnNlcnZhYmxlLmludGVydmFsKDUwMCkudGFrZSgxMCk7XG4gKiB2YXIgY29uY3VycmVudCA9IDI7IC8vIHRoZSBhcmd1bWVudFxuICogdmFyIG1lcmdlZCA9IFJ4Lk9ic2VydmFibGUubWVyZ2UodGltZXIxLCB0aW1lcjIsIHRpbWVyMywgY29uY3VycmVudCk7XG4gKiBtZXJnZWQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIC8vIFJlc3VsdHMgaW4gdGhlIGZvbGxvd2luZzpcbiAqIC8vIC0gRmlyc3QgdGltZXIxIGFuZCB0aW1lcjIgd2lsbCBydW4gY29uY3VycmVudGx5XG4gKiAvLyAtIHRpbWVyMSB3aWxsIGVtaXQgYSB2YWx1ZSBldmVyeSAxMDAwbXMgZm9yIDEwIGl0ZXJhdGlvbnNcbiAqIC8vIC0gdGltZXIyIHdpbGwgZW1pdCBhIHZhbHVlIGV2ZXJ5IDIwMDBtcyBmb3IgNiBpdGVyYXRpb25zXG4gKiAvLyAtIGFmdGVyIHRpbWVyMSBoaXRzIGl0J3MgbWF4IGl0ZXJhdGlvbiwgdGltZXIyIHdpbGxcbiAqIC8vICAgY29udGludWUsIGFuZCB0aW1lcjMgd2lsbCBzdGFydCB0byBydW4gY29uY3VycmVudGx5IHdpdGggdGltZXIyXG4gKiAvLyAtIHdoZW4gdGltZXIyIGhpdHMgaXQncyBtYXggaXRlcmF0aW9uIGl0IHRlcm1pbmF0ZXMsIGFuZFxuICogLy8gICB0aW1lcjMgd2lsbCBjb250aW51ZSB0byBlbWl0IGEgdmFsdWUgZXZlcnkgNTAwbXMgdW50aWwgaXQgaXMgY29tcGxldGVcbiAqXG4gKiBAc2VlIHtAbGluayBtZXJnZUFsbH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlTWFwfVxuICogQHNlZSB7QGxpbmsgbWVyZ2VNYXBUb31cbiAqIEBzZWUge0BsaW5rIG1lcmdlU2Nhbn1cbiAqXG4gKiBAcGFyYW0gey4uLk9ic2VydmFibGVJbnB1dH0gb2JzZXJ2YWJsZXMgSW5wdXQgT2JzZXJ2YWJsZXMgdG8gbWVyZ2UgdG9nZXRoZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gW2NvbmN1cnJlbnQ9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXSBNYXhpbXVtIG51bWJlciBvZiBpbnB1dFxuICogT2JzZXJ2YWJsZXMgYmVpbmcgc3Vic2NyaWJlZCB0byBjb25jdXJyZW50bHkuXG4gKiBAcGFyYW0ge1NjaGVkdWxlcn0gW3NjaGVkdWxlcj1udWxsXSBUaGUgSVNjaGVkdWxlciB0byB1c2UgZm9yIG1hbmFnaW5nXG4gKiBjb25jdXJyZW5jeSBvZiBpbnB1dCBPYnNlcnZhYmxlcy5cbiAqIEByZXR1cm4ge09ic2VydmFibGV9IGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyBpdGVtcyB0aGF0IGFyZSB0aGUgcmVzdWx0IG9mXG4gKiBldmVyeSBpbnB1dCBPYnNlcnZhYmxlLlxuICogQHN0YXRpYyB0cnVlXG4gKiBAbmFtZSBtZXJnZVxuICogQG93bmVyIE9ic2VydmFibGVcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgdmFyIG9ic2VydmFibGVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgb2JzZXJ2YWJsZXNbX2kgLSAwXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBjb25jdXJyZW50ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIHZhciBzY2hlZHVsZXIgPSBudWxsO1xuICAgIHZhciBsYXN0ID0gb2JzZXJ2YWJsZXNbb2JzZXJ2YWJsZXMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGlzU2NoZWR1bGVyXzEuaXNTY2hlZHVsZXIobGFzdCkpIHtcbiAgICAgICAgc2NoZWR1bGVyID0gb2JzZXJ2YWJsZXMucG9wKCk7XG4gICAgICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPiAxICYmIHR5cGVvZiBvYnNlcnZhYmxlc1tvYnNlcnZhYmxlcy5sZW5ndGggLSAxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbnQgPSBvYnNlcnZhYmxlcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgbGFzdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IG9ic2VydmFibGVzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSBudWxsICYmIG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMSAmJiBvYnNlcnZhYmxlc1swXSBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlc1swXTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlQWxsXzEubWVyZ2VBbGwoY29uY3VycmVudCkobmV3IEFycmF5T2JzZXJ2YWJsZV8xLkFycmF5T2JzZXJ2YWJsZShvYnNlcnZhYmxlcywgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59O1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhbiBhY3Rpb24gaXMgaW52YWxpZCBiZWNhdXNlIHRoZSBvYmplY3QgaGFzIGJlZW5cbiAqIHVuc3Vic2NyaWJlZC5cbiAqXG4gKiBAc2VlIHtAbGluayBTdWJqZWN0fVxuICogQHNlZSB7QGxpbmsgQmVoYXZpb3JTdWJqZWN0fVxuICpcbiAqIEBjbGFzcyBPYmplY3RVbnN1YnNjcmliZWRFcnJvclxuICovXG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPYmplY3RVbnN1YnNjcmliZWRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpIHtcbiAgICAgICAgdmFyIGVyciA9IF9zdXBlci5jYWxsKHRoaXMsICdvYmplY3QgdW5zdWJzY3JpYmVkJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IGVyci5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgdGhpcy5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKCcuL1N1YnNjcmlwdGlvbicpO1xuLyoqXG4gKiBXZSBuZWVkIHRoaXMgSlNEb2MgY29tbWVudCBmb3IgYWZmZWN0aW5nIEVTRG9jLlxuICogQGlnbm9yZVxuICogQGV4dGVuZHMge0lnbm9yZWR9XG4gKi9cbnZhciBTdWJqZWN0U3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdFN1YnNjcmlwdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgfVxuICAgIFN1YmplY3RTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0O1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gc3ViamVjdC5vYnNlcnZlcnM7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IG51bGw7XG4gICAgICAgIGlmICghb2JzZXJ2ZXJzIHx8IG9ic2VydmVycy5sZW5ndGggPT09IDAgfHwgc3ViamVjdC5pc1N0b3BwZWQgfHwgc3ViamVjdC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3Vic2NyaWJlckluZGV4ID0gb2JzZXJ2ZXJzLmluZGV4T2YodGhpcy5zdWJzY3JpYmVyKTtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2Uoc3Vic2NyaWJlckluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpcHRpb247XG59KFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbikpO1xuZXhwb3J0cy5TdWJqZWN0U3Vic2NyaXB0aW9uID0gU3ViamVjdFN1YnNjcmlwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3RTdWJzY3JpcHRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuL09ic2VydmFibGUnKTtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKCcuL1N1YnNjcmliZXInKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7XG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JfMSA9IHJlcXVpcmUoJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcicpO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4vU3ViamVjdFN1YnNjcmlwdGlvbicpO1xudmFyIHJ4U3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi9zeW1ib2wvcnhTdWJzY3JpYmVyJyk7XG4vKipcbiAqIEBjbGFzcyBTdWJqZWN0U3Vic2NyaWJlcjxUPlxuICovXG52YXIgU3ViamVjdFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0U3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIFN1YmplY3RTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuZXhwb3J0cy5TdWJqZWN0U3Vic2NyaWJlciA9IFN1YmplY3RTdWJzY3JpYmVyO1xuLyoqXG4gKiBAY2xhc3MgU3ViamVjdDxUPlxuICovXG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IG51bGw7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlW3J4U3Vic2NyaWJlcl8xLnJ4U3Vic2NyaWJlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3ViamVjdFN1YnNjcmliZXIodGhpcyk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICB2YXIgbGVuID0gb2JzZXJ2ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjb3B5ID0gb2JzZXJ2ZXJzLnNsaWNlKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29weVtpXS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIHZhciBsZW4gPSBvYnNlcnZlcnMubGVuZ3RoO1xuICAgICAgICB2YXIgY29weSA9IG9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjb3B5W2ldLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRoaXMudGhyb3duRXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN1YmplY3RTdWJzY3JpcHRpb25fMS5TdWJqZWN0U3Vic2NyaXB0aW9uKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdDtcbi8qKlxuICogQGNsYXNzIEFub255bW91c1N1YmplY3Q8VD5cbiAqL1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24ubmV4dCkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSB0aGlzLmRlc3RpbmF0aW9uO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24gJiYgZGVzdGluYXRpb24uZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHRoaXMuZGVzdGluYXRpb247XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbi5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydHMuQW5vbnltb3VzU3ViamVjdCA9IEFub255bW91c1N1YmplY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn07XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZSgnLi4vU3Vic2NyaWJlcicpO1xuZnVuY3Rpb24gcmVmQ291bnQoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlZkNvdW50T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5saWZ0KG5ldyBSZWZDb3VudE9wZXJhdG9yKHNvdXJjZSkpO1xuICAgIH07XG59XG5leHBvcnRzLnJlZkNvdW50ID0gcmVmQ291bnQ7XG52YXIgUmVmQ291bnRPcGVyYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRPcGVyYXRvcihjb25uZWN0YWJsZSkge1xuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgfVxuICAgIFJlZkNvdW50T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCsrO1xuICAgICAgICB2YXIgcmVmQ291bnRlciA9IG5ldyBSZWZDb3VudFN1YnNjcmliZXIoc3Vic2NyaWJlciwgY29ubmVjdGFibGUpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShyZWZDb3VudGVyKTtcbiAgICAgICAgaWYgKCFyZWZDb3VudGVyLmNsb3NlZCkge1xuICAgICAgICAgICAgcmVmQ291bnRlci5jb25uZWN0aW9uID0gY29ubmVjdGFibGUuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRPcGVyYXRvcjtcbn0oKSk7XG52YXIgUmVmQ291bnRTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVmQ291bnRTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFJlZkNvdW50U3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgY29ubmVjdGFibGUpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pO1xuICAgICAgICB0aGlzLmNvbm5lY3RhYmxlID0gY29ubmVjdGFibGU7XG4gICAgfVxuICAgIFJlZkNvdW50U3Vic2NyaWJlci5wcm90b3R5cGUuX3Vuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29ubmVjdGFibGUgPSB0aGlzLmNvbm5lY3RhYmxlO1xuICAgICAgICBpZiAoIWNvbm5lY3RhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBudWxsO1xuICAgICAgICB2YXIgcmVmQ291bnQgPSBjb25uZWN0YWJsZS5fcmVmQ291bnQ7XG4gICAgICAgIGlmIChyZWZDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RhYmxlLl9yZWZDb3VudCA9IHJlZkNvdW50IC0gMTtcbiAgICAgICAgaWYgKHJlZkNvdW50ID4gMSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLy9cbiAgICAgICAgLy8gQ29tcGFyZSB0aGUgbG9jYWwgUmVmQ291bnRTdWJzY3JpYmVyJ3MgY29ubmVjdGlvbiBTdWJzY3JpcHRpb24gdG8gdGhlXG4gICAgICAgIC8vIGNvbm5lY3Rpb24gU3Vic2NyaXB0aW9uIG9uIHRoZSBzaGFyZWQgQ29ubmVjdGFibGVPYnNlcnZhYmxlLiBJbiBjYXNlc1xuICAgICAgICAvLyB3aGVyZSB0aGUgQ29ubmVjdGFibGVPYnNlcnZhYmxlIHNvdXJjZSBzeW5jaHJvbm91c2x5IGVtaXRzIHZhbHVlcywgYW5kXG4gICAgICAgIC8vIHRoZSBSZWZDb3VudFN1YnNjcmliZXIncyBkb3duc3RyZWFtIE9ic2VydmVycyBzeW5jaHJvbm91c2x5IHVuc3Vic2NyaWJlLFxuICAgICAgICAvLyBleGVjdXRpb24gY29udGludWVzIHRvIGhlcmUgYmVmb3JlIHRoZSBSZWZDb3VudE9wZXJhdG9yIGhhcyBhIGNoYW5jZSB0b1xuICAgICAgICAvLyBzdXBwbHkgdGhlIFJlZkNvdW50U3Vic2NyaWJlciB3aXRoIHRoZSBzaGFyZWQgY29ubmVjdGlvbiBTdWJzY3JpcHRpb24uXG4gICAgICAgIC8vIEZvciBleGFtcGxlOlxuICAgICAgICAvLyBgYGBcbiAgICAgICAgLy8gT2JzZXJ2YWJsZS5yYW5nZSgwLCAxMClcbiAgICAgICAgLy8gICAucHVibGlzaCgpXG4gICAgICAgIC8vICAgLnJlZkNvdW50KClcbiAgICAgICAgLy8gICAudGFrZSg1KVxuICAgICAgICAvLyAgIC5zdWJzY3JpYmUoKTtcbiAgICAgICAgLy8gYGBgXG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGFjY291bnQgZm9yIHRoaXMgY2FzZSwgUmVmQ291bnRTdWJzY3JpYmVyIHNob3VsZCBvbmx5IGRpc3Bvc2VcbiAgICAgICAgLy8gdGhlIENvbm5lY3RhYmxlT2JzZXJ2YWJsZSdzIHNoYXJlZCBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbiBpZiB0aGVcbiAgICAgICAgLy8gY29ubmVjdGlvbiBTdWJzY3JpcHRpb24gZXhpc3RzLCAqYW5kKiBlaXRoZXI6XG4gICAgICAgIC8vICAgYS4gUmVmQ291bnRTdWJzY3JpYmVyIGRvZXNuJ3QgaGF2ZSBhIHJlZmVyZW5jZSB0byB0aGUgc2hhcmVkIGNvbm5lY3Rpb25cbiAgICAgICAgLy8gICAgICBTdWJzY3JpcHRpb24geWV0LCBvcixcbiAgICAgICAgLy8gICBiLiBSZWZDb3VudFN1YnNjcmliZXIncyBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbiByZWZlcmVuY2UgaXMgaWRlbnRpY2FsXG4gICAgICAgIC8vICAgICAgdG8gdGhlIHNoYXJlZCBjb25uZWN0aW9uIFN1YnNjcmlwdGlvblxuICAgICAgICAvLy9cbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb247XG4gICAgICAgIHZhciBzaGFyZWRDb25uZWN0aW9uID0gY29ubmVjdGFibGUuX2Nvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzaGFyZWRDb25uZWN0aW9uICYmICghY29ubmVjdGlvbiB8fCBzaGFyZWRDb25uZWN0aW9uID09PSBjb25uZWN0aW9uKSkge1xuICAgICAgICAgICAgc2hhcmVkQ29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVmQ291bnRTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmQ291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKCcuLi9TdWJqZWN0Jyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgnLi4vT2JzZXJ2YWJsZScpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmliZXInKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoJy4uL1N1YnNjcmlwdGlvbicpO1xudmFyIHJlZkNvdW50XzEgPSByZXF1aXJlKCcuLi9vcGVyYXRvcnMvcmVmQ291bnQnKTtcbi8qKlxuICogQGNsYXNzIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPlxuICovXG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29ubmVjdGFibGVPYnNlcnZhYmxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIHN1YmplY3RGYWN0b3J5KSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuICAgICAgICB0aGlzLl9yZWZDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX2lzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB9XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3ViamVjdCgpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0U3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSB0aGlzLl9zdWJqZWN0O1xuICAgICAgICBpZiAoIXN1YmplY3QgfHwgc3ViamVjdC5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1YmplY3QgPSB0aGlzLnN1YmplY3RGYWN0b3J5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YmplY3Q7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uYWRkKHRoaXMuc291cmNlXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShuZXcgQ29ubmVjdGFibGVTdWJzY3JpYmVyKHRoaXMuZ2V0U3ViamVjdCgpLCB0aGlzKSkpO1xuICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbi5FTVBUWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBjb25uZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5yZWZDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlZkNvdW50XzEucmVmQ291bnQoKSh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBDb25uZWN0YWJsZU9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IENvbm5lY3RhYmxlT2JzZXJ2YWJsZTtcbnZhciBjb25uZWN0YWJsZVByb3RvID0gQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZTtcbmV4cG9ydHMuY29ubmVjdGFibGVPYnNlcnZhYmxlRGVzY3JpcHRvciA9IHtcbiAgICBvcGVyYXRvcjogeyB2YWx1ZTogbnVsbCB9LFxuICAgIF9yZWZDb3VudDogeyB2YWx1ZTogMCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBfc3ViamVjdDogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBfY29ubmVjdGlvbjogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBfc3Vic2NyaWJlOiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLl9zdWJzY3JpYmUgfSxcbiAgICBfaXNDb21wbGV0ZTogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5faXNDb21wbGV0ZSwgd3JpdGFibGU6IHRydWUgfSxcbiAgICBnZXRTdWJqZWN0OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLmdldFN1YmplY3QgfSxcbiAgICBjb25uZWN0OiB7IHZhbHVlOiBjb25uZWN0YWJsZVByb3RvLmNvbm5lY3QgfSxcbiAgICByZWZDb3VudDogeyB2YWx1ZTogY29ubmVjdGFibGVQcm90by5yZWZDb3VudCB9XG59O1xudmFyIENvbm5lY3RhYmxlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbm5lY3RhYmxlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb25uZWN0YWJsZVN1YnNjcmliZXIoZGVzdGluYXRpb24sIGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IGNvbm5lY3RhYmxlO1xuICAgIH1cbiAgICBDb25uZWN0YWJsZVN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUuX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl91bnN1YnNjcmliZSgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGlmIChjb25uZWN0YWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY29ubmVjdGlvbiA9IGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uO1xuICAgICAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50ID0gMDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9zdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIGNvbm5lY3RhYmxlLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29ubmVjdGFibGVTdWJzY3JpYmVyO1xufShTdWJqZWN0XzEuU3ViamVjdFN1YnNjcmliZXIpKTtcbnZhciBSZWZDb3VudE9wZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWZDb3VudE9wZXJhdG9yKGNvbm5lY3RhYmxlKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICB9XG4gICAgUmVmQ291bnRPcGVyYXRvci5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gdGhpcy5jb25uZWN0YWJsZTtcbiAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50Kys7XG4gICAgICAgIHZhciByZWZDb3VudGVyID0gbmV3IFJlZkNvdW50U3Vic2NyaWJlcihzdWJzY3JpYmVyLCBjb25uZWN0YWJsZSk7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBzb3VyY2Uuc3Vic2NyaWJlKHJlZkNvdW50ZXIpO1xuICAgICAgICBpZiAoIXJlZkNvdW50ZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICByZWZDb3VudGVyLmNvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5jb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudE9wZXJhdG9yO1xufSgpKTtcbnZhciBSZWZDb3VudFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZWZDb3VudFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVmQ291bnRTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBjb25uZWN0YWJsZSkge1xuICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBkZXN0aW5hdGlvbik7XG4gICAgICAgIHRoaXMuY29ubmVjdGFibGUgPSBjb25uZWN0YWJsZTtcbiAgICB9XG4gICAgUmVmQ291bnRTdWJzY3JpYmVyLnByb3RvdHlwZS5fdW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb25uZWN0YWJsZSA9IHRoaXMuY29ubmVjdGFibGU7XG4gICAgICAgIGlmICghY29ubmVjdGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uZWN0YWJsZSA9IG51bGw7XG4gICAgICAgIHZhciByZWZDb3VudCA9IGNvbm5lY3RhYmxlLl9yZWZDb3VudDtcbiAgICAgICAgaWYgKHJlZkNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGFibGUuX3JlZkNvdW50ID0gcmVmQ291bnQgLSAxO1xuICAgICAgICBpZiAocmVmQ291bnQgPiAxKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vL1xuICAgICAgICAvLyBDb21wYXJlIHRoZSBsb2NhbCBSZWZDb3VudFN1YnNjcmliZXIncyBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbiB0byB0aGVcbiAgICAgICAgLy8gY29ubmVjdGlvbiBTdWJzY3JpcHRpb24gb24gdGhlIHNoYXJlZCBDb25uZWN0YWJsZU9ic2VydmFibGUuIEluIGNhc2VzXG4gICAgICAgIC8vIHdoZXJlIHRoZSBDb25uZWN0YWJsZU9ic2VydmFibGUgc291cmNlIHN5bmNocm9ub3VzbHkgZW1pdHMgdmFsdWVzLCBhbmRcbiAgICAgICAgLy8gdGhlIFJlZkNvdW50U3Vic2NyaWJlcidzIGRvd25zdHJlYW0gT2JzZXJ2ZXJzIHN5bmNocm9ub3VzbHkgdW5zdWJzY3JpYmUsXG4gICAgICAgIC8vIGV4ZWN1dGlvbiBjb250aW51ZXMgdG8gaGVyZSBiZWZvcmUgdGhlIFJlZkNvdW50T3BlcmF0b3IgaGFzIGEgY2hhbmNlIHRvXG4gICAgICAgIC8vIHN1cHBseSB0aGUgUmVmQ291bnRTdWJzY3JpYmVyIHdpdGggdGhlIHNoYXJlZCBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbi5cbiAgICAgICAgLy8gRm9yIGV4YW1wbGU6XG4gICAgICAgIC8vIGBgYFxuICAgICAgICAvLyBPYnNlcnZhYmxlLnJhbmdlKDAsIDEwKVxuICAgICAgICAvLyAgIC5wdWJsaXNoKClcbiAgICAgICAgLy8gICAucmVmQ291bnQoKVxuICAgICAgICAvLyAgIC50YWtlKDUpXG4gICAgICAgIC8vICAgLnN1YnNjcmliZSgpO1xuICAgICAgICAvLyBgYGBcbiAgICAgICAgLy8gSW4gb3JkZXIgdG8gYWNjb3VudCBmb3IgdGhpcyBjYXNlLCBSZWZDb3VudFN1YnNjcmliZXIgc2hvdWxkIG9ubHkgZGlzcG9zZVxuICAgICAgICAvLyB0aGUgQ29ubmVjdGFibGVPYnNlcnZhYmxlJ3Mgc2hhcmVkIGNvbm5lY3Rpb24gU3Vic2NyaXB0aW9uIGlmIHRoZVxuICAgICAgICAvLyBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbiBleGlzdHMsICphbmQqIGVpdGhlcjpcbiAgICAgICAgLy8gICBhLiBSZWZDb3VudFN1YnNjcmliZXIgZG9lc24ndCBoYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBzaGFyZWQgY29ubmVjdGlvblxuICAgICAgICAvLyAgICAgIFN1YnNjcmlwdGlvbiB5ZXQsIG9yLFxuICAgICAgICAvLyAgIGIuIFJlZkNvdW50U3Vic2NyaWJlcidzIGNvbm5lY3Rpb24gU3Vic2NyaXB0aW9uIHJlZmVyZW5jZSBpcyBpZGVudGljYWxcbiAgICAgICAgLy8gICAgICB0byB0aGUgc2hhcmVkIGNvbm5lY3Rpb24gU3Vic2NyaXB0aW9uXG4gICAgICAgIC8vL1xuICAgICAgICB2YXIgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbjtcbiAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBjb25uZWN0YWJsZS5fY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uZWN0aW9uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICBzaGFyZWRDb25uZWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZWZDb3VudFN1YnNjcmliZXI7XG59KFN1YnNjcmliZXJfMS5TdWJzY3JpYmVyKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db25uZWN0YWJsZU9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgQ29ubmVjdGFibGVPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCcuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZScpO1xuLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2YgaW52b2tpbmcgYSBzcGVjaWZpZWQgc2VsZWN0b3Igb24gaXRlbXNcbiAqIGVtaXR0ZWQgYnkgYSBDb25uZWN0YWJsZU9ic2VydmFibGUgdGhhdCBzaGFyZXMgYSBzaW5nbGUgc3Vic2NyaXB0aW9uIHRvIHRoZSB1bmRlcmx5aW5nIHN0cmVhbS5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL211bHRpY2FzdC5wbmdcIiB3aWR0aD1cIjEwMCVcIj5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN1YmplY3R9IHN1YmplY3RPclN1YmplY3RGYWN0b3J5IC0gRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgYW4gaW50ZXJtZWRpYXRlIHN1YmplY3QgdGhyb3VnaFxuICogd2hpY2ggdGhlIHNvdXJjZSBzZXF1ZW5jZSdzIGVsZW1lbnRzIHdpbGwgYmUgbXVsdGljYXN0IHRvIHRoZSBzZWxlY3RvciBmdW5jdGlvblxuICogb3IgU3ViamVjdCB0byBwdXNoIHNvdXJjZSBlbGVtZW50cyBpbnRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3NlbGVjdG9yXSAtIE9wdGlvbmFsIHNlbGVjdG9yIGZ1bmN0aW9uIHRoYXQgY2FuIHVzZSB0aGUgbXVsdGljYXN0ZWQgc291cmNlIHN0cmVhbVxuICogYXMgbWFueSB0aW1lcyBhcyBuZWVkZWQsIHdpdGhvdXQgY2F1c2luZyBtdWx0aXBsZSBzdWJzY3JpcHRpb25zIHRvIHRoZSBzb3VyY2Ugc3RyZWFtLlxuICogU3Vic2NyaWJlcnMgdG8gdGhlIGdpdmVuIHNvdXJjZSB3aWxsIHJlY2VpdmUgYWxsIG5vdGlmaWNhdGlvbnMgb2YgdGhlIHNvdXJjZSBmcm9tIHRoZVxuICogdGltZSBvZiB0aGUgc3Vic2NyaXB0aW9uIGZvcndhcmQuXG4gKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSBBbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgdGhlIHJlc3VsdHMgb2YgaW52b2tpbmcgdGhlIHNlbGVjdG9yXG4gKiBvbiB0aGUgaXRlbXMgZW1pdHRlZCBieSBhIGBDb25uZWN0YWJsZU9ic2VydmFibGVgIHRoYXQgc2hhcmVzIGEgc2luZ2xlIHN1YnNjcmlwdGlvbiB0b1xuICogdGhlIHVuZGVybHlpbmcgc3RyZWFtLlxuICogQG1ldGhvZCBtdWx0aWNhc3RcbiAqIEBvd25lciBPYnNlcnZhYmxlXG4gKi9cbmZ1bmN0aW9uIG11bHRpY2FzdChzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbXVsdGljYXN0T3BlcmF0b3JGdW5jdGlvbihzb3VyY2UpIHtcbiAgICAgICAgdmFyIHN1YmplY3RGYWN0b3J5O1xuICAgICAgICBpZiAodHlwZW9mIHN1YmplY3RPclN1YmplY3RGYWN0b3J5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RPclN1YmplY3RGYWN0b3J5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3ViamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBzdWJqZWN0RmFjdG9yeSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ViamVjdE9yU3ViamVjdEZhY3Rvcnk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChuZXcgTXVsdGljYXN0T3BlcmF0b3Ioc3ViamVjdEZhY3RvcnksIHNlbGVjdG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbm5lY3RhYmxlID0gT2JqZWN0LmNyZWF0ZShzb3VyY2UsIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLmNvbm5lY3RhYmxlT2JzZXJ2YWJsZURlc2NyaXB0b3IpO1xuICAgICAgICBjb25uZWN0YWJsZS5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIGNvbm5lY3RhYmxlLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIHJldHVybiBjb25uZWN0YWJsZTtcbiAgICB9O1xufVxuZXhwb3J0cy5tdWx0aWNhc3QgPSBtdWx0aWNhc3Q7XG52YXIgTXVsdGljYXN0T3BlcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11bHRpY2FzdE9wZXJhdG9yKHN1YmplY3RGYWN0b3J5LCBzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnN1YmplY3RGYWN0b3J5ID0gc3ViamVjdEZhY3Rvcnk7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICB9XG4gICAgTXVsdGljYXN0T3BlcmF0b3IucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoc3Vic2NyaWJlciwgc291cmNlKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5zdWJqZWN0RmFjdG9yeSgpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gc2VsZWN0b3Ioc3ViamVjdCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpcHRpb24uYWRkKHNvdXJjZS5zdWJzY3JpYmUoc3ViamVjdCkpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIE11bHRpY2FzdE9wZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuTXVsdGljYXN0T3BlcmF0b3IgPSBNdWx0aWNhc3RPcGVyYXRvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpY2FzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBzaGFyZV8xID0gcmVxdWlyZSgnLi4vb3BlcmF0b3JzL3NoYXJlJyk7XG4vKipcbiAqIFJldHVybnMgYSBuZXcgT2JzZXJ2YWJsZSB0aGF0IG11bHRpY2FzdHMgKHNoYXJlcykgdGhlIG9yaWdpbmFsIE9ic2VydmFibGUuIEFzIGxvbmcgYXMgdGhlcmUgaXMgYXQgbGVhc3Qgb25lXG4gKiBTdWJzY3JpYmVyIHRoaXMgT2JzZXJ2YWJsZSB3aWxsIGJlIHN1YnNjcmliZWQgYW5kIGVtaXR0aW5nIGRhdGEuIFdoZW4gYWxsIHN1YnNjcmliZXJzIGhhdmUgdW5zdWJzY3JpYmVkIGl0IHdpbGxcbiAqIHVuc3Vic2NyaWJlIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLiBCZWNhdXNlIHRoZSBPYnNlcnZhYmxlIGlzIG11bHRpY2FzdGluZyBpdCBtYWtlcyB0aGUgc3RyZWFtIGBob3RgLlxuICpcbiAqIFRoaXMgYmVoYXZlcyBzaW1pbGFybHkgdG8gLnB1Ymxpc2goKS5yZWZDb3VudCgpLCB3aXRoIGEgYmVoYXZpb3IgZGlmZmVyZW5jZSB3aGVuIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSBlbWl0cyBjb21wbGV0ZS5cbiAqIC5wdWJsaXNoKCkucmVmQ291bnQoKSB3aWxsIG5vdCByZXN1YnNjcmliZSB0byB0aGUgb3JpZ2luYWwgc291cmNlLCBob3dldmVyIC5zaGFyZSgpIHdpbGwgcmVzdWJzY3JpYmUgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqIE9ic2VydmFibGUub2YoXCJ0ZXN0XCIpLnB1Ymxpc2goKS5yZWZDb3VudCgpIHdpbGwgbm90IHJlLWVtaXQgXCJ0ZXN0XCIgb24gbmV3IHN1YnNjcmlwdGlvbnMsIE9ic2VydmFibGUub2YoXCJ0ZXN0XCIpLnNoYXJlKCkgd2lsbFxuICogcmUtZW1pdCBcInRlc3RcIiB0byBuZXcgc3Vic2NyaXB0aW9ucy5cbiAqXG4gKiA8aW1nIHNyYz1cIi4vaW1nL3NoYXJlLnBuZ1wiIHdpZHRoPVwiMTAwJVwiPlxuICpcbiAqIEByZXR1cm4ge09ic2VydmFibGU8VD59IEFuIE9ic2VydmFibGUgdGhhdCB1cG9uIGNvbm5lY3Rpb24gY2F1c2VzIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZSB0byBlbWl0IGl0ZW1zIHRvIGl0cyBPYnNlcnZlcnMuXG4gKiBAbWV0aG9kIHNoYXJlXG4gKiBAb3duZXIgT2JzZXJ2YWJsZVxuICovXG5mdW5jdGlvbiBzaGFyZSgpIHtcbiAgICByZXR1cm4gc2hhcmVfMS5zaGFyZSgpKHRoaXMpO1xufVxuZXhwb3J0cy5zaGFyZSA9IHNoYXJlO1xuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmUuanMubWFwIiwiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gSXNzdWUgIzIyMjQzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9pc3N1ZXMvMjIyNDNcbmRlY2xhcmUgbGV0IHJlcXVpcmU6IEZ1bmN0aW9uO1xuY29uc3QgZmlsZXNpemUgPSByZXF1aXJlKCdmaWxlc2l6ZScpO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogJ2ZpbGVzaXplJ1xufSlcbmV4cG9ydCBjbGFzcyBGaWxlU2l6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgICB0cmFuc2Zvcm0odmFsdWU6IG51bWJlciB8IG51bWJlcltdLCBvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKHZhbCA9PiBGaWxlU2l6ZVBpcGUudHJhbnNmb3JtT25lKHZhbCwgb3B0aW9ucykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEZpbGVTaXplUGlwZS50cmFuc2Zvcm1PbmUodmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHRyYW5zZm9ybU9uZSh2YWx1ZTogbnVtYmVyLCBvcHRpb25zOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gZmlsZXNpemUodmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbn0iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RmlsZVNpemVQaXBlfSBmcm9tICcuL2ZpbGVzaXplLnBpcGUnO1xuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBGaWxlU2l6ZVBpcGVcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgRmlsZVNpemVQaXBlXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBGaWxlU2l6ZU1vZHVsZSB7fSJdLCJuYW1lcyI6WyJ0cnlDYXRjaGVyIiwidHJ5Q2F0Y2hUYXJnZXQiLCJhcHBseSIsInRoaXMiLCJhcmd1bWVudHMiLCJlIiwiZXJyb3JPYmplY3RfMSIsImVycm9yT2JqZWN0IiwiZmxhdHRlblVuc3Vic2NyaXB0aW9uRXJyb3JzIiwiZXJyb3JzIiwicmVkdWNlIiwiZXJycyIsImVyciIsImNvbmNhdCIsIlVuc3Vic2NyaXB0aW9uRXJyb3JfMSIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJwaXBlRnJvbUFycmF5IiwiZm5zIiwibGVuZ3RoIiwiaW5wdXQiLCJwcmV2IiwiZm4iLCJub29wXzEiLCJub29wIiwic2hhcmVTdWJqZWN0RmFjdG9yeSIsIlN1YmplY3RfMSIsIlN1YmplY3QiLCJtYWtlRGVjb3JhdG9yIiwibmFtZSIsInByb3BzIiwicGFyZW50Q2xhc3MiLCJjaGFpbkZuIiwiRGVjb3JhdG9yRmFjdG9yeSIsIm9iak9yVHlwZSIsIm1ldGFDdG9yIiwiY2FsbCIsImFubm90YXRpb25JbnN0YW5jZSIsIlR5cGVEZWNvcmF0b3IiLCJjbHMiLCJoYXNPd25Qcm9wZXJ0eSIsIkFOTk9UQVRJT05TIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsInB1c2giLCJtYWtlTWV0YWRhdGFDdG9yIiwicHJvdG90eXBlIiwiY3JlYXRlIiwibmdNZXRhZGF0YU5hbWUiLCJhbm5vdGF0aW9uQ2xzIiwiYXJncyIsIl9pIiwidmFsdWVzIiwicHJvcE5hbWUiLCJtYWtlUGFyYW1EZWNvcmF0b3IiLCJQYXJhbURlY29yYXRvckZhY3RvcnkiLCJQYXJhbURlY29yYXRvciIsInVudXNlZEtleSIsImluZGV4IiwicGFyYW1ldGVycyIsIlBBUkFNRVRFUlMiLCJfYSIsImJpbmQiLCJhbm5vdGF0aW9uIiwibWFrZVByb3BEZWNvcmF0b3IiLCJQcm9wRGVjb3JhdG9yRmFjdG9yeSIsImRlY29yYXRvckluc3RhbmNlIiwidGFyZ2V0IiwiY29uc3RydWN0b3IiLCJtZXRhIiwiUFJPUF9NRVRBREFUQSIsInVuc2hpZnQiLCJnZXRTeW1ib2xJdGVyYXRvciIsIl9zeW1ib2xJdGVyYXRvciIsIlN5bWJvbF8xIiwiX2dsb2JhbCIsIml0ZXJhdG9yIiwia2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJNYXAiLCJpIiwia2V5Iiwic2NoZWR1bGVNaWNyb1Rhc2siLCJab25lIiwiY3VycmVudCIsImxvb3NlSWRlbnRpY2FsIiwiYSIsImIiLCJpc05hTiIsInN0cmluZ2lmeSIsInRva2VuIiwiQXJyYXkiLCJtYXAiLCJqb2luIiwib3ZlcnJpZGRlbk5hbWUiLCJyZXMiLCJ0b1N0cmluZyIsIm5ld0xpbmVJbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJmb3J3YXJkUmVmIiwiZm9yd2FyZFJlZkZuIiwiX19mb3J3YXJkX3JlZl9fIiwicmVzb2x2ZUZvcndhcmRSZWYiLCJ0eXBlIiwicmVzb2x2ZVByb3ZpZGVyIiwicHJvdmlkZXIiLCJkZXBzIiwiRU1QVFkiLCJwcm92aWRlckRlcHMiLCJvcHRpb25zIiwiaiIsImFubm90YXRpb25zIiwiT3B0aW9uYWwiLCJTa2lwU2VsZiIsIlNlbGYiLCJJbmplY3QiLCJ1c2VFeGlzdGluZyIsIlVTRV9WQUxVRSIsInN0YXRpY0Vycm9yIiwiY29tcHV0ZURlcHMiLCJJREVOVCIsInVzZU5ldyIsInByb3ZpZGUiLCJ1c2VWYWx1ZSIsInVzZUZhY3RvcnkiLCJ1c2VDbGFzcyIsIm11bHRpUHJvdmlkZXJNaXhFcnJvciIsInJlY3Vyc2l2ZWx5UHJvY2Vzc1Byb3ZpZGVycyIsInJlY29yZHMiLCJyZXNvbHZlZFByb3ZpZGVyIiwibXVsdGkiLCJtdWx0aVByb3ZpZGVyIiwiZ2V0IiwiTVVMVElfUFJPVklERVJfRk4iLCJzZXQiLCJyZWNvcmQiLCJ0cnlSZXNvbHZlVG9rZW4iLCJwYXJlbnQiLCJub3RGb3VuZFZhbHVlIiwiQ0lSQ1VMQVIiLCJFcnJvciIsIk5PX05FV19MSU5FIiwib2JqIiwidW5kZWZpbmVkIiwiZGVwUmVjb3JkcyIsImRlcFJlY29yZCIsImNoaWxkUmVjb3JkIiwiTlVMTF9JTkpFQ1RPUiIsIkluamVjdG9yIiwiVEhST1dfSUZfTk9UX0ZPVU5EIiwicmVzb2x2ZVRva2VuIiwiTkdfVEVNUF9UT0tFTl9QQVRIIiwiZm9ybWF0RXJyb3IiLCJ0ZXh0IiwiY2hhckF0Iiwic3Vic3RyIiwiY29udGV4dCIsInBhcnRzIiwiSlNPTiIsInJlcGxhY2UiLCJORVdfTElORSIsImdldERlYnVnQ29udGV4dCIsImVycm9yIiwiRVJST1JfREVCVUdfQ09OVEVYVCIsImdldE9yaWdpbmFsRXJyb3IiLCJFUlJPUl9PUklHSU5BTF9FUlJPUiIsImNvbnN0cnVjdFJlc29sdmluZ1BhdGgiLCJmaW5kRmlyc3RDbG9zZWRDeWNsZSIsInNsaWNlIiwicmV2ZXJzZSIsImsiLCJpbmplY3Rpb25FcnJvciIsImluamVjdG9yIiwiY29uc3RydWN0UmVzb2x2aW5nTWVzc2FnZSIsIm9yaWdpbmFsRXJyb3IiLCJlcnJNc2ciLCJtZXNzYWdlIiwibXNnIiwid3JhcHBlZEVycm9yIiwiYWRkS2V5IiwiaW5qZWN0b3JzIiwibm9Bbm5vdGF0aW9uRXJyb3IiLCJ0eXBlT3JGdW5jIiwicGFyYW1zIiwic2lnbmF0dXJlIiwiaWkiLCJwYXJhbWV0ZXIiLCJtaXhpbmdNdWx0aVByb3ZpZGVyc1dpdGhSZWd1bGFyUHJvdmlkZXJzRXJyb3IiLCJwcm92aWRlcjEiLCJwcm92aWRlcjIiLCJpc1R5cGUiLCJ2IiwiY29udmVydFRzaWNrbGVEZWNvcmF0b3JJbnRvTWV0YWRhdGEiLCJkZWNvcmF0b3JJbnZvY2F0aW9ucyIsImRlY29yYXRvckludm9jYXRpb24iLCJhbm5vdGF0aW9uQXJncyIsImdldFBhcmVudEN0b3IiLCJjdG9yIiwicGFyZW50UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInJlc29sdmVSZWZsZWN0aXZlRmFjdG9yeSIsImZhY3RvcnlGbiIsInJlc29sdmVkRGVwcyIsInJlZmxlY3RvciIsImZhY3RvcnkiLCJfZGVwZW5kZW5jaWVzRm9yIiwiYWxpYXNJbnN0YW5jZSIsIlJlZmxlY3RpdmVEZXBlbmRlbmN5IiwiZnJvbUtleSIsIlJlZmxlY3RpdmVLZXkiLCJkZXBlbmRlbmNpZXMiLCJwYXJhbXNfMSIsInQiLCJfZXh0cmFjdFRva2VuIiwiY29uc3RydWN0RGVwZW5kZW5jaWVzIiwiX0VNUFRZX0xJU1QiLCJSZXNvbHZlZFJlZmxlY3RpdmVGYWN0b3J5IiwicmVzb2x2ZVJlZmxlY3RpdmVQcm92aWRlciIsIlJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyXyIsInJlc29sdmVSZWZsZWN0aXZlUHJvdmlkZXJzIiwicHJvdmlkZXJzIiwicmVzb2x2ZWRQcm92aWRlck1hcCIsIm5vcm1hbGl6ZWRQcm92aWRlcnNNYXAiLCJleGlzdGluZyIsImlkIiwicmVzb2x2ZWRGYWN0b3JpZXMiLCJtZXJnZVJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyIsIl9ub3JtYWxpemVQcm92aWRlcnMiLCJmcm9tIiwiZm9yRWFjaCIsIlR5cGUiLCJpbnZhbGlkUHJvdmlkZXJFcnJvciIsInNvbWUiLCJwIiwibWV0YWRhdGEiLCJvcHRpb25hbCIsImlzQXJyYXkiLCJfY3JlYXRlRGVwZW5kZW5jeSIsInZpc2liaWxpdHkiLCJwYXJhbU1ldGFkYXRhIiwiSW5qZWN0aW9uVG9rZW4iLCJpc1Byb21pc2UiLCJ0aGVuIiwiX3JhbmRvbUNoYXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJfdGhyb3dFcnJvciIsIm5vb3BTY29wZSIsImFyZzAiLCJhcmcxIiwiY2hlY2tTdGFibGUiLCJ6b25lIiwiX25lc3RpbmciLCJoYXNQZW5kaW5nTWljcm90YXNrcyIsImlzU3RhYmxlIiwib25NaWNyb3Rhc2tFbXB0eSIsImVtaXQiLCJydW5PdXRzaWRlQW5ndWxhciIsIm9uU3RhYmxlIiwib25FbnRlciIsIm9uVW5zdGFibGUiLCJvbkxlYXZlIiwiaXNEZXZNb2RlIiwiX2Rldk1vZGUiLCJvcHRpb25zUmVkdWNlciIsImRzdCIsIm9ianMiLCJfX2Fzc2lnbiIsInJlbW92ZSIsImxpc3QiLCJlbCIsInNwbGljZSIsImZsYXR0ZW4iLCJmbGF0IiwiaXRlbSIsImZsYXRJdGVtIiwiX3F1ZXJ5RWxlbWVudENoaWxkcmVuIiwiZWxlbWVudCIsInByZWRpY2F0ZSIsIm1hdGNoZXMiLCJjaGlsZE5vZGVzIiwibm9kZSIsIkRlYnVnRWxlbWVudCIsIl9xdWVyeU5vZGVDaGlsZHJlbiIsInBhcmVudE5vZGUiLCJnZXREZWJ1Z05vZGUiLCJuYXRpdmVOb2RlIiwiX25hdGl2ZU5vZGVUb0RlYnVnTm9kZSIsImluZGV4RGVidWdOb2RlIiwiZGV2TW9kZUVxdWFsIiwiaXNMaXN0TGlrZUl0ZXJhYmxlQSIsImlzTGlzdExpa2VJdGVyYWJsZSIsImlzTGlzdExpa2VJdGVyYWJsZUIiLCJjb21wYXJhdG9yIiwiaXRlcmF0b3IxIiwiaXRlcmF0b3IyIiwiaXRlbTEiLCJuZXh0IiwiaXRlbTIiLCJkb25lIiwiYXJlSXRlcmFibGVzRXF1YWwiLCJpc0pzT2JqZWN0IiwibyIsImdldFByZXZpb3VzSW5kZXgiLCJhZGRSZW1vdmVPZmZzZXQiLCJtb3ZlT2Zmc2V0cyIsInByZXZpb3VzSW5kZXgiLCJtb3ZlT2Zmc2V0IiwiX2l0ZXJhYmxlRGlmZmVyc0ZhY3RvcnkiLCJkZWZhdWx0SXRlcmFibGVEaWZmZXJzIiwiX2tleVZhbHVlRGlmZmVyc0ZhY3RvcnkiLCJkZWZhdWx0S2V5VmFsdWVEaWZmZXJzIiwiX2xvY2FsZUZhY3RvcnkiLCJsb2NhbGUiLCJzaGlmdEluaXRTdGF0ZSIsInZpZXciLCJwcmlvckluaXRTdGF0ZSIsIm5ld0luaXRTdGF0ZSIsInN0YXRlIiwiaW5pdFN0YXRlIiwiaW5pdEluZGV4Iiwic2hvdWxkQ2FsbExpZmVjeWNsZUluaXRIb29rIiwiYXNUZXh0RGF0YSIsIm5vZGVzIiwiYXNFbGVtZW50RGF0YSIsImFzUHJvdmlkZXJEYXRhIiwiYXNQdXJlRXhwcmVzc2lvbkRhdGEiLCJhc1F1ZXJ5TGlzdCIsImV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3IiLCJvbGRWYWx1ZSIsImN1cnJWYWx1ZSIsImlzRmlyc3RDaGVjayIsIl9hZGREZWJ1Z0NvbnRleHQiLCJ2aWV3RGVidWdFcnJvciIsIkVSUk9SX0xPR0dFUiIsImxvZ0Vycm9yIiwidmlld0Rlc3Ryb3llZEVycm9yIiwiYWN0aW9uIiwidG9rZW5LZXkiLCJfdG9rZW5LZXlDYWNoZSIsInNpemUiLCJjaGVja0JpbmRpbmciLCJkZWYiLCJiaW5kaW5nSWR4Iiwib2xkVmFsdWVzIiwiYmluZGluZ0luZGV4IiwiY2hlY2tBbmRVcGRhdGVCaW5kaW5nIiwiY2hlY2tCaW5kaW5nTm9DaGFuZ2VzIiwiU2VydmljZXMiLCJjcmVhdGVEZWJ1Z0NvbnRleHQiLCJub2RlSW5kZXgiLCJtYXJrUGFyZW50Vmlld3NGb3JDaGVjayIsImN1cnJWaWV3IiwiZmxhZ3MiLCJ2aWV3Q29udGFpbmVyUGFyZW50IiwibWFya1BhcmVudFZpZXdzRm9yQ2hlY2tQcm9qZWN0ZWRWaWV3cyIsImVuZFZpZXciLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnROYW1lIiwiZXZlbnQiLCJjb21wb25lbnRWaWV3IiwiaGFuZGxlRXZlbnQiLCJyb290IiwiZXJyb3JIYW5kbGVyIiwiaGFuZGxlRXJyb3IiLCJkZWNsYXJlZFZpZXdDb250YWluZXIiLCJ2aWV3UGFyZW50RWwiLCJyZW5kZXJOb2RlIiwicmVuZGVyRWxlbWVudCIsInJlbmRlclRleHQiLCJlbGVtZW50RXZlbnRGdWxsTmFtZSIsImlzQ29tcG9uZW50VmlldyIsImlzRW1iZWRkZWRWaWV3Iiwic3BsaXREZXBzRHNsIiwiZ2V0UGFyZW50UmVuZGVyRWxlbWVudCIsInJlbmRlckhvc3QiLCJyZW5kZXJQYXJlbnQiLCJjb21wb25lbnRSZW5kZXJlclR5cGUiLCJlbmNhcHN1bGF0aW9uIiwiVmlld0VuY2Fwc3VsYXRpb24iLCJOYXRpdmUiLCJyZXNvbHZlRGVmaW5pdGlvbiIsIkRFRklOSVRJT05fQ0FDSEUiLCJOT09QIiwidmlzaXRSb290UmVuZGVyTm9kZXMiLCJuZXh0U2libGluZyIsInJlbmRlcmVyIiwidmlzaXRTaWJsaW5nUmVuZGVyTm9kZXMiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJub2RlRGVmIiwidmlzaXRSZW5kZXJOb2RlIiwiY2hpbGRDb3VudCIsInZpc2l0UHJvamVjdGVkUmVuZGVyTm9kZXMiLCJuZ0NvbnRlbnRJbmRleCIsImNvbXBWaWV3IiwiaG9zdFZpZXciLCJob3N0RWxEZWYiLCJwcm9qZWN0ZWROb2RlcyIsInByb2plY3RhYmxlTm9kZXMiLCJleGVjUmVuZGVyTm9kZUFjdGlvbiIsInJuIiwiYmluZGluZ0ZsYWdzIiwiZW1iZWRkZWRWaWV3cyIsIl9lbWJlZGRlZFZpZXdzIiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsInNwbGl0TmFtZXNwYWNlIiwibWF0Y2giLCJOU19QUkVGSVhfUkUiLCJjcmVhdGVFbGVtZW50IiwiZWxEZWYiLCJyb290U2VsZWN0b3JPck5vZGUiLCJzZWxlY3Rvck9yTm9kZSIsIm5zIiwiY3JlYXRlQ29tbWVudCIsInBhcmVudEVsIiwic2VsZWN0Um9vdEVsZW1lbnQiLCJhdHRycyIsIm5hbWVfMiIsInNldEF0dHJpYnV0ZSIsImxpc3RlblRvRWxlbWVudE91dHB1dHMiLCJvdXRwdXRzIiwib3V0cHV0IiwiaGFuZGxlRXZlbnRDbG9zdXJlIiwicmVuZGVyRXZlbnRIYW5kbGVyQ2xvc3VyZSIsImxpc3RlblRhcmdldCIsImxpc3RlbmVyVmlldyIsImRpc3Bvc2FibGUiLCJsaXN0ZW4iLCJvdXRwdXRJbmRleCIsImNoZWNrQW5kVXBkYXRlRWxlbWVudFZhbHVlIiwiYmluZGluZyIsImJpbmRpbmdzIiwiZWxEYXRhIiwicmVuZGVyTm9kZSQkMSIsInNlY3VyaXR5Q29udGV4dCIsInJlbmRlclZhbHVlIiwic2FuaXRpemVyIiwic2FuaXRpemUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRFbGVtZW50QXR0cmlidXRlIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInNldEVsZW1lbnRDbGFzcyIsIlNlY3VyaXR5Q29udGV4dCIsIlNUWUxFIiwidW5pdCIsInN1ZmZpeCIsInNldFN0eWxlIiwicmVtb3ZlU3R5bGUiLCJzZXRFbGVtZW50U3R5bGUiLCJzZXRQcm9wZXJ0eSIsInNldEVsZW1lbnRQcm9wZXJ0eSIsInJlc29sdmVOZ01vZHVsZURlcCIsImRhdGEiLCJkZXBEZWYiLCJfcGFyZW50IiwidG9rZW5LZXkkJDEiLCJJbmplY3RvclJlZlRva2VuS2V5JDEiLCJOZ01vZHVsZVJlZlRva2VuS2V5IiwicHJvdmlkZXJEZWYiLCJfZGVmIiwicHJvdmlkZXJzQnlLZXkiLCJwcm92aWRlckluc3RhbmNlIiwiX3Byb3ZpZGVycyIsIl9jcmVhdGVQcm92aWRlckluc3RhbmNlJDEiLCJVTkRFRklORURfVkFMVUUiLCJuZ01vZHVsZSIsImluamVjdGFibGUiLCJsZW4iLCJkZXBWYWx1ZXMiLCJfY3JlYXRlQ2xhc3MiLCJfY2FsbEZhY3RvcnkiLCJhdHRhY2hFbWJlZGRlZFZpZXciLCJwYXJlbnRWaWV3IiwiZWxlbWVudERhdGEiLCJ2aWV3SW5kZXgiLCJhZGRUb0FycmF5IiwidmNFbGVtZW50RGF0YSIsImR2Y0VsZW1lbnREYXRhIiwicHJvamVjdGVkVmlld3MiLCJ0ZW1wbGF0ZSIsIl9wcm9qZWN0ZWRWaWV3cyIsInZpZXdEZWYiLCJub2RlRmxhZ3MiLCJwYXJlbnROb2RlRGVmIiwiY2hpbGRGbGFncyIsIm1hcmtOb2RlQXNQcm9qZWN0ZWRUZW1wbGF0ZSIsImF0dGFjaFByb2plY3RlZFZpZXciLCJkaXJ0eVBhcmVudFF1ZXJpZXMiLCJyZW5kZXJBdHRhY2hFbWJlZGRlZFZpZXciLCJkZXRhY2hFbWJlZGRlZFZpZXciLCJyZW1vdmVGcm9tQXJyYXkiLCJyZW5kZXJEZXRhY2hWaWV3IiwicHJldlZpZXciLCJwcmV2UmVuZGVyTm9kZSIsImFyciIsInBvcCIsImNyZWF0ZVZpZXdDb250YWluZXJEYXRhIiwiVmlld0NvbnRhaW5lclJlZl8iLCJjcmVhdGVDaGFuZ2VEZXRlY3RvclJlZiIsIlZpZXdSZWZfIiwiY3JlYXRlVGVtcGxhdGVEYXRhIiwiVGVtcGxhdGVSZWZfIiwiY3JlYXRlSW5qZWN0b3IiLCJJbmplY3Rvcl8iLCJjcmVhdGVSZW5kZXJlclYxIiwiUmVuZGVyZXJBZGFwdGVyIiwiY3JlYXRlTmdNb2R1bGVSZWYiLCJtb2R1bGVUeXBlIiwiYm9vdHN0cmFwQ29tcG9uZW50cyIsIk5nTW9kdWxlUmVmXyIsImNyZWF0ZVByb3ZpZGVySW5zdGFuY2UiLCJfY3JlYXRlUHJvdmlkZXJJbnN0YW5jZSIsImNyZWF0ZVBpcGVJbnN0YW5jZSIsImNyZWF0ZUNsYXNzIiwiY3JlYXRlRGlyZWN0aXZlSW5zdGFuY2UiLCJhbGxvd1ByaXZhdGVTZXJ2aWNlcyIsImluc3RhbmNlIiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlIiwiZXZlbnRIYW5kbGVyQ2xvc3VyZSIsInVuc3Vic2NyaWJlIiwicmVzb2x2ZURlcCIsImNhbGxGYWN0b3J5Iiwic3RhcnRWaWV3IiwiQ2hhbmdlRGV0ZWN0b3JSZWZUb2tlbktleSIsIlJlbmRlcmVyVjFUb2tlbktleSIsImZpbmRDb21wVmlldyIsIlJlbmRlcmVyMlRva2VuS2V5IiwiRWxlbWVudFJlZlRva2VuS2V5IiwiRWxlbWVudFJlZiIsIlZpZXdDb250YWluZXJSZWZUb2tlbktleSIsInZpZXdDb250YWluZXIiLCJUZW1wbGF0ZVJlZlRva2VuS2V5IiwiSW5qZWN0b3JSZWZUb2tlbktleSIsInByb3ZpZGVyRGVmXzEiLCJhbGxQcm92aWRlcnMiLCJwdWJsaWNQcm92aWRlcnMiLCJwcm92aWRlckRhdGEiLCJOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SIiwidXBkYXRlUHJvcCIsImNoYW5nZXMiLCJXcmFwcGVkVmFsdWUiLCJ3cmFwcGVkIiwiU2ltcGxlQ2hhbmdlIiwiY2FsbExpZmVjeWNsZUhvb2tzQ2hpbGRyZW5GaXJzdCIsImxpZmVjeWNsZXMiLCJwYXJlbnRfMSIsImNhbGxQcm92aWRlckxpZmVjeWNsZXMiLCJkaXJlY3RDaGlsZEZsYWdzIiwiY2FsbEVsZW1lbnRQcm92aWRlcnNMaWZlY3ljbGVzIiwic2V0Q3VycmVudE5vZGUiLCJuZ0FmdGVyQ29udGVudEluaXQiLCJuZ0FmdGVyQ29udGVudENoZWNrZWQiLCJuZ0FmdGVyVmlld0luaXQiLCJuZ0FmdGVyVmlld0NoZWNrZWQiLCJuZ09uRGVzdHJveSIsImNyZWF0ZVF1ZXJ5IiwiUXVlcnlMaXN0IiwicXVlcnlJZHMiLCJub2RlTWF0Y2hlZFF1ZXJpZXMiLCJ0cGxEZWYiLCJlbmQiLCJmaWx0ZXJJZCIsInNldERpcnR5IiwiY2hlY2tBbmRVcGRhdGVRdWVyeSIsInF1ZXJ5TGlzdCIsImRpcnR5IiwiZGlyZWN0aXZlSW5zdGFuY2UiLCJuZXdWYWx1ZXMiLCJlbGVtZW50RGVmIiwiY2FsY1F1ZXJ5VmFsdWVzIiwiY29tcG9uZW50IiwicmVzZXQiLCJub3RpZnkiLCJib3VuZFZhbHVlIiwiYmluZGluZ1R5cGUiLCJmaXJzdCIsIm5vdGlmeU9uQ2hhbmdlcyIsInF1ZXJ5RGVmIiwidmFsdWVUeXBlIiwibWF0Y2hlZFF1ZXJpZXMiLCJnZXRRdWVyeVZhbHVlIiwiY2hpbGRNYXRjaGVkUXVlcmllcyIsImVtYmVkZGVkVmlldyIsImR2YyIsInByb2plY3RlZFZpZXciLCJxdWVyeVZhbHVlVHlwZSIsImFwcGVuZE5nQ29udGVudCIsImNyZWF0ZVRleHQiLCJwcmVmaXgiLCJfYWRkSW50ZXJwb2xhdGlvblBhcnQiLCJjcmVhdGVFbWJlZGRlZFZpZXciLCJhbmNob3JEZWYkJDEiLCJjcmVhdGVWaWV3IiwiaW5pdFZpZXciLCJjcmVhdGVWaWV3Tm9kZXMiLCJjcmVhdGVSb290VmlldyIsImNyZWF0ZUNvbXBvbmVudFZpZXciLCJob3N0RWxlbWVudCIsImNvbXBSZW5kZXJlciIsInJlbmRlcmVyVHlwZSIsInJlbmRlcmVyRmFjdG9yeSIsImNyZWF0ZVJlbmRlcmVyIiwiY29tcG9uZW50UHJvdmlkZXIiLCJkaXNwb3NhYmxlcyIsIm91dHB1dENvdW50IiwiYmluZGluZ0NvdW50IiwiaG9zdERlZiIsIm5vZGVEYXRhIiwiY29tcFZpZXdEZWYiLCJleGVjQ29tcG9uZW50Vmlld3NBY3Rpb24iLCJWaWV3QWN0aW9uIiwiQ3JlYXRlVmlld05vZGVzIiwiZXhlY1F1ZXJpZXNBY3Rpb24iLCJjaGVja05vQ2hhbmdlc1ZpZXciLCJtYXJrUHJvamVjdGVkVmlld3NGb3JDaGVjayIsInVwZGF0ZURpcmVjdGl2ZXMiLCJleGVjRW1iZWRkZWRWaWV3c0FjdGlvbiIsIkNoZWNrTm9DaGFuZ2VzIiwidXBkYXRlUmVuZGVyZXIiLCJjaGVja0FuZFVwZGF0ZVZpZXciLCJDaGVja0FuZFVwZGF0ZSIsImNhbGxJbml0IiwiY2hlY2tBbmRVcGRhdGVOb2RlIiwiYXJnU3R5bGUiLCJ2MCIsInYxIiwidjIiLCJ2MyIsInY0IiwidjUiLCJ2NiIsInY3IiwidjgiLCJ2OSIsImJpbmRMZW4iLCJjaGFuZ2VkIiwiY2hlY2tBbmRVcGRhdGVFbGVtZW50SW5saW5lIiwic2V0VmFsdWUiLCJjaGVja0FuZFVwZGF0ZVRleHRJbmxpbmUiLCJkaXJlY3RpdmUiLCJuZ09uQ2hhbmdlcyIsIm5nT25Jbml0IiwibmdEb0NoZWNrIiwiY2hlY2tBbmRVcGRhdGVEaXJlY3RpdmVJbmxpbmUiLCJwaXBlIiwidHJhbnNmb3JtIiwiY2hlY2tBbmRVcGRhdGVQdXJlRXhwcmVzc2lvbklubGluZSIsImNoZWNrQW5kVXBkYXRlTm9kZUlubGluZSIsImNoZWNrQW5kVXBkYXRlRWxlbWVudER5bmFtaWMiLCJjaGVja0FuZFVwZGF0ZVRleHREeW5hbWljIiwiY2hlY2tBbmRVcGRhdGVEaXJlY3RpdmVEeW5hbWljIiwiY2hlY2tBbmRVcGRhdGVQdXJlRXhwcmVzc2lvbkR5bmFtaWMiLCJjaGVja0FuZFVwZGF0ZU5vZGVEeW5hbWljIiwiaV8xIiwiY2hlY2tOb0NoYW5nZXNOb2RlIiwiY2hlY2tOb0NoYW5nZXNOb2RlSW5saW5lIiwiY2hlY2tOb0NoYW5nZXNOb2RlRHluYW1pYyIsImNoZWNrTm9DaGFuZ2VzUXVlcnkiLCJkZXN0cm95VmlldyIsIkRlc3Ryb3kiLCJkZXRhY2hQcm9qZWN0ZWRWaWV3IiwiZGVzdHJveU5vZGUiLCJkZXN0cm95IiwiZGVzdHJveVZpZXdOb2RlcyIsImNhbGxWaWV3QWN0aW9uIiwidmlld1N0YXRlIiwiZXhlY1Byb2plY3RlZFZpZXdzQWN0aW9uIiwiQ2hlY2tOb0NoYW5nZXNQcm9qZWN0ZWRWaWV3cyIsIkNoZWNrQW5kVXBkYXRlUHJvamVjdGVkVmlld3MiLCJxdWVyeUZsYWdzIiwic3RhdGljRHluYW1pY1F1ZXJ5RmxhZyIsImNoZWNrVHlwZSIsIm5vZGVDb3VudCIsImluaXRTZXJ2aWNlc0lmTmVlZGVkIiwiaW5pdGlhbGl6ZWQiLCJzZXJ2aWNlcyIsImRlYnVnU2V0Q3VycmVudE5vZGUiLCJkZWJ1Z0NyZWF0ZVJvb3RWaWV3IiwiZGVidWdDcmVhdGVFbWJlZGRlZFZpZXciLCJkZWJ1Z0NyZWF0ZUNvbXBvbmVudFZpZXciLCJkZWJ1Z0NyZWF0ZU5nTW9kdWxlUmVmIiwib3ZlcnJpZGVQcm92aWRlciIsImRlYnVnT3ZlcnJpZGVQcm92aWRlciIsIm92ZXJyaWRlQ29tcG9uZW50VmlldyIsImRlYnVnT3ZlcnJpZGVDb21wb25lbnRWaWV3IiwiY2xlYXJPdmVycmlkZXMiLCJkZWJ1Z0NsZWFyT3ZlcnJpZGVzIiwiZGVidWdDaGVja0FuZFVwZGF0ZVZpZXciLCJkZWJ1Z0NoZWNrTm9DaGFuZ2VzVmlldyIsImRlYnVnRGVzdHJveVZpZXciLCJEZWJ1Z0NvbnRleHRfIiwiZGVidWdIYW5kbGVFdmVudCIsImRlYnVnVXBkYXRlRGlyZWN0aXZlcyIsImRlYnVnVXBkYXRlUmVuZGVyZXIiLCJjcmVhdGVQcm9kUm9vdFZpZXciLCJwcm9kQ2hlY2tBbmRVcGRhdGVOb2RlIiwicHJvZENoZWNrTm9DaGFuZ2VzTm9kZSIsImVsSW5qZWN0b3IiLCJjcmVhdGVSb290RGF0YSIsIlJlbmRlcmVyRmFjdG9yeTIiLCJEZWJ1Z1JlbmRlcmVyRmFjdG9yeTIiLCJkZWZXaXRoT3ZlcnJpZGUiLCJhcHBseVByb3ZpZGVyT3ZlcnJpZGVzVG9WaWV3IiwiY2FsbFdpdGhEZWJ1Z0NvbnRleHQiLCJEZWJ1Z0FjdGlvbiIsIlNhbml0aXplciIsIkVycm9ySGFuZGxlciIsImFuY2hvckRlZiIsInZpZXdEZWYkJDEiLCJ2aWV3RGVmT3ZlcnJpZGVzIiwicGFyZW50SW5qZWN0b3IiLCJoYXNPdmVycmlkZXMiLCJoYXNEZXByZWNhdGVkT3ZlcnJpZGVzIiwicHJvdmlkZXJPdmVycmlkZXMiLCJvdmVycmlkZSIsImRlcHJlY2F0ZWRCZWhhdmlvciIsImNhbGNIYXNPdmVycmlkZXMiLCJhcHBseVByb3ZpZGVyT3ZlcnJpZGVzIiwiYXBwbHlQcm92aWRlck92ZXJyaWRlc1RvTmdNb2R1bGUiLCJjb21wIiwiY29tcEZhY3RvcnkiLCJjb21wb25lbnRGYWN0b3J5Iiwidmlld0RlZkZhY3RvcnkiLCJnZXRDb21wb25lbnRWaWV3RGVmaW5pdGlvbkZhY3RvcnkiLCJjbGVhciIsImVsZW1lbnRJbmRpY2VzV2l0aE92ZXJ3cml0dGVuUHJvdmlkZXJzIiwiZWxJbmRpY2VzV2l0aE92ZXJ3cml0dGVuUHJvdmlkZXJzIiwibGFzdEVsZW1lbnREZWYiLCJoYXMiLCJmaW5kRWxlbWVudEluZGljZXNXaXRoT3ZlcndyaXR0ZW5Qcm92aWRlcnMiLCJlbEluZGV4IiwiYXBwbHlQcm92aWRlck92ZXJyaWRlc1RvRWxlbWVudCIsImNoZWNrSW5kZXgiLCJkZXRlY3RDaGFuZ2VzIiwiY2hlY2tOb0NoYW5nZXMiLCJfY3VycmVudFZpZXciLCJfY3VycmVudE5vZGVJbmRleCIsIl9jdXJyZW50QWN0aW9uIiwibmV4dERpcmVjdGl2ZVdpdGhCaW5kaW5nIiwiZGVidWdDaGVja0FuZFVwZGF0ZU5vZGUiLCJkZWJ1Z0NoZWNrTm9DaGFuZ2VzTm9kZSIsIm5leHRSZW5kZXJOb2RlV2l0aEJpbmRpbmciLCJnaXZlblZhbHVlcyIsImJpbmRpbmdWYWx1ZXMiLCJDQU1FTF9DQVNFX1JFR0VYUCIsIm0iLCJ0b0xvd2VyQ2FzZSIsImNhbWVsQ2FzZVRvRGFzaENhc2UiLCJub3JtYWxpemVEZWJ1Z0JpbmRpbmdOYW1lIiwibm9ybWFsaXplRGVidWdCaW5kaW5nVmFsdWUiLCJhdHRyIiwiY29sbGVjdFJlZmVyZW5jZXMiLCJyZWZlcmVuY2VzIiwicmVmTmFtZSIsInNlbGYiLCJvbGRBY3Rpb24iLCJvbGRWaWV3Iiwib2xkTm9kZUluZGV4IiwicmVzdWx0IiwiaXNWaWV3RGVidWdFcnJvciIsInZpZXdXcmFwcGVkRGVidWdFcnJvciIsImdldEN1cnJlbnREZWJ1Z0NvbnRleHQiLCJfX3dpbmRvdyIsIndpbmRvdyIsIl9fc2VsZiIsIldvcmtlckdsb2JhbFNjb3BlIiwiX3Jvb3QiLCJnbG9iYWwiLCJ4IiwiX19leHRlbmRzIiwiZCIsIl9fIiwiX3N1cGVyIiwic3RhY2siLCJTdWJzY3JpcHRpb24iLCJjbG9zZWQiLCJfcGFyZW50cyIsIl9zdWJzY3JpcHRpb25zIiwiX3Vuc3Vic2NyaWJlIiwiaGFzRXJyb3JzIiwiaXNGdW5jdGlvbl8xIiwiaXNGdW5jdGlvbiIsInRyeUNhdGNoXzEiLCJ0cnlDYXRjaCIsImlzQXJyYXlfMSIsInN1YiIsImlzT2JqZWN0XzEiLCJpc09iamVjdCIsImFkZCIsInRlYXJkb3duIiwiX2FkZFBhcmVudCIsInRtcCIsInN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb25JbmRleCIsImVtcHR5IiwiY29tcGxldGUiLCJTeW1ib2wiLCJyb290XzEiLCJleHBvcnRzIiwiZm9yIiwicnhTdWJzY3JpYmVyIiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uT3JOZXh0Iiwic3luY0Vycm9yVmFsdWUiLCJzeW5jRXJyb3JUaHJvd24iLCJzeW5jRXJyb3JUaHJvd2FibGUiLCJpc1N0b3BwZWQiLCJkZXN0aW5hdGlvbiIsIk9ic2VydmVyXzEiLCJTYWZlU3Vic2NyaWJlciIsInJ4U3Vic2NyaWJlcl8xIiwic3Vic2NyaWJlciIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX3Vuc3Vic2NyaWJlQW5kUmVjeWNsZSIsIlN1YnNjcmlwdGlvbl8xIiwiX3BhcmVudFN1YnNjcmliZXIiLCJvYnNlcnZlck9yTmV4dCIsIl9jb250ZXh0IiwiX190cnlPclNldEVycm9yIiwiX190cnlPclVuc3ViIiwiX3RoaXMiLCJ3cmFwcGVkQ29tcGxldGUiLCJuZXh0T3JPYnNlcnZlciIsIlN1YnNjcmliZXJfMSIsImdldFN5bWJvbE9ic2VydmFibGUiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsIl9pc1NjYWxhciIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJzaW5rIiwidG9TdWJzY3JpYmVyXzEiLCJ0b1N1YnNjcmliZXIiLCJfdHJ5U3Vic2NyaWJlIiwiUHJvbWlzZUN0b3IiLCJSeCIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib2JzZXJ2YWJsZV8xIiwib3BlcmF0aW9ucyIsInBpcGVfMSIsInRvUHJvbWlzZSIsIlNjYWxhck9ic2VydmFibGUiLCJzY2hlZHVsZXIiLCJkaXNwYXRjaCIsInNjaGVkdWxlIiwiT2JzZXJ2YWJsZV8xIiwiRW1wdHlPYnNlcnZhYmxlIiwiYXJnIiwiQXJyYXlPYnNlcnZhYmxlIiwiYXJyYXkiLCJvZiIsImlzU2NoZWR1bGVyXzEiLCJpc1NjaGVkdWxlciIsIlNjYWxhck9ic2VydmFibGVfMSIsIkVtcHR5T2JzZXJ2YWJsZV8xIiwiY291bnQiLCJzeW1ib2xJdGVyYXRvclBvbnlmaWxsIiwiU2V0XzEiLCJTZXQiLCJNYXBfMSIsIklubmVyU3Vic2NyaWJlciIsIm91dGVyVmFsdWUiLCJvdXRlckluZGV4Iiwibm90aWZ5TmV4dCIsIm5vdGlmeUVycm9yIiwibm90aWZ5Q29tcGxldGUiLCJvdXRlclN1YnNjcmliZXIiLCJJbm5lclN1YnNjcmliZXJfMSIsImlzQXJyYXlMaWtlXzEiLCJpc0FycmF5TGlrZSIsImlzUHJvbWlzZV8xIiwic2V0VGltZW91dCIsIml0ZXJhdG9yXzEiLCJvYnMiLCJUeXBlRXJyb3IiLCJPdXRlclN1YnNjcmliZXIiLCJpbm5lclZhbHVlIiwiaW5uZXJJbmRleCIsImlubmVyU3ViIiwicHJvamVjdCIsInJlc3VsdFNlbGVjdG9yIiwiY29uY3VycmVudCIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiTWVyZ2VNYXBPcGVyYXRvciIsIm9ic2VydmVyIiwiTWVyZ2VNYXBTdWJzY3JpYmVyIiwiaGFzQ29tcGxldGVkIiwiYnVmZmVyIiwiYWN0aXZlIiwiX3RyeU5leHQiLCJfaW5uZXJTdWIiLCJpc2giLCJzdWJzY3JpYmVUb1Jlc3VsdF8xIiwic3Vic2NyaWJlVG9SZXN1bHQiLCJfbm90aWZ5UmVzdWx0U2VsZWN0b3IiLCJzaGlmdCIsIk91dGVyU3Vic2NyaWJlcl8xIiwibWVyZ2VNYXBfMSIsIm1lcmdlTWFwIiwiaWRlbnRpdHlfMSIsImlkZW50aXR5Iiwib2JzZXJ2YWJsZXMiLCJsYXN0IiwibWVyZ2VBbGxfMSIsIm1lcmdlQWxsIiwiQXJyYXlPYnNlcnZhYmxlXzEiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIlN1YmplY3RTdWJzY3JpcHRpb24iLCJzdWJqZWN0Iiwib2JzZXJ2ZXJzIiwic3Vic2NyaWJlckluZGV4IiwiU3ViamVjdFN1YnNjcmliZXIiLCJoYXNFcnJvciIsInRocm93bkVycm9yIiwiQW5vbnltb3VzU3ViamVjdCIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEiLCJjb3B5IiwiU3ViamVjdFN1YnNjcmlwdGlvbl8xIiwiYXNPYnNlcnZhYmxlIiwiUmVmQ291bnRPcGVyYXRvciIsImNvbm5lY3RhYmxlIiwiX3JlZkNvdW50IiwicmVmQ291bnRlciIsIlJlZkNvdW50U3Vic2NyaWJlciIsImNvbm5lY3Rpb24iLCJjb25uZWN0IiwicmVmQ291bnQiLCJzaGFyZWRDb25uZWN0aW9uIiwiX2Nvbm5lY3Rpb24iLCJDb25uZWN0YWJsZU9ic2VydmFibGUiLCJzdWJqZWN0RmFjdG9yeSIsIl9pc0NvbXBsZXRlIiwiZ2V0U3ViamVjdCIsIl9zdWJqZWN0IiwiQ29ubmVjdGFibGVTdWJzY3JpYmVyIiwicmVmQ291bnRfMSIsImNvbm5lY3RhYmxlUHJvdG8iLCJ3cml0YWJsZSIsInN1YmplY3RPclN1YmplY3RGYWN0b3J5Iiwic2VsZWN0b3IiLCJNdWx0aWNhc3RPcGVyYXRvciIsIkNvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xIiwiY29ubmVjdGFibGVPYnNlcnZhYmxlRGVzY3JpcHRvciIsIm11bHRpY2FzdF8xIiwibXVsdGljYXN0Iiwic2hhcmVfMSIsInNoYXJlIiwiX2Rlc2MiLCJRdWVyeSIsImF0dHJpYnV0ZU5hbWUiLCJDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSIsImlzVmlld1F1ZXJ5IiwiZGVzY2VuZGFudHMiLCJPblB1c2giLCJEZWZhdWx0IiwiYyIsImNoYW5nZURldGVjdGlvbiIsImRpciIsIlBpcGUiLCJwdXJlIiwiTmdNb2R1bGUiLCJiaW5kaW5nUHJvcGVydHlOYW1lIiwiaG9zdFByb3BlcnR5TmFtZSIsIkVtdWxhdGVkIiwiTm9uZSIsInRyYWNlIiwiZXZlbnRzIiwiVkVSU0lPTiIsImZ1bGwiLCJtYWpvciIsInNwbGl0IiwibWlub3IiLCJwYXRjaCIsIkluamVjdGFibGUiLCJfX2dsb2JhbCIsIl9USFJPV19JRl9OT1RfRk9VTkQiLCJfTnVsbEluamVjdG9yIiwiU3RhdGljSW5qZWN0b3IiLCJOVUxMIiwiR0VUX1BST1BFUlRZX05BTUUiLCLJtTIiLCJvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3QiLCJnZXRDbG9zdXJlU2FmZVByb3BlcnR5IiwiX3JlY29yZHMiLCJ0b2tlblBhdGgiLCJ0b2tlbnMiLCJfY29uc29sZSIsImNvbnNvbGUiLCJfZmluZE9yaWdpbmFsRXJyb3IiLCJfZmluZENvbnRleHQiLCJlcnJvckxvZ2dlciIsImdldEVycm9yTG9nZ2VyIiwiZGlzcGxheU5hbWUiLCJfZ2xvYmFsS2V5UmVnaXN0cnkiLCJudW1iZXJPZktleXMiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiS2V5UmVnaXN0cnkiLCJfYWxsS2V5cyIsIm5ld0tleSIsIkZ1bmN0aW9uIiwiREVMRUdBVEVfQ1RPUiIsIlJlZmxlY3Rpb25DYXBhYmlsaXRpZXMiLCJyZWZsZWN0IiwiX3JlZmxlY3QiLCJpc1JlZmxlY3Rpb25FbmFibGVkIiwiX3ppcFR5cGVzQW5kQW5ub3RhdGlvbnMiLCJwYXJhbVR5cGVzIiwicGFyYW1Bbm5vdGF0aW9ucyIsIl9vd25QYXJhbWV0ZXJzIiwicGFyZW50Q3RvciIsImV4ZWMiLCJ0c2lja2xlQ3RvclBhcmFtcyIsImN0b3JQYXJhbWV0ZXJzIiwicGFyYW1UeXBlc18xIiwiY3RvclBhcmFtIiwicGFyYW1Bbm5vdGF0aW9uc18xIiwiZGVjb3JhdG9ycyIsImdldE93bk1ldGFkYXRhIiwiZmlsbCIsIl9vd25Bbm5vdGF0aW9ucyIsIm93bkFubm90YXRpb25zIiwiX293blByb3BNZXRhZGF0YSIsInByb3BNZXRhZGF0YSIsInByb3BEZWNvcmF0b3JzIiwicHJvcERlY29yYXRvcnNfMSIsInByb3BNZXRhZGF0YV8xIiwicHJvcCIsInBhcmVudFByb3BNZXRhZGF0YV8xIiwib3duUHJvcE1ldGFkYXRhIiwiaGFzTGlmZWN5Y2xlSG9vayIsImxjUHJvcGVydHkiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJtZXRob2QiLCJmdW5jdGlvbkJvZHkiLCJpbXBvcnRVcmkiLCJyZXNvdXJjZVVyaSIsInJlc29sdmVJZGVudGlmaWVyIiwibW9kdWxlVXJsIiwibWVtYmVycyIsInJ1bnRpbWUiLCJyZXNvbHZlRW51bSIsImVudW1JZGVudGlmaWVyIiwiUmVmbGVjdG9yIiwicmVmbGVjdGlvbkNhcGFiaWxpdGllcyIsInVwZGF0ZUNhcGFiaWxpdGllcyIsImNhcHMiLCJpZGVudGlmaWVyIiwiVU5ERUZJTkVEIiwiUmVmbGVjdGl2ZUluamVjdG9yIiwicmVzb2x2ZUFuZENyZWF0ZSIsIlJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyIsImZyb21SZXNvbHZlZFByb3ZpZGVycyIsIlJlZmxlY3RpdmVJbmplY3Rvcl8iLCJfY29uc3RydWN0aW9uQ291bnRlciIsImtleUlkcyIsIl9nZXRCeUtleSIsInJlc29sdmVBbmRDcmVhdGVDaGlsZCIsImNyZWF0ZUNoaWxkRnJvbVJlc29sdmVkIiwiaW5qIiwicmVzb2x2ZUFuZEluc3RhbnRpYXRlIiwiaW5zdGFudGlhdGVSZXNvbHZlZCIsIl9pbnN0YW50aWF0ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJBdEluZGV4Iiwib3V0T2ZCb3VuZHNFcnJvciIsIl9uZXciLCJfZ2V0TWF4TnVtYmVyT2ZPYmplY3RzIiwiY3ljbGljRGVwZW5kZW5jeUVycm9yIiwiX2luc3RhbnRpYXRlIiwiUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeSQkMSIsImRlcCIsIl9nZXRCeVJlZmxlY3RpdmVEZXBlbmRlbmN5Iiwib3JpZ2luYWxFeGNlcHRpb24iLCJvcmlnaW5hbFN0YWNrIiwiaW5zdGFudGlhdGlvbkVycm9yIiwiSU5KRUNUT1JfS0VZIiwiX2dldEJ5S2V5U2VsZiIsIl9nZXRCeUtleURlZmF1bHQiLCJfZ2V0T2JqQnlLZXlJZCIsImtleUlkIiwiX3Rocm93T3JOdWxsIiwibm9Qcm92aWRlckVycm9yIiwiaW5qXyIsIl9tYXBQcm92aWRlcnMiLCJBUFBfSU5JVElBTElaRVIiLCJBcHBsaWNhdGlvbkluaXRTdGF0dXMiLCJhcHBJbml0cyIsImRvbmVQcm9taXNlIiwicmVqIiwicnVuSW5pdGlhbGl6ZXJzIiwiYXN5bmNJbml0UHJvbWlzZXMiLCJpbml0UmVzdWx0IiwiYWxsIiwiY2F0Y2giLCJBUFBfSURfUkFORE9NX1BST1ZJREVSIiwiQVBQX0JPT1RTVFJBUF9MSVNURU5FUiIsIkNvbnNvbGUiLCJsb2ciLCJ3YXJuIiwiQ29tcGlsZXIiLCJjb21waWxlTW9kdWxlU3luYyIsImNvbXBpbGVNb2R1bGVBc3luYyIsImNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luYyIsImNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzQXN5bmMiLCJjbGVhckNhY2hlIiwiY2xlYXJDYWNoZUZvciIsIkNvbXBpbGVyRmFjdG9yeSIsIkNvbXBvbmVudFJlZiIsIkNvbXBvbmVudEZhY3RvcnkiLCJFUlJPUl9DT01QT05FTlQiLCJfTnVsbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciIsInJlc29sdmVDb21wb25lbnRGYWN0b3J5Iiwibm9Db21wb25lbnRGYWN0b3J5RXJyb3IiLCJDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIiLCJDb21wb25lbnRGYWN0b3J5Qm91bmRUb01vZHVsZSIsImNvbXBvbmVudFR5cGUiLCJuZ0NvbnRlbnRTZWxlY3RvcnMiLCJpbnB1dHMiLCJOZ01vZHVsZVJlZiIsIk5nTW9kdWxlRmFjdG9yeSIsInd0ZkVuYWJsZWQiLCJ3dGYiLCJkZXRlY3RXVEYiLCJ3dGZDcmVhdGVTY29wZSIsImNyZWF0ZVNjb3BlIiwid3RmTGVhdmUiLCJzY29wZSIsInJldHVyblZhbHVlIiwibGVhdmVTY29wZSIsInMiLCJyIiwiRXZlbnRFbWl0dGVyIiwiaXNBc3luYyIsIl9faXNBc3luYyIsImdlbmVyYXRvck9yTmV4dCIsInNjaGVkdWxlckZuIiwiZXJyb3JGbiIsImNvbXBsZXRlRm4iLCJOZ1pvbmUiLCJfYiIsImVuYWJsZUxvbmdTdGFja1RyYWNlIiwiaGFzUGVuZGluZ01hY3JvdGFza3MiLCJvbkVycm9yIiwiYXNzZXJ0Wm9uZVBhdGNoZWQiLCJfb3V0ZXIiLCJfaW5uZXIiLCJmb3JrIiwicHJvcGVydGllcyIsImlzQW5ndWxhclpvbmUiLCJvbkludm9rZVRhc2siLCJkZWxlZ2F0ZSIsInRhc2siLCJhcHBseVRoaXMiLCJhcHBseUFyZ3MiLCJpbnZva2VUYXNrIiwib25JbnZva2UiLCJjYWxsYmFjayIsImludm9rZSIsIm9uSGFzVGFzayIsImhhc1Rhc2tTdGF0ZSIsImhhc1Rhc2siLCJjaGFuZ2UiLCJtaWNyb1Rhc2siLCJtYWNyb1Rhc2siLCJvbkhhbmRsZUVycm9yIiwiZm9ya0lubmVyWm9uZVdpdGhBbmd1bGFyQmVoYXZpb3IiLCJpc0luQW5ndWxhclpvbmUiLCJhc3NlcnRJbkFuZ3VsYXJab25lIiwiYXNzZXJ0Tm90SW5Bbmd1bGFyWm9uZSIsInJ1biIsInJ1blRhc2siLCJzY2hlZHVsZUV2ZW50VGFzayIsIkVNUFRZX1BBWUxPQUQiLCJjYW5jZWxUYXNrIiwicnVuR3VhcmRlZCIsIk5vb3BOZ1pvbmUiLCJUZXN0YWJpbGl0eSIsIl9uZ1pvbmUiLCJfcGVuZGluZ0NvdW50IiwiX2lzWm9uZVN0YWJsZSIsIl9kaWRXb3JrIiwiX2NhbGxiYWNrcyIsIl93YXRjaEFuZ3VsYXJFdmVudHMiLCJfcnVuQ2FsbGJhY2tzSWZSZWFkeSIsImluY3JlYXNlUGVuZGluZ1JlcXVlc3RDb3VudCIsImRlY3JlYXNlUGVuZGluZ1JlcXVlc3RDb3VudCIsIndoZW5TdGFibGUiLCJnZXRQZW5kaW5nUmVxdWVzdENvdW50IiwiZmluZFByb3ZpZGVycyIsInVzaW5nIiwiZXhhY3RNYXRjaCIsIlRlc3RhYmlsaXR5UmVnaXN0cnkiLCJfYXBwbGljYXRpb25zIiwiX3Rlc3RhYmlsaXR5R2V0dGVyIiwiYWRkVG9XaW5kb3ciLCJyZWdpc3RlckFwcGxpY2F0aW9uIiwidGVzdGFiaWxpdHkiLCJ1bnJlZ2lzdGVyQXBwbGljYXRpb24iLCJkZWxldGUiLCJ1bnJlZ2lzdGVyQWxsQXBwbGljYXRpb25zIiwiZ2V0VGVzdGFiaWxpdHkiLCJlbGVtIiwiZ2V0QWxsVGVzdGFiaWxpdGllcyIsImdldEFsbFJvb3RFbGVtZW50cyIsImZpbmRUZXN0YWJpbGl0eUluVHJlZSIsImZpbmRJbkFuY2VzdG9ycyIsIl9Ob29wR2V0VGVzdGFiaWxpdHkiLCJyZWdpc3RyeSIsIkFwcGxpY2F0aW9uUmVmIiwiUGxhdGZvcm1SZWYiLCJfaW5qZWN0b3IiLCJfbW9kdWxlcyIsIl9kZXN0cm95TGlzdGVuZXJzIiwiX2Rlc3Ryb3llZCIsImJvb3RzdHJhcE1vZHVsZUZhY3RvcnkiLCJtb2R1bGVGYWN0b3J5Iiwibmdab25lIiwibmdab25lT3B0aW9uIiwiZ2V0Tmdab25lIiwibmdab25lSW5qZWN0b3IiLCJtb2R1bGVSZWYiLCJleGNlcHRpb25IYW5kbGVyIiwib25EZXN0cm95IiwiX2NhbGxBbmRSZXBvcnRUb0Vycm9ySGFuZGxlciIsImluaXRTdGF0dXMiLCJfbW9kdWxlRG9Cb290c3RyYXAiLCJib290c3RyYXBNb2R1bGUiLCJjb21waWxlck9wdGlvbnMiLCJjb21waWxlckZhY3RvcnkiLCJjcmVhdGVDb21waWxlciIsImFwcFJlZiIsIl9ib290c3RyYXBDb21wb25lbnRzIiwiZiIsImJvb3RzdHJhcCIsIm5nRG9Cb290c3RyYXAiLCJtb2R1bGUiLCJsaXN0ZW5lciIsIl96b25lIiwiX2V4Y2VwdGlvbkhhbmRsZXIiLCJfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyIiwiX2luaXRTdGF0dXMiLCJfYm9vdHN0cmFwTGlzdGVuZXJzIiwiX3ZpZXdzIiwiX3J1bm5pbmdUaWNrIiwiX2VuZm9yY2VOb05ld0NoYW5nZXMiLCJfc3RhYmxlIiwiY29tcG9uZW50VHlwZXMiLCJjb21wb25lbnRzIiwidGljayIsImlzQ3VycmVudGx5U3RhYmxlIiwic3RhYmxlU3ViIiwidW5zdGFibGVTdWIiLCJtZXJnZSIsImNvbXBvbmVudE9yRmFjdG9yeSIsImNvbXBSZWYiLCJfdW5sb2FkQ29tcG9uZW50IiwibG9jYXRpb24iLCJuYXRpdmVFbGVtZW50IiwiX2xvYWRDb21wb25lbnQiLCJfdGlja1Njb3BlIiwiYXR0YWNoVmlldyIsInZpZXdSZWYiLCJhdHRhY2hUb0FwcFJlZiIsImRldGFjaFZpZXciLCJkZXRhY2hGcm9tQXBwUmVmIiwiY29tcG9uZW50UmVmIiwiUmVuZGVyZXIiLCJSZW5kZXJlcjIiLCJfcmVzdWx0cyIsImZpbHRlciIsImZpbmQiLCJpbml0IiwidG9BcnJheSIsIlRlbXBsYXRlUmVmIiwiVmlld0NvbnRhaW5lclJlZiIsIkNoYW5nZURldGVjdG9yUmVmIiwiRXZlbnRMaXN0ZW5lciIsIkVtYmVkZGVkVmlld1JlZiIsIlZpZXdSZWYiLCJEZWJ1Z05vZGUiLCJfZGVidWdDb250ZXh0IiwiYWRkQ2hpbGQiLCJsaXN0ZW5lcnMiLCJwcm92aWRlclRva2VucyIsImF0dHJpYnV0ZXMiLCJjbGFzc2VzIiwic3R5bGVzIiwiY2hpbGQiLCJjaGlsZEluZGV4IiwiaW5zZXJ0Q2hpbGRyZW5BZnRlciIsIm5ld0NoaWxkcmVuIiwic2libGluZ0luZGV4IiwicmVmQ2hpbGQiLCJuZXdDaGlsZCIsInJlZkluZGV4IiwicXVlcnkiLCJxdWVyeUFsbCIsInF1ZXJ5QWxsTm9kZXMiLCJ0cmlnZ2VyRXZlbnRIYW5kbGVyIiwiZXZlbnRPYmoiLCJ3cmFwIiwicHJldmlvdXNWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsImZpcnN0Q2hhbmdlIiwiaXNGaXJzdENoYW5nZSIsIkRlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkiLCJzdXBwb3J0cyIsInRyYWNrQnlGbiIsIkRlZmF1bHRJdGVyYWJsZURpZmZlciIsInRyYWNrQnlJZGVudGl0eSIsIl9saW5rZWRSZWNvcmRzIiwiX3VubGlua2VkUmVjb3JkcyIsIl9wcmV2aW91c0l0SGVhZCIsIl9pdEhlYWQiLCJfaXRUYWlsIiwiX2FkZGl0aW9uc0hlYWQiLCJfYWRkaXRpb25zVGFpbCIsIl9tb3Zlc0hlYWQiLCJfbW92ZXNUYWlsIiwiX3JlbW92YWxzSGVhZCIsIl9yZW1vdmFsc1RhaWwiLCJfaWRlbnRpdHlDaGFuZ2VzSGVhZCIsIl9pZGVudGl0eUNoYW5nZXNUYWlsIiwiX3RyYWNrQnlGbiIsImZvckVhY2hJdGVtIiwiZm9yRWFjaE9wZXJhdGlvbiIsIm5leHRJdCIsIm5leHRSZW1vdmUiLCJhZGpQcmV2aW91c0luZGV4IiwiY3VycmVudEluZGV4IiwiX25leHRSZW1vdmVkIiwibG9jYWxNb3ZlUHJldmlvdXNJbmRleCIsImxvY2FsQ3VycmVudEluZGV4Iiwib2Zmc2V0IiwiZm9yRWFjaFByZXZpb3VzSXRlbSIsIl9uZXh0UHJldmlvdXMiLCJmb3JFYWNoQWRkZWRJdGVtIiwiX25leHRBZGRlZCIsImZvckVhY2hNb3ZlZEl0ZW0iLCJfbmV4dE1vdmVkIiwiZm9yRWFjaFJlbW92ZWRJdGVtIiwiZm9yRWFjaElkZW50aXR5Q2hhbmdlIiwiX25leHRJZGVudGl0eUNoYW5nZSIsImRpZmYiLCJjb2xsZWN0aW9uIiwiY2hlY2siLCJfcmVzZXQiLCJpdGVtVHJhY2tCeSIsIm1heUJlRGlydHkiLCJpbmRleF8xIiwidHJhY2tCeUlkIiwiX3ZlcmlmeVJlaW5zZXJ0aW9uIiwiX2FkZElkZW50aXR5Q2hhbmdlIiwiX21pc21hdGNoIiwiaXRlcmF0ZUxpc3RMaWtlIiwiX3RydW5jYXRlIiwiaXNEaXJ0eSIsIm5leHRSZWNvcmQiLCJwcmV2aW91c1JlY29yZCIsIl9wcmV2IiwiX3JlbW92ZSIsIl9tb3ZlQWZ0ZXIiLCJfcmVpbnNlcnRBZnRlciIsIl9hZGRBZnRlciIsIkl0ZXJhYmxlQ2hhbmdlUmVjb3JkXyIsInJlaW5zZXJ0UmVjb3JkIiwiX2FkZFRvTW92ZXMiLCJfYWRkVG9SZW1vdmFscyIsIl91bmxpbmsiLCJwcmV2UmVjb3JkIiwiX3ByZXZSZW1vdmVkIiwiX2luc2VydEFmdGVyIiwiX0R1cGxpY2F0ZU1hcCIsInB1dCIsInRvSW5kZXgiLCJfcHJldkR1cCIsIl9uZXh0RHVwIiwiX0R1cGxpY2F0ZUl0ZW1SZWNvcmRMaXN0IiwiX2hlYWQiLCJfdGFpbCIsImF0T3JBZnRlckluZGV4IiwiZHVwbGljYXRlcyIsInJlY29yZExpc3QiLCJEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5IiwiRGVmYXVsdEtleVZhbHVlRGlmZmVyIiwiX21hcEhlYWQiLCJfYXBwZW5kQWZ0ZXIiLCJfcHJldmlvdXNNYXBIZWFkIiwiX2NoYW5nZXNIZWFkIiwiX2NoYW5nZXNUYWlsIiwiZm9yRWFjaENoYW5nZWRJdGVtIiwiX25leHRDaGFuZ2VkIiwiX2ZvckVhY2giLCJfbWF5YmVBZGRUb0NoYW5nZXMiLCJfZ2V0T3JDcmVhdGVSZWNvcmRGb3JLZXkiLCJfaW5zZXJ0QmVmb3JlT3JBcHBlbmQiLCJiZWZvcmUiLCJyZWNvcmRfMSIsIktleVZhbHVlQ2hhbmdlUmVjb3JkXyIsIl9hZGRUb0FkZGl0aW9ucyIsIm5ld1ZhbHVlIiwiX2FkZFRvQ2hhbmdlcyIsIkl0ZXJhYmxlRGlmZmVycyIsImZhY3RvcmllcyIsImNvcGllZCIsImV4dGVuZCIsIml0ZXJhYmxlIiwiZ2V0VHlwZU5hbWVGb3JEZWJ1Z2dpbmciLCJLZXlWYWx1ZURpZmZlcnMiLCJrdiIsImtleVZhbERpZmYiLCJpdGVyYWJsZURpZmYiLCJMT0NBTEVfSUQiLCJBcHBsaWNhdGlvbk1vZHVsZSIsIk5PTkUiLCJIVE1MIiwiU0NSSVBUIiwiVVJMIiwiUkVTT1VSQ0VfVVJMIiwiV2Vha01hcCIsIkVNUFRZX0NPTlRFWFQiLCJDb21wb25lbnRSZWZfIiwiQ29tcG9uZW50RmFjdG9yeV8iLCJfaW5wdXRzIiwiX291dHB1dHMiLCJpbnB1dHNBcnIiLCJ0ZW1wbGF0ZU5hbWUiLCJvdXRwdXRzQXJyIiwiY29tcG9uZW50Tm9kZUluZGV4IiwiX3ZpZXciLCJfdmlld1JlZiIsIl9jb21wb25lbnQiLCJfZWxEZWYiLCJjaGFuZ2VEZXRlY3RvclJlZiIsIl9kYXRhIiwicmVmIiwiYXR0YWNoVG9WaWV3Q29udGFpbmVyUmVmIiwidGVtcGxhdGVSZWYiLCJpbnNlcnQiLCJjcmVhdGVDb21wb25lbnQiLCJuZ01vZHVsZVJlZiIsImNvbnRleHRJbmplY3RvciIsImRlc3Ryb3llZCIsInZpZXdSZWZfIiwidmlld0RhdGEiLCJtb3ZlIiwib2xkVmlld0luZGV4IiwibmV3Vmlld0luZGV4IiwibW92ZUVtYmVkZGVkVmlldyIsImRldGFjaCIsIl92aWV3Q29udGFpbmVyUmVmIiwiX2FwcFJlZiIsInJlbmRlck5vZGVzIiwicm9vdFJlbmRlck5vZGVzIiwibWFya0ZvckNoZWNrIiwiZnMiLCJiZWdpbiIsInJlYXR0YWNoIiwidmNSZWYiLCJfcGFyZW50VmlldyIsIm5hbWVzcGFjZUFuZE5hbWUiLCJjcmVhdGVWaWV3Um9vdCIsImNyZWF0ZVRlbXBsYXRlQW5jaG9yIiwicGFyZW50RWxlbWVudCIsImNvbW1lbnQiLCJwcm9qZWN0Tm9kZXMiLCJhdHRhY2hWaWV3QWZ0ZXIiLCJ2aWV3Um9vdE5vZGVzIiwidmlld0FsbE5vZGVzIiwibGlzdGVuR2xvYmFsIiwicHJvcGVydHlOYW1lIiwicHJvcGVydHlWYWx1ZSIsImF0dHJpYnV0ZVZhbHVlIiwic2V0QmluZGluZ0RlYnVnSW5mbyIsImNsYXNzTmFtZSIsImlzQWRkIiwic3R5bGVOYW1lIiwic3R5bGVWYWx1ZSIsImludm9rZUVsZW1lbnRNZXRob2QiLCJtZXRob2ROYW1lIiwic2V0VGV4dCIsImFuaW1hdGUiLCJfbW9kdWxlVHlwZSIsInByb3ZEZWYiLCJpbml0TmdNb2R1bGUiLCJjYWxsTmdNb2R1bGVMaWZlY3ljbGUiLCJlbFZpZXciLCJlbE9yQ29tcFZpZXciLCJjaGlsZERlZiIsImZpbmRIb3N0RWxlbWVudCIsImxvZ1ZpZXdEZWYiLCJsb2dOb2RlSW5kZXgiLCJyZW5kZXJOb2RlSW5kZXgiLCJnZXRSZW5kZXJOb2RlSW5kZXgiLCJjdXJyUmVuZGVyTm9kZUluZGV4IiwicmVuZGVyRGF0YSIsIkRlYnVnUmVuZGVyZXIyIiwid2hlblJlbmRlcmluZ0RvbmUiLCJyZW1vdmVEZWJ1Z05vZGVGcm9tSW5kZXgiLCJuYW1lc3BhY2UiLCJkZWJ1Z0N0eCIsImRlYnVnRWwiLCJkZWJ1Z0NoaWxkRWwiLCJkZWJ1Z1JlZkVsIiwib2xkQ2hpbGQiLCJmdWxsTmFtZSIsInN0eWxlIiwiZmlsZXNpemUiLCJOZ01vZHVsZUZhY3RvcnlfIiwiX25nTW9kdWxlRGVmRmFjdG9yeSIsInJlcXVpcmUiLCJGaWxlU2l6ZVBpcGUiLCJ2YWwiLCJGaWxlU2l6ZVBpcGVfMSIsInRyYW5zZm9ybU9uZSIsIkZpbGVTaXplTW9kdWxlIiwiZGVjbGFyYXRpb25zIl0sIm1hcHBpbmdzIjoiZ3NCQUdBLFNBQVNBLElBQ0wsSUFDSSxPQUFPQyxHQUFlQyxNQUFNQyxLQUFNQyxXQUV0QyxNQUFPQyxHQUVILE9BREFDLEdBQWNDLFlBQVlGLEVBQUlBLEVBQ3ZCQyxHQUFjQyxhQ29MN0IsU0FBU0MsRUFBNEJDLEdBQ2pDLE9BQU9BLEVBQU9DLE9BQU8sU0FBVUMsRUFBTUMsR0FBTyxPQUFPRCxFQUFLRSxPQUFRRCxhQUFlRSxHQUFzQkMsb0JBQXVCSCxFQUFJSCxPQUFTRyxRQ2xMN0ksU0FBU0ksRUFBY0MsR0FDbkIsT0FBS0EsRUFHYyxJQUFmQSxFQUFJQyxPQUNHRCxFQUFJLEdBRVIsU0FBZUUsR0FDbEIsT0FBT0YsRUFBSVAsT0FBTyxTQUFVVSxFQUFNQyxHQUFNLE9BQU9BLEVBQUdELElBQVVELElBTnJERyxHQUFPQyxLQ1Z0QixTQUFTQyxJQUNMLE9BQU8sSUFBSUMsR0FBVUMsUUM4RnpCLFNBQVNDLEVBQWNDLEVBQU1DLEVBQU9DLEVBQWFDLEdBTTdDLFNBQVNDLEVBQWlCQyxHQUN0QixHQUFJOUIsZ0JBQWdCNkIsRUFFaEIsT0FEQUUsRUFBU0MsS0FBS2hDLEtBQU04QixHQUNiOUIsS0FFWCxJQUFxQmlDLEVBQXFCLE1BQTBDSCxHQUMvREksV0FBeURDLEdBTzFFLE9BSm1DQSxFQUFJQyxlQUFlQyxJQUNsRCxFQUF5QkEsSUFDekJDLE9BQU9DLGVBQWVKLEVBQUtFLElBQWVHLFdBQWFILEtBQy9DSSxLQUFLUixHQUNWRSxHQUlYLE9BRklQLEdBQ0FBLEVBQVFNLEdBQ0xBLEVBdEJYLElBQXFCSCxFQUFXVyxFQUFpQmhCLEdBNkJqRCxPQUxJQyxJQUNBRSxFQUFpQmMs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
